
kenGwon_WashingMachine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009378  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c4  08009528  08009528  00019528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097ec  080097ec  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080097ec  080097ec  000197ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097f4  080097f4  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097f4  080097f4  000197f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097f8  080097f8  000197f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080097fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00000dbc  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000e38  20000e38  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e13a  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003bdf  00000000  00000000  0003e1e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001870  00000000  00000000  00041dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000016e0  00000000  00000000  00043638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029b86  00000000  00000000  00044d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fc3a  00000000  00000000  0006e89e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eda1f  00000000  00000000  0008e4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0017bef7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007064  00000000  00000000  0017bf48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009510 	.word	0x08009510

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	08009510 	.word	0x08009510

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <DHT11_Init>:

/*
 * desc: DHT11은 active-low로 작동하기 때문에 초기화 과정에서 전위를 1로 셋팅해준다.
 */
void DHT11_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_DATA_RIN, GPIO_PIN_SET);
 8000598:	2201      	movs	r2, #1
 800059a:	2101      	movs	r1, #1
 800059c:	4804      	ldr	r0, [pc, #16]	; (80005b0 <DHT11_Init+0x1c>)
 800059e:	f002 fee1 	bl	8003364 <HAL_GPIO_WritePin>
	HAL_Delay(3000); // 초기화 할때는 딱 한번만 일어나기 때문에 hal_delay()를 줘도 상관 없다.
 80005a2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80005a6:	f002 f829 	bl	80025fc <HAL_Delay>
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40020000 	.word	0x40020000

080005b4 <LCD_Command>:
	}
#endif
}

void LCD_Command(uint8_t command)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af02      	add	r7, sp, #8
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = command & 0xf0;
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	f023 030f 	bic.w	r3, r3, #15
 80005c4:	73fb      	strb	r3, [r7, #15]
	low_nibble = (command<<4) & 0xf0;
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	011b      	lsls	r3, r3, #4
 80005ca:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 80005cc:	7bfb      	ldrb	r3, [r7, #15]
 80005ce:	f043 030c 	orr.w	r3, r3, #12
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 80005d6:	7bfb      	ldrb	r3, [r7, #15]
 80005d8:	f043 0308 	orr.w	r3, r3, #8
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 80005e0:	7bbb      	ldrb	r3, [r7, #14]
 80005e2:	f043 030c 	orr.w	r3, r3, #12
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 80005ea:	7bbb      	ldrb	r3, [r7, #14]
 80005ec:	f043 0308 	orr.w	r3, r3, #8
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 80005f4:	bf00      	nop
 80005f6:	f107 0208 	add.w	r2, r7, #8
 80005fa:	2364      	movs	r3, #100	; 0x64
 80005fc:	9300      	str	r3, [sp, #0]
 80005fe:	2304      	movs	r3, #4
 8000600:	214e      	movs	r1, #78	; 0x4e
 8000602:	4805      	ldr	r0, [pc, #20]	; (8000618 <LCD_Command+0x64>)
 8000604:	f003 f80c 	bl	8003620 <HAL_I2C_Master_Transmit>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d1f3      	bne.n	80005f6 <LCD_Command+0x42>
			i2c_buffer, 4, 100)!=HAL_OK){
		//HAL_Delay(1);
	}
	return;
 800060e:	bf00      	nop
}
 8000610:	3710      	adds	r7, #16
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	200002c0 	.word	0x200002c0

0800061c <LCD_Data>:

// 1 byte write... 딱 한개의 캐릭터만 찍는 것이다.
void LCD_Data(uint8_t data)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af02      	add	r7, sp, #8
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = data & 0xf0;
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	f023 030f 	bic.w	r3, r3, #15
 800062c:	73fb      	strb	r3, [r7, #15]
	low_nibble = (data<<4) & 0xf0;
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	011b      	lsls	r3, r3, #4
 8000632:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 8000634:	7bfb      	ldrb	r3, [r7, #15]
 8000636:	f043 030d 	orr.w	r3, r3, #13
 800063a:	b2db      	uxtb	r3, r3
 800063c:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 800063e:	7bfb      	ldrb	r3, [r7, #15]
 8000640:	f043 0309 	orr.w	r3, r3, #9
 8000644:	b2db      	uxtb	r3, r3
 8000646:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 8000648:	7bbb      	ldrb	r3, [r7, #14]
 800064a:	f043 030d 	orr.w	r3, r3, #13
 800064e:	b2db      	uxtb	r3, r3
 8000650:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 8000652:	7bbb      	ldrb	r3, [r7, #14]
 8000654:	f043 0309 	orr.w	r3, r3, #9
 8000658:	b2db      	uxtb	r3, r3
 800065a:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 800065c:	bf00      	nop
 800065e:	f107 0208 	add.w	r2, r7, #8
 8000662:	2364      	movs	r3, #100	; 0x64
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	2304      	movs	r3, #4
 8000668:	214e      	movs	r1, #78	; 0x4e
 800066a:	4805      	ldr	r0, [pc, #20]	; (8000680 <LCD_Data+0x64>)
 800066c:	f002 ffd8 	bl	8003620 <HAL_I2C_Master_Transmit>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d1f3      	bne.n	800065e <LCD_Data+0x42>
			i2c_buffer, 4, 100)!=HAL_OK){
		//HAL_Delay(1);
	}
	return;
 8000676:	bf00      	nop
}
 8000678:	3710      	adds	r7, #16
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	200002c0 	.word	0x200002c0

08000684 <I2C_LCD_Init>:

// lcd 초기화
void I2C_LCD_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0

	LCD_Command(0x33);
 8000688:	2033      	movs	r0, #51	; 0x33
 800068a:	f7ff ff93 	bl	80005b4 <LCD_Command>
	LCD_Command(0x32);
 800068e:	2032      	movs	r0, #50	; 0x32
 8000690:	f7ff ff90 	bl	80005b4 <LCD_Command>
	LCD_Command(0x28);	//Function Set 4-bit mode
 8000694:	2028      	movs	r0, #40	; 0x28
 8000696:	f7ff ff8d 	bl	80005b4 <LCD_Command>
	LCD_Command(DISPLAY_ON);
 800069a:	200c      	movs	r0, #12
 800069c:	f7ff ff8a 	bl	80005b4 <LCD_Command>
	LCD_Command(0x06);	//Entry mode set
 80006a0:	2006      	movs	r0, #6
 80006a2:	f7ff ff87 	bl	80005b4 <LCD_Command>
	LCD_Command(CLEAR_DISPLAY);
 80006a6:	2001      	movs	r0, #1
 80006a8:	f7ff ff84 	bl	80005b4 <LCD_Command>
	HAL_Delay(2);
 80006ac:	2002      	movs	r0, #2
 80006ae:	f001 ffa5 	bl	80025fc <HAL_Delay>
}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}

080006b6 <LCD_String>:

// null을 만날때 까지 string을 LCD에 출력
void LCD_String(uint8_t *str)
{
 80006b6:	b580      	push	{r7, lr}
 80006b8:	b082      	sub	sp, #8
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	6078      	str	r0, [r7, #4]
	while(*str) // 널문자를 만날 때까지
 80006be:	e006      	b.n	80006ce <LCD_String+0x18>
	{
		LCD_Data(*str++);
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	1c5a      	adds	r2, r3, #1
 80006c4:	607a      	str	r2, [r7, #4]
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff ffa7 	bl	800061c <LCD_Data>
	while(*str) // 널문자를 만날 때까지
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d1f4      	bne.n	80006c0 <LCD_String+0xa>
	}
}
 80006d6:	bf00      	nop
 80006d8:	bf00      	nop
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <Move_Cursor>:

// 해당 줄,col으로 이동 하는 함수
void Move_Cursor(uint8_t row, uint8_t column)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	460a      	mov	r2, r1
 80006ea:	71fb      	strb	r3, [r7, #7]
 80006ec:	4613      	mov	r3, r2
 80006ee:	71bb      	strb	r3, [r7, #6]
	LCD_Command(0x80 | row<<6 | column);
 80006f0:	79fb      	ldrb	r3, [r7, #7]
 80006f2:	019b      	lsls	r3, r3, #6
 80006f4:	b2da      	uxtb	r2, r3
 80006f6:	79bb      	ldrb	r3, [r7, #6]
 80006f8:	4313      	orrs	r3, r2
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000700:	b2db      	uxtb	r3, r3
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff ff56 	bl	80005b4 <LCD_Command>
	return;
 8000708:	bf00      	nop
}
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <Get_Button>:
 * param2: 함수가 접근하는 푸시 버튼 1개에 대응하는 1개 핀의 주소
 * param3: 함수가 접근하는 푸시 버튼 1개가 button_status[] 배열 상의 몇번째 인덱스에 해당하게 할 것인지를 결정하는 값
 * return: 푸시 버튼의 상태 (BUTTON_RELEASE 또는 BUTTON_PRESS)
 */
int Get_Button(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint8_t button_number)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	460b      	mov	r3, r1
 800071a:	807b      	strh	r3, [r7, #2]
 800071c:	4613      	mov	r3, r2
 800071e:	707b      	strb	r3, [r7, #1]
	unsigned char curr_state; // uint8_t로 선언해도 되지만 unsigned char로 선언한 이유는 여기에 담기는 값이 비록 0 또는 1이겠지만, 그것을 BUTTON_PRESS 또는 BUTTON_RELEASE와 같은 논리적 상태로 보겠다는 개발자의 의도를 담은 선언이다.
	curr_state = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin); // 0(BUTTON_PRESS) 또는 1(BUTTON_RELEASE)
 8000720:	887b      	ldrh	r3, [r7, #2]
 8000722:	4619      	mov	r1, r3
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f002 fe05 	bl	8003334 <HAL_GPIO_ReadPin>
 800072a:	4603      	mov	r3, r0
 800072c:	73fb      	strb	r3, [r7, #15]

	if (curr_state == BUTTON_PRESS && button_status[button_number] == BUTTON_RELEASE)
 800072e:	7bfb      	ldrb	r3, [r7, #15]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d10d      	bne.n	8000750 <Get_Button+0x40>
 8000734:	787b      	ldrb	r3, [r7, #1]
 8000736:	4a11      	ldr	r2, [pc, #68]	; (800077c <Get_Button+0x6c>)
 8000738:	5cd3      	ldrb	r3, [r2, r3]
 800073a:	2b01      	cmp	r3, #1
 800073c:	d108      	bne.n	8000750 <Get_Button+0x40>
	{
		HAL_Delay(100); // 0.1초 동안 노이즈가 지나가길 기다림
 800073e:	2064      	movs	r0, #100	; 0x64
 8000740:	f001 ff5c 	bl	80025fc <HAL_Delay>
		button_status[button_number] = BUTTON_PRESS; // 누르긴 눌렀으니까 우선 button_status배열 상의 상태를 BUTTON_PRESS로 바꿔준다.
 8000744:	787b      	ldrb	r3, [r7, #1]
 8000746:	4a0d      	ldr	r2, [pc, #52]	; (800077c <Get_Button+0x6c>)
 8000748:	2100      	movs	r1, #0
 800074a:	54d1      	strb	r1, [r2, r3]
		return BUTTON_RELEASE; // 아직은 버튼을 누른것으로 간주할 수 없다.(왜냐하면 button_status배열 상의 버튼의 기존 상태가 BUTTON_RELEASE였기 때문이다.)
 800074c:	2301      	movs	r3, #1
 800074e:	e011      	b.n	8000774 <Get_Button+0x64>
	}
	else if (curr_state == BUTTON_RELEASE && button_status[button_number] == BUTTON_PRESS)
 8000750:	7bfb      	ldrb	r3, [r7, #15]
 8000752:	2b01      	cmp	r3, #1
 8000754:	d10d      	bne.n	8000772 <Get_Button+0x62>
 8000756:	787b      	ldrb	r3, [r7, #1]
 8000758:	4a08      	ldr	r2, [pc, #32]	; (800077c <Get_Button+0x6c>)
 800075a:	5cd3      	ldrb	r3, [r2, r3]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d108      	bne.n	8000772 <Get_Button+0x62>
	{
		button_status[button_number] = BUTTON_RELEASE; // button_status배열 상의 상태를 curr_state에 맞게 다시 초기화해주고
 8000760:	787b      	ldrb	r3, [r7, #1]
 8000762:	4a06      	ldr	r2, [pc, #24]	; (800077c <Get_Button+0x6c>)
 8000764:	2101      	movs	r1, #1
 8000766:	54d1      	strb	r1, [r2, r3]
		HAL_Delay(30);
 8000768:	201e      	movs	r0, #30
 800076a:	f001 ff47 	bl	80025fc <HAL_Delay>
		return BUTTON_PRESS; // 정말 버튼을 누른 것으로 인정
 800076e:	2300      	movs	r3, #0
 8000770:	e000      	b.n	8000774 <Get_Button+0x64>
	}

	return BUTTON_RELEASE;
 8000772:	2301      	movs	r3, #1
}
 8000774:	4618      	mov	r0, r3
 8000776:	3710      	adds	r7, #16
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000000 	.word	0x20000000

08000780 <DCmotor_Forward_Rotate>:
/*
 * desc: DC모터를 원하는 시간동안 정방향 회전시킨 뒤 멈춘다.
 * param1: DC모터가 가동하는 시간(초 단위)
 */
void DCmotor_Forward_Rotate(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 8000784:	2201      	movs	r2, #1
 8000786:	f44f 7180 	mov.w	r1, #256	; 0x100
 800078a:	4805      	ldr	r0, [pc, #20]	; (80007a0 <DCmotor_Forward_Rotate+0x20>)
 800078c:	f002 fdea 	bl	8003364 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 8000790:	2200      	movs	r2, #0
 8000792:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000796:	4802      	ldr	r0, [pc, #8]	; (80007a0 <DCmotor_Forward_Rotate+0x20>)
 8000798:	f002 fde4 	bl	8003364 <HAL_GPIO_WritePin>
}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40021000 	.word	0x40021000

080007a4 <DCmotor_Backward_Rotate>:
/*
 * desc: DC모터를 원하는 시간동안 역방향 회전시킨 뒤 멈춘다.
 * param1: DC모터가 가동하는 시간(초 단위)
 */
void DCmotor_Backward_Rotate(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);
 80007a8:	2200      	movs	r2, #0
 80007aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007ae:	4805      	ldr	r0, [pc, #20]	; (80007c4 <DCmotor_Backward_Rotate+0x20>)
 80007b0:	f002 fdd8 	bl	8003364 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 80007b4:	2201      	movs	r2, #1
 80007b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007ba:	4802      	ldr	r0, [pc, #8]	; (80007c4 <DCmotor_Backward_Rotate+0x20>)
 80007bc:	f002 fdd2 	bl	8003364 <HAL_GPIO_WritePin>
}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40021000 	.word	0x40021000

080007c8 <DCmotor_Break>:

/*
 * desc: DC모터를 멈춘다.
 */
void DCmotor_Break(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 80007cc:	2201      	movs	r2, #1
 80007ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007d2:	4805      	ldr	r0, [pc, #20]	; (80007e8 <DCmotor_Break+0x20>)
 80007d4:	f002 fdc6 	bl	8003364 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 80007d8:	2201      	movs	r2, #1
 80007da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007de:	4802      	ldr	r0, [pc, #8]	; (80007e8 <DCmotor_Break+0x20>)
 80007e0:	f002 fdc0 	bl	8003364 <HAL_GPIO_WritePin>
}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40021000 	.word	0x40021000

080007ec <DCmotor_Set_DutyCycle>:

void DCmotor_Set_DutyCycle(uint16_t duty_cycle)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	4603      	mov	r3, r0
 80007f4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, duty_cycle);
 80007f6:	4b05      	ldr	r3, [pc, #20]	; (800080c <DCmotor_Set_DutyCycle+0x20>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	88fa      	ldrh	r2, [r7, #6]
 80007fc:	635a      	str	r2, [r3, #52]	; 0x34
}
 80007fe:	bf00      	nop
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	200003c4 	.word	0x200003c4

08000810 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE   // Add for printf
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000818:	1d39      	adds	r1, r7, #4
 800081a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800081e:	2201      	movs	r2, #1
 8000820:	4803      	ldr	r0, [pc, #12]	; (8000830 <__io_putchar+0x20>)
 8000822:	f006 f936 	bl	8006a92 <HAL_UART_Transmit>

  return ch;
 8000826:	687b      	ldr	r3, [r7, #4]
}
 8000828:	4618      	mov	r0, r3
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	200004e4 	.word	0x200004e4

08000834 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000838:	f001 fe6e 	bl	8002518 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800083c:	f000 f824 	bl	8000888 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000840:	f000 fbda 	bl	8000ff8 <MX_GPIO_Init>
  MX_ETH_Init();
 8000844:	f000 f88c 	bl	8000960 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000848:	f000 fb54 	bl	8000ef4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800084c:	f000 fba6 	bl	8000f9c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM10_Init();
 8000850:	f000 fb08 	bl	8000e64 <MX_TIM10_Init>
  MX_TIM11_Init();
 8000854:	f000 fb2a 	bl	8000eac <MX_TIM11_Init>
  MX_I2C1_Init();
 8000858:	f000 f8d0 	bl	80009fc <MX_I2C1_Init>
  MX_TIM3_Init();
 800085c:	f000 f9c2 	bl	8000be4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000860:	f000 fa14 	bl	8000c8c <MX_TIM4_Init>
  MX_TIM2_Init();
 8000864:	f000 f964 	bl	8000b30 <MX_TIM2_Init>
  MX_USART6_UART_Init();
 8000868:	f000 fb6e 	bl	8000f48 <MX_USART6_UART_Init>
  MX_RTC_Init();
 800086c:	f000 f906 	bl	8000a7c <MX_RTC_Init>
  MX_TIM5_Init();
 8000870:	f000 fa82 	bl	8000d78 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  printf("enter main()!!!\n");
 8000874:	4803      	ldr	r0, [pc, #12]	; (8000884 <main+0x50>)
 8000876:	f007 fcf1 	bl	800825c <puts>
#endif
  // ============================== END for Fan_Machine.c ==============================



  WashingMachine_Init();
 800087a:	f001 fb45 	bl	8001f08 <WashingMachine_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  WashingMachine_Processing();
 800087e:	f001 fb79 	bl	8001f74 <WashingMachine_Processing>
 8000882:	e7fc      	b.n	800087e <main+0x4a>
 8000884:	08009528 	.word	0x08009528

08000888 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b094      	sub	sp, #80	; 0x50
 800088c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088e:	f107 0320 	add.w	r3, r7, #32
 8000892:	2230      	movs	r2, #48	; 0x30
 8000894:	2100      	movs	r1, #0
 8000896:	4618      	mov	r0, r3
 8000898:	f007 fc52 	bl	8008140 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ac:	2300      	movs	r3, #0
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	4b29      	ldr	r3, [pc, #164]	; (8000958 <SystemClock_Config+0xd0>)
 80008b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b4:	4a28      	ldr	r2, [pc, #160]	; (8000958 <SystemClock_Config+0xd0>)
 80008b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ba:	6413      	str	r3, [r2, #64]	; 0x40
 80008bc:	4b26      	ldr	r3, [pc, #152]	; (8000958 <SystemClock_Config+0xd0>)
 80008be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c4:	60bb      	str	r3, [r7, #8]
 80008c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008c8:	2300      	movs	r3, #0
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	4b23      	ldr	r3, [pc, #140]	; (800095c <SystemClock_Config+0xd4>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a22      	ldr	r2, [pc, #136]	; (800095c <SystemClock_Config+0xd4>)
 80008d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008d6:	6013      	str	r3, [r2, #0]
 80008d8:	4b20      	ldr	r3, [pc, #128]	; (800095c <SystemClock_Config+0xd4>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80008e4:	2309      	movs	r3, #9
 80008e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008e8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008ee:	2301      	movs	r3, #1
 80008f0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f2:	2302      	movs	r3, #2
 80008f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008fc:	2304      	movs	r3, #4
 80008fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000900:	23a8      	movs	r3, #168	; 0xa8
 8000902:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000904:	2302      	movs	r3, #2
 8000906:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000908:	2307      	movs	r3, #7
 800090a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800090c:	f107 0320 	add.w	r3, r7, #32
 8000910:	4618      	mov	r0, r3
 8000912:	f003 fb25 	bl	8003f60 <HAL_RCC_OscConfig>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800091c:	f000 fca8 	bl	8001270 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000920:	230f      	movs	r3, #15
 8000922:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000924:	2302      	movs	r3, #2
 8000926:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800092c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000930:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000932:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000936:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000938:	f107 030c 	add.w	r3, r7, #12
 800093c:	2105      	movs	r1, #5
 800093e:	4618      	mov	r0, r3
 8000940:	f003 fd86 	bl	8004450 <HAL_RCC_ClockConfig>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800094a:	f000 fc91 	bl	8001270 <Error_Handler>
  }
}
 800094e:	bf00      	nop
 8000950:	3750      	adds	r7, #80	; 0x50
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40023800 	.word	0x40023800
 800095c:	40007000 	.word	0x40007000

08000960 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000964:	4b1f      	ldr	r3, [pc, #124]	; (80009e4 <MX_ETH_Init+0x84>)
 8000966:	4a20      	ldr	r2, [pc, #128]	; (80009e8 <MX_ETH_Init+0x88>)
 8000968:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800096a:	4b20      	ldr	r3, [pc, #128]	; (80009ec <MX_ETH_Init+0x8c>)
 800096c:	2200      	movs	r2, #0
 800096e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000970:	4b1e      	ldr	r3, [pc, #120]	; (80009ec <MX_ETH_Init+0x8c>)
 8000972:	2280      	movs	r2, #128	; 0x80
 8000974:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000976:	4b1d      	ldr	r3, [pc, #116]	; (80009ec <MX_ETH_Init+0x8c>)
 8000978:	22e1      	movs	r2, #225	; 0xe1
 800097a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800097c:	4b1b      	ldr	r3, [pc, #108]	; (80009ec <MX_ETH_Init+0x8c>)
 800097e:	2200      	movs	r2, #0
 8000980:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000982:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <MX_ETH_Init+0x8c>)
 8000984:	2200      	movs	r2, #0
 8000986:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000988:	4b18      	ldr	r3, [pc, #96]	; (80009ec <MX_ETH_Init+0x8c>)
 800098a:	2200      	movs	r2, #0
 800098c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800098e:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <MX_ETH_Init+0x84>)
 8000990:	4a16      	ldr	r2, [pc, #88]	; (80009ec <MX_ETH_Init+0x8c>)
 8000992:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000994:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <MX_ETH_Init+0x84>)
 8000996:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800099a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800099c:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <MX_ETH_Init+0x84>)
 800099e:	4a14      	ldr	r2, [pc, #80]	; (80009f0 <MX_ETH_Init+0x90>)
 80009a0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80009a2:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <MX_ETH_Init+0x84>)
 80009a4:	4a13      	ldr	r2, [pc, #76]	; (80009f4 <MX_ETH_Init+0x94>)
 80009a6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80009a8:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <MX_ETH_Init+0x84>)
 80009aa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80009ae:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80009b0:	480c      	ldr	r0, [pc, #48]	; (80009e4 <MX_ETH_Init+0x84>)
 80009b2:	f001 ffeb 	bl	800298c <HAL_ETH_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80009bc:	f000 fc58 	bl	8001270 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80009c0:	2238      	movs	r2, #56	; 0x38
 80009c2:	2100      	movs	r1, #0
 80009c4:	480c      	ldr	r0, [pc, #48]	; (80009f8 <MX_ETH_Init+0x98>)
 80009c6:	f007 fbbb 	bl	8008140 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80009ca:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <MX_ETH_Init+0x98>)
 80009cc:	2221      	movs	r2, #33	; 0x21
 80009ce:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80009d0:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <MX_ETH_Init+0x98>)
 80009d2:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80009d6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80009d8:	4b07      	ldr	r3, [pc, #28]	; (80009f8 <MX_ETH_Init+0x98>)
 80009da:	2200      	movs	r2, #0
 80009dc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000210 	.word	0x20000210
 80009e8:	40028000 	.word	0x40028000
 80009ec:	20000a78 	.word	0x20000a78
 80009f0:	20000170 	.word	0x20000170
 80009f4:	200000d0 	.word	0x200000d0
 80009f8:	20000098 	.word	0x20000098

080009fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a00:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a02:	4a1c      	ldr	r2, [pc, #112]	; (8000a74 <MX_I2C1_Init+0x78>)
 8000a04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a06:	4b1a      	ldr	r3, [pc, #104]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a08:	4a1b      	ldr	r2, [pc, #108]	; (8000a78 <MX_I2C1_Init+0x7c>)
 8000a0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a0c:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a12:	4b17      	ldr	r3, [pc, #92]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a18:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a1e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a20:	4b13      	ldr	r3, [pc, #76]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a26:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a2c:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a32:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a38:	480d      	ldr	r0, [pc, #52]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a3a:	f002 fcad 	bl	8003398 <HAL_I2C_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a44:	f000 fc14 	bl	8001270 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a48:	2100      	movs	r1, #0
 8000a4a:	4809      	ldr	r0, [pc, #36]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a4c:	f003 f8ef 	bl	8003c2e <HAL_I2CEx_ConfigAnalogFilter>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000a56:	f000 fc0b 	bl	8001270 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	4804      	ldr	r0, [pc, #16]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a5e:	f003 f922 	bl	8003ca6 <HAL_I2CEx_ConfigDigitalFilter>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000a68:	f000 fc02 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	200002c0 	.word	0x200002c0
 8000a74:	40005400 	.word	0x40005400
 8000a78:	000186a0 	.word	0x000186a0

08000a7c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b086      	sub	sp, #24
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000a90:	2300      	movs	r3, #0
 8000a92:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a94:	4b24      	ldr	r3, [pc, #144]	; (8000b28 <MX_RTC_Init+0xac>)
 8000a96:	4a25      	ldr	r2, [pc, #148]	; (8000b2c <MX_RTC_Init+0xb0>)
 8000a98:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a9a:	4b23      	ldr	r3, [pc, #140]	; (8000b28 <MX_RTC_Init+0xac>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000aa0:	4b21      	ldr	r3, [pc, #132]	; (8000b28 <MX_RTC_Init+0xac>)
 8000aa2:	227f      	movs	r2, #127	; 0x7f
 8000aa4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000aa6:	4b20      	ldr	r3, [pc, #128]	; (8000b28 <MX_RTC_Init+0xac>)
 8000aa8:	22ff      	movs	r2, #255	; 0xff
 8000aaa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000aac:	4b1e      	ldr	r3, [pc, #120]	; (8000b28 <MX_RTC_Init+0xac>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000ab2:	4b1d      	ldr	r3, [pc, #116]	; (8000b28 <MX_RTC_Init+0xac>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ab8:	4b1b      	ldr	r3, [pc, #108]	; (8000b28 <MX_RTC_Init+0xac>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000abe:	481a      	ldr	r0, [pc, #104]	; (8000b28 <MX_RTC_Init+0xac>)
 8000ac0:	f004 f8a6 	bl	8004c10 <HAL_RTC_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000aca:	f000 fbd1 	bl	8001270 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x9;
 8000ace:	2309      	movs	r3, #9
 8000ad0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x38;
 8000ad2:	2338      	movs	r3, #56	; 0x38
 8000ad4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x30;
 8000ad6:	2330      	movs	r3, #48	; 0x30
 8000ad8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ada:	2300      	movs	r3, #0
 8000adc:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	480f      	ldr	r0, [pc, #60]	; (8000b28 <MX_RTC_Init+0xac>)
 8000aea:	f004 f907 	bl	8004cfc <HAL_RTC_SetTime>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000af4:	f000 fbbc 	bl	8001270 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000af8:	2301      	movs	r3, #1
 8000afa:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_OCTOBER;
 8000afc:	2310      	movs	r3, #16
 8000afe:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x16;
 8000b00:	2316      	movs	r3, #22
 8000b02:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 8000b04:	2323      	movs	r3, #35	; 0x23
 8000b06:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000b08:	463b      	mov	r3, r7
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4806      	ldr	r0, [pc, #24]	; (8000b28 <MX_RTC_Init+0xac>)
 8000b10:	f004 f98e 	bl	8004e30 <HAL_RTC_SetDate>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000b1a:	f000 fba9 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b1e:	bf00      	nop
 8000b20:	3718      	adds	r7, #24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20000314 	.word	0x20000314
 8000b2c:	40002800 	.word	0x40002800

08000b30 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08a      	sub	sp, #40	; 0x28
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b36:	f107 0320 	add.w	r3, r7, #32
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]
 8000b4a:	60da      	str	r2, [r3, #12]
 8000b4c:	611a      	str	r2, [r3, #16]
 8000b4e:	615a      	str	r2, [r3, #20]
 8000b50:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b52:	4b23      	ldr	r3, [pc, #140]	; (8000be0 <MX_TIM2_Init+0xb0>)
 8000b54:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b58:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680-1;
 8000b5a:	4b21      	ldr	r3, [pc, #132]	; (8000be0 <MX_TIM2_Init+0xb0>)
 8000b5c:	f240 628f 	movw	r2, #1679	; 0x68f
 8000b60:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b62:	4b1f      	ldr	r3, [pc, #124]	; (8000be0 <MX_TIM2_Init+0xb0>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000b68:	4b1d      	ldr	r3, [pc, #116]	; (8000be0 <MX_TIM2_Init+0xb0>)
 8000b6a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b6e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b70:	4b1b      	ldr	r3, [pc, #108]	; (8000be0 <MX_TIM2_Init+0xb0>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b76:	4b1a      	ldr	r3, [pc, #104]	; (8000be0 <MX_TIM2_Init+0xb0>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b7c:	4818      	ldr	r0, [pc, #96]	; (8000be0 <MX_TIM2_Init+0xb0>)
 8000b7e:	f004 fb3b 	bl	80051f8 <HAL_TIM_PWM_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000b88:	f000 fb72 	bl	8001270 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b90:	2300      	movs	r3, #0
 8000b92:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b94:	f107 0320 	add.w	r3, r7, #32
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4811      	ldr	r0, [pc, #68]	; (8000be0 <MX_TIM2_Init+0xb0>)
 8000b9c:	f005 fe9c 	bl	80068d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000ba6:	f000 fb63 	bl	8001270 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000baa:	2360      	movs	r3, #96	; 0x60
 8000bac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8000bae:	f240 13f3 	movw	r3, #499	; 0x1f3
 8000bb2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4807      	ldr	r0, [pc, #28]	; (8000be0 <MX_TIM2_Init+0xb0>)
 8000bc4:	f005 f862 	bl	8005c8c <HAL_TIM_PWM_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8000bce:	f000 fb4f 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000bd2:	4803      	ldr	r0, [pc, #12]	; (8000be0 <MX_TIM2_Init+0xb0>)
 8000bd4:	f000 fdbe 	bl	8001754 <HAL_TIM_MspPostInit>

}
 8000bd8:	bf00      	nop
 8000bda:	3728      	adds	r7, #40	; 0x28
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20000334 	.word	0x20000334

08000be4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b086      	sub	sp, #24
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bea:	f107 0310 	add.w	r3, r7, #16
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000bf4:	463b      	mov	r3, r7
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]
 8000bfc:	609a      	str	r2, [r3, #8]
 8000bfe:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c00:	4b20      	ldr	r3, [pc, #128]	; (8000c84 <MX_TIM3_Init+0xa0>)
 8000c02:	4a21      	ldr	r2, [pc, #132]	; (8000c88 <MX_TIM3_Init+0xa4>)
 8000c04:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8000c06:	4b1f      	ldr	r3, [pc, #124]	; (8000c84 <MX_TIM3_Init+0xa0>)
 8000c08:	2253      	movs	r2, #83	; 0x53
 8000c0a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c0c:	4b1d      	ldr	r3, [pc, #116]	; (8000c84 <MX_TIM3_Init+0xa0>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000c12:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <MX_TIM3_Init+0xa0>)
 8000c14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c18:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c1a:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <MX_TIM3_Init+0xa0>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c20:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <MX_TIM3_Init+0xa0>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000c26:	4817      	ldr	r0, [pc, #92]	; (8000c84 <MX_TIM3_Init+0xa0>)
 8000c28:	f004 fd14 	bl	8005654 <HAL_TIM_IC_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000c32:	f000 fb1d 	bl	8001270 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c3e:	f107 0310 	add.w	r3, r7, #16
 8000c42:	4619      	mov	r1, r3
 8000c44:	480f      	ldr	r0, [pc, #60]	; (8000c84 <MX_TIM3_Init+0xa0>)
 8000c46:	f005 fe47 	bl	80068d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000c50:	f000 fb0e 	bl	8001270 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000c54:	230a      	movs	r3, #10
 8000c56:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000c64:	463b      	mov	r3, r7
 8000c66:	2200      	movs	r2, #0
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4806      	ldr	r0, [pc, #24]	; (8000c84 <MX_TIM3_Init+0xa0>)
 8000c6c:	f004 ff72 	bl	8005b54 <HAL_TIM_IC_ConfigChannel>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000c76:	f000 fafb 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c7a:	bf00      	nop
 8000c7c:	3718      	adds	r7, #24
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	2000037c 	.word	0x2000037c
 8000c88:	40000400 	.word	0x40000400

08000c8c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08e      	sub	sp, #56	; 0x38
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca0:	f107 0320 	add.w	r3, r7, #32
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000caa:	1d3b      	adds	r3, r7, #4
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
 8000cb8:	615a      	str	r2, [r3, #20]
 8000cba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000cbc:	4b2c      	ldr	r3, [pc, #176]	; (8000d70 <MX_TIM4_Init+0xe4>)
 8000cbe:	4a2d      	ldr	r2, [pc, #180]	; (8000d74 <MX_TIM4_Init+0xe8>)
 8000cc0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840-1;
 8000cc2:	4b2b      	ldr	r3, [pc, #172]	; (8000d70 <MX_TIM4_Init+0xe4>)
 8000cc4:	f240 3247 	movw	r2, #839	; 0x347
 8000cc8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cca:	4b29      	ldr	r3, [pc, #164]	; (8000d70 <MX_TIM4_Init+0xe4>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8000cd0:	4b27      	ldr	r3, [pc, #156]	; (8000d70 <MX_TIM4_Init+0xe4>)
 8000cd2:	2263      	movs	r2, #99	; 0x63
 8000cd4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cd6:	4b26      	ldr	r3, [pc, #152]	; (8000d70 <MX_TIM4_Init+0xe4>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cdc:	4b24      	ldr	r3, [pc, #144]	; (8000d70 <MX_TIM4_Init+0xe4>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000ce2:	4823      	ldr	r0, [pc, #140]	; (8000d70 <MX_TIM4_Init+0xe4>)
 8000ce4:	f004 f9c9 	bl	800507a <HAL_TIM_Base_Init>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000cee:	f000 fabf 	bl	8001270 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cf6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000cf8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	481c      	ldr	r0, [pc, #112]	; (8000d70 <MX_TIM4_Init+0xe4>)
 8000d00:	f005 f886 	bl	8005e10 <HAL_TIM_ConfigClockSource>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000d0a:	f000 fab1 	bl	8001270 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d0e:	4818      	ldr	r0, [pc, #96]	; (8000d70 <MX_TIM4_Init+0xe4>)
 8000d10:	f004 fa72 	bl	80051f8 <HAL_TIM_PWM_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000d1a:	f000 faa9 	bl	8001270 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d22:	2300      	movs	r3, #0
 8000d24:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d26:	f107 0320 	add.w	r3, r7, #32
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4810      	ldr	r0, [pc, #64]	; (8000d70 <MX_TIM4_Init+0xe4>)
 8000d2e:	f005 fdd3 	bl	80068d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000d38:	f000 fa9a 	bl	8001270 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d3c:	2360      	movs	r3, #96	; 0x60
 8000d3e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 70-1;
 8000d40:	2345      	movs	r3, #69	; 0x45
 8000d42:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d44:	2300      	movs	r3, #0
 8000d46:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000d48:	2304      	movs	r3, #4
 8000d4a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d4c:	1d3b      	adds	r3, r7, #4
 8000d4e:	2200      	movs	r2, #0
 8000d50:	4619      	mov	r1, r3
 8000d52:	4807      	ldr	r0, [pc, #28]	; (8000d70 <MX_TIM4_Init+0xe4>)
 8000d54:	f004 ff9a 	bl	8005c8c <HAL_TIM_PWM_ConfigChannel>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000d5e:	f000 fa87 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000d62:	4803      	ldr	r0, [pc, #12]	; (8000d70 <MX_TIM4_Init+0xe4>)
 8000d64:	f000 fcf6 	bl	8001754 <HAL_TIM_MspPostInit>

}
 8000d68:	bf00      	nop
 8000d6a:	3738      	adds	r7, #56	; 0x38
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	200003c4 	.word	0x200003c4
 8000d74:	40000800 	.word	0x40000800

08000d78 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08e      	sub	sp, #56	; 0x38
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]
 8000d88:	609a      	str	r2, [r3, #8]
 8000d8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d8c:	f107 0320 	add.w	r3, r7, #32
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d96:	1d3b      	adds	r3, r7, #4
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
 8000da4:	615a      	str	r2, [r3, #20]
 8000da6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000da8:	4b2c      	ldr	r3, [pc, #176]	; (8000e5c <MX_TIM5_Init+0xe4>)
 8000daa:	4a2d      	ldr	r2, [pc, #180]	; (8000e60 <MX_TIM5_Init+0xe8>)
 8000dac:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 52.5-1;
 8000dae:	4b2b      	ldr	r3, [pc, #172]	; (8000e5c <MX_TIM5_Init+0xe4>)
 8000db0:	2233      	movs	r2, #51	; 0x33
 8000db2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db4:	4b29      	ldr	r3, [pc, #164]	; (8000e5c <MX_TIM5_Init+0xe4>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 400-1;
 8000dba:	4b28      	ldr	r3, [pc, #160]	; (8000e5c <MX_TIM5_Init+0xe4>)
 8000dbc:	f240 128f 	movw	r2, #399	; 0x18f
 8000dc0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc2:	4b26      	ldr	r3, [pc, #152]	; (8000e5c <MX_TIM5_Init+0xe4>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc8:	4b24      	ldr	r3, [pc, #144]	; (8000e5c <MX_TIM5_Init+0xe4>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000dce:	4823      	ldr	r0, [pc, #140]	; (8000e5c <MX_TIM5_Init+0xe4>)
 8000dd0:	f004 f953 	bl	800507a <HAL_TIM_Base_Init>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8000dda:	f000 fa49 	bl	8001270 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000de2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000de4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000de8:	4619      	mov	r1, r3
 8000dea:	481c      	ldr	r0, [pc, #112]	; (8000e5c <MX_TIM5_Init+0xe4>)
 8000dec:	f005 f810 	bl	8005e10 <HAL_TIM_ConfigClockSource>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8000df6:	f000 fa3b 	bl	8001270 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000dfa:	4818      	ldr	r0, [pc, #96]	; (8000e5c <MX_TIM5_Init+0xe4>)
 8000dfc:	f004 f9fc 	bl	80051f8 <HAL_TIM_PWM_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8000e06:	f000 fa33 	bl	8001270 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e12:	f107 0320 	add.w	r3, r7, #32
 8000e16:	4619      	mov	r1, r3
 8000e18:	4810      	ldr	r0, [pc, #64]	; (8000e5c <MX_TIM5_Init+0xe4>)
 8000e1a:	f005 fd5d 	bl	80068d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8000e24:	f000 fa24 	bl	8001270 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e28:	2360      	movs	r3, #96	; 0x60
 8000e2a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 200-1;
 8000e2c:	23c7      	movs	r3, #199	; 0xc7
 8000e2e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e30:	2300      	movs	r3, #0
 8000e32:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e38:	1d3b      	adds	r3, r7, #4
 8000e3a:	220c      	movs	r2, #12
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4807      	ldr	r0, [pc, #28]	; (8000e5c <MX_TIM5_Init+0xe4>)
 8000e40:	f004 ff24 	bl	8005c8c <HAL_TIM_PWM_ConfigChannel>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8000e4a:	f000 fa11 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000e4e:	4803      	ldr	r0, [pc, #12]	; (8000e5c <MX_TIM5_Init+0xe4>)
 8000e50:	f000 fc80 	bl	8001754 <HAL_TIM_MspPostInit>

}
 8000e54:	bf00      	nop
 8000e56:	3738      	adds	r7, #56	; 0x38
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	2000040c 	.word	0x2000040c
 8000e60:	40000c00 	.word	0x40000c00

08000e64 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000e68:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <MX_TIM10_Init+0x40>)
 8000e6a:	4a0f      	ldr	r2, [pc, #60]	; (8000ea8 <MX_TIM10_Init+0x44>)
 8000e6c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 8000e6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ea4 <MX_TIM10_Init+0x40>)
 8000e70:	22a7      	movs	r2, #167	; 0xa7
 8000e72:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e74:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <MX_TIM10_Init+0x40>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000-1;
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <MX_TIM10_Init+0x40>)
 8000e7c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000e80:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e82:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <MX_TIM10_Init+0x40>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <MX_TIM10_Init+0x40>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000e8e:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <MX_TIM10_Init+0x40>)
 8000e90:	f004 f8f3 	bl	800507a <HAL_TIM_Base_Init>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8000e9a:	f000 f9e9 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000454 	.word	0x20000454
 8000ea8:	40014400 	.word	0x40014400

08000eac <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000eb0:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <MX_TIM11_Init+0x40>)
 8000eb2:	4a0f      	ldr	r2, [pc, #60]	; (8000ef0 <MX_TIM11_Init+0x44>)
 8000eb4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 168-1;
 8000eb6:	4b0d      	ldr	r3, [pc, #52]	; (8000eec <MX_TIM11_Init+0x40>)
 8000eb8:	22a7      	movs	r2, #167	; 0xa7
 8000eba:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ebc:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <MX_TIM11_Init+0x40>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8000ec2:	4b0a      	ldr	r3, [pc, #40]	; (8000eec <MX_TIM11_Init+0x40>)
 8000ec4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ec8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eca:	4b08      	ldr	r3, [pc, #32]	; (8000eec <MX_TIM11_Init+0x40>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <MX_TIM11_Init+0x40>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000ed6:	4805      	ldr	r0, [pc, #20]	; (8000eec <MX_TIM11_Init+0x40>)
 8000ed8:	f004 f8cf 	bl	800507a <HAL_TIM_Base_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8000ee2:	f000 f9c5 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	2000049c 	.word	0x2000049c
 8000ef0:	40014800 	.word	0x40014800

08000ef4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ef8:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <MX_USART3_UART_Init+0x4c>)
 8000efa:	4a12      	ldr	r2, [pc, #72]	; (8000f44 <MX_USART3_UART_Init+0x50>)
 8000efc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000efe:	4b10      	ldr	r3, [pc, #64]	; (8000f40 <MX_USART3_UART_Init+0x4c>)
 8000f00:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f04:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f06:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <MX_USART3_UART_Init+0x4c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <MX_USART3_UART_Init+0x4c>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f12:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <MX_USART3_UART_Init+0x4c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f18:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <MX_USART3_UART_Init+0x4c>)
 8000f1a:	220c      	movs	r2, #12
 8000f1c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f1e:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <MX_USART3_UART_Init+0x4c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <MX_USART3_UART_Init+0x4c>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f2a:	4805      	ldr	r0, [pc, #20]	; (8000f40 <MX_USART3_UART_Init+0x4c>)
 8000f2c:	f005 fd64 	bl	80069f8 <HAL_UART_Init>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000f36:	f000 f99b 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	200004e4 	.word	0x200004e4
 8000f44:	40004800 	.word	0x40004800

08000f48 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000f4c:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <MX_USART6_UART_Init+0x4c>)
 8000f4e:	4a12      	ldr	r2, [pc, #72]	; (8000f98 <MX_USART6_UART_Init+0x50>)
 8000f50:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000f52:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <MX_USART6_UART_Init+0x4c>)
 8000f54:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f58:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <MX_USART6_UART_Init+0x4c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000f60:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <MX_USART6_UART_Init+0x4c>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000f66:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <MX_USART6_UART_Init+0x4c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000f6c:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <MX_USART6_UART_Init+0x4c>)
 8000f6e:	220c      	movs	r2, #12
 8000f70:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f72:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <MX_USART6_UART_Init+0x4c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <MX_USART6_UART_Init+0x4c>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000f7e:	4805      	ldr	r0, [pc, #20]	; (8000f94 <MX_USART6_UART_Init+0x4c>)
 8000f80:	f005 fd3a 	bl	80069f8 <HAL_UART_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000f8a:	f000 f971 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000528 	.word	0x20000528
 8000f98:	40011400 	.word	0x40011400

08000f9c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000fa0:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fa2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000fa6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000faa:	2204      	movs	r2, #4
 8000fac:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000fae:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fb0:	2202      	movs	r2, #2
 8000fb2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000fba:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fbc:	2202      	movs	r2, #2
 8000fbe:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000fcc:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000fd2:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000fde:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fe0:	f002 fea0 	bl	8003d24 <HAL_PCD_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000fea:	f000 f941 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	2000056c 	.word	0x2000056c

08000ff8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08e      	sub	sp, #56	; 0x38
 8000ffc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
 800100a:	60da      	str	r2, [r3, #12]
 800100c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	623b      	str	r3, [r7, #32]
 8001012:	4b8f      	ldr	r3, [pc, #572]	; (8001250 <MX_GPIO_Init+0x258>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a8e      	ldr	r2, [pc, #568]	; (8001250 <MX_GPIO_Init+0x258>)
 8001018:	f043 0304 	orr.w	r3, r3, #4
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b8c      	ldr	r3, [pc, #560]	; (8001250 <MX_GPIO_Init+0x258>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0304 	and.w	r3, r3, #4
 8001026:	623b      	str	r3, [r7, #32]
 8001028:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]
 800102e:	4b88      	ldr	r3, [pc, #544]	; (8001250 <MX_GPIO_Init+0x258>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a87      	ldr	r2, [pc, #540]	; (8001250 <MX_GPIO_Init+0x258>)
 8001034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b85      	ldr	r3, [pc, #532]	; (8001250 <MX_GPIO_Init+0x258>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001042:	61fb      	str	r3, [r7, #28]
 8001044:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	61bb      	str	r3, [r7, #24]
 800104a:	4b81      	ldr	r3, [pc, #516]	; (8001250 <MX_GPIO_Init+0x258>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a80      	ldr	r2, [pc, #512]	; (8001250 <MX_GPIO_Init+0x258>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b7e      	ldr	r3, [pc, #504]	; (8001250 <MX_GPIO_Init+0x258>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	61bb      	str	r3, [r7, #24]
 8001060:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
 8001066:	4b7a      	ldr	r3, [pc, #488]	; (8001250 <MX_GPIO_Init+0x258>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a79      	ldr	r2, [pc, #484]	; (8001250 <MX_GPIO_Init+0x258>)
 800106c:	f043 0302 	orr.w	r3, r3, #2
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b77      	ldr	r3, [pc, #476]	; (8001250 <MX_GPIO_Init+0x258>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	613b      	str	r3, [r7, #16]
 8001082:	4b73      	ldr	r3, [pc, #460]	; (8001250 <MX_GPIO_Init+0x258>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a72      	ldr	r2, [pc, #456]	; (8001250 <MX_GPIO_Init+0x258>)
 8001088:	f043 0320 	orr.w	r3, r3, #32
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b70      	ldr	r3, [pc, #448]	; (8001250 <MX_GPIO_Init+0x258>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f003 0320 	and.w	r3, r3, #32
 8001096:	613b      	str	r3, [r7, #16]
 8001098:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	4b6c      	ldr	r3, [pc, #432]	; (8001250 <MX_GPIO_Init+0x258>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a6b      	ldr	r2, [pc, #428]	; (8001250 <MX_GPIO_Init+0x258>)
 80010a4:	f043 0310 	orr.w	r3, r3, #16
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b69      	ldr	r3, [pc, #420]	; (8001250 <MX_GPIO_Init+0x258>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f003 0310 	and.w	r3, r3, #16
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	60bb      	str	r3, [r7, #8]
 80010ba:	4b65      	ldr	r3, [pc, #404]	; (8001250 <MX_GPIO_Init+0x258>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	4a64      	ldr	r2, [pc, #400]	; (8001250 <MX_GPIO_Init+0x258>)
 80010c0:	f043 0308 	orr.w	r3, r3, #8
 80010c4:	6313      	str	r3, [r2, #48]	; 0x30
 80010c6:	4b62      	ldr	r3, [pc, #392]	; (8001250 <MX_GPIO_Init+0x258>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	f003 0308 	and.w	r3, r3, #8
 80010ce:	60bb      	str	r3, [r7, #8]
 80010d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	4b5e      	ldr	r3, [pc, #376]	; (8001250 <MX_GPIO_Init+0x258>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	4a5d      	ldr	r2, [pc, #372]	; (8001250 <MX_GPIO_Init+0x258>)
 80010dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010e0:	6313      	str	r3, [r2, #48]	; 0x30
 80010e2:	4b5b      	ldr	r3, [pc, #364]	; (8001250 <MX_GPIO_Init+0x258>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2101      	movs	r1, #1
 80010f2:	4858      	ldr	r0, [pc, #352]	; (8001254 <MX_GPIO_Init+0x25c>)
 80010f4:	f002 f936 	bl	8003364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80010f8:	2200      	movs	r2, #0
 80010fa:	f244 0181 	movw	r1, #16513	; 0x4081
 80010fe:	4856      	ldr	r0, [pc, #344]	; (8001258 <MX_GPIO_Init+0x260>)
 8001100:	f002 f930 	bl	8003364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, GPIO_PIN_RESET);
 8001104:	2200      	movs	r2, #0
 8001106:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800110a:	4854      	ldr	r0, [pc, #336]	; (800125c <MX_GPIO_Init+0x264>)
 800110c:	f002 f92a 	bl	8003364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, IN1_DCMOTOR_Pin|IN2_DCMOTOR_Pin|FAN_ROTATE_DERECTION_LED_Pin, GPIO_PIN_RESET);
 8001110:	2200      	movs	r2, #0
 8001112:	f44f 510c 	mov.w	r1, #8960	; 0x2300
 8001116:	4852      	ldr	r0, [pc, #328]	; (8001260 <MX_GPIO_Init+0x268>)
 8001118:	f002 f924 	bl	8003364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800111c:	2200      	movs	r2, #0
 800111e:	2140      	movs	r1, #64	; 0x40
 8001120:	4850      	ldr	r0, [pc, #320]	; (8001264 <MX_GPIO_Init+0x26c>)
 8001122:	f002 f91f 	bl	8003364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LEDBAR0_Pin|LEDBAR1_Pin|LEDBAR2_Pin|LEDBAR3_Pin
 8001126:	2200      	movs	r2, #0
 8001128:	21ff      	movs	r1, #255	; 0xff
 800112a:	484f      	ldr	r0, [pc, #316]	; (8001268 <MX_GPIO_Init+0x270>)
 800112c:	f002 f91a 	bl	8003364 <HAL_GPIO_WritePin>
                          |LEDBAR4_Pin|LEDBAR5_Pin|LEDBAR6_Pin|LEDBAR7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001130:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001134:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001136:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800113a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001140:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001144:	4619      	mov	r1, r3
 8001146:	4849      	ldr	r0, [pc, #292]	; (800126c <MX_GPIO_Init+0x274>)
 8001148:	f001 ff48 	bl	8002fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 800114c:	2301      	movs	r3, #1
 800114e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001150:	2301      	movs	r3, #1
 8001152:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001158:	2300      	movs	r3, #0
 800115a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 800115c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001160:	4619      	mov	r1, r3
 8001162:	483c      	ldr	r0, [pc, #240]	; (8001254 <MX_GPIO_Init+0x25c>)
 8001164:	f001 ff3a 	bl	8002fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001168:	f244 0381 	movw	r3, #16513	; 0x4081
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116e:	2301      	movs	r3, #1
 8001170:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001176:	2300      	movs	r3, #0
 8001178:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800117e:	4619      	mov	r1, r3
 8001180:	4835      	ldr	r0, [pc, #212]	; (8001258 <MX_GPIO_Init+0x260>)
 8001182:	f001 ff2b 	bl	8002fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : ULTRASONIC_TRIGGER_Pin */
  GPIO_InitStruct.Pin = ULTRASONIC_TRIGGER_Pin;
 8001186:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118c:	2301      	movs	r3, #1
 800118e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001194:	2300      	movs	r3, #0
 8001196:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ULTRASONIC_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 8001198:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800119c:	4619      	mov	r1, r3
 800119e:	482f      	ldr	r0, [pc, #188]	; (800125c <MX_GPIO_Init+0x264>)
 80011a0:	f001 ff1c 	bl	8002fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_DCMOTOR_Pin IN2_DCMOTOR_Pin FAN_ROTATE_DERECTION_LED_Pin */
  GPIO_InitStruct.Pin = IN1_DCMOTOR_Pin|IN2_DCMOTOR_Pin|FAN_ROTATE_DERECTION_LED_Pin;
 80011a4:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011aa:	2301      	movs	r3, #1
 80011ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b2:	2300      	movs	r3, #0
 80011b4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ba:	4619      	mov	r1, r3
 80011bc:	4828      	ldr	r0, [pc, #160]	; (8001260 <MX_GPIO_Init+0x268>)
 80011be:	f001 ff0d 	bl	8002fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON3_Pin BUTTON2_Pin BUTTON1_Pin BUTTON0_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON2_Pin|BUTTON1_Pin|BUTTON0_Pin;
 80011c2:	f44f 4354 	mov.w	r3, #54272	; 0xd400
 80011c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c8:	2300      	movs	r3, #0
 80011ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d4:	4619      	mov	r1, r3
 80011d6:	4822      	ldr	r0, [pc, #136]	; (8001260 <MX_GPIO_Init+0x268>)
 80011d8:	f001 ff00 	bl	8002fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON4_Pin */
  GPIO_InitStruct.Pin = BUTTON4_Pin;
 80011dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e2:	2300      	movs	r3, #0
 80011e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BUTTON4_GPIO_Port, &GPIO_InitStruct);
 80011ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ee:	4619      	mov	r1, r3
 80011f0:	4819      	ldr	r0, [pc, #100]	; (8001258 <MX_GPIO_Init+0x260>)
 80011f2:	f001 fef3 	bl	8002fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80011f6:	2340      	movs	r3, #64	; 0x40
 80011f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fa:	2301      	movs	r3, #1
 80011fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001202:	2300      	movs	r3, #0
 8001204:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001206:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800120a:	4619      	mov	r1, r3
 800120c:	4815      	ldr	r0, [pc, #84]	; (8001264 <MX_GPIO_Init+0x26c>)
 800120e:	f001 fee5 	bl	8002fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001212:	2380      	movs	r3, #128	; 0x80
 8001214:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001216:	2300      	movs	r3, #0
 8001218:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800121e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001222:	4619      	mov	r1, r3
 8001224:	480f      	ldr	r0, [pc, #60]	; (8001264 <MX_GPIO_Init+0x26c>)
 8001226:	f001 fed9 	bl	8002fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDBAR0_Pin LEDBAR1_Pin LEDBAR2_Pin LEDBAR3_Pin
                           LEDBAR4_Pin LEDBAR5_Pin LEDBAR6_Pin LEDBAR7_Pin */
  GPIO_InitStruct.Pin = LEDBAR0_Pin|LEDBAR1_Pin|LEDBAR2_Pin|LEDBAR3_Pin
 800122a:	23ff      	movs	r3, #255	; 0xff
 800122c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LEDBAR4_Pin|LEDBAR5_Pin|LEDBAR6_Pin|LEDBAR7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122e:	2301      	movs	r3, #1
 8001230:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001236:	2300      	movs	r3, #0
 8001238:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800123a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800123e:	4619      	mov	r1, r3
 8001240:	4809      	ldr	r0, [pc, #36]	; (8001268 <MX_GPIO_Init+0x270>)
 8001242:	f001 fecb 	bl	8002fdc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001246:	bf00      	nop
 8001248:	3738      	adds	r7, #56	; 0x38
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40023800 	.word	0x40023800
 8001254:	40020000 	.word	0x40020000
 8001258:	40020400 	.word	0x40020400
 800125c:	40021400 	.word	0x40021400
 8001260:	40021000 	.word	0x40021000
 8001264:	40021800 	.word	0x40021800
 8001268:	40020c00 	.word	0x40020c00
 800126c:	40020800 	.word	0x40020800

08001270 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001274:	b672      	cpsid	i
}
 8001276:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001278:	e7fe      	b.n	8001278 <Error_Handler+0x8>
	...

0800127c <open_WashingMachine_Lid>:
	// 서보모터 데이터 시트에서 1.5ms동안 유지되는 high 신호는 90도 회전으로 본다. ==> 0.00002 * 75개
	// 서보모터 데이터 시트에서 1ms동안 유지되는 high 신호는 0도 회전으로 본다. ==> 0.00002 * 50개
}

void open_WashingMachine_Lid(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 50);
 8001280:	4b04      	ldr	r3, [pc, #16]	; (8001294 <open_WashingMachine_Lid+0x18>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2232      	movs	r2, #50	; 0x32
 8001286:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	20000334 	.word	0x20000334

08001298 <close_WashingMachine_Lid>:

void close_WashingMachine_Lid(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 100);
 800129c:	4b04      	ldr	r3, [pc, #16]	; (80012b0 <close_WashingMachine_Lid+0x18>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2264      	movs	r2, #100	; 0x64
 80012a2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	20000334 	.word	0x20000334

080012b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	607b      	str	r3, [r7, #4]
 80012be:	4b10      	ldr	r3, [pc, #64]	; (8001300 <HAL_MspInit+0x4c>)
 80012c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c2:	4a0f      	ldr	r2, [pc, #60]	; (8001300 <HAL_MspInit+0x4c>)
 80012c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012c8:	6453      	str	r3, [r2, #68]	; 0x44
 80012ca:	4b0d      	ldr	r3, [pc, #52]	; (8001300 <HAL_MspInit+0x4c>)
 80012cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012d2:	607b      	str	r3, [r7, #4]
 80012d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	603b      	str	r3, [r7, #0]
 80012da:	4b09      	ldr	r3, [pc, #36]	; (8001300 <HAL_MspInit+0x4c>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	4a08      	ldr	r2, [pc, #32]	; (8001300 <HAL_MspInit+0x4c>)
 80012e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e4:	6413      	str	r3, [r2, #64]	; 0x40
 80012e6:	4b06      	ldr	r3, [pc, #24]	; (8001300 <HAL_MspInit+0x4c>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ee:	603b      	str	r3, [r7, #0]
 80012f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	40023800 	.word	0x40023800

08001304 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08e      	sub	sp, #56	; 0x38
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]
 800131a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a55      	ldr	r2, [pc, #340]	; (8001478 <HAL_ETH_MspInit+0x174>)
 8001322:	4293      	cmp	r3, r2
 8001324:	f040 80a4 	bne.w	8001470 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001328:	2300      	movs	r3, #0
 800132a:	623b      	str	r3, [r7, #32]
 800132c:	4b53      	ldr	r3, [pc, #332]	; (800147c <HAL_ETH_MspInit+0x178>)
 800132e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001330:	4a52      	ldr	r2, [pc, #328]	; (800147c <HAL_ETH_MspInit+0x178>)
 8001332:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001336:	6313      	str	r3, [r2, #48]	; 0x30
 8001338:	4b50      	ldr	r3, [pc, #320]	; (800147c <HAL_ETH_MspInit+0x178>)
 800133a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001340:	623b      	str	r3, [r7, #32]
 8001342:	6a3b      	ldr	r3, [r7, #32]
 8001344:	2300      	movs	r3, #0
 8001346:	61fb      	str	r3, [r7, #28]
 8001348:	4b4c      	ldr	r3, [pc, #304]	; (800147c <HAL_ETH_MspInit+0x178>)
 800134a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134c:	4a4b      	ldr	r2, [pc, #300]	; (800147c <HAL_ETH_MspInit+0x178>)
 800134e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001352:	6313      	str	r3, [r2, #48]	; 0x30
 8001354:	4b49      	ldr	r3, [pc, #292]	; (800147c <HAL_ETH_MspInit+0x178>)
 8001356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001358:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800135c:	61fb      	str	r3, [r7, #28]
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	2300      	movs	r3, #0
 8001362:	61bb      	str	r3, [r7, #24]
 8001364:	4b45      	ldr	r3, [pc, #276]	; (800147c <HAL_ETH_MspInit+0x178>)
 8001366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001368:	4a44      	ldr	r2, [pc, #272]	; (800147c <HAL_ETH_MspInit+0x178>)
 800136a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800136e:	6313      	str	r3, [r2, #48]	; 0x30
 8001370:	4b42      	ldr	r3, [pc, #264]	; (800147c <HAL_ETH_MspInit+0x178>)
 8001372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001374:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001378:	61bb      	str	r3, [r7, #24]
 800137a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
 8001380:	4b3e      	ldr	r3, [pc, #248]	; (800147c <HAL_ETH_MspInit+0x178>)
 8001382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001384:	4a3d      	ldr	r2, [pc, #244]	; (800147c <HAL_ETH_MspInit+0x178>)
 8001386:	f043 0304 	orr.w	r3, r3, #4
 800138a:	6313      	str	r3, [r2, #48]	; 0x30
 800138c:	4b3b      	ldr	r3, [pc, #236]	; (800147c <HAL_ETH_MspInit+0x178>)
 800138e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001390:	f003 0304 	and.w	r3, r3, #4
 8001394:	617b      	str	r3, [r7, #20]
 8001396:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001398:	2300      	movs	r3, #0
 800139a:	613b      	str	r3, [r7, #16]
 800139c:	4b37      	ldr	r3, [pc, #220]	; (800147c <HAL_ETH_MspInit+0x178>)
 800139e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a0:	4a36      	ldr	r2, [pc, #216]	; (800147c <HAL_ETH_MspInit+0x178>)
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	6313      	str	r3, [r2, #48]	; 0x30
 80013a8:	4b34      	ldr	r3, [pc, #208]	; (800147c <HAL_ETH_MspInit+0x178>)
 80013aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	613b      	str	r3, [r7, #16]
 80013b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b4:	2300      	movs	r3, #0
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	4b30      	ldr	r3, [pc, #192]	; (800147c <HAL_ETH_MspInit+0x178>)
 80013ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013bc:	4a2f      	ldr	r2, [pc, #188]	; (800147c <HAL_ETH_MspInit+0x178>)
 80013be:	f043 0302 	orr.w	r3, r3, #2
 80013c2:	6313      	str	r3, [r2, #48]	; 0x30
 80013c4:	4b2d      	ldr	r3, [pc, #180]	; (800147c <HAL_ETH_MspInit+0x178>)
 80013c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c8:	f003 0302 	and.w	r3, r3, #2
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80013d0:	2300      	movs	r3, #0
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	4b29      	ldr	r3, [pc, #164]	; (800147c <HAL_ETH_MspInit+0x178>)
 80013d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d8:	4a28      	ldr	r2, [pc, #160]	; (800147c <HAL_ETH_MspInit+0x178>)
 80013da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013de:	6313      	str	r3, [r2, #48]	; 0x30
 80013e0:	4b26      	ldr	r3, [pc, #152]	; (800147c <HAL_ETH_MspInit+0x178>)
 80013e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80013ec:	2332      	movs	r3, #50	; 0x32
 80013ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f0:	2302      	movs	r3, #2
 80013f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f8:	2303      	movs	r3, #3
 80013fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013fc:	230b      	movs	r3, #11
 80013fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001400:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001404:	4619      	mov	r1, r3
 8001406:	481e      	ldr	r0, [pc, #120]	; (8001480 <HAL_ETH_MspInit+0x17c>)
 8001408:	f001 fde8 	bl	8002fdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800140c:	2386      	movs	r3, #134	; 0x86
 800140e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001410:	2302      	movs	r3, #2
 8001412:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001418:	2303      	movs	r3, #3
 800141a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800141c:	230b      	movs	r3, #11
 800141e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001420:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001424:	4619      	mov	r1, r3
 8001426:	4817      	ldr	r0, [pc, #92]	; (8001484 <HAL_ETH_MspInit+0x180>)
 8001428:	f001 fdd8 	bl	8002fdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800142c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001432:	2302      	movs	r3, #2
 8001434:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143a:	2303      	movs	r3, #3
 800143c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800143e:	230b      	movs	r3, #11
 8001440:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001442:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001446:	4619      	mov	r1, r3
 8001448:	480f      	ldr	r0, [pc, #60]	; (8001488 <HAL_ETH_MspInit+0x184>)
 800144a:	f001 fdc7 	bl	8002fdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800144e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001454:	2302      	movs	r3, #2
 8001456:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145c:	2303      	movs	r3, #3
 800145e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001460:	230b      	movs	r3, #11
 8001462:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001464:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001468:	4619      	mov	r1, r3
 800146a:	4808      	ldr	r0, [pc, #32]	; (800148c <HAL_ETH_MspInit+0x188>)
 800146c:	f001 fdb6 	bl	8002fdc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001470:	bf00      	nop
 8001472:	3738      	adds	r7, #56	; 0x38
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40028000 	.word	0x40028000
 800147c:	40023800 	.word	0x40023800
 8001480:	40020800 	.word	0x40020800
 8001484:	40020000 	.word	0x40020000
 8001488:	40020400 	.word	0x40020400
 800148c:	40021800 	.word	0x40021800

08001490 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08a      	sub	sp, #40	; 0x28
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a19      	ldr	r2, [pc, #100]	; (8001514 <HAL_I2C_MspInit+0x84>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d12c      	bne.n	800150c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	4b18      	ldr	r3, [pc, #96]	; (8001518 <HAL_I2C_MspInit+0x88>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a17      	ldr	r2, [pc, #92]	; (8001518 <HAL_I2C_MspInit+0x88>)
 80014bc:	f043 0302 	orr.w	r3, r3, #2
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b15      	ldr	r3, [pc, #84]	; (8001518 <HAL_I2C_MspInit+0x88>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014d4:	2312      	movs	r3, #18
 80014d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014dc:	2303      	movs	r3, #3
 80014de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014e0:	2304      	movs	r3, #4
 80014e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	4619      	mov	r1, r3
 80014ea:	480c      	ldr	r0, [pc, #48]	; (800151c <HAL_I2C_MspInit+0x8c>)
 80014ec:	f001 fd76 	bl	8002fdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014f0:	2300      	movs	r3, #0
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	4b08      	ldr	r3, [pc, #32]	; (8001518 <HAL_I2C_MspInit+0x88>)
 80014f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f8:	4a07      	ldr	r2, [pc, #28]	; (8001518 <HAL_I2C_MspInit+0x88>)
 80014fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001500:	4b05      	ldr	r3, [pc, #20]	; (8001518 <HAL_I2C_MspInit+0x88>)
 8001502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001504:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800150c:	bf00      	nop
 800150e:	3728      	adds	r7, #40	; 0x28
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40005400 	.word	0x40005400
 8001518:	40023800 	.word	0x40023800
 800151c:	40020400 	.word	0x40020400

08001520 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08e      	sub	sp, #56	; 0x38
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001528:	f107 0308 	add.w	r3, r7, #8
 800152c:	2230      	movs	r2, #48	; 0x30
 800152e:	2100      	movs	r1, #0
 8001530:	4618      	mov	r0, r3
 8001532:	f006 fe05 	bl	8008140 <memset>
  if(hrtc->Instance==RTC)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a0c      	ldr	r2, [pc, #48]	; (800156c <HAL_RTC_MspInit+0x4c>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d111      	bne.n	8001564 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001540:	2320      	movs	r3, #32
 8001542:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001544:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001548:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800154a:	f107 0308 	add.w	r3, r7, #8
 800154e:	4618      	mov	r0, r3
 8001550:	f003 f99e 	bl	8004890 <HAL_RCCEx_PeriphCLKConfig>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800155a:	f7ff fe89 	bl	8001270 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800155e:	4b04      	ldr	r3, [pc, #16]	; (8001570 <HAL_RTC_MspInit+0x50>)
 8001560:	2201      	movs	r2, #1
 8001562:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001564:	bf00      	nop
 8001566:	3738      	adds	r7, #56	; 0x38
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40002800 	.word	0x40002800
 8001570:	42470e3c 	.word	0x42470e3c

08001574 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001584:	d115      	bne.n	80015b2 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <HAL_TIM_PWM_MspInit+0x48>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	4a0b      	ldr	r2, [pc, #44]	; (80015bc <HAL_TIM_PWM_MspInit+0x48>)
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	6413      	str	r3, [r2, #64]	; 0x40
 8001596:	4b09      	ldr	r3, [pc, #36]	; (80015bc <HAL_TIM_PWM_MspInit+0x48>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015a2:	2200      	movs	r2, #0
 80015a4:	2100      	movs	r1, #0
 80015a6:	201c      	movs	r0, #28
 80015a8:	f001 f927 	bl	80027fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015ac:	201c      	movs	r0, #28
 80015ae:	f001 f940 	bl	8002832 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80015b2:	bf00      	nop
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40023800 	.word	0x40023800

080015c0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08a      	sub	sp, #40	; 0x28
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a1d      	ldr	r2, [pc, #116]	; (8001654 <HAL_TIM_IC_MspInit+0x94>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d133      	bne.n	800164a <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	613b      	str	r3, [r7, #16]
 80015e6:	4b1c      	ldr	r3, [pc, #112]	; (8001658 <HAL_TIM_IC_MspInit+0x98>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	4a1b      	ldr	r2, [pc, #108]	; (8001658 <HAL_TIM_IC_MspInit+0x98>)
 80015ec:	f043 0302 	orr.w	r3, r3, #2
 80015f0:	6413      	str	r3, [r2, #64]	; 0x40
 80015f2:	4b19      	ldr	r3, [pc, #100]	; (8001658 <HAL_TIM_IC_MspInit+0x98>)
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	613b      	str	r3, [r7, #16]
 80015fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	4b15      	ldr	r3, [pc, #84]	; (8001658 <HAL_TIM_IC_MspInit+0x98>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	4a14      	ldr	r2, [pc, #80]	; (8001658 <HAL_TIM_IC_MspInit+0x98>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	6313      	str	r3, [r2, #48]	; 0x30
 800160e:	4b12      	ldr	r3, [pc, #72]	; (8001658 <HAL_TIM_IC_MspInit+0x98>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = ULTRASONIC_TIM3_CH1_Pin;
 800161a:	2340      	movs	r3, #64	; 0x40
 800161c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161e:	2302      	movs	r3, #2
 8001620:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001626:	2300      	movs	r3, #0
 8001628:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800162a:	2302      	movs	r3, #2
 800162c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ULTRASONIC_TIM3_CH1_GPIO_Port, &GPIO_InitStruct);
 800162e:	f107 0314 	add.w	r3, r7, #20
 8001632:	4619      	mov	r1, r3
 8001634:	4809      	ldr	r0, [pc, #36]	; (800165c <HAL_TIM_IC_MspInit+0x9c>)
 8001636:	f001 fcd1 	bl	8002fdc <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800163a:	2200      	movs	r2, #0
 800163c:	2100      	movs	r1, #0
 800163e:	201d      	movs	r0, #29
 8001640:	f001 f8db 	bl	80027fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001644:	201d      	movs	r0, #29
 8001646:	f001 f8f4 	bl	8002832 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800164a:	bf00      	nop
 800164c:	3728      	adds	r7, #40	; 0x28
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40000400 	.word	0x40000400
 8001658:	40023800 	.word	0x40023800
 800165c:	40020000 	.word	0x40020000

08001660 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a34      	ldr	r2, [pc, #208]	; (8001740 <HAL_TIM_Base_MspInit+0xe0>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d10e      	bne.n	8001690 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	617b      	str	r3, [r7, #20]
 8001676:	4b33      	ldr	r3, [pc, #204]	; (8001744 <HAL_TIM_Base_MspInit+0xe4>)
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	4a32      	ldr	r2, [pc, #200]	; (8001744 <HAL_TIM_Base_MspInit+0xe4>)
 800167c:	f043 0304 	orr.w	r3, r3, #4
 8001680:	6413      	str	r3, [r2, #64]	; 0x40
 8001682:	4b30      	ldr	r3, [pc, #192]	; (8001744 <HAL_TIM_Base_MspInit+0xe4>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	f003 0304 	and.w	r3, r3, #4
 800168a:	617b      	str	r3, [r7, #20]
 800168c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800168e:	e052      	b.n	8001736 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM5)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a2c      	ldr	r2, [pc, #176]	; (8001748 <HAL_TIM_Base_MspInit+0xe8>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d116      	bne.n	80016c8 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	613b      	str	r3, [r7, #16]
 800169e:	4b29      	ldr	r3, [pc, #164]	; (8001744 <HAL_TIM_Base_MspInit+0xe4>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	4a28      	ldr	r2, [pc, #160]	; (8001744 <HAL_TIM_Base_MspInit+0xe4>)
 80016a4:	f043 0308 	orr.w	r3, r3, #8
 80016a8:	6413      	str	r3, [r2, #64]	; 0x40
 80016aa:	4b26      	ldr	r3, [pc, #152]	; (8001744 <HAL_TIM_Base_MspInit+0xe4>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	f003 0308 	and.w	r3, r3, #8
 80016b2:	613b      	str	r3, [r7, #16]
 80016b4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80016b6:	2200      	movs	r2, #0
 80016b8:	2100      	movs	r1, #0
 80016ba:	2032      	movs	r0, #50	; 0x32
 80016bc:	f001 f89d 	bl	80027fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80016c0:	2032      	movs	r0, #50	; 0x32
 80016c2:	f001 f8b6 	bl	8002832 <HAL_NVIC_EnableIRQ>
}
 80016c6:	e036      	b.n	8001736 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM10)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a1f      	ldr	r2, [pc, #124]	; (800174c <HAL_TIM_Base_MspInit+0xec>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d116      	bne.n	8001700 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	4b1b      	ldr	r3, [pc, #108]	; (8001744 <HAL_TIM_Base_MspInit+0xe4>)
 80016d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016da:	4a1a      	ldr	r2, [pc, #104]	; (8001744 <HAL_TIM_Base_MspInit+0xe4>)
 80016dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016e0:	6453      	str	r3, [r2, #68]	; 0x44
 80016e2:	4b18      	ldr	r3, [pc, #96]	; (8001744 <HAL_TIM_Base_MspInit+0xe4>)
 80016e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2100      	movs	r1, #0
 80016f2:	2019      	movs	r0, #25
 80016f4:	f001 f881 	bl	80027fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80016f8:	2019      	movs	r0, #25
 80016fa:	f001 f89a 	bl	8002832 <HAL_NVIC_EnableIRQ>
}
 80016fe:	e01a      	b.n	8001736 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM11)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a12      	ldr	r2, [pc, #72]	; (8001750 <HAL_TIM_Base_MspInit+0xf0>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d115      	bne.n	8001736 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	60bb      	str	r3, [r7, #8]
 800170e:	4b0d      	ldr	r3, [pc, #52]	; (8001744 <HAL_TIM_Base_MspInit+0xe4>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001712:	4a0c      	ldr	r2, [pc, #48]	; (8001744 <HAL_TIM_Base_MspInit+0xe4>)
 8001714:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001718:	6453      	str	r3, [r2, #68]	; 0x44
 800171a:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <HAL_TIM_Base_MspInit+0xe4>)
 800171c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001722:	60bb      	str	r3, [r7, #8]
 8001724:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001726:	2200      	movs	r2, #0
 8001728:	2100      	movs	r1, #0
 800172a:	201a      	movs	r0, #26
 800172c:	f001 f865 	bl	80027fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001730:	201a      	movs	r0, #26
 8001732:	f001 f87e 	bl	8002832 <HAL_NVIC_EnableIRQ>
}
 8001736:	bf00      	nop
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40000800 	.word	0x40000800
 8001744:	40023800 	.word	0x40023800
 8001748:	40000c00 	.word	0x40000c00
 800174c:	40014400 	.word	0x40014400
 8001750:	40014800 	.word	0x40014800

08001754 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08a      	sub	sp, #40	; 0x28
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
 800176a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001774:	d11e      	bne.n	80017b4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	613b      	str	r3, [r7, #16]
 800177a:	4b34      	ldr	r3, [pc, #208]	; (800184c <HAL_TIM_MspPostInit+0xf8>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	4a33      	ldr	r2, [pc, #204]	; (800184c <HAL_TIM_MspPostInit+0xf8>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	6313      	str	r3, [r2, #48]	; 0x30
 8001786:	4b31      	ldr	r3, [pc, #196]	; (800184c <HAL_TIM_MspPostInit+0xf8>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	613b      	str	r3, [r7, #16]
 8001790:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001792:	2320      	movs	r3, #32
 8001794:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001796:	2302      	movs	r3, #2
 8001798:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179e:	2300      	movs	r3, #0
 80017a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017a2:	2301      	movs	r3, #1
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a6:	f107 0314 	add.w	r3, r7, #20
 80017aa:	4619      	mov	r1, r3
 80017ac:	4828      	ldr	r0, [pc, #160]	; (8001850 <HAL_TIM_MspPostInit+0xfc>)
 80017ae:	f001 fc15 	bl	8002fdc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80017b2:	e047      	b.n	8001844 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM4)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a26      	ldr	r2, [pc, #152]	; (8001854 <HAL_TIM_MspPostInit+0x100>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d11f      	bne.n	80017fe <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	4b22      	ldr	r3, [pc, #136]	; (800184c <HAL_TIM_MspPostInit+0xf8>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	4a21      	ldr	r2, [pc, #132]	; (800184c <HAL_TIM_MspPostInit+0xf8>)
 80017c8:	f043 0308 	orr.w	r3, r3, #8
 80017cc:	6313      	str	r3, [r2, #48]	; 0x30
 80017ce:	4b1f      	ldr	r3, [pc, #124]	; (800184c <HAL_TIM_MspPostInit+0xf8>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	f003 0308 	and.w	r3, r3, #8
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80017da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e0:	2302      	movs	r3, #2
 80017e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e8:	2300      	movs	r3, #0
 80017ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80017ec:	2302      	movs	r3, #2
 80017ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017f0:	f107 0314 	add.w	r3, r7, #20
 80017f4:	4619      	mov	r1, r3
 80017f6:	4818      	ldr	r0, [pc, #96]	; (8001858 <HAL_TIM_MspPostInit+0x104>)
 80017f8:	f001 fbf0 	bl	8002fdc <HAL_GPIO_Init>
}
 80017fc:	e022      	b.n	8001844 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM5)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a16      	ldr	r2, [pc, #88]	; (800185c <HAL_TIM_MspPostInit+0x108>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d11d      	bne.n	8001844 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001808:	2300      	movs	r3, #0
 800180a:	60bb      	str	r3, [r7, #8]
 800180c:	4b0f      	ldr	r3, [pc, #60]	; (800184c <HAL_TIM_MspPostInit+0xf8>)
 800180e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001810:	4a0e      	ldr	r2, [pc, #56]	; (800184c <HAL_TIM_MspPostInit+0xf8>)
 8001812:	f043 0301 	orr.w	r3, r3, #1
 8001816:	6313      	str	r3, [r2, #48]	; 0x30
 8001818:	4b0c      	ldr	r3, [pc, #48]	; (800184c <HAL_TIM_MspPostInit+0xf8>)
 800181a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181c:	f003 0301 	and.w	r3, r3, #1
 8001820:	60bb      	str	r3, [r7, #8]
 8001822:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8001824:	2308      	movs	r3, #8
 8001826:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001828:	2302      	movs	r3, #2
 800182a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001830:	2300      	movs	r3, #0
 8001832:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001834:	2302      	movs	r3, #2
 8001836:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001838:	f107 0314 	add.w	r3, r7, #20
 800183c:	4619      	mov	r1, r3
 800183e:	4804      	ldr	r0, [pc, #16]	; (8001850 <HAL_TIM_MspPostInit+0xfc>)
 8001840:	f001 fbcc 	bl	8002fdc <HAL_GPIO_Init>
}
 8001844:	bf00      	nop
 8001846:	3728      	adds	r7, #40	; 0x28
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40023800 	.word	0x40023800
 8001850:	40020000 	.word	0x40020000
 8001854:	40000800 	.word	0x40000800
 8001858:	40020c00 	.word	0x40020c00
 800185c:	40000c00 	.word	0x40000c00

08001860 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08c      	sub	sp, #48	; 0x30
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001868:	f107 031c 	add.w	r3, r7, #28
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a3a      	ldr	r2, [pc, #232]	; (8001968 <HAL_UART_MspInit+0x108>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d135      	bne.n	80018ee <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	61bb      	str	r3, [r7, #24]
 8001886:	4b39      	ldr	r3, [pc, #228]	; (800196c <HAL_UART_MspInit+0x10c>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	4a38      	ldr	r2, [pc, #224]	; (800196c <HAL_UART_MspInit+0x10c>)
 800188c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001890:	6413      	str	r3, [r2, #64]	; 0x40
 8001892:	4b36      	ldr	r3, [pc, #216]	; (800196c <HAL_UART_MspInit+0x10c>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800189a:	61bb      	str	r3, [r7, #24]
 800189c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	617b      	str	r3, [r7, #20]
 80018a2:	4b32      	ldr	r3, [pc, #200]	; (800196c <HAL_UART_MspInit+0x10c>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	4a31      	ldr	r2, [pc, #196]	; (800196c <HAL_UART_MspInit+0x10c>)
 80018a8:	f043 0308 	orr.w	r3, r3, #8
 80018ac:	6313      	str	r3, [r2, #48]	; 0x30
 80018ae:	4b2f      	ldr	r3, [pc, #188]	; (800196c <HAL_UART_MspInit+0x10c>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	f003 0308 	and.w	r3, r3, #8
 80018b6:	617b      	str	r3, [r7, #20]
 80018b8:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80018ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c0:	2302      	movs	r3, #2
 80018c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c8:	2303      	movs	r3, #3
 80018ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018cc:	2307      	movs	r3, #7
 80018ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018d0:	f107 031c 	add.w	r3, r7, #28
 80018d4:	4619      	mov	r1, r3
 80018d6:	4826      	ldr	r0, [pc, #152]	; (8001970 <HAL_UART_MspInit+0x110>)
 80018d8:	f001 fb80 	bl	8002fdc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80018dc:	2200      	movs	r2, #0
 80018de:	2100      	movs	r1, #0
 80018e0:	2027      	movs	r0, #39	; 0x27
 80018e2:	f000 ff8a 	bl	80027fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80018e6:	2027      	movs	r0, #39	; 0x27
 80018e8:	f000 ffa3 	bl	8002832 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80018ec:	e038      	b.n	8001960 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART6)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a20      	ldr	r2, [pc, #128]	; (8001974 <HAL_UART_MspInit+0x114>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d133      	bne.n	8001960 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART6_CLK_ENABLE();
 80018f8:	2300      	movs	r3, #0
 80018fa:	613b      	str	r3, [r7, #16]
 80018fc:	4b1b      	ldr	r3, [pc, #108]	; (800196c <HAL_UART_MspInit+0x10c>)
 80018fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001900:	4a1a      	ldr	r2, [pc, #104]	; (800196c <HAL_UART_MspInit+0x10c>)
 8001902:	f043 0320 	orr.w	r3, r3, #32
 8001906:	6453      	str	r3, [r2, #68]	; 0x44
 8001908:	4b18      	ldr	r3, [pc, #96]	; (800196c <HAL_UART_MspInit+0x10c>)
 800190a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190c:	f003 0320 	and.w	r3, r3, #32
 8001910:	613b      	str	r3, [r7, #16]
 8001912:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001914:	2300      	movs	r3, #0
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	4b14      	ldr	r3, [pc, #80]	; (800196c <HAL_UART_MspInit+0x10c>)
 800191a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191c:	4a13      	ldr	r2, [pc, #76]	; (800196c <HAL_UART_MspInit+0x10c>)
 800191e:	f043 0304 	orr.w	r3, r3, #4
 8001922:	6313      	str	r3, [r2, #48]	; 0x30
 8001924:	4b11      	ldr	r3, [pc, #68]	; (800196c <HAL_UART_MspInit+0x10c>)
 8001926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001928:	f003 0304 	and.w	r3, r3, #4
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001930:	23c0      	movs	r3, #192	; 0xc0
 8001932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001934:	2302      	movs	r3, #2
 8001936:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800193c:	2303      	movs	r3, #3
 800193e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001940:	2308      	movs	r3, #8
 8001942:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001944:	f107 031c 	add.w	r3, r7, #28
 8001948:	4619      	mov	r1, r3
 800194a:	480b      	ldr	r0, [pc, #44]	; (8001978 <HAL_UART_MspInit+0x118>)
 800194c:	f001 fb46 	bl	8002fdc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001950:	2200      	movs	r2, #0
 8001952:	2100      	movs	r1, #0
 8001954:	2047      	movs	r0, #71	; 0x47
 8001956:	f000 ff50 	bl	80027fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800195a:	2047      	movs	r0, #71	; 0x47
 800195c:	f000 ff69 	bl	8002832 <HAL_NVIC_EnableIRQ>
}
 8001960:	bf00      	nop
 8001962:	3730      	adds	r7, #48	; 0x30
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40004800 	.word	0x40004800
 800196c:	40023800 	.word	0x40023800
 8001970:	40020c00 	.word	0x40020c00
 8001974:	40011400 	.word	0x40011400
 8001978:	40020800 	.word	0x40020800

0800197c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b08a      	sub	sp, #40	; 0x28
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001984:	f107 0314 	add.w	r3, r7, #20
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	60da      	str	r2, [r3, #12]
 8001992:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800199c:	d13f      	bne.n	8001a1e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	613b      	str	r3, [r7, #16]
 80019a2:	4b21      	ldr	r3, [pc, #132]	; (8001a28 <HAL_PCD_MspInit+0xac>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	4a20      	ldr	r2, [pc, #128]	; (8001a28 <HAL_PCD_MspInit+0xac>)
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	6313      	str	r3, [r2, #48]	; 0x30
 80019ae:	4b1e      	ldr	r3, [pc, #120]	; (8001a28 <HAL_PCD_MspInit+0xac>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	613b      	str	r3, [r7, #16]
 80019b8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80019ba:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80019be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c0:	2302      	movs	r3, #2
 80019c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c8:	2303      	movs	r3, #3
 80019ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80019cc:	230a      	movs	r3, #10
 80019ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d0:	f107 0314 	add.w	r3, r7, #20
 80019d4:	4619      	mov	r1, r3
 80019d6:	4815      	ldr	r0, [pc, #84]	; (8001a2c <HAL_PCD_MspInit+0xb0>)
 80019d8:	f001 fb00 	bl	8002fdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80019dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019e2:	2300      	movs	r3, #0
 80019e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80019ea:	f107 0314 	add.w	r3, r7, #20
 80019ee:	4619      	mov	r1, r3
 80019f0:	480e      	ldr	r0, [pc, #56]	; (8001a2c <HAL_PCD_MspInit+0xb0>)
 80019f2:	f001 faf3 	bl	8002fdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80019f6:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <HAL_PCD_MspInit+0xac>)
 80019f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019fa:	4a0b      	ldr	r2, [pc, #44]	; (8001a28 <HAL_PCD_MspInit+0xac>)
 80019fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a00:	6353      	str	r3, [r2, #52]	; 0x34
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	4b08      	ldr	r3, [pc, #32]	; (8001a28 <HAL_PCD_MspInit+0xac>)
 8001a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0a:	4a07      	ldr	r2, [pc, #28]	; (8001a28 <HAL_PCD_MspInit+0xac>)
 8001a0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a10:	6453      	str	r3, [r2, #68]	; 0x44
 8001a12:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <HAL_PCD_MspInit+0xac>)
 8001a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001a1e:	bf00      	nop
 8001a20:	3728      	adds	r7, #40	; 0x28
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	40020000 	.word	0x40020000

08001a30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a34:	e7fe      	b.n	8001a34 <NMI_Handler+0x4>

08001a36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a36:	b480      	push	{r7}
 8001a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a3a:	e7fe      	b.n	8001a3a <HardFault_Handler+0x4>

08001a3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a40:	e7fe      	b.n	8001a40 <MemManage_Handler+0x4>

08001a42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a42:	b480      	push	{r7}
 8001a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a46:	e7fe      	b.n	8001a46 <BusFault_Handler+0x4>

08001a48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a4c:	e7fe      	b.n	8001a4c <UsageFault_Handler+0x4>

08001a4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a52:	bf00      	nop
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a7c:	f000 fd9e 	bl	80025bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a80:	bf00      	nop
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001a88:	4802      	ldr	r0, [pc, #8]	; (8001a94 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001a8a:	f003 ff5b 	bl	8005944 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20000454 	.word	0x20000454

08001a98 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001a9c:	4802      	ldr	r0, [pc, #8]	; (8001aa8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001a9e:	f003 ff51 	bl	8005944 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	2000049c 	.word	0x2000049c

08001aac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ab0:	4802      	ldr	r0, [pc, #8]	; (8001abc <TIM2_IRQHandler+0x10>)
 8001ab2:	f003 ff47 	bl	8005944 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20000334 	.word	0x20000334

08001ac0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ac4:	4802      	ldr	r0, [pc, #8]	; (8001ad0 <TIM3_IRQHandler+0x10>)
 8001ac6:	f003 ff3d 	bl	8005944 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	2000037c 	.word	0x2000037c

08001ad4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001ad8:	4802      	ldr	r0, [pc, #8]	; (8001ae4 <USART3_IRQHandler+0x10>)
 8001ada:	f005 f89d 	bl	8006c18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	200004e4 	.word	0x200004e4

08001ae8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001aec:	4802      	ldr	r0, [pc, #8]	; (8001af8 <TIM5_IRQHandler+0x10>)
 8001aee:	f003 ff29 	bl	8005944 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	2000040c 	.word	0x2000040c

08001afc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001b00:	4802      	ldr	r0, [pc, #8]	; (8001b0c <USART6_IRQHandler+0x10>)
 8001b02:	f005 f889 	bl	8006c18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000528 	.word	0x20000528

08001b10 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	617b      	str	r3, [r7, #20]
 8001b20:	e00a      	b.n	8001b38 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b22:	f3af 8000 	nop.w
 8001b26:	4601      	mov	r1, r0
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	1c5a      	adds	r2, r3, #1
 8001b2c:	60ba      	str	r2, [r7, #8]
 8001b2e:	b2ca      	uxtb	r2, r1
 8001b30:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	3301      	adds	r3, #1
 8001b36:	617b      	str	r3, [r7, #20]
 8001b38:	697a      	ldr	r2, [r7, #20]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	dbf0      	blt.n	8001b22 <_read+0x12>
  }

  return len;
 8001b40:	687b      	ldr	r3, [r7, #4]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3718      	adds	r7, #24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b086      	sub	sp, #24
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	60f8      	str	r0, [r7, #12]
 8001b52:	60b9      	str	r1, [r7, #8]
 8001b54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b56:	2300      	movs	r3, #0
 8001b58:	617b      	str	r3, [r7, #20]
 8001b5a:	e009      	b.n	8001b70 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	1c5a      	adds	r2, r3, #1
 8001b60:	60ba      	str	r2, [r7, #8]
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7fe fe53 	bl	8000810 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	617b      	str	r3, [r7, #20]
 8001b70:	697a      	ldr	r2, [r7, #20]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	dbf1      	blt.n	8001b5c <_write+0x12>
  }
  return len;
 8001b78:	687b      	ldr	r3, [r7, #4]
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3718      	adds	r7, #24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <_close>:

int _close(int file)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b083      	sub	sp, #12
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b083      	sub	sp, #12
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
 8001ba2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001baa:	605a      	str	r2, [r3, #4]
  return 0;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <_isatty>:

int _isatty(int file)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	b083      	sub	sp, #12
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bc2:	2301      	movs	r3, #1
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3714      	adds	r7, #20
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
	...

08001bec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bf4:	4a14      	ldr	r2, [pc, #80]	; (8001c48 <_sbrk+0x5c>)
 8001bf6:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <_sbrk+0x60>)
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c00:	4b13      	ldr	r3, [pc, #76]	; (8001c50 <_sbrk+0x64>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d102      	bne.n	8001c0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c08:	4b11      	ldr	r3, [pc, #68]	; (8001c50 <_sbrk+0x64>)
 8001c0a:	4a12      	ldr	r2, [pc, #72]	; (8001c54 <_sbrk+0x68>)
 8001c0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c0e:	4b10      	ldr	r3, [pc, #64]	; (8001c50 <_sbrk+0x64>)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4413      	add	r3, r2
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d207      	bcs.n	8001c2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c1c:	f006 fa66 	bl	80080ec <__errno>
 8001c20:	4603      	mov	r3, r0
 8001c22:	220c      	movs	r2, #12
 8001c24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c26:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2a:	e009      	b.n	8001c40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c2c:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <_sbrk+0x64>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c32:	4b07      	ldr	r3, [pc, #28]	; (8001c50 <_sbrk+0x64>)
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4413      	add	r3, r2
 8001c3a:	4a05      	ldr	r2, [pc, #20]	; (8001c50 <_sbrk+0x64>)
 8001c3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3718      	adds	r7, #24
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20030000 	.word	0x20030000
 8001c4c:	00000400 	.word	0x00000400
 8001c50:	20000a80 	.word	0x20000a80
 8001c54:	20000e38 	.word	0x20000e38

08001c58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c5c:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <SystemInit+0x20>)
 8001c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c62:	4a05      	ldr	r2, [pc, #20]	; (8001c78 <SystemInit+0x20>)
 8001c64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c6c:	bf00      	nop
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	e000ed00 	.word	0xe000ed00

08001c7c <HAL_TIM_PeriodElapsedCallback>:
/*
 * desc: 타이머가 counter period를 채울 때마다 콜백되는 함수이다.
 * param1: 타이머 구조체
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
	static uint8_t WM_forward_backward = 0;

	// 1MHz로 분주되어 있는 TIM10이 10000번의 counter period를 채울때마다 콜백되어 변수들을 1씩 증가시킨다.(즉 10ms 타이머 기능을 함)
	if (htim->Instance == TIM10)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a1d      	ldr	r2, [pc, #116]	; (8001d00 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d131      	bne.n	8001cf2 <HAL_TIM_PeriodElapsedCallback+0x76>
	{
		TIM10_10ms_counter_ledbar++;
 8001c8e:	4b1d      	ldr	r3, [pc, #116]	; (8001d04 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	3301      	adds	r3, #1
 8001c94:	4a1b      	ldr	r2, [pc, #108]	; (8001d04 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001c96:	6013      	str	r3, [r2, #0]
		TIM10_10ms_counter_DHT11++;
 8001c98:	4b1b      	ldr	r3, [pc, #108]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	4a1a      	ldr	r2, [pc, #104]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001ca0:	6013      	str	r3, [r2, #0]
		TIM10_10ms_counter_ultrasonic++;
 8001ca2:	4b1a      	ldr	r3, [pc, #104]	; (8001d0c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	4a18      	ldr	r2, [pc, #96]	; (8001d0c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001caa:	6013      	str	r3, [r2, #0]
		TIM10_10ms_fan_auto_mode_remain_time_decrease++;
 8001cac:	4b18      	ldr	r3, [pc, #96]	; (8001d10 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	4a17      	ldr	r2, [pc, #92]	; (8001d10 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001cb4:	6013      	str	r3, [r2, #0]
		TIM10_10ms_fan_rotate_direction_led++;
 8001cb6:	4b17      	ldr	r3, [pc, #92]	; (8001d14 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	4a15      	ldr	r2, [pc, #84]	; (8001d14 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001cbe:	6013      	str	r3, [r2, #0]
		TIM10_10ms_fan_lcd_display_clear++;
 8001cc0:	4b15      	ldr	r3, [pc, #84]	; (8001d18 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	4a14      	ldr	r2, [pc, #80]	; (8001d18 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001cc8:	6013      	str	r3, [r2, #0]
		TIM10_10ms_dcmotor_activate_time++;
 8001cca:	4b14      	ldr	r3, [pc, #80]	; (8001d1c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	4a12      	ldr	r2, [pc, #72]	; (8001d1c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001cd2:	6013      	str	r3, [r2, #0]

		TIM10_10ms_WM_wash_timer++;
 8001cd4:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	4a11      	ldr	r2, [pc, #68]	; (8001d20 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001cdc:	6013      	str	r3, [r2, #0]
		TIM10_10ms_WM_rinse_timer++;
 8001cde:	4b11      	ldr	r3, [pc, #68]	; (8001d24 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	4a0f      	ldr	r2, [pc, #60]	; (8001d24 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001ce6:	6013      	str	r3, [r2, #0]
		TIM10_10ms_WM_spin_timer++;
 8001ce8:	4b0f      	ldr	r3, [pc, #60]	; (8001d28 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	3301      	adds	r3, #1
 8001cee:	4a0e      	ldr	r2, [pc, #56]	; (8001d28 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001cf0:	6013      	str	r3, [r2, #0]
	}
}
 8001cf2:	bf00      	nop
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	40014400 	.word	0x40014400
 8001d04:	20000a84 	.word	0x20000a84
 8001d08:	20000a88 	.word	0x20000a88
 8001d0c:	20000a8c 	.word	0x20000a8c
 8001d10:	20000a90 	.word	0x20000a90
 8001d14:	20000a94 	.word	0x20000a94
 8001d18:	20000a98 	.word	0x20000a98
 8001d1c:	20000a9c 	.word	0x20000a9c
 8001d20:	20000aa0 	.word	0x20000aa0
 8001d24:	20000aa4 	.word	0x20000aa4
 8001d28:	20000aa8 	.word	0x20000aa8

08001d2c <HAL_TIM_IC_CaptureCallback>:
/*
 * desc: Input Capture direct mode로 동작하는 타이머가 각 조건에 맞는 완료할때마다 콜백되는 함수이다.
 * param1: 타이머 구조체
 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
	// 초음파 센서의 ECHO핀와 연결되어 있는 TIM6가 상승edge 또는 하강edge 인풋을 캡쳐할 때마다 아래 동작을 실행한다.
	if (htim->Instance == TIM3)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a13      	ldr	r2, [pc, #76]	; (8001d88 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d11f      	bne.n	8001d7e <HAL_TIM_IC_CaptureCallback+0x52>
	{
		if (rising_falling_edge_capture_flag == 0) // 상승엣지 때문에 콜백 펑션에 들어온 경우
 8001d3e:	4b13      	ldr	r3, [pc, #76]	; (8001d8c <HAL_TIM_IC_CaptureCallback+0x60>)
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d107      	bne.n	8001d58 <HAL_TIM_IC_CaptureCallback+0x2c>
		{
			__HAL_TIM_SET_COUNTER(htim, 0); // 펄스를 셀 카운터를 초기화 하고 세기 시작하는 것이다.
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	625a      	str	r2, [r3, #36]	; 0x24
			rising_falling_edge_capture_flag = 1; // 다음에 콜백 펑선이 불릴 때는 당연히 하강 엣지일 때 일 것이므로 플래그변수를 1로 셋팅해준다.
 8001d50:	4b0e      	ldr	r3, [pc, #56]	; (8001d8c <HAL_TIM_IC_CaptureCallback+0x60>)
 8001d52:	2201      	movs	r2, #1
 8001d54:	701a      	strb	r2, [r3, #0]
			rising_falling_edge_capture_flag = 0; // 이제 다음 펄스를 또 카운트 하기 위해서 플래그 변수를 초기화 해준다.
			ultrasonic_distance = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // 상승엣지부터 하강엣지까지 펄스가 몇번 카운트 되었는지 그 값을 읽어온다.
			one_cycle_capture_finish_flag = 1; // 초음파 측정완료
		}
	}
}
 8001d56:	e012      	b.n	8001d7e <HAL_TIM_IC_CaptureCallback+0x52>
		else if (rising_falling_edge_capture_flag == 1) // 하강 엣지 때문에 콜백 펑션에 들어온 경우
 8001d58:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <HAL_TIM_IC_CaptureCallback+0x60>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d10d      	bne.n	8001d7e <HAL_TIM_IC_CaptureCallback+0x52>
			rising_falling_edge_capture_flag = 0; // 이제 다음 펄스를 또 카운트 하기 위해서 플래그 변수를 초기화 해준다.
 8001d62:	4b0a      	ldr	r3, [pc, #40]	; (8001d8c <HAL_TIM_IC_CaptureCallback+0x60>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	701a      	strb	r2, [r3, #0]
			ultrasonic_distance = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // 상승엣지부터 하강엣지까지 펄스가 몇번 카운트 되었는지 그 값을 읽어온다.
 8001d68:	2100      	movs	r1, #0
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f004 f918 	bl	8005fa0 <HAL_TIM_ReadCapturedValue>
 8001d70:	4603      	mov	r3, r0
 8001d72:	461a      	mov	r2, r3
 8001d74:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <HAL_TIM_IC_CaptureCallback+0x64>)
 8001d76:	601a      	str	r2, [r3, #0]
			one_cycle_capture_finish_flag = 1; // 초음파 측정완료
 8001d78:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <HAL_TIM_IC_CaptureCallback+0x68>)
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	701a      	strb	r2, [r3, #0]
}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40000400 	.word	0x40000400
 8001d8c:	20000ab1 	.word	0x20000ab1
 8001d90:	20000aac 	.word	0x20000aac
 8001d94:	20000ab0 	.word	0x20000ab0

08001d98 <HAL_UART_RxCpltCallback>:
 * desc: UART통신으로 MCU의 RX가 외부기기의 TX로부터 1데이터 프레임(1바이트)를 수신할 때마다 HW 인터럽트를 통해 콜백되어 실행되는 함수이다.
 *       (HW와 SW의 만나는 약속장소 = call back function)
 * param1: UART 구조체
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d98:	b590      	push	{r4, r7, lr}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
	// ComPortMaster의 TX를 통해 "ledallon\n"이 UART 통신으로 MCU의 RX로 송신되면,
	// MCU단에서는 1데이터 프레임(1바이트) 단위로 콜백 펑션이 호출되기 때문에 l, e, d, a, l, l, o, n, \n 하나하나에 이 콜백 펑션이 호출되는 것이다.
	if (huart == &huart3) // PC의 ComPortMaster와 연결된 huart3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a4c      	ldr	r2, [pc, #304]	; (8001ed4 <HAL_UART_RxCpltCallback+0x13c>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d160      	bne.n	8001e6a <HAL_UART_RxCpltCallback+0xd2>
	{
		if ((queue_rear+1)%QUEUE_MAX != queue_front)
 8001da8:	4b4b      	ldr	r3, [pc, #300]	; (8001ed8 <HAL_UART_RxCpltCallback+0x140>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	1c59      	adds	r1, r3, #1
 8001dae:	4b4b      	ldr	r3, [pc, #300]	; (8001edc <HAL_UART_RxCpltCallback+0x144>)
 8001db0:	fb83 2301 	smull	r2, r3, r3, r1
 8001db4:	10da      	asrs	r2, r3, #3
 8001db6:	17cb      	asrs	r3, r1, #31
 8001db8:	1ad2      	subs	r2, r2, r3
 8001dba:	4613      	mov	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	4413      	add	r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	1aca      	subs	r2, r1, r3
 8001dc4:	4b46      	ldr	r3, [pc, #280]	; (8001ee0 <HAL_UART_RxCpltCallback+0x148>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d049      	beq.n	8001e60 <HAL_UART_RxCpltCallback+0xc8>
		{
			if (rx_index < COMMAND_LENGTH)
 8001dcc:	4b45      	ldr	r3, [pc, #276]	; (8001ee4 <HAL_UART_RxCpltCallback+0x14c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2b27      	cmp	r3, #39	; 0x27
 8001dd2:	dc3f      	bgt.n	8001e54 <HAL_UART_RxCpltCallback+0xbc>
			{
				if (rx_data == '\n' || rx_data == '\r')
 8001dd4:	4b44      	ldr	r3, [pc, #272]	; (8001ee8 <HAL_UART_RxCpltCallback+0x150>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b0a      	cmp	r3, #10
 8001dda:	d003      	beq.n	8001de4 <HAL_UART_RxCpltCallback+0x4c>
 8001ddc:	4b42      	ldr	r3, [pc, #264]	; (8001ee8 <HAL_UART_RxCpltCallback+0x150>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	2b0d      	cmp	r3, #13
 8001de2:	d124      	bne.n	8001e2e <HAL_UART_RxCpltCallback+0x96>
				{
					rx_buff[queue_rear][rx_index] = '\0';
 8001de4:	4b3c      	ldr	r3, [pc, #240]	; (8001ed8 <HAL_UART_RxCpltCallback+0x140>)
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	4b3e      	ldr	r3, [pc, #248]	; (8001ee4 <HAL_UART_RxCpltCallback+0x14c>)
 8001dea:	6819      	ldr	r1, [r3, #0]
 8001dec:	483f      	ldr	r0, [pc, #252]	; (8001eec <HAL_UART_RxCpltCallback+0x154>)
 8001dee:	4613      	mov	r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	4413      	add	r3, r2
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	4403      	add	r3, r0
 8001df8:	440b      	add	r3, r1
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	701a      	strb	r2, [r3, #0]
					rx_index = 0;
 8001dfe:	4b39      	ldr	r3, [pc, #228]	; (8001ee4 <HAL_UART_RxCpltCallback+0x14c>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
					queue_rear++;
 8001e04:	4b34      	ldr	r3, [pc, #208]	; (8001ed8 <HAL_UART_RxCpltCallback+0x140>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	4a33      	ldr	r2, [pc, #204]	; (8001ed8 <HAL_UART_RxCpltCallback+0x140>)
 8001e0c:	6013      	str	r3, [r2, #0]
					queue_rear %= QUEUE_MAX;
 8001e0e:	4b32      	ldr	r3, [pc, #200]	; (8001ed8 <HAL_UART_RxCpltCallback+0x140>)
 8001e10:	6819      	ldr	r1, [r3, #0]
 8001e12:	4b32      	ldr	r3, [pc, #200]	; (8001edc <HAL_UART_RxCpltCallback+0x144>)
 8001e14:	fb83 2301 	smull	r2, r3, r3, r1
 8001e18:	10da      	asrs	r2, r3, #3
 8001e1a:	17cb      	asrs	r3, r1, #31
 8001e1c:	1ad2      	subs	r2, r2, r3
 8001e1e:	4613      	mov	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	1aca      	subs	r2, r1, r3
 8001e28:	4b2b      	ldr	r3, [pc, #172]	; (8001ed8 <HAL_UART_RxCpltCallback+0x140>)
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	e018      	b.n	8001e60 <HAL_UART_RxCpltCallback+0xc8>
				}
				else
				{
					rx_buff[queue_rear][rx_index++] = rx_data;
 8001e2e:	4b2a      	ldr	r3, [pc, #168]	; (8001ed8 <HAL_UART_RxCpltCallback+0x140>)
 8001e30:	6819      	ldr	r1, [r3, #0]
 8001e32:	4b2c      	ldr	r3, [pc, #176]	; (8001ee4 <HAL_UART_RxCpltCallback+0x14c>)
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	1c53      	adds	r3, r2, #1
 8001e38:	482a      	ldr	r0, [pc, #168]	; (8001ee4 <HAL_UART_RxCpltCallback+0x14c>)
 8001e3a:	6003      	str	r3, [r0, #0]
 8001e3c:	4b2a      	ldr	r3, [pc, #168]	; (8001ee8 <HAL_UART_RxCpltCallback+0x150>)
 8001e3e:	781c      	ldrb	r4, [r3, #0]
 8001e40:	482a      	ldr	r0, [pc, #168]	; (8001eec <HAL_UART_RxCpltCallback+0x154>)
 8001e42:	460b      	mov	r3, r1
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	440b      	add	r3, r1
 8001e48:	00db      	lsls	r3, r3, #3
 8001e4a:	4403      	add	r3, r0
 8001e4c:	4413      	add	r3, r2
 8001e4e:	4622      	mov	r2, r4
 8001e50:	701a      	strb	r2, [r3, #0]
 8001e52:	e005      	b.n	8001e60 <HAL_UART_RxCpltCallback+0xc8>
				}
			}
			else
			{
				rx_index = 0;
 8001e54:	4b23      	ldr	r3, [pc, #140]	; (8001ee4 <HAL_UART_RxCpltCallback+0x14c>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
				printf("Message Overflow !!!\n");
 8001e5a:	4825      	ldr	r0, [pc, #148]	; (8001ef0 <HAL_UART_RxCpltCallback+0x158>)
 8001e5c:	f006 f9fe 	bl	800825c <puts>
		{

		}

		// 주의: 반드시 HAL_UART_Receive_IT() 함수를 call 해줘야 다음 인터럽트가 이어서 발생이 가능해진다.
		HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 8001e60:	2201      	movs	r2, #1
 8001e62:	4921      	ldr	r1, [pc, #132]	; (8001ee8 <HAL_UART_RxCpltCallback+0x150>)
 8001e64:	481b      	ldr	r0, [pc, #108]	; (8001ed4 <HAL_UART_RxCpltCallback+0x13c>)
 8001e66:	f004 fea6 	bl	8006bb6 <HAL_UART_Receive_IT>
	}

	if (huart == &huart6) // Bluetooth와 연결된 huart6
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a21      	ldr	r2, [pc, #132]	; (8001ef4 <HAL_UART_RxCpltCallback+0x15c>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d12c      	bne.n	8001ecc <HAL_UART_RxCpltCallback+0x134>
	{
		if (bt_rx_index < COMMAND_LENGTH) // 현재까지 들어온 byte가 40byte를 넘지 않으면
 8001e72:	4b21      	ldr	r3, [pc, #132]	; (8001ef8 <HAL_UART_RxCpltCallback+0x160>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2b27      	cmp	r3, #39	; 0x27
 8001e78:	dc1d      	bgt.n	8001eb6 <HAL_UART_RxCpltCallback+0x11e>
		{
			if(bt_rx_data == '\n' || bt_rx_data == '\r')
 8001e7a:	4b20      	ldr	r3, [pc, #128]	; (8001efc <HAL_UART_RxCpltCallback+0x164>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	2b0a      	cmp	r3, #10
 8001e80:	d003      	beq.n	8001e8a <HAL_UART_RxCpltCallback+0xf2>
 8001e82:	4b1e      	ldr	r3, [pc, #120]	; (8001efc <HAL_UART_RxCpltCallback+0x164>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2b0d      	cmp	r3, #13
 8001e88:	d10b      	bne.n	8001ea2 <HAL_UART_RxCpltCallback+0x10a>
			{
				bt_rx_buff[bt_rx_index] = 0; // '\0'
 8001e8a:	4b1b      	ldr	r3, [pc, #108]	; (8001ef8 <HAL_UART_RxCpltCallback+0x160>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a1c      	ldr	r2, [pc, #112]	; (8001f00 <HAL_UART_RxCpltCallback+0x168>)
 8001e90:	2100      	movs	r1, #0
 8001e92:	54d1      	strb	r1, [r2, r3]
				bt_newline_detect_flag = 1;
 8001e94:	4b1b      	ldr	r3, [pc, #108]	; (8001f04 <HAL_UART_RxCpltCallback+0x16c>)
 8001e96:	2201      	movs	r2, #1
 8001e98:	701a      	strb	r2, [r3, #0]
				bt_rx_index = 0; // 다음 메시지 저장을 위해서 rx_index값을 0으로 한다.
 8001e9a:	4b17      	ldr	r3, [pc, #92]	; (8001ef8 <HAL_UART_RxCpltCallback+0x160>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	e00f      	b.n	8001ec2 <HAL_UART_RxCpltCallback+0x12a>
			}
			else
			{
				bt_rx_buff[bt_rx_index++] = bt_rx_data;
 8001ea2:	4b15      	ldr	r3, [pc, #84]	; (8001ef8 <HAL_UART_RxCpltCallback+0x160>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	1c5a      	adds	r2, r3, #1
 8001ea8:	4913      	ldr	r1, [pc, #76]	; (8001ef8 <HAL_UART_RxCpltCallback+0x160>)
 8001eaa:	600a      	str	r2, [r1, #0]
 8001eac:	4a13      	ldr	r2, [pc, #76]	; (8001efc <HAL_UART_RxCpltCallback+0x164>)
 8001eae:	7811      	ldrb	r1, [r2, #0]
 8001eb0:	4a13      	ldr	r2, [pc, #76]	; (8001f00 <HAL_UART_RxCpltCallback+0x168>)
 8001eb2:	54d1      	strb	r1, [r2, r3]
 8001eb4:	e005      	b.n	8001ec2 <HAL_UART_RxCpltCallback+0x12a>
			}
		}
		else
		{
			bt_rx_index = 0;
 8001eb6:	4b10      	ldr	r3, [pc, #64]	; (8001ef8 <HAL_UART_RxCpltCallback+0x160>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
			printf("Message Overflow !!!\n");
 8001ebc:	480c      	ldr	r0, [pc, #48]	; (8001ef0 <HAL_UART_RxCpltCallback+0x158>)
 8001ebe:	f006 f9cd 	bl	800825c <puts>
		}

		// 주의: 반드시 HAL_UART_Receive_IT() 함수를 call 해줘야 다음 인터럽트가 이어서 발생이 가능해진다.
		HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1);
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	490d      	ldr	r1, [pc, #52]	; (8001efc <HAL_UART_RxCpltCallback+0x164>)
 8001ec6:	480b      	ldr	r0, [pc, #44]	; (8001ef4 <HAL_UART_RxCpltCallback+0x15c>)
 8001ec8:	f004 fe75 	bl	8006bb6 <HAL_UART_Receive_IT>
	}
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd90      	pop	{r4, r7, pc}
 8001ed4:	200004e4 	.word	0x200004e4
 8001ed8:	20000dd8 	.word	0x20000dd8
 8001edc:	66666667 	.word	0x66666667
 8001ee0:	20000dd4 	.word	0x20000dd4
 8001ee4:	20000ddc 	.word	0x20000ddc
 8001ee8:	20000e0d 	.word	0x20000e0d
 8001eec:	20000ab4 	.word	0x20000ab4
 8001ef0:	08009538 	.word	0x08009538
 8001ef4:	20000528 	.word	0x20000528
 8001ef8:	20000e08 	.word	0x20000e08
 8001efc:	20000e0e 	.word	0x20000e0e
 8001f00:	20000de0 	.word	0x20000de0
 8001f04:	20000e0c 	.word	0x20000e0c

08001f08 <WashingMachine_Init>:

/*
 * desc: 세탁기 프로그램 구동에 필요한 H/W를 켠다.
 */
void WashingMachine_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // 세탁기 뚜껑 개폐용 SERVO motor 구동하기 위해 필요
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	4810      	ldr	r0, [pc, #64]	; (8001f50 <WashingMachine_Init+0x48>)
 8001f10:	f003 f9c2 	bl	8005298 <HAL_TIM_PWM_Start>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1); // 세탁기 뚜껑 개폐 상태 확인하는 초음파센서 활용하기 위해 필요
 8001f14:	2100      	movs	r1, #0
 8001f16:	480f      	ldr	r0, [pc, #60]	; (8001f54 <WashingMachine_Init+0x4c>)
 8001f18:	f003 fbec 	bl	80056f4 <HAL_TIM_IC_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1); // 드럼통 동작용 DC motor 구동하기 위해 필요
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	480e      	ldr	r0, [pc, #56]	; (8001f58 <WashingMachine_Init+0x50>)
 8001f20:	f003 fa82 	bl	8005428 <HAL_TIM_PWM_Start_IT>
//	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4); // 세탁, 헹굼, 탈수 동작완료 안내 부저 작동을 위해 필요
	HAL_TIM_Base_Start_IT(&htim10); // 다수의 10ms 타이머 활옹하기 위해 필요
 8001f24:	480d      	ldr	r0, [pc, #52]	; (8001f5c <WashingMachine_Init+0x54>)
 8001f26:	f003 f8f7 	bl	8005118 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim11); // DHT11센서에서 delay_us() 함수가 올바르게 작동해야 하므로 필요
 8001f2a:	480d      	ldr	r0, [pc, #52]	; (8001f60 <WashingMachine_Init+0x58>)
 8001f2c:	f003 f8f4 	bl	8005118 <HAL_TIM_Base_Start_IT>
	DHT11_Init(); // 탈수 완료 여부 확인하는 온습도 센서 활용하기 위해 필요
 8001f30:	f7fe fb30 	bl	8000594 <DHT11_Init>
	I2C_LCD_Init(); // 세탁기 상태 보여주는 LCD 활용하기 위해 필요
 8001f34:	f7fe fba6 	bl	8000684 <I2C_LCD_Init>

	HAL_UART_Receive_IT(&huart3, &rx_data, 1); // activate interrupt from RX huart3
 8001f38:	2201      	movs	r2, #1
 8001f3a:	490a      	ldr	r1, [pc, #40]	; (8001f64 <WashingMachine_Init+0x5c>)
 8001f3c:	480a      	ldr	r0, [pc, #40]	; (8001f68 <WashingMachine_Init+0x60>)
 8001f3e:	f004 fe3a 	bl	8006bb6 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1); // activate interrupt from RX huart6
 8001f42:	2201      	movs	r2, #1
 8001f44:	4909      	ldr	r1, [pc, #36]	; (8001f6c <WashingMachine_Init+0x64>)
 8001f46:	480a      	ldr	r0, [pc, #40]	; (8001f70 <WashingMachine_Init+0x68>)
 8001f48:	f004 fe35 	bl	8006bb6 <HAL_UART_Receive_IT>
}
 8001f4c:	bf00      	nop
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	20000334 	.word	0x20000334
 8001f54:	2000037c 	.word	0x2000037c
 8001f58:	200003c4 	.word	0x200003c4
 8001f5c:	20000454 	.word	0x20000454
 8001f60:	2000049c 	.word	0x2000049c
 8001f64:	20000e0d 	.word	0x20000e0d
 8001f68:	200004e4 	.word	0x200004e4
 8001f6c:	20000e0e 	.word	0x20000e0e
 8001f70:	20000528 	.word	0x20000528

08001f74 <WashingMachine_Processing>:

/*
 * desc: 세탁기 프로그램의 메인 동작을 결정하는 함수이다.
 */
void WashingMachine_Processing(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
	// 현재 세탁기 상태에 맞는 디스플레이 출력
	WashingMachine_LCD_Display();
 8001f78:	f000 fa0a 	bl	8002390 <WashingMachine_LCD_Display>

	switch (WashingMachine_curr_status)
 8001f7c:	4b0f      	ldr	r3, [pc, #60]	; (8001fbc <WashingMachine_Processing+0x48>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	2b03      	cmp	r3, #3
 8001f82:	d817      	bhi.n	8001fb4 <WashingMachine_Processing+0x40>
 8001f84:	a201      	add	r2, pc, #4	; (adr r2, 8001f8c <WashingMachine_Processing+0x18>)
 8001f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f8a:	bf00      	nop
 8001f8c:	08001f9d 	.word	0x08001f9d
 8001f90:	08001fa3 	.word	0x08001fa3
 8001f94:	08001fa9 	.word	0x08001fa9
 8001f98:	08001faf 	.word	0x08001faf
	{
		case IDLE_MODE:
			Idle_Mode_Laundry();
 8001f9c:	f000 f810 	bl	8001fc0 <Idle_Mode_Laundry>
			break;
 8001fa0:	e009      	b.n	8001fb6 <WashingMachine_Processing+0x42>

		case WASH_MODE:
			Wash_Mode_Laundry();
 8001fa2:	f000 f83f 	bl	8002024 <Wash_Mode_Laundry>
			break;
 8001fa6:	e006      	b.n	8001fb6 <WashingMachine_Processing+0x42>

		case RINSE_MODE:
			Rinse_Mode_Laundry();
 8001fa8:	f000 f8d0 	bl	800214c <Rinse_Mode_Laundry>
			break;
 8001fac:	e003      	b.n	8001fb6 <WashingMachine_Processing+0x42>

		case SPIN_MODE:
			Spin_Mode_Laundry();
 8001fae:	f000 f94d 	bl	800224c <Spin_Mode_Laundry>
			break;
 8001fb2:	e000      	b.n	8001fb6 <WashingMachine_Processing+0x42>

		default:
			break;
 8001fb4:	bf00      	nop
	}
}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000e0f 	.word	0x20000e0f

08001fc0 <Idle_Mode_Laundry>:

/*
 * desc:
 */
static void Idle_Mode_Laundry(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
	open_WashingMachine_Lid();
 8001fc4:	f7ff f95a 	bl	800127c <open_WashingMachine_Lid>
	WashingMachine_LCD_Display();
 8001fc8:	f000 f9e2 	bl	8002390 <WashingMachine_LCD_Display>
	DCmotor_Break();
 8001fcc:	f7fe fbfc 	bl	80007c8 <DCmotor_Break>

	if (Get_Button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fd6:	4811      	ldr	r0, [pc, #68]	; (800201c <Idle_Mode_Laundry+0x5c>)
 8001fd8:	f7fe fb9a 	bl	8000710 <Get_Button>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d102      	bne.n	8001fe8 <Idle_Mode_Laundry+0x28>
	{
		WashingMachine_curr_status = WASH_MODE;
 8001fe2:	4b0f      	ldr	r3, [pc, #60]	; (8002020 <Idle_Mode_Laundry+0x60>)
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	701a      	strb	r2, [r3, #0]
	}
	if (Get_Button(BUTTON1_GPIO_Port, BUTTON1_Pin, 1) == BUTTON_PRESS)
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fee:	480b      	ldr	r0, [pc, #44]	; (800201c <Idle_Mode_Laundry+0x5c>)
 8001ff0:	f7fe fb8e 	bl	8000710 <Get_Button>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d102      	bne.n	8002000 <Idle_Mode_Laundry+0x40>
	{
		WashingMachine_curr_status = RINSE_MODE;
 8001ffa:	4b09      	ldr	r3, [pc, #36]	; (8002020 <Idle_Mode_Laundry+0x60>)
 8001ffc:	2202      	movs	r2, #2
 8001ffe:	701a      	strb	r2, [r3, #0]
	}
	if (Get_Button(BUTTON2_GPIO_Port, BUTTON2_Pin, 2) == BUTTON_PRESS)
 8002000:	2202      	movs	r2, #2
 8002002:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002006:	4805      	ldr	r0, [pc, #20]	; (800201c <Idle_Mode_Laundry+0x5c>)
 8002008:	f7fe fb82 	bl	8000710 <Get_Button>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d102      	bne.n	8002018 <Idle_Mode_Laundry+0x58>
	{
		WashingMachine_curr_status = SPIN_MODE;
 8002012:	4b03      	ldr	r3, [pc, #12]	; (8002020 <Idle_Mode_Laundry+0x60>)
 8002014:	2203      	movs	r2, #3
 8002016:	701a      	strb	r2, [r3, #0]
	}


}
 8002018:	bf00      	nop
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40021000 	.word	0x40021000
 8002020:	20000e0f 	.word	0x20000e0f

08002024 <Wash_Mode_Laundry>:
/*
 * desc: "세탁/헹굼/탈수" 중 "세탁"에 관련된 동작을 실행하는 함수이다.
 *       세탁모드에서 드럼통 모터는 70%의 고정 duty cycle 출력으로 작동한다.
 */
static void Wash_Mode_Laundry(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
	static uint32_t wash_remain_time = 0;
	static uint8_t dcmotor_forward_backward_flag = 0;

printf("wash_remain_time: %d\n", wash_remain_time);
 8002028:	4b3f      	ldr	r3, [pc, #252]	; (8002128 <Wash_Mode_Laundry+0x104>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4619      	mov	r1, r3
 800202e:	483f      	ldr	r0, [pc, #252]	; (800212c <Wash_Mode_Laundry+0x108>)
 8002030:	f006 f88e 	bl	8008150 <iprintf>
printf("wash_mode_start_stop_flag: %d\n", wash_mode_start_stop_flag);
 8002034:	4b3e      	ldr	r3, [pc, #248]	; (8002130 <Wash_Mode_Laundry+0x10c>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	4619      	mov	r1, r3
 800203a:	483e      	ldr	r0, [pc, #248]	; (8002134 <Wash_Mode_Laundry+0x110>)
 800203c:	f006 f888 	bl	8008150 <iprintf>

	close_WashingMachine_Lid();
 8002040:	f7ff f92a 	bl	8001298 <close_WashingMachine_Lid>

	/************************BEGIN 기본 동작 부분************************/
	if (wash_mode_start_stop_flag == STOP)
 8002044:	4b3a      	ldr	r3, [pc, #232]	; (8002130 <Wash_Mode_Laundry+0x10c>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d102      	bne.n	8002052 <Wash_Mode_Laundry+0x2e>
	{
		DCmotor_Break();
 800204c:	f7fe fbbc 	bl	80007c8 <DCmotor_Break>
 8002050:	e02d      	b.n	80020ae <Wash_Mode_Laundry+0x8a>
	}
	else if (wash_mode_start_stop_flag == START && wash_remain_time > 0)
 8002052:	4b37      	ldr	r3, [pc, #220]	; (8002130 <Wash_Mode_Laundry+0x10c>)
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d124      	bne.n	80020a4 <Wash_Mode_Laundry+0x80>
 800205a:	4b33      	ldr	r3, [pc, #204]	; (8002128 <Wash_Mode_Laundry+0x104>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d020      	beq.n	80020a4 <Wash_Mode_Laundry+0x80>
	{
		// 남은시간은 자동으로 1초씩 감소
		if (TIM10_10ms_WM_wash_timer > 100)
 8002062:	4b35      	ldr	r3, [pc, #212]	; (8002138 <Wash_Mode_Laundry+0x114>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2b64      	cmp	r3, #100	; 0x64
 8002068:	d912      	bls.n	8002090 <Wash_Mode_Laundry+0x6c>
		{
			TIM10_10ms_WM_wash_timer = 0;
 800206a:	4b33      	ldr	r3, [pc, #204]	; (8002138 <Wash_Mode_Laundry+0x114>)
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
			wash_remain_time--;
 8002070:	4b2d      	ldr	r3, [pc, #180]	; (8002128 <Wash_Mode_Laundry+0x104>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	3b01      	subs	r3, #1
 8002076:	4a2c      	ldr	r2, [pc, #176]	; (8002128 <Wash_Mode_Laundry+0x104>)
 8002078:	6013      	str	r3, [r2, #0]
			if (wash_remain_time < 0) {wash_remain_time = 0;}

			if (dcmotor_forward_backward_flag == 0)
 800207a:	4b30      	ldr	r3, [pc, #192]	; (800213c <Wash_Mode_Laundry+0x118>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d103      	bne.n	800208a <Wash_Mode_Laundry+0x66>
			{
				dcmotor_forward_backward_flag = 1;
 8002082:	4b2e      	ldr	r3, [pc, #184]	; (800213c <Wash_Mode_Laundry+0x118>)
 8002084:	2201      	movs	r2, #1
 8002086:	701a      	strb	r2, [r3, #0]
 8002088:	e002      	b.n	8002090 <Wash_Mode_Laundry+0x6c>
			}
			else
			{
				dcmotor_forward_backward_flag = 0;
 800208a:	4b2c      	ldr	r3, [pc, #176]	; (800213c <Wash_Mode_Laundry+0x118>)
 800208c:	2200      	movs	r2, #0
 800208e:	701a      	strb	r2, [r3, #0]
			}
		}

		// 세탁모드에서 드럼통을 앞뒤로 흔들어주기 위해서..
		if (dcmotor_forward_backward_flag == 0)
 8002090:	4b2a      	ldr	r3, [pc, #168]	; (800213c <Wash_Mode_Laundry+0x118>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d102      	bne.n	800209e <Wash_Mode_Laundry+0x7a>
		{
			DCmotor_Forward_Rotate();
 8002098:	f7fe fb72 	bl	8000780 <DCmotor_Forward_Rotate>
		if (dcmotor_forward_backward_flag == 0)
 800209c:	e007      	b.n	80020ae <Wash_Mode_Laundry+0x8a>
		}
		else
		{
			DCmotor_Backward_Rotate();
 800209e:	f7fe fb81 	bl	80007a4 <DCmotor_Backward_Rotate>
		if (dcmotor_forward_backward_flag == 0)
 80020a2:	e004      	b.n	80020ae <Wash_Mode_Laundry+0x8a>
		}
	}
	else // 플래그는 start이지만 남은시간이 0이하가 된 경우 여기로 빠짐
	{
		DCmotor_Break();
 80020a4:	f7fe fb90 	bl	80007c8 <DCmotor_Break>
		wash_mode_start_stop_flag = STOP;
 80020a8:	4b21      	ldr	r3, [pc, #132]	; (8002130 <Wash_Mode_Laundry+0x10c>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	701a      	strb	r2, [r3, #0]
	}
	/************************END 기본 동작 부분************************/

	/************************BEGIN 버튼 입력 인터럽트 부분************************/
	// 세탁에 소요할 시간을 10초 증가시킨다.
	if (Get_Button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)
 80020ae:	2200      	movs	r2, #0
 80020b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020b4:	4822      	ldr	r0, [pc, #136]	; (8002140 <Wash_Mode_Laundry+0x11c>)
 80020b6:	f7fe fb2b 	bl	8000710 <Get_Button>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d104      	bne.n	80020ca <Wash_Mode_Laundry+0xa6>
	{
		wash_remain_time += 10;
 80020c0:	4b19      	ldr	r3, [pc, #100]	; (8002128 <Wash_Mode_Laundry+0x104>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	330a      	adds	r3, #10
 80020c6:	4a18      	ldr	r2, [pc, #96]	; (8002128 <Wash_Mode_Laundry+0x104>)
 80020c8:	6013      	str	r3, [r2, #0]
	}

	// 세탁에 소요할 시간을 10초 감소시킨다.
	if (Get_Button(BUTTON1_GPIO_Port, BUTTON1_Pin, 1) == BUTTON_PRESS)
 80020ca:	2201      	movs	r2, #1
 80020cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020d0:	481b      	ldr	r0, [pc, #108]	; (8002140 <Wash_Mode_Laundry+0x11c>)
 80020d2:	f7fe fb1d 	bl	8000710 <Get_Button>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d104      	bne.n	80020e6 <Wash_Mode_Laundry+0xc2>
	{
		wash_remain_time -= 10;
 80020dc:	4b12      	ldr	r3, [pc, #72]	; (8002128 <Wash_Mode_Laundry+0x104>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	3b0a      	subs	r3, #10
 80020e2:	4a11      	ldr	r2, [pc, #68]	; (8002128 <Wash_Mode_Laundry+0x104>)
 80020e4:	6013      	str	r3, [r2, #0]
		if (wash_remain_time < 0) {wash_remain_time = 0;}
	}

	// 동작 시간을 설정 완료했다면, 세탁기 구동을 시작한다.
	if (Get_Button(BUTTON2_GPIO_Port, BUTTON2_Pin, 2) == BUTTON_PRESS)
 80020e6:	2202      	movs	r2, #2
 80020e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020ec:	4814      	ldr	r0, [pc, #80]	; (8002140 <Wash_Mode_Laundry+0x11c>)
 80020ee:	f7fe fb0f 	bl	8000710 <Get_Button>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d102      	bne.n	80020fe <Wash_Mode_Laundry+0xda>
	{
		wash_mode_start_stop_flag = START;
 80020f8:	4b0d      	ldr	r3, [pc, #52]	; (8002130 <Wash_Mode_Laundry+0x10c>)
 80020fa:	2201      	movs	r2, #1
 80020fc:	701a      	strb	r2, [r3, #0]
	}

	// 세탁 모드를 즉시 중지하고 세탁모드를 초기화해준다.
	if (Get_Button(BUTTON4_GPIO_Port, BUTTON4_Pin, 4) == BUTTON_PRESS)
 80020fe:	2204      	movs	r2, #4
 8002100:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002104:	480f      	ldr	r0, [pc, #60]	; (8002144 <Wash_Mode_Laundry+0x120>)
 8002106:	f7fe fb03 	bl	8000710 <Get_Button>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d108      	bne.n	8002122 <Wash_Mode_Laundry+0xfe>
	{
		WashingMachine_curr_status = IDLE_MODE;
 8002110:	4b0d      	ldr	r3, [pc, #52]	; (8002148 <Wash_Mode_Laundry+0x124>)
 8002112:	2200      	movs	r2, #0
 8002114:	701a      	strb	r2, [r3, #0]
		wash_mode_start_stop_flag = STOP;
 8002116:	4b06      	ldr	r3, [pc, #24]	; (8002130 <Wash_Mode_Laundry+0x10c>)
 8002118:	2200      	movs	r2, #0
 800211a:	701a      	strb	r2, [r3, #0]
		wash_remain_time = 0;
 800211c:	4b02      	ldr	r3, [pc, #8]	; (8002128 <Wash_Mode_Laundry+0x104>)
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]
	}
	/************************END 버튼 입력 인터럽트 부분************************/
}
 8002122:	bf00      	nop
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	20000e14 	.word	0x20000e14
 800212c:	08009608 	.word	0x08009608
 8002130:	20000e10 	.word	0x20000e10
 8002134:	08009620 	.word	0x08009620
 8002138:	20000aa0 	.word	0x20000aa0
 800213c:	20000e18 	.word	0x20000e18
 8002140:	40021000 	.word	0x40021000
 8002144:	40020400 	.word	0x40020400
 8002148:	20000e0f 	.word	0x20000e0f

0800214c <Rinse_Mode_Laundry>:

/*
 * desc: "세탁/헹굼/탈수" 중 "헹굼"에 관련된 동작을 실행하는 함수이다.
 */
static void Rinse_Mode_Laundry(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
	static uint32_t rinse_remain_time = 0;

printf("rinse_remain_time: %d\n", rinse_remain_time);
 8002150:	4b36      	ldr	r3, [pc, #216]	; (800222c <Rinse_Mode_Laundry+0xe0>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4619      	mov	r1, r3
 8002156:	4836      	ldr	r0, [pc, #216]	; (8002230 <Rinse_Mode_Laundry+0xe4>)
 8002158:	f005 fffa 	bl	8008150 <iprintf>
printf("rinse_mode_start_stop_flag: %d\n", rinse_mode_start_stop_flag);
 800215c:	4b35      	ldr	r3, [pc, #212]	; (8002234 <Rinse_Mode_Laundry+0xe8>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	4619      	mov	r1, r3
 8002162:	4835      	ldr	r0, [pc, #212]	; (8002238 <Rinse_Mode_Laundry+0xec>)
 8002164:	f005 fff4 	bl	8008150 <iprintf>

	close_WashingMachine_Lid();
 8002168:	f7ff f896 	bl	8001298 <close_WashingMachine_Lid>

	if (rinse_mode_start_stop_flag == STOP)
 800216c:	4b31      	ldr	r3, [pc, #196]	; (8002234 <Rinse_Mode_Laundry+0xe8>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d102      	bne.n	800217a <Rinse_Mode_Laundry+0x2e>
	{
		DCmotor_Break();
 8002174:	f7fe fb28 	bl	80007c8 <DCmotor_Break>
 8002178:	e01b      	b.n	80021b2 <Rinse_Mode_Laundry+0x66>
	}
	else if (rinse_mode_start_stop_flag == START && rinse_remain_time > 0)
 800217a:	4b2e      	ldr	r3, [pc, #184]	; (8002234 <Rinse_Mode_Laundry+0xe8>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d112      	bne.n	80021a8 <Rinse_Mode_Laundry+0x5c>
 8002182:	4b2a      	ldr	r3, [pc, #168]	; (800222c <Rinse_Mode_Laundry+0xe0>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00e      	beq.n	80021a8 <Rinse_Mode_Laundry+0x5c>
	{
		// 남은시간은 자동으로 1초씩 감소
		if (TIM10_10ms_WM_rinse_timer > 100)
 800218a:	4b2c      	ldr	r3, [pc, #176]	; (800223c <Rinse_Mode_Laundry+0xf0>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2b64      	cmp	r3, #100	; 0x64
 8002190:	d907      	bls.n	80021a2 <Rinse_Mode_Laundry+0x56>
		{
			TIM10_10ms_WM_rinse_timer = 0;
 8002192:	4b2a      	ldr	r3, [pc, #168]	; (800223c <Rinse_Mode_Laundry+0xf0>)
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
			rinse_remain_time--;
 8002198:	4b24      	ldr	r3, [pc, #144]	; (800222c <Rinse_Mode_Laundry+0xe0>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	3b01      	subs	r3, #1
 800219e:	4a23      	ldr	r2, [pc, #140]	; (800222c <Rinse_Mode_Laundry+0xe0>)
 80021a0:	6013      	str	r3, [r2, #0]
			if (rinse_remain_time < 0) {rinse_remain_time = 0;}
		}

		DCmotor_Forward_Rotate();
 80021a2:	f7fe faed 	bl	8000780 <DCmotor_Forward_Rotate>
 80021a6:	e004      	b.n	80021b2 <Rinse_Mode_Laundry+0x66>
	}
	else // 플래그는 start이지만 남은시간이 0이하가 된 경우 여기로 빠짐
	{
		DCmotor_Break();
 80021a8:	f7fe fb0e 	bl	80007c8 <DCmotor_Break>
		rinse_mode_start_stop_flag = STOP;
 80021ac:	4b21      	ldr	r3, [pc, #132]	; (8002234 <Rinse_Mode_Laundry+0xe8>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	701a      	strb	r2, [r3, #0]
	}


	/************************BEGIN 버튼 입력 인터럽트 부분************************/
	// 세탁에 소요할 시간을 10초 증가시킨다.
	if (Get_Button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)
 80021b2:	2200      	movs	r2, #0
 80021b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021b8:	4821      	ldr	r0, [pc, #132]	; (8002240 <Rinse_Mode_Laundry+0xf4>)
 80021ba:	f7fe faa9 	bl	8000710 <Get_Button>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d104      	bne.n	80021ce <Rinse_Mode_Laundry+0x82>
	{
		rinse_remain_time += 10;
 80021c4:	4b19      	ldr	r3, [pc, #100]	; (800222c <Rinse_Mode_Laundry+0xe0>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	330a      	adds	r3, #10
 80021ca:	4a18      	ldr	r2, [pc, #96]	; (800222c <Rinse_Mode_Laundry+0xe0>)
 80021cc:	6013      	str	r3, [r2, #0]
	}

	// 세탁에 소요할 시간을 10초 감소시킨다.
	if (Get_Button(BUTTON1_GPIO_Port, BUTTON1_Pin, 1) == BUTTON_PRESS)
 80021ce:	2201      	movs	r2, #1
 80021d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021d4:	481a      	ldr	r0, [pc, #104]	; (8002240 <Rinse_Mode_Laundry+0xf4>)
 80021d6:	f7fe fa9b 	bl	8000710 <Get_Button>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d104      	bne.n	80021ea <Rinse_Mode_Laundry+0x9e>
	{
		rinse_remain_time -= 10;
 80021e0:	4b12      	ldr	r3, [pc, #72]	; (800222c <Rinse_Mode_Laundry+0xe0>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	3b0a      	subs	r3, #10
 80021e6:	4a11      	ldr	r2, [pc, #68]	; (800222c <Rinse_Mode_Laundry+0xe0>)
 80021e8:	6013      	str	r3, [r2, #0]
		if (rinse_remain_time < 0) {rinse_remain_time = 0;}
	}

	// 동작 시간을 설정 완료했다면, 세탁기 구동을 시작한다.
	if (Get_Button(BUTTON2_GPIO_Port, BUTTON2_Pin, 2) == BUTTON_PRESS)
 80021ea:	2202      	movs	r2, #2
 80021ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021f0:	4813      	ldr	r0, [pc, #76]	; (8002240 <Rinse_Mode_Laundry+0xf4>)
 80021f2:	f7fe fa8d 	bl	8000710 <Get_Button>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d102      	bne.n	8002202 <Rinse_Mode_Laundry+0xb6>
	{
		rinse_mode_start_stop_flag = START;
 80021fc:	4b0d      	ldr	r3, [pc, #52]	; (8002234 <Rinse_Mode_Laundry+0xe8>)
 80021fe:	2201      	movs	r2, #1
 8002200:	701a      	strb	r2, [r3, #0]
	}

	// 세탁 모드를 즉시 중지하고 세탁모드를 초기화해준다.
	if (Get_Button(BUTTON4_GPIO_Port, BUTTON4_Pin, 4) == BUTTON_PRESS)
 8002202:	2204      	movs	r2, #4
 8002204:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002208:	480e      	ldr	r0, [pc, #56]	; (8002244 <Rinse_Mode_Laundry+0xf8>)
 800220a:	f7fe fa81 	bl	8000710 <Get_Button>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d108      	bne.n	8002226 <Rinse_Mode_Laundry+0xda>
	{
		WashingMachine_curr_status = IDLE_MODE;
 8002214:	4b0c      	ldr	r3, [pc, #48]	; (8002248 <Rinse_Mode_Laundry+0xfc>)
 8002216:	2200      	movs	r2, #0
 8002218:	701a      	strb	r2, [r3, #0]
		rinse_mode_start_stop_flag = STOP;
 800221a:	4b06      	ldr	r3, [pc, #24]	; (8002234 <Rinse_Mode_Laundry+0xe8>)
 800221c:	2200      	movs	r2, #0
 800221e:	701a      	strb	r2, [r3, #0]
		rinse_remain_time = 0;
 8002220:	4b02      	ldr	r3, [pc, #8]	; (800222c <Rinse_Mode_Laundry+0xe0>)
 8002222:	2200      	movs	r2, #0
 8002224:	601a      	str	r2, [r3, #0]
	}
	/************************END 버튼 입력 인터럽트 부분************************/
}
 8002226:	bf00      	nop
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	20000e1c 	.word	0x20000e1c
 8002230:	08009640 	.word	0x08009640
 8002234:	20000e11 	.word	0x20000e11
 8002238:	08009658 	.word	0x08009658
 800223c:	20000aa4 	.word	0x20000aa4
 8002240:	40021000 	.word	0x40021000
 8002244:	40020400 	.word	0x40020400
 8002248:	20000e0f 	.word	0x20000e0f

0800224c <Spin_Mode_Laundry>:

/*
 * desc: "세탁/헹굼/탈수" 중 "탈수"에 관련된 동작을 실행하는 함수이다.
 */
static void Spin_Mode_Laundry(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
	static uint32_t spin_remain_time = 0;
	static uint16_t dcmotor_duty_cycle = 30;

printf("spin_remain_time: %d\n", spin_remain_time);
 8002250:	4b45      	ldr	r3, [pc, #276]	; (8002368 <Spin_Mode_Laundry+0x11c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4619      	mov	r1, r3
 8002256:	4845      	ldr	r0, [pc, #276]	; (800236c <Spin_Mode_Laundry+0x120>)
 8002258:	f005 ff7a 	bl	8008150 <iprintf>
printf("spin_mode_start_stop_flag: %d\n", spin_mode_start_stop_flag);
 800225c:	4b44      	ldr	r3, [pc, #272]	; (8002370 <Spin_Mode_Laundry+0x124>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	4619      	mov	r1, r3
 8002262:	4844      	ldr	r0, [pc, #272]	; (8002374 <Spin_Mode_Laundry+0x128>)
 8002264:	f005 ff74 	bl	8008150 <iprintf>
printf("dcmotor_duty_cycle: %d\n", dcmotor_duty_cycle);
 8002268:	4b43      	ldr	r3, [pc, #268]	; (8002378 <Spin_Mode_Laundry+0x12c>)
 800226a:	881b      	ldrh	r3, [r3, #0]
 800226c:	4619      	mov	r1, r3
 800226e:	4843      	ldr	r0, [pc, #268]	; (800237c <Spin_Mode_Laundry+0x130>)
 8002270:	f005 ff6e 	bl	8008150 <iprintf>

	close_WashingMachine_Lid();
 8002274:	f7ff f810 	bl	8001298 <close_WashingMachine_Lid>

	if (spin_mode_start_stop_flag == STOP)
 8002278:	4b3d      	ldr	r3, [pc, #244]	; (8002370 <Spin_Mode_Laundry+0x124>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d102      	bne.n	8002286 <Spin_Mode_Laundry+0x3a>
	{
		DCmotor_Break();
 8002280:	f7fe faa2 	bl	80007c8 <DCmotor_Break>
 8002284:	e030      	b.n	80022e8 <Spin_Mode_Laundry+0x9c>
	}
	else if (spin_mode_start_stop_flag == START && spin_remain_time > 0)
 8002286:	4b3a      	ldr	r3, [pc, #232]	; (8002370 <Spin_Mode_Laundry+0x124>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d124      	bne.n	80022d8 <Spin_Mode_Laundry+0x8c>
 800228e:	4b36      	ldr	r3, [pc, #216]	; (8002368 <Spin_Mode_Laundry+0x11c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d020      	beq.n	80022d8 <Spin_Mode_Laundry+0x8c>
	{
		// 남은시간은 자동으로 1초씩 감소
		if (TIM10_10ms_WM_spin_timer > 100)
 8002296:	4b3a      	ldr	r3, [pc, #232]	; (8002380 <Spin_Mode_Laundry+0x134>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2b64      	cmp	r3, #100	; 0x64
 800229c:	d919      	bls.n	80022d2 <Spin_Mode_Laundry+0x86>
		{
			TIM10_10ms_WM_spin_timer = 0;
 800229e:	4b38      	ldr	r3, [pc, #224]	; (8002380 <Spin_Mode_Laundry+0x134>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
			spin_remain_time--;
 80022a4:	4b30      	ldr	r3, [pc, #192]	; (8002368 <Spin_Mode_Laundry+0x11c>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	3b01      	subs	r3, #1
 80022aa:	4a2f      	ldr	r2, [pc, #188]	; (8002368 <Spin_Mode_Laundry+0x11c>)
 80022ac:	6013      	str	r3, [r2, #0]
			if (spin_remain_time < 0) {spin_remain_time = 0;}

			dcmotor_duty_cycle += 3;
 80022ae:	4b32      	ldr	r3, [pc, #200]	; (8002378 <Spin_Mode_Laundry+0x12c>)
 80022b0:	881b      	ldrh	r3, [r3, #0]
 80022b2:	3303      	adds	r3, #3
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	4b30      	ldr	r3, [pc, #192]	; (8002378 <Spin_Mode_Laundry+0x12c>)
 80022b8:	801a      	strh	r2, [r3, #0]
			if (dcmotor_duty_cycle > 100)
 80022ba:	4b2f      	ldr	r3, [pc, #188]	; (8002378 <Spin_Mode_Laundry+0x12c>)
 80022bc:	881b      	ldrh	r3, [r3, #0]
 80022be:	2b64      	cmp	r3, #100	; 0x64
 80022c0:	d902      	bls.n	80022c8 <Spin_Mode_Laundry+0x7c>
			{
				dcmotor_duty_cycle = 100;
 80022c2:	4b2d      	ldr	r3, [pc, #180]	; (8002378 <Spin_Mode_Laundry+0x12c>)
 80022c4:	2264      	movs	r2, #100	; 0x64
 80022c6:	801a      	strh	r2, [r3, #0]
			}

			DCmotor_Set_DutyCycle(dcmotor_duty_cycle);
 80022c8:	4b2b      	ldr	r3, [pc, #172]	; (8002378 <Spin_Mode_Laundry+0x12c>)
 80022ca:	881b      	ldrh	r3, [r3, #0]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7fe fa8d 	bl	80007ec <DCmotor_Set_DutyCycle>
		}

		DCmotor_Forward_Rotate();
 80022d2:	f7fe fa55 	bl	8000780 <DCmotor_Forward_Rotate>
 80022d6:	e007      	b.n	80022e8 <Spin_Mode_Laundry+0x9c>
	}
	else // 플래그는 start이지만 남은시간이 0이하가 된 경우 여기로 빠짐
	{
		dcmotor_duty_cycle = 30;
 80022d8:	4b27      	ldr	r3, [pc, #156]	; (8002378 <Spin_Mode_Laundry+0x12c>)
 80022da:	221e      	movs	r2, #30
 80022dc:	801a      	strh	r2, [r3, #0]
		DCmotor_Break();
 80022de:	f7fe fa73 	bl	80007c8 <DCmotor_Break>
		spin_mode_start_stop_flag = STOP;
 80022e2:	4b23      	ldr	r3, [pc, #140]	; (8002370 <Spin_Mode_Laundry+0x124>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	701a      	strb	r2, [r3, #0]
	}


	/************************BEGIN 버튼 입력 인터럽트 부분************************/
	// 세탁에 소요할 시간을 10초 증가시킨다.
	if (Get_Button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)
 80022e8:	2200      	movs	r2, #0
 80022ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022ee:	4825      	ldr	r0, [pc, #148]	; (8002384 <Spin_Mode_Laundry+0x138>)
 80022f0:	f7fe fa0e 	bl	8000710 <Get_Button>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d104      	bne.n	8002304 <Spin_Mode_Laundry+0xb8>
	{
		spin_remain_time += 10;
 80022fa:	4b1b      	ldr	r3, [pc, #108]	; (8002368 <Spin_Mode_Laundry+0x11c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	330a      	adds	r3, #10
 8002300:	4a19      	ldr	r2, [pc, #100]	; (8002368 <Spin_Mode_Laundry+0x11c>)
 8002302:	6013      	str	r3, [r2, #0]
	}

	// 세탁에 소요할 시간을 10초 감소시킨다.
	if (Get_Button(BUTTON1_GPIO_Port, BUTTON1_Pin, 1) == BUTTON_PRESS)
 8002304:	2201      	movs	r2, #1
 8002306:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800230a:	481e      	ldr	r0, [pc, #120]	; (8002384 <Spin_Mode_Laundry+0x138>)
 800230c:	f7fe fa00 	bl	8000710 <Get_Button>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d104      	bne.n	8002320 <Spin_Mode_Laundry+0xd4>
	{
		spin_remain_time -= 10;
 8002316:	4b14      	ldr	r3, [pc, #80]	; (8002368 <Spin_Mode_Laundry+0x11c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	3b0a      	subs	r3, #10
 800231c:	4a12      	ldr	r2, [pc, #72]	; (8002368 <Spin_Mode_Laundry+0x11c>)
 800231e:	6013      	str	r3, [r2, #0]
		if (spin_remain_time < 0) {spin_remain_time = 0;}
	}

	// 동작 시간을 설정 완료했다면, 세탁기 구동을 시작한다.
	if (Get_Button(BUTTON2_GPIO_Port, BUTTON2_Pin, 2) == BUTTON_PRESS)
 8002320:	2202      	movs	r2, #2
 8002322:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002326:	4817      	ldr	r0, [pc, #92]	; (8002384 <Spin_Mode_Laundry+0x138>)
 8002328:	f7fe f9f2 	bl	8000710 <Get_Button>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d102      	bne.n	8002338 <Spin_Mode_Laundry+0xec>
	{
		spin_mode_start_stop_flag = START;
 8002332:	4b0f      	ldr	r3, [pc, #60]	; (8002370 <Spin_Mode_Laundry+0x124>)
 8002334:	2201      	movs	r2, #1
 8002336:	701a      	strb	r2, [r3, #0]
	}

	// 세탁 모드를 즉시 중지하고 세탁모드를 초기화해준다.
	if (Get_Button(BUTTON4_GPIO_Port, BUTTON4_Pin, 4) == BUTTON_PRESS)
 8002338:	2204      	movs	r2, #4
 800233a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800233e:	4812      	ldr	r0, [pc, #72]	; (8002388 <Spin_Mode_Laundry+0x13c>)
 8002340:	f7fe f9e6 	bl	8000710 <Get_Button>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d10b      	bne.n	8002362 <Spin_Mode_Laundry+0x116>
	{
		WashingMachine_curr_status = IDLE_MODE;
 800234a:	4b10      	ldr	r3, [pc, #64]	; (800238c <Spin_Mode_Laundry+0x140>)
 800234c:	2200      	movs	r2, #0
 800234e:	701a      	strb	r2, [r3, #0]
		spin_mode_start_stop_flag = STOP;
 8002350:	4b07      	ldr	r3, [pc, #28]	; (8002370 <Spin_Mode_Laundry+0x124>)
 8002352:	2200      	movs	r2, #0
 8002354:	701a      	strb	r2, [r3, #0]
		spin_remain_time = 0;
 8002356:	4b04      	ldr	r3, [pc, #16]	; (8002368 <Spin_Mode_Laundry+0x11c>)
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
		dcmotor_duty_cycle = 30;
 800235c:	4b06      	ldr	r3, [pc, #24]	; (8002378 <Spin_Mode_Laundry+0x12c>)
 800235e:	221e      	movs	r2, #30
 8002360:	801a      	strh	r2, [r3, #0]
	}
	/************************END 버튼 입력 인터럽트 부분************************/
}
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	20000e20 	.word	0x20000e20
 800236c:	08009678 	.word	0x08009678
 8002370:	20000e12 	.word	0x20000e12
 8002374:	08009690 	.word	0x08009690
 8002378:	2000000c 	.word	0x2000000c
 800237c:	080096b0 	.word	0x080096b0
 8002380:	20000aa8 	.word	0x20000aa8
 8002384:	40021000 	.word	0x40021000
 8002388:	40020400 	.word	0x40020400
 800238c:	20000e0f 	.word	0x20000e0f

08002390 <WashingMachine_LCD_Display>:

/*
 * desc: "세탁/헹굼/탈수" 중 세탁기의 현재 모드에 맞는 LCD화면을 출력한다.
 */
static void WashingMachine_LCD_Display(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b08a      	sub	sp, #40	; 0x28
 8002394:	af00      	add	r7, sp, #0
	// i2c lcd 화면 클리어 하는법: i2c_lcd.c파일에 있는 lcd_command(CLEAR_DISPLAY); 함수를 사용하면 된다.

	uint8_t lcd_buff_1[20], lcd_buff_2[20];

	switch (WashingMachine_curr_status)
 8002396:	4b44      	ldr	r3, [pc, #272]	; (80024a8 <WashingMachine_LCD_Display+0x118>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	2b03      	cmp	r3, #3
 800239c:	d87e      	bhi.n	800249c <WashingMachine_LCD_Display+0x10c>
 800239e:	a201      	add	r2, pc, #4	; (adr r2, 80023a4 <WashingMachine_LCD_Display+0x14>)
 80023a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023a4:	080023b5 	.word	0x080023b5
 80023a8:	080023ef 	.word	0x080023ef
 80023ac:	08002429 	.word	0x08002429
 80023b0:	08002463 	.word	0x08002463
	{
		case IDLE_MODE:
			sprintf(lcd_buff_1, "[ select MODE  ]");
 80023b4:	f107 0314 	add.w	r3, r7, #20
 80023b8:	493c      	ldr	r1, [pc, #240]	; (80024ac <WashingMachine_LCD_Display+0x11c>)
 80023ba:	4618      	mov	r0, r3
 80023bc:	f005 ff56 	bl	800826c <siprintf>
			Move_Cursor(0, 0);
 80023c0:	2100      	movs	r1, #0
 80023c2:	2000      	movs	r0, #0
 80023c4:	f7fe f98c 	bl	80006e0 <Move_Cursor>
			LCD_String(lcd_buff_1);
 80023c8:	f107 0314 	add.w	r3, r7, #20
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7fe f972 	bl	80006b6 <LCD_String>

			sprintf(lcd_buff_2, "WASH/RINSE/SPIN");
 80023d2:	463b      	mov	r3, r7
 80023d4:	4936      	ldr	r1, [pc, #216]	; (80024b0 <WashingMachine_LCD_Display+0x120>)
 80023d6:	4618      	mov	r0, r3
 80023d8:	f005 ff48 	bl	800826c <siprintf>
			Move_Cursor(1, 0);
 80023dc:	2100      	movs	r1, #0
 80023de:	2001      	movs	r0, #1
 80023e0:	f7fe f97e 	bl	80006e0 <Move_Cursor>
			LCD_String(lcd_buff_2);
 80023e4:	463b      	mov	r3, r7
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7fe f965 	bl	80006b6 <LCD_String>
			break;
 80023ec:	e057      	b.n	800249e <WashingMachine_LCD_Display+0x10e>

		case WASH_MODE:
			sprintf(lcd_buff_1, "[  WASH_MODE   ]");
 80023ee:	f107 0314 	add.w	r3, r7, #20
 80023f2:	4930      	ldr	r1, [pc, #192]	; (80024b4 <WashingMachine_LCD_Display+0x124>)
 80023f4:	4618      	mov	r0, r3
 80023f6:	f005 ff39 	bl	800826c <siprintf>
			Move_Cursor(0, 0);
 80023fa:	2100      	movs	r1, #0
 80023fc:	2000      	movs	r0, #0
 80023fe:	f7fe f96f 	bl	80006e0 <Move_Cursor>
			LCD_String(lcd_buff_1);
 8002402:	f107 0314 	add.w	r3, r7, #20
 8002406:	4618      	mov	r0, r3
 8002408:	f7fe f955 	bl	80006b6 <LCD_String>

			sprintf(lcd_buff_2, "      ...       ");
 800240c:	463b      	mov	r3, r7
 800240e:	492a      	ldr	r1, [pc, #168]	; (80024b8 <WashingMachine_LCD_Display+0x128>)
 8002410:	4618      	mov	r0, r3
 8002412:	f005 ff2b 	bl	800826c <siprintf>
			Move_Cursor(1, 0);
 8002416:	2100      	movs	r1, #0
 8002418:	2001      	movs	r0, #1
 800241a:	f7fe f961 	bl	80006e0 <Move_Cursor>
			LCD_String(lcd_buff_2);
 800241e:	463b      	mov	r3, r7
 8002420:	4618      	mov	r0, r3
 8002422:	f7fe f948 	bl	80006b6 <LCD_String>
			break;
 8002426:	e03a      	b.n	800249e <WashingMachine_LCD_Display+0x10e>

		case RINSE_MODE:
			sprintf(lcd_buff_1, "[  RINSE_MODE  ]");
 8002428:	f107 0314 	add.w	r3, r7, #20
 800242c:	4923      	ldr	r1, [pc, #140]	; (80024bc <WashingMachine_LCD_Display+0x12c>)
 800242e:	4618      	mov	r0, r3
 8002430:	f005 ff1c 	bl	800826c <siprintf>
			Move_Cursor(0, 0);
 8002434:	2100      	movs	r1, #0
 8002436:	2000      	movs	r0, #0
 8002438:	f7fe f952 	bl	80006e0 <Move_Cursor>
			LCD_String(lcd_buff_1);
 800243c:	f107 0314 	add.w	r3, r7, #20
 8002440:	4618      	mov	r0, r3
 8002442:	f7fe f938 	bl	80006b6 <LCD_String>

			sprintf(lcd_buff_2, "      ...       ");
 8002446:	463b      	mov	r3, r7
 8002448:	491b      	ldr	r1, [pc, #108]	; (80024b8 <WashingMachine_LCD_Display+0x128>)
 800244a:	4618      	mov	r0, r3
 800244c:	f005 ff0e 	bl	800826c <siprintf>
			Move_Cursor(1, 0);
 8002450:	2100      	movs	r1, #0
 8002452:	2001      	movs	r0, #1
 8002454:	f7fe f944 	bl	80006e0 <Move_Cursor>
			LCD_String(lcd_buff_2);
 8002458:	463b      	mov	r3, r7
 800245a:	4618      	mov	r0, r3
 800245c:	f7fe f92b 	bl	80006b6 <LCD_String>
			break;
 8002460:	e01d      	b.n	800249e <WashingMachine_LCD_Display+0x10e>

		case SPIN_MODE:
			sprintf(lcd_buff_1, "[  SPIN_MODE   ]");
 8002462:	f107 0314 	add.w	r3, r7, #20
 8002466:	4916      	ldr	r1, [pc, #88]	; (80024c0 <WashingMachine_LCD_Display+0x130>)
 8002468:	4618      	mov	r0, r3
 800246a:	f005 feff 	bl	800826c <siprintf>
			Move_Cursor(0, 0);
 800246e:	2100      	movs	r1, #0
 8002470:	2000      	movs	r0, #0
 8002472:	f7fe f935 	bl	80006e0 <Move_Cursor>
			LCD_String(lcd_buff_1);
 8002476:	f107 0314 	add.w	r3, r7, #20
 800247a:	4618      	mov	r0, r3
 800247c:	f7fe f91b 	bl	80006b6 <LCD_String>

			sprintf(lcd_buff_2, "      ...       ");
 8002480:	463b      	mov	r3, r7
 8002482:	490d      	ldr	r1, [pc, #52]	; (80024b8 <WashingMachine_LCD_Display+0x128>)
 8002484:	4618      	mov	r0, r3
 8002486:	f005 fef1 	bl	800826c <siprintf>
			Move_Cursor(1, 0);
 800248a:	2100      	movs	r1, #0
 800248c:	2001      	movs	r0, #1
 800248e:	f7fe f927 	bl	80006e0 <Move_Cursor>
			LCD_String(lcd_buff_2);
 8002492:	463b      	mov	r3, r7
 8002494:	4618      	mov	r0, r3
 8002496:	f7fe f90e 	bl	80006b6 <LCD_String>
			break;
 800249a:	e000      	b.n	800249e <WashingMachine_LCD_Display+0x10e>

		default:
			break;
 800249c:	bf00      	nop
	}
}
 800249e:	bf00      	nop
 80024a0:	3728      	adds	r7, #40	; 0x28
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	20000e0f 	.word	0x20000e0f
 80024ac:	080096c8 	.word	0x080096c8
 80024b0:	080096dc 	.word	0x080096dc
 80024b4:	080096ec 	.word	0x080096ec
 80024b8:	08009700 	.word	0x08009700
 80024bc:	08009714 	.word	0x08009714
 80024c0:	08009728 	.word	0x08009728

080024c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80024c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024fc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024c8:	480d      	ldr	r0, [pc, #52]	; (8002500 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80024ca:	490e      	ldr	r1, [pc, #56]	; (8002504 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80024cc:	4a0e      	ldr	r2, [pc, #56]	; (8002508 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024d0:	e002      	b.n	80024d8 <LoopCopyDataInit>

080024d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024d6:	3304      	adds	r3, #4

080024d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024dc:	d3f9      	bcc.n	80024d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024de:	4a0b      	ldr	r2, [pc, #44]	; (800250c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80024e0:	4c0b      	ldr	r4, [pc, #44]	; (8002510 <LoopFillZerobss+0x26>)
  movs r3, #0
 80024e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024e4:	e001      	b.n	80024ea <LoopFillZerobss>

080024e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024e8:	3204      	adds	r2, #4

080024ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024ec:	d3fb      	bcc.n	80024e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80024ee:	f7ff fbb3 	bl	8001c58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024f2:	f005 fe01 	bl	80080f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024f6:	f7fe f99d 	bl	8000834 <main>
  bx  lr    
 80024fa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80024fc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002500:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002504:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002508:	080097fc 	.word	0x080097fc
  ldr r2, =_sbss
 800250c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8002510:	20000e38 	.word	0x20000e38

08002514 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002514:	e7fe      	b.n	8002514 <ADC_IRQHandler>
	...

08002518 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800251c:	4b0e      	ldr	r3, [pc, #56]	; (8002558 <HAL_Init+0x40>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a0d      	ldr	r2, [pc, #52]	; (8002558 <HAL_Init+0x40>)
 8002522:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002526:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002528:	4b0b      	ldr	r3, [pc, #44]	; (8002558 <HAL_Init+0x40>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a0a      	ldr	r2, [pc, #40]	; (8002558 <HAL_Init+0x40>)
 800252e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002532:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002534:	4b08      	ldr	r3, [pc, #32]	; (8002558 <HAL_Init+0x40>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a07      	ldr	r2, [pc, #28]	; (8002558 <HAL_Init+0x40>)
 800253a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800253e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002540:	2003      	movs	r0, #3
 8002542:	f000 f94f 	bl	80027e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002546:	2000      	movs	r0, #0
 8002548:	f000 f808 	bl	800255c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800254c:	f7fe feb2 	bl	80012b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40023c00 	.word	0x40023c00

0800255c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002564:	4b12      	ldr	r3, [pc, #72]	; (80025b0 <HAL_InitTick+0x54>)
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	4b12      	ldr	r3, [pc, #72]	; (80025b4 <HAL_InitTick+0x58>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	4619      	mov	r1, r3
 800256e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002572:	fbb3 f3f1 	udiv	r3, r3, r1
 8002576:	fbb2 f3f3 	udiv	r3, r2, r3
 800257a:	4618      	mov	r0, r3
 800257c:	f000 f967 	bl	800284e <HAL_SYSTICK_Config>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e00e      	b.n	80025a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2b0f      	cmp	r3, #15
 800258e:	d80a      	bhi.n	80025a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002590:	2200      	movs	r2, #0
 8002592:	6879      	ldr	r1, [r7, #4]
 8002594:	f04f 30ff 	mov.w	r0, #4294967295
 8002598:	f000 f92f 	bl	80027fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800259c:	4a06      	ldr	r2, [pc, #24]	; (80025b8 <HAL_InitTick+0x5c>)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
 80025a4:	e000      	b.n	80025a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3708      	adds	r7, #8
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	20000008 	.word	0x20000008
 80025b4:	20000014 	.word	0x20000014
 80025b8:	20000010 	.word	0x20000010

080025bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025c0:	4b06      	ldr	r3, [pc, #24]	; (80025dc <HAL_IncTick+0x20>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	461a      	mov	r2, r3
 80025c6:	4b06      	ldr	r3, [pc, #24]	; (80025e0 <HAL_IncTick+0x24>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4413      	add	r3, r2
 80025cc:	4a04      	ldr	r2, [pc, #16]	; (80025e0 <HAL_IncTick+0x24>)
 80025ce:	6013      	str	r3, [r2, #0]
}
 80025d0:	bf00      	nop
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	20000014 	.word	0x20000014
 80025e0:	20000e24 	.word	0x20000e24

080025e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  return uwTick;
 80025e8:	4b03      	ldr	r3, [pc, #12]	; (80025f8 <HAL_GetTick+0x14>)
 80025ea:	681b      	ldr	r3, [r3, #0]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	20000e24 	.word	0x20000e24

080025fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002604:	f7ff ffee 	bl	80025e4 <HAL_GetTick>
 8002608:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002614:	d005      	beq.n	8002622 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002616:	4b0a      	ldr	r3, [pc, #40]	; (8002640 <HAL_Delay+0x44>)
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	461a      	mov	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	4413      	add	r3, r2
 8002620:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002622:	bf00      	nop
 8002624:	f7ff ffde 	bl	80025e4 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	429a      	cmp	r2, r3
 8002632:	d8f7      	bhi.n	8002624 <HAL_Delay+0x28>
  {
  }
}
 8002634:	bf00      	nop
 8002636:	bf00      	nop
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	20000014 	.word	0x20000014

08002644 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002654:	4b0c      	ldr	r3, [pc, #48]	; (8002688 <__NVIC_SetPriorityGrouping+0x44>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800265a:	68ba      	ldr	r2, [r7, #8]
 800265c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002660:	4013      	ands	r3, r2
 8002662:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800266c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002674:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002676:	4a04      	ldr	r2, [pc, #16]	; (8002688 <__NVIC_SetPriorityGrouping+0x44>)
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	60d3      	str	r3, [r2, #12]
}
 800267c:	bf00      	nop
 800267e:	3714      	adds	r7, #20
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	e000ed00 	.word	0xe000ed00

0800268c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002690:	4b04      	ldr	r3, [pc, #16]	; (80026a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	0a1b      	lsrs	r3, r3, #8
 8002696:	f003 0307 	and.w	r3, r3, #7
}
 800269a:	4618      	mov	r0, r3
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr
 80026a4:	e000ed00 	.word	0xe000ed00

080026a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	4603      	mov	r3, r0
 80026b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	db0b      	blt.n	80026d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ba:	79fb      	ldrb	r3, [r7, #7]
 80026bc:	f003 021f 	and.w	r2, r3, #31
 80026c0:	4907      	ldr	r1, [pc, #28]	; (80026e0 <__NVIC_EnableIRQ+0x38>)
 80026c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c6:	095b      	lsrs	r3, r3, #5
 80026c8:	2001      	movs	r0, #1
 80026ca:	fa00 f202 	lsl.w	r2, r0, r2
 80026ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	e000e100 	.word	0xe000e100

080026e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	6039      	str	r1, [r7, #0]
 80026ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	db0a      	blt.n	800270e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	b2da      	uxtb	r2, r3
 80026fc:	490c      	ldr	r1, [pc, #48]	; (8002730 <__NVIC_SetPriority+0x4c>)
 80026fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002702:	0112      	lsls	r2, r2, #4
 8002704:	b2d2      	uxtb	r2, r2
 8002706:	440b      	add	r3, r1
 8002708:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800270c:	e00a      	b.n	8002724 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	b2da      	uxtb	r2, r3
 8002712:	4908      	ldr	r1, [pc, #32]	; (8002734 <__NVIC_SetPriority+0x50>)
 8002714:	79fb      	ldrb	r3, [r7, #7]
 8002716:	f003 030f 	and.w	r3, r3, #15
 800271a:	3b04      	subs	r3, #4
 800271c:	0112      	lsls	r2, r2, #4
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	440b      	add	r3, r1
 8002722:	761a      	strb	r2, [r3, #24]
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr
 8002730:	e000e100 	.word	0xe000e100
 8002734:	e000ed00 	.word	0xe000ed00

08002738 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002738:	b480      	push	{r7}
 800273a:	b089      	sub	sp, #36	; 0x24
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	f1c3 0307 	rsb	r3, r3, #7
 8002752:	2b04      	cmp	r3, #4
 8002754:	bf28      	it	cs
 8002756:	2304      	movcs	r3, #4
 8002758:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	3304      	adds	r3, #4
 800275e:	2b06      	cmp	r3, #6
 8002760:	d902      	bls.n	8002768 <NVIC_EncodePriority+0x30>
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	3b03      	subs	r3, #3
 8002766:	e000      	b.n	800276a <NVIC_EncodePriority+0x32>
 8002768:	2300      	movs	r3, #0
 800276a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800276c:	f04f 32ff 	mov.w	r2, #4294967295
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	43da      	mvns	r2, r3
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	401a      	ands	r2, r3
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002780:	f04f 31ff 	mov.w	r1, #4294967295
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	fa01 f303 	lsl.w	r3, r1, r3
 800278a:	43d9      	mvns	r1, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002790:	4313      	orrs	r3, r2
         );
}
 8002792:	4618      	mov	r0, r3
 8002794:	3724      	adds	r7, #36	; 0x24
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
	...

080027a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	3b01      	subs	r3, #1
 80027ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027b0:	d301      	bcc.n	80027b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027b2:	2301      	movs	r3, #1
 80027b4:	e00f      	b.n	80027d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027b6:	4a0a      	ldr	r2, [pc, #40]	; (80027e0 <SysTick_Config+0x40>)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	3b01      	subs	r3, #1
 80027bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027be:	210f      	movs	r1, #15
 80027c0:	f04f 30ff 	mov.w	r0, #4294967295
 80027c4:	f7ff ff8e 	bl	80026e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027c8:	4b05      	ldr	r3, [pc, #20]	; (80027e0 <SysTick_Config+0x40>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027ce:	4b04      	ldr	r3, [pc, #16]	; (80027e0 <SysTick_Config+0x40>)
 80027d0:	2207      	movs	r2, #7
 80027d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	e000e010 	.word	0xe000e010

080027e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f7ff ff29 	bl	8002644 <__NVIC_SetPriorityGrouping>
}
 80027f2:	bf00      	nop
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b086      	sub	sp, #24
 80027fe:	af00      	add	r7, sp, #0
 8002800:	4603      	mov	r3, r0
 8002802:	60b9      	str	r1, [r7, #8]
 8002804:	607a      	str	r2, [r7, #4]
 8002806:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002808:	2300      	movs	r3, #0
 800280a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800280c:	f7ff ff3e 	bl	800268c <__NVIC_GetPriorityGrouping>
 8002810:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	68b9      	ldr	r1, [r7, #8]
 8002816:	6978      	ldr	r0, [r7, #20]
 8002818:	f7ff ff8e 	bl	8002738 <NVIC_EncodePriority>
 800281c:	4602      	mov	r2, r0
 800281e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002822:	4611      	mov	r1, r2
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff ff5d 	bl	80026e4 <__NVIC_SetPriority>
}
 800282a:	bf00      	nop
 800282c:	3718      	adds	r7, #24
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b082      	sub	sp, #8
 8002836:	af00      	add	r7, sp, #0
 8002838:	4603      	mov	r3, r0
 800283a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800283c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff ff31 	bl	80026a8 <__NVIC_EnableIRQ>
}
 8002846:	bf00      	nop
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b082      	sub	sp, #8
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f7ff ffa2 	bl	80027a0 <SysTick_Config>
 800285c:	4603      	mov	r3, r0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b084      	sub	sp, #16
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002872:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002874:	f7ff feb6 	bl	80025e4 <HAL_GetTick>
 8002878:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d008      	beq.n	8002898 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2280      	movs	r2, #128	; 0x80
 800288a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e052      	b.n	800293e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f022 0216 	bic.w	r2, r2, #22
 80028a6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	695a      	ldr	r2, [r3, #20]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028b6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d103      	bne.n	80028c8 <HAL_DMA_Abort+0x62>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d007      	beq.n	80028d8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 0208 	bic.w	r2, r2, #8
 80028d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f022 0201 	bic.w	r2, r2, #1
 80028e6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028e8:	e013      	b.n	8002912 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028ea:	f7ff fe7b 	bl	80025e4 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b05      	cmp	r3, #5
 80028f6:	d90c      	bls.n	8002912 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2220      	movs	r2, #32
 80028fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2203      	movs	r2, #3
 8002902:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e015      	b.n	800293e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0301 	and.w	r3, r3, #1
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1e4      	bne.n	80028ea <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002924:	223f      	movs	r2, #63	; 0x3f
 8002926:	409a      	lsls	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002946:	b480      	push	{r7}
 8002948:	b083      	sub	sp, #12
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d004      	beq.n	8002964 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2280      	movs	r2, #128	; 0x80
 800295e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e00c      	b.n	800297e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2205      	movs	r2, #5
 8002968:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 0201 	bic.w	r2, r2, #1
 800297a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
	...

0800298c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e06c      	b.n	8002a78 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d106      	bne.n	80029b6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2223      	movs	r2, #35	; 0x23
 80029ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f7fe fca7 	bl	8001304 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029b6:	2300      	movs	r3, #0
 80029b8:	60bb      	str	r3, [r7, #8]
 80029ba:	4b31      	ldr	r3, [pc, #196]	; (8002a80 <HAL_ETH_Init+0xf4>)
 80029bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029be:	4a30      	ldr	r2, [pc, #192]	; (8002a80 <HAL_ETH_Init+0xf4>)
 80029c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029c4:	6453      	str	r3, [r2, #68]	; 0x44
 80029c6:	4b2e      	ldr	r3, [pc, #184]	; (8002a80 <HAL_ETH_Init+0xf4>)
 80029c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ce:	60bb      	str	r3, [r7, #8]
 80029d0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80029d2:	4b2c      	ldr	r3, [pc, #176]	; (8002a84 <HAL_ETH_Init+0xf8>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	4a2b      	ldr	r2, [pc, #172]	; (8002a84 <HAL_ETH_Init+0xf8>)
 80029d8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80029dc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80029de:	4b29      	ldr	r3, [pc, #164]	; (8002a84 <HAL_ETH_Init+0xf8>)
 80029e0:	685a      	ldr	r2, [r3, #4]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	4927      	ldr	r1, [pc, #156]	; (8002a84 <HAL_ETH_Init+0xf8>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80029ec:	4b25      	ldr	r3, [pc, #148]	; (8002a84 <HAL_ETH_Init+0xf8>)
 80029ee:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	6812      	ldr	r2, [r2, #0]
 80029fe:	f043 0301 	orr.w	r3, r3, #1
 8002a02:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a06:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a08:	f7ff fdec 	bl	80025e4 <HAL_GetTick>
 8002a0c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002a0e:	e011      	b.n	8002a34 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002a10:	f7ff fde8 	bl	80025e4 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002a1e:	d909      	bls.n	8002a34 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2204      	movs	r2, #4
 8002a24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	22e0      	movs	r2, #224	; 0xe0
 8002a2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e021      	b.n	8002a78 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1e4      	bne.n	8002a10 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f958 	bl	8002cfc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 f9ff 	bl	8002e50 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 fa55 	bl	8002f02 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	2100      	movs	r1, #0
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 f9bd 	bl	8002de0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2210      	movs	r2, #16
 8002a72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3710      	adds	r7, #16
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40023800 	.word	0x40023800
 8002a84:	40013800 	.word	0x40013800

08002a88 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	4b51      	ldr	r3, [pc, #324]	; (8002be4 <ETH_SetMACConfig+0x15c>)
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	7c1b      	ldrb	r3, [r3, #16]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d102      	bne.n	8002ab0 <ETH_SetMACConfig+0x28>
 8002aaa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002aae:	e000      	b.n	8002ab2 <ETH_SetMACConfig+0x2a>
 8002ab0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	7c5b      	ldrb	r3, [r3, #17]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d102      	bne.n	8002ac0 <ETH_SetMACConfig+0x38>
 8002aba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002abe:	e000      	b.n	8002ac2 <ETH_SetMACConfig+0x3a>
 8002ac0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002ac2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002ac8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	7fdb      	ldrb	r3, [r3, #31]
 8002ace:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002ad0:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002ad6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	7f92      	ldrb	r2, [r2, #30]
 8002adc:	2a00      	cmp	r2, #0
 8002ade:	d102      	bne.n	8002ae6 <ETH_SetMACConfig+0x5e>
 8002ae0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ae4:	e000      	b.n	8002ae8 <ETH_SetMACConfig+0x60>
 8002ae6:	2200      	movs	r2, #0
                        macconf->Speed |
 8002ae8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	7f1b      	ldrb	r3, [r3, #28]
 8002aee:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002af0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002af6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	791b      	ldrb	r3, [r3, #4]
 8002afc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002afe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002b06:	2a00      	cmp	r2, #0
 8002b08:	d102      	bne.n	8002b10 <ETH_SetMACConfig+0x88>
 8002b0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b0e:	e000      	b.n	8002b12 <ETH_SetMACConfig+0x8a>
 8002b10:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002b12:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	7bdb      	ldrb	r3, [r3, #15]
 8002b18:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002b1a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002b20:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002b28:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b42:	2001      	movs	r0, #1
 8002b44:	f7ff fd5a 	bl	80025fc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002b5e:	4013      	ands	r3, r2
 8002b60:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b66:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002b6e:	2a00      	cmp	r2, #0
 8002b70:	d101      	bne.n	8002b76 <ETH_SetMACConfig+0xee>
 8002b72:	2280      	movs	r2, #128	; 0x80
 8002b74:	e000      	b.n	8002b78 <ETH_SetMACConfig+0xf0>
 8002b76:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002b78:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002b7e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002b86:	2a01      	cmp	r2, #1
 8002b88:	d101      	bne.n	8002b8e <ETH_SetMACConfig+0x106>
 8002b8a:	2208      	movs	r2, #8
 8002b8c:	e000      	b.n	8002b90 <ETH_SetMACConfig+0x108>
 8002b8e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002b90:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002b98:	2a01      	cmp	r2, #1
 8002b9a:	d101      	bne.n	8002ba0 <ETH_SetMACConfig+0x118>
 8002b9c:	2204      	movs	r2, #4
 8002b9e:	e000      	b.n	8002ba2 <ETH_SetMACConfig+0x11a>
 8002ba0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002ba2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002ba4:	683a      	ldr	r2, [r7, #0]
 8002ba6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002baa:	2a01      	cmp	r2, #1
 8002bac:	d101      	bne.n	8002bb2 <ETH_SetMACConfig+0x12a>
 8002bae:	2202      	movs	r2, #2
 8002bb0:	e000      	b.n	8002bb4 <ETH_SetMACConfig+0x12c>
 8002bb2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68fa      	ldr	r2, [r7, #12]
 8002bc2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bcc:	2001      	movs	r0, #1
 8002bce:	f7ff fd15 	bl	80025fc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	619a      	str	r2, [r3, #24]
}
 8002bda:	bf00      	nop
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	ff20810f 	.word	0xff20810f

08002be8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	4b3d      	ldr	r3, [pc, #244]	; (8002cf8 <ETH_SetDMAConfig+0x110>)
 8002c02:	4013      	ands	r3, r2
 8002c04:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	7b1b      	ldrb	r3, [r3, #12]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d102      	bne.n	8002c14 <ETH_SetDMAConfig+0x2c>
 8002c0e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002c12:	e000      	b.n	8002c16 <ETH_SetDMAConfig+0x2e>
 8002c14:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	7b5b      	ldrb	r3, [r3, #13]
 8002c1a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002c1c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	7f52      	ldrb	r2, [r2, #29]
 8002c22:	2a00      	cmp	r2, #0
 8002c24:	d102      	bne.n	8002c2c <ETH_SetDMAConfig+0x44>
 8002c26:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002c2a:	e000      	b.n	8002c2e <ETH_SetDMAConfig+0x46>
 8002c2c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002c2e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	7b9b      	ldrb	r3, [r3, #14]
 8002c34:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002c36:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002c3c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	7f1b      	ldrb	r3, [r3, #28]
 8002c42:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002c44:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	7f9b      	ldrb	r3, [r3, #30]
 8002c4a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002c4c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002c52:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c5a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c7e:	2001      	movs	r0, #1
 8002c80:	f7ff fcbc 	bl	80025fc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	791b      	ldrb	r3, [r3, #4]
 8002c96:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002c9c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002ca2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002ca8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002cb0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002cb2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002cba:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002cc0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	6812      	ldr	r2, [r2, #0]
 8002cc6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002cca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002cce:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002cdc:	2001      	movs	r0, #1
 8002cde:	f7ff fc8d 	bl	80025fc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cea:	461a      	mov	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6013      	str	r3, [r2, #0]
}
 8002cf0:	bf00      	nop
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	f8de3f23 	.word	0xf8de3f23

08002cfc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b0a6      	sub	sp, #152	; 0x98
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002d04:	2301      	movs	r3, #1
 8002d06:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002d10:	2300      	movs	r3, #0
 8002d12:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002d14:	2300      	movs	r3, #0
 8002d16:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002d20:	2300      	movs	r3, #0
 8002d22:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002d26:	2301      	movs	r3, #1
 8002d28:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002d32:	2300      	movs	r3, #0
 8002d34:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002d42:	2300      	movs	r3, #0
 8002d44:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002d46:	2300      	movs	r3, #0
 8002d48:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002d52:	2300      	movs	r3, #0
 8002d54:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002d5e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d62:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002d64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d68:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002d70:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d74:	4619      	mov	r1, r3
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f7ff fe86 	bl	8002a88 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002d80:	2301      	movs	r3, #1
 8002d82:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002d84:	2301      	movs	r3, #1
 8002d86:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002d92:	2300      	movs	r3, #0
 8002d94:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002da2:	2301      	movs	r3, #1
 8002da4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002da8:	2301      	movs	r3, #1
 8002daa:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002dac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002db0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002db2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002db6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002db8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002dbc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002dcc:	f107 0308 	add.w	r3, r7, #8
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f7ff ff08 	bl	8002be8 <ETH_SetDMAConfig>
}
 8002dd8:	bf00      	nop
 8002dda:	3798      	adds	r7, #152	; 0x98
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b087      	sub	sp, #28
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	3305      	adds	r3, #5
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	021b      	lsls	r3, r3, #8
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	3204      	adds	r2, #4
 8002df8:	7812      	ldrb	r2, [r2, #0]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002dfe:	68ba      	ldr	r2, [r7, #8]
 8002e00:	4b11      	ldr	r3, [pc, #68]	; (8002e48 <ETH_MACAddressConfig+0x68>)
 8002e02:	4413      	add	r3, r2
 8002e04:	461a      	mov	r2, r3
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	3303      	adds	r3, #3
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	061a      	lsls	r2, r3, #24
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	3302      	adds	r3, #2
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	041b      	lsls	r3, r3, #16
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	3301      	adds	r3, #1
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	021b      	lsls	r3, r3, #8
 8002e24:	4313      	orrs	r3, r2
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	7812      	ldrb	r2, [r2, #0]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002e2e:	68ba      	ldr	r2, [r7, #8]
 8002e30:	4b06      	ldr	r3, [pc, #24]	; (8002e4c <ETH_MACAddressConfig+0x6c>)
 8002e32:	4413      	add	r3, r2
 8002e34:	461a      	mov	r2, r3
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	6013      	str	r3, [r2, #0]
}
 8002e3a:	bf00      	nop
 8002e3c:	371c      	adds	r7, #28
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	40028040 	.word	0x40028040
 8002e4c:	40028044 	.word	0x40028044

08002e50 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002e58:	2300      	movs	r3, #0
 8002e5a:	60fb      	str	r3, [r7, #12]
 8002e5c:	e03e      	b.n	8002edc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	68d9      	ldr	r1, [r3, #12]
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	4613      	mov	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4413      	add	r3, r2
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	440b      	add	r3, r1
 8002e6e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	2200      	movs	r2, #0
 8002e74:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	2200      	movs	r2, #0
 8002e86:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002e88:	68b9      	ldr	r1, [r7, #8]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	3206      	adds	r2, #6
 8002e90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d80c      	bhi.n	8002ec0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68d9      	ldr	r1, [r3, #12]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	1c5a      	adds	r2, r3, #1
 8002eae:	4613      	mov	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	4413      	add	r3, r2
 8002eb4:	00db      	lsls	r3, r3, #3
 8002eb6:	440b      	add	r3, r1
 8002eb8:	461a      	mov	r2, r3
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	60da      	str	r2, [r3, #12]
 8002ebe:	e004      	b.n	8002eca <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	3301      	adds	r3, #1
 8002eda:	60fb      	str	r3, [r7, #12]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2b03      	cmp	r3, #3
 8002ee0:	d9bd      	bls.n	8002e5e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68da      	ldr	r2, [r3, #12]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ef4:	611a      	str	r2, [r3, #16]
}
 8002ef6:	bf00      	nop
 8002ef8:	3714      	adds	r7, #20
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr

08002f02 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002f02:	b480      	push	{r7}
 8002f04:	b085      	sub	sp, #20
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	60fb      	str	r3, [r7, #12]
 8002f0e:	e046      	b.n	8002f9e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6919      	ldr	r1, [r3, #16]
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	4613      	mov	r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	4413      	add	r3, r2
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	440b      	add	r3, r1
 8002f20:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	2200      	movs	r2, #0
 8002f32:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	2200      	movs	r2, #0
 8002f38:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	2200      	movs	r2, #0
 8002f44:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002f4c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002f54:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002f62:	68b9      	ldr	r1, [r7, #8]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	3212      	adds	r2, #18
 8002f6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d80c      	bhi.n	8002f8e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6919      	ldr	r1, [r3, #16]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	1c5a      	adds	r2, r3, #1
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	4413      	add	r3, r2
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	440b      	add	r3, r1
 8002f86:	461a      	mov	r2, r3
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	60da      	str	r2, [r3, #12]
 8002f8c:	e004      	b.n	8002f98 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	461a      	mov	r2, r3
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	60fb      	str	r3, [r7, #12]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2b03      	cmp	r3, #3
 8002fa2:	d9b5      	bls.n	8002f10 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	691a      	ldr	r2, [r3, #16]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fce:	60da      	str	r2, [r3, #12]
}
 8002fd0:	bf00      	nop
 8002fd2:	3714      	adds	r7, #20
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b089      	sub	sp, #36	; 0x24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fea:	2300      	movs	r3, #0
 8002fec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	61fb      	str	r3, [r7, #28]
 8002ff6:	e177      	b.n	80032e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	697a      	ldr	r2, [r7, #20]
 8003008:	4013      	ands	r3, r2
 800300a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	429a      	cmp	r2, r3
 8003012:	f040 8166 	bne.w	80032e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f003 0303 	and.w	r3, r3, #3
 800301e:	2b01      	cmp	r3, #1
 8003020:	d005      	beq.n	800302e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800302a:	2b02      	cmp	r3, #2
 800302c:	d130      	bne.n	8003090 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	2203      	movs	r2, #3
 800303a:	fa02 f303 	lsl.w	r3, r2, r3
 800303e:	43db      	mvns	r3, r3
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	4013      	ands	r3, r2
 8003044:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	68da      	ldr	r2, [r3, #12]
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	fa02 f303 	lsl.w	r3, r2, r3
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	4313      	orrs	r3, r2
 8003056:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003064:	2201      	movs	r2, #1
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	43db      	mvns	r3, r3
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	4013      	ands	r3, r2
 8003072:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	091b      	lsrs	r3, r3, #4
 800307a:	f003 0201 	and.w	r2, r3, #1
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	4313      	orrs	r3, r2
 8003088:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f003 0303 	and.w	r3, r3, #3
 8003098:	2b03      	cmp	r3, #3
 800309a:	d017      	beq.n	80030cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	2203      	movs	r2, #3
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	43db      	mvns	r3, r3
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	4013      	ands	r3, r2
 80030b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f003 0303 	and.w	r3, r3, #3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d123      	bne.n	8003120 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	08da      	lsrs	r2, r3, #3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	3208      	adds	r2, #8
 80030e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	220f      	movs	r2, #15
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	43db      	mvns	r3, r3
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	4013      	ands	r3, r2
 80030fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	691a      	ldr	r2, [r3, #16]
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	f003 0307 	and.w	r3, r3, #7
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	4313      	orrs	r3, r2
 8003110:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	08da      	lsrs	r2, r3, #3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	3208      	adds	r2, #8
 800311a:	69b9      	ldr	r1, [r7, #24]
 800311c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	2203      	movs	r2, #3
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	43db      	mvns	r3, r3
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	4013      	ands	r3, r2
 8003136:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f003 0203 	and.w	r2, r3, #3
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	4313      	orrs	r3, r2
 800314c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800315c:	2b00      	cmp	r3, #0
 800315e:	f000 80c0 	beq.w	80032e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003162:	2300      	movs	r3, #0
 8003164:	60fb      	str	r3, [r7, #12]
 8003166:	4b66      	ldr	r3, [pc, #408]	; (8003300 <HAL_GPIO_Init+0x324>)
 8003168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316a:	4a65      	ldr	r2, [pc, #404]	; (8003300 <HAL_GPIO_Init+0x324>)
 800316c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003170:	6453      	str	r3, [r2, #68]	; 0x44
 8003172:	4b63      	ldr	r3, [pc, #396]	; (8003300 <HAL_GPIO_Init+0x324>)
 8003174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800317a:	60fb      	str	r3, [r7, #12]
 800317c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800317e:	4a61      	ldr	r2, [pc, #388]	; (8003304 <HAL_GPIO_Init+0x328>)
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	089b      	lsrs	r3, r3, #2
 8003184:	3302      	adds	r3, #2
 8003186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800318a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	f003 0303 	and.w	r3, r3, #3
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	220f      	movs	r2, #15
 8003196:	fa02 f303 	lsl.w	r3, r2, r3
 800319a:	43db      	mvns	r3, r3
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	4013      	ands	r3, r2
 80031a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a58      	ldr	r2, [pc, #352]	; (8003308 <HAL_GPIO_Init+0x32c>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d037      	beq.n	800321a <HAL_GPIO_Init+0x23e>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a57      	ldr	r2, [pc, #348]	; (800330c <HAL_GPIO_Init+0x330>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d031      	beq.n	8003216 <HAL_GPIO_Init+0x23a>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a56      	ldr	r2, [pc, #344]	; (8003310 <HAL_GPIO_Init+0x334>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d02b      	beq.n	8003212 <HAL_GPIO_Init+0x236>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a55      	ldr	r2, [pc, #340]	; (8003314 <HAL_GPIO_Init+0x338>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d025      	beq.n	800320e <HAL_GPIO_Init+0x232>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a54      	ldr	r2, [pc, #336]	; (8003318 <HAL_GPIO_Init+0x33c>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d01f      	beq.n	800320a <HAL_GPIO_Init+0x22e>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a53      	ldr	r2, [pc, #332]	; (800331c <HAL_GPIO_Init+0x340>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d019      	beq.n	8003206 <HAL_GPIO_Init+0x22a>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a52      	ldr	r2, [pc, #328]	; (8003320 <HAL_GPIO_Init+0x344>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d013      	beq.n	8003202 <HAL_GPIO_Init+0x226>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a51      	ldr	r2, [pc, #324]	; (8003324 <HAL_GPIO_Init+0x348>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d00d      	beq.n	80031fe <HAL_GPIO_Init+0x222>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a50      	ldr	r2, [pc, #320]	; (8003328 <HAL_GPIO_Init+0x34c>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d007      	beq.n	80031fa <HAL_GPIO_Init+0x21e>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a4f      	ldr	r2, [pc, #316]	; (800332c <HAL_GPIO_Init+0x350>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d101      	bne.n	80031f6 <HAL_GPIO_Init+0x21a>
 80031f2:	2309      	movs	r3, #9
 80031f4:	e012      	b.n	800321c <HAL_GPIO_Init+0x240>
 80031f6:	230a      	movs	r3, #10
 80031f8:	e010      	b.n	800321c <HAL_GPIO_Init+0x240>
 80031fa:	2308      	movs	r3, #8
 80031fc:	e00e      	b.n	800321c <HAL_GPIO_Init+0x240>
 80031fe:	2307      	movs	r3, #7
 8003200:	e00c      	b.n	800321c <HAL_GPIO_Init+0x240>
 8003202:	2306      	movs	r3, #6
 8003204:	e00a      	b.n	800321c <HAL_GPIO_Init+0x240>
 8003206:	2305      	movs	r3, #5
 8003208:	e008      	b.n	800321c <HAL_GPIO_Init+0x240>
 800320a:	2304      	movs	r3, #4
 800320c:	e006      	b.n	800321c <HAL_GPIO_Init+0x240>
 800320e:	2303      	movs	r3, #3
 8003210:	e004      	b.n	800321c <HAL_GPIO_Init+0x240>
 8003212:	2302      	movs	r3, #2
 8003214:	e002      	b.n	800321c <HAL_GPIO_Init+0x240>
 8003216:	2301      	movs	r3, #1
 8003218:	e000      	b.n	800321c <HAL_GPIO_Init+0x240>
 800321a:	2300      	movs	r3, #0
 800321c:	69fa      	ldr	r2, [r7, #28]
 800321e:	f002 0203 	and.w	r2, r2, #3
 8003222:	0092      	lsls	r2, r2, #2
 8003224:	4093      	lsls	r3, r2
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	4313      	orrs	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800322c:	4935      	ldr	r1, [pc, #212]	; (8003304 <HAL_GPIO_Init+0x328>)
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	089b      	lsrs	r3, r3, #2
 8003232:	3302      	adds	r3, #2
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800323a:	4b3d      	ldr	r3, [pc, #244]	; (8003330 <HAL_GPIO_Init+0x354>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	43db      	mvns	r3, r3
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	4013      	ands	r3, r2
 8003248:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d003      	beq.n	800325e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003256:	69ba      	ldr	r2, [r7, #24]
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	4313      	orrs	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800325e:	4a34      	ldr	r2, [pc, #208]	; (8003330 <HAL_GPIO_Init+0x354>)
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003264:	4b32      	ldr	r3, [pc, #200]	; (8003330 <HAL_GPIO_Init+0x354>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	43db      	mvns	r3, r3
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	4013      	ands	r3, r2
 8003272:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d003      	beq.n	8003288 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	4313      	orrs	r3, r2
 8003286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003288:	4a29      	ldr	r2, [pc, #164]	; (8003330 <HAL_GPIO_Init+0x354>)
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800328e:	4b28      	ldr	r3, [pc, #160]	; (8003330 <HAL_GPIO_Init+0x354>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	43db      	mvns	r3, r3
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	4013      	ands	r3, r2
 800329c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d003      	beq.n	80032b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032b2:	4a1f      	ldr	r2, [pc, #124]	; (8003330 <HAL_GPIO_Init+0x354>)
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032b8:	4b1d      	ldr	r3, [pc, #116]	; (8003330 <HAL_GPIO_Init+0x354>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	43db      	mvns	r3, r3
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	4013      	ands	r3, r2
 80032c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d003      	beq.n	80032dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	4313      	orrs	r3, r2
 80032da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032dc:	4a14      	ldr	r2, [pc, #80]	; (8003330 <HAL_GPIO_Init+0x354>)
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	3301      	adds	r3, #1
 80032e6:	61fb      	str	r3, [r7, #28]
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	2b0f      	cmp	r3, #15
 80032ec:	f67f ae84 	bls.w	8002ff8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032f0:	bf00      	nop
 80032f2:	bf00      	nop
 80032f4:	3724      	adds	r7, #36	; 0x24
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	40023800 	.word	0x40023800
 8003304:	40013800 	.word	0x40013800
 8003308:	40020000 	.word	0x40020000
 800330c:	40020400 	.word	0x40020400
 8003310:	40020800 	.word	0x40020800
 8003314:	40020c00 	.word	0x40020c00
 8003318:	40021000 	.word	0x40021000
 800331c:	40021400 	.word	0x40021400
 8003320:	40021800 	.word	0x40021800
 8003324:	40021c00 	.word	0x40021c00
 8003328:	40022000 	.word	0x40022000
 800332c:	40022400 	.word	0x40022400
 8003330:	40013c00 	.word	0x40013c00

08003334 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003334:	b480      	push	{r7}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	460b      	mov	r3, r1
 800333e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	691a      	ldr	r2, [r3, #16]
 8003344:	887b      	ldrh	r3, [r7, #2]
 8003346:	4013      	ands	r3, r2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d002      	beq.n	8003352 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800334c:	2301      	movs	r3, #1
 800334e:	73fb      	strb	r3, [r7, #15]
 8003350:	e001      	b.n	8003356 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003352:	2300      	movs	r3, #0
 8003354:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003356:	7bfb      	ldrb	r3, [r7, #15]
}
 8003358:	4618      	mov	r0, r3
 800335a:	3714      	adds	r7, #20
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	460b      	mov	r3, r1
 800336e:	807b      	strh	r3, [r7, #2]
 8003370:	4613      	mov	r3, r2
 8003372:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003374:	787b      	ldrb	r3, [r7, #1]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d003      	beq.n	8003382 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800337a:	887a      	ldrh	r2, [r7, #2]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003380:	e003      	b.n	800338a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003382:	887b      	ldrh	r3, [r7, #2]
 8003384:	041a      	lsls	r2, r3, #16
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	619a      	str	r2, [r3, #24]
}
 800338a:	bf00      	nop
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
	...

08003398 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e12b      	b.n	8003602 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d106      	bne.n	80033c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f7fe f866 	bl	8001490 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2224      	movs	r2, #36	; 0x24
 80033c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 0201 	bic.w	r2, r2, #1
 80033da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80033fc:	f001 fa20 	bl	8004840 <HAL_RCC_GetPCLK1Freq>
 8003400:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	4a81      	ldr	r2, [pc, #516]	; (800360c <HAL_I2C_Init+0x274>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d807      	bhi.n	800341c <HAL_I2C_Init+0x84>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4a80      	ldr	r2, [pc, #512]	; (8003610 <HAL_I2C_Init+0x278>)
 8003410:	4293      	cmp	r3, r2
 8003412:	bf94      	ite	ls
 8003414:	2301      	movls	r3, #1
 8003416:	2300      	movhi	r3, #0
 8003418:	b2db      	uxtb	r3, r3
 800341a:	e006      	b.n	800342a <HAL_I2C_Init+0x92>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	4a7d      	ldr	r2, [pc, #500]	; (8003614 <HAL_I2C_Init+0x27c>)
 8003420:	4293      	cmp	r3, r2
 8003422:	bf94      	ite	ls
 8003424:	2301      	movls	r3, #1
 8003426:	2300      	movhi	r3, #0
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e0e7      	b.n	8003602 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	4a78      	ldr	r2, [pc, #480]	; (8003618 <HAL_I2C_Init+0x280>)
 8003436:	fba2 2303 	umull	r2, r3, r2, r3
 800343a:	0c9b      	lsrs	r3, r3, #18
 800343c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68ba      	ldr	r2, [r7, #8]
 800344e:	430a      	orrs	r2, r1
 8003450:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	4a6a      	ldr	r2, [pc, #424]	; (800360c <HAL_I2C_Init+0x274>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d802      	bhi.n	800346c <HAL_I2C_Init+0xd4>
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	3301      	adds	r3, #1
 800346a:	e009      	b.n	8003480 <HAL_I2C_Init+0xe8>
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003472:	fb02 f303 	mul.w	r3, r2, r3
 8003476:	4a69      	ldr	r2, [pc, #420]	; (800361c <HAL_I2C_Init+0x284>)
 8003478:	fba2 2303 	umull	r2, r3, r2, r3
 800347c:	099b      	lsrs	r3, r3, #6
 800347e:	3301      	adds	r3, #1
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	6812      	ldr	r2, [r2, #0]
 8003484:	430b      	orrs	r3, r1
 8003486:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003492:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	495c      	ldr	r1, [pc, #368]	; (800360c <HAL_I2C_Init+0x274>)
 800349c:	428b      	cmp	r3, r1
 800349e:	d819      	bhi.n	80034d4 <HAL_I2C_Init+0x13c>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	1e59      	subs	r1, r3, #1
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80034ae:	1c59      	adds	r1, r3, #1
 80034b0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80034b4:	400b      	ands	r3, r1
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00a      	beq.n	80034d0 <HAL_I2C_Init+0x138>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	1e59      	subs	r1, r3, #1
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80034c8:	3301      	adds	r3, #1
 80034ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034ce:	e051      	b.n	8003574 <HAL_I2C_Init+0x1dc>
 80034d0:	2304      	movs	r3, #4
 80034d2:	e04f      	b.n	8003574 <HAL_I2C_Init+0x1dc>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d111      	bne.n	8003500 <HAL_I2C_Init+0x168>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	1e58      	subs	r0, r3, #1
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6859      	ldr	r1, [r3, #4]
 80034e4:	460b      	mov	r3, r1
 80034e6:	005b      	lsls	r3, r3, #1
 80034e8:	440b      	add	r3, r1
 80034ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80034ee:	3301      	adds	r3, #1
 80034f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	bf0c      	ite	eq
 80034f8:	2301      	moveq	r3, #1
 80034fa:	2300      	movne	r3, #0
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	e012      	b.n	8003526 <HAL_I2C_Init+0x18e>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	1e58      	subs	r0, r3, #1
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6859      	ldr	r1, [r3, #4]
 8003508:	460b      	mov	r3, r1
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	0099      	lsls	r1, r3, #2
 8003510:	440b      	add	r3, r1
 8003512:	fbb0 f3f3 	udiv	r3, r0, r3
 8003516:	3301      	adds	r3, #1
 8003518:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800351c:	2b00      	cmp	r3, #0
 800351e:	bf0c      	ite	eq
 8003520:	2301      	moveq	r3, #1
 8003522:	2300      	movne	r3, #0
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <HAL_I2C_Init+0x196>
 800352a:	2301      	movs	r3, #1
 800352c:	e022      	b.n	8003574 <HAL_I2C_Init+0x1dc>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d10e      	bne.n	8003554 <HAL_I2C_Init+0x1bc>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	1e58      	subs	r0, r3, #1
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6859      	ldr	r1, [r3, #4]
 800353e:	460b      	mov	r3, r1
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	440b      	add	r3, r1
 8003544:	fbb0 f3f3 	udiv	r3, r0, r3
 8003548:	3301      	adds	r3, #1
 800354a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800354e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003552:	e00f      	b.n	8003574 <HAL_I2C_Init+0x1dc>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	1e58      	subs	r0, r3, #1
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6859      	ldr	r1, [r3, #4]
 800355c:	460b      	mov	r3, r1
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	440b      	add	r3, r1
 8003562:	0099      	lsls	r1, r3, #2
 8003564:	440b      	add	r3, r1
 8003566:	fbb0 f3f3 	udiv	r3, r0, r3
 800356a:	3301      	adds	r3, #1
 800356c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003570:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003574:	6879      	ldr	r1, [r7, #4]
 8003576:	6809      	ldr	r1, [r1, #0]
 8003578:	4313      	orrs	r3, r2
 800357a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	69da      	ldr	r2, [r3, #28]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	431a      	orrs	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	430a      	orrs	r2, r1
 8003596:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80035a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	6911      	ldr	r1, [r2, #16]
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	68d2      	ldr	r2, [r2, #12]
 80035ae:	4311      	orrs	r1, r2
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	6812      	ldr	r2, [r2, #0]
 80035b4:	430b      	orrs	r3, r1
 80035b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	695a      	ldr	r2, [r3, #20]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	431a      	orrs	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	430a      	orrs	r2, r1
 80035d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f042 0201 	orr.w	r2, r2, #1
 80035e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2220      	movs	r2, #32
 80035ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3710      	adds	r7, #16
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	000186a0 	.word	0x000186a0
 8003610:	001e847f 	.word	0x001e847f
 8003614:	003d08ff 	.word	0x003d08ff
 8003618:	431bde83 	.word	0x431bde83
 800361c:	10624dd3 	.word	0x10624dd3

08003620 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b088      	sub	sp, #32
 8003624:	af02      	add	r7, sp, #8
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	607a      	str	r2, [r7, #4]
 800362a:	461a      	mov	r2, r3
 800362c:	460b      	mov	r3, r1
 800362e:	817b      	strh	r3, [r7, #10]
 8003630:	4613      	mov	r3, r2
 8003632:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003634:	f7fe ffd6 	bl	80025e4 <HAL_GetTick>
 8003638:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b20      	cmp	r3, #32
 8003644:	f040 80e0 	bne.w	8003808 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	9300      	str	r3, [sp, #0]
 800364c:	2319      	movs	r3, #25
 800364e:	2201      	movs	r2, #1
 8003650:	4970      	ldr	r1, [pc, #448]	; (8003814 <HAL_I2C_Master_Transmit+0x1f4>)
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f000 f964 	bl	8003920 <I2C_WaitOnFlagUntilTimeout>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800365e:	2302      	movs	r3, #2
 8003660:	e0d3      	b.n	800380a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003668:	2b01      	cmp	r3, #1
 800366a:	d101      	bne.n	8003670 <HAL_I2C_Master_Transmit+0x50>
 800366c:	2302      	movs	r3, #2
 800366e:	e0cc      	b.n	800380a <HAL_I2C_Master_Transmit+0x1ea>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	2b01      	cmp	r3, #1
 8003684:	d007      	beq.n	8003696 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f042 0201 	orr.w	r2, r2, #1
 8003694:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2221      	movs	r2, #33	; 0x21
 80036aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2210      	movs	r2, #16
 80036b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	893a      	ldrh	r2, [r7, #8]
 80036c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	4a50      	ldr	r2, [pc, #320]	; (8003818 <HAL_I2C_Master_Transmit+0x1f8>)
 80036d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80036d8:	8979      	ldrh	r1, [r7, #10]
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	6a3a      	ldr	r2, [r7, #32]
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	f000 f89c 	bl	800381c <I2C_MasterRequestWrite>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e08d      	b.n	800380a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ee:	2300      	movs	r3, #0
 80036f0:	613b      	str	r3, [r7, #16]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	695b      	ldr	r3, [r3, #20]
 80036f8:	613b      	str	r3, [r7, #16]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	613b      	str	r3, [r7, #16]
 8003702:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003704:	e066      	b.n	80037d4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	6a39      	ldr	r1, [r7, #32]
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f000 f9de 	bl	8003acc <I2C_WaitOnTXEFlagUntilTimeout>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00d      	beq.n	8003732 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371a:	2b04      	cmp	r3, #4
 800371c:	d107      	bne.n	800372e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800372c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e06b      	b.n	800380a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003736:	781a      	ldrb	r2, [r3, #0]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003742:	1c5a      	adds	r2, r3, #1
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800374c:	b29b      	uxth	r3, r3
 800374e:	3b01      	subs	r3, #1
 8003750:	b29a      	uxth	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800375a:	3b01      	subs	r3, #1
 800375c:	b29a      	uxth	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	f003 0304 	and.w	r3, r3, #4
 800376c:	2b04      	cmp	r3, #4
 800376e:	d11b      	bne.n	80037a8 <HAL_I2C_Master_Transmit+0x188>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003774:	2b00      	cmp	r3, #0
 8003776:	d017      	beq.n	80037a8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377c:	781a      	ldrb	r2, [r3, #0]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003788:	1c5a      	adds	r2, r3, #1
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003792:	b29b      	uxth	r3, r3
 8003794:	3b01      	subs	r3, #1
 8003796:	b29a      	uxth	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a0:	3b01      	subs	r3, #1
 80037a2:	b29a      	uxth	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037a8:	697a      	ldr	r2, [r7, #20]
 80037aa:	6a39      	ldr	r1, [r7, #32]
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f000 f9ce 	bl	8003b4e <I2C_WaitOnBTFFlagUntilTimeout>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00d      	beq.n	80037d4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037bc:	2b04      	cmp	r3, #4
 80037be:	d107      	bne.n	80037d0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e01a      	b.n	800380a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d194      	bne.n	8003706 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2220      	movs	r2, #32
 80037f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003804:	2300      	movs	r3, #0
 8003806:	e000      	b.n	800380a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003808:	2302      	movs	r3, #2
  }
}
 800380a:	4618      	mov	r0, r3
 800380c:	3718      	adds	r7, #24
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	00100002 	.word	0x00100002
 8003818:	ffff0000 	.word	0xffff0000

0800381c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b088      	sub	sp, #32
 8003820:	af02      	add	r7, sp, #8
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	607a      	str	r2, [r7, #4]
 8003826:	603b      	str	r3, [r7, #0]
 8003828:	460b      	mov	r3, r1
 800382a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003830:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	2b08      	cmp	r3, #8
 8003836:	d006      	beq.n	8003846 <I2C_MasterRequestWrite+0x2a>
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d003      	beq.n	8003846 <I2C_MasterRequestWrite+0x2a>
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003844:	d108      	bne.n	8003858 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003854:	601a      	str	r2, [r3, #0]
 8003856:	e00b      	b.n	8003870 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385c:	2b12      	cmp	r3, #18
 800385e:	d107      	bne.n	8003870 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800386e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	9300      	str	r3, [sp, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800387c:	68f8      	ldr	r0, [r7, #12]
 800387e:	f000 f84f 	bl	8003920 <I2C_WaitOnFlagUntilTimeout>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00d      	beq.n	80038a4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003892:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003896:	d103      	bne.n	80038a0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800389e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e035      	b.n	8003910 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038ac:	d108      	bne.n	80038c0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038ae:	897b      	ldrh	r3, [r7, #10]
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	461a      	mov	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80038bc:	611a      	str	r2, [r3, #16]
 80038be:	e01b      	b.n	80038f8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80038c0:	897b      	ldrh	r3, [r7, #10]
 80038c2:	11db      	asrs	r3, r3, #7
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	f003 0306 	and.w	r3, r3, #6
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	f063 030f 	orn	r3, r3, #15
 80038d0:	b2da      	uxtb	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	490e      	ldr	r1, [pc, #56]	; (8003918 <I2C_MasterRequestWrite+0xfc>)
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f000 f875 	bl	80039ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e010      	b.n	8003910 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80038ee:	897b      	ldrh	r3, [r7, #10]
 80038f0:	b2da      	uxtb	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	4907      	ldr	r1, [pc, #28]	; (800391c <I2C_MasterRequestWrite+0x100>)
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f000 f865 	bl	80039ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d001      	beq.n	800390e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e000      	b.n	8003910 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	3718      	adds	r7, #24
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	00010008 	.word	0x00010008
 800391c:	00010002 	.word	0x00010002

08003920 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	603b      	str	r3, [r7, #0]
 800392c:	4613      	mov	r3, r2
 800392e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003930:	e025      	b.n	800397e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003938:	d021      	beq.n	800397e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800393a:	f7fe fe53 	bl	80025e4 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	683a      	ldr	r2, [r7, #0]
 8003946:	429a      	cmp	r2, r3
 8003948:	d302      	bcc.n	8003950 <I2C_WaitOnFlagUntilTimeout+0x30>
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d116      	bne.n	800397e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2220      	movs	r2, #32
 800395a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396a:	f043 0220 	orr.w	r2, r3, #32
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e023      	b.n	80039c6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	0c1b      	lsrs	r3, r3, #16
 8003982:	b2db      	uxtb	r3, r3
 8003984:	2b01      	cmp	r3, #1
 8003986:	d10d      	bne.n	80039a4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	43da      	mvns	r2, r3
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	4013      	ands	r3, r2
 8003994:	b29b      	uxth	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	bf0c      	ite	eq
 800399a:	2301      	moveq	r3, #1
 800399c:	2300      	movne	r3, #0
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	461a      	mov	r2, r3
 80039a2:	e00c      	b.n	80039be <I2C_WaitOnFlagUntilTimeout+0x9e>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	43da      	mvns	r2, r3
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	4013      	ands	r3, r2
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	bf0c      	ite	eq
 80039b6:	2301      	moveq	r3, #1
 80039b8:	2300      	movne	r3, #0
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	461a      	mov	r2, r3
 80039be:	79fb      	ldrb	r3, [r7, #7]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d0b6      	beq.n	8003932 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b084      	sub	sp, #16
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	60f8      	str	r0, [r7, #12]
 80039d6:	60b9      	str	r1, [r7, #8]
 80039d8:	607a      	str	r2, [r7, #4]
 80039da:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039dc:	e051      	b.n	8003a82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	695b      	ldr	r3, [r3, #20]
 80039e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039ec:	d123      	bne.n	8003a36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039fc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a06:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2220      	movs	r2, #32
 8003a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a22:	f043 0204 	orr.w	r2, r3, #4
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e046      	b.n	8003ac4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a3c:	d021      	beq.n	8003a82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a3e:	f7fe fdd1 	bl	80025e4 <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d302      	bcc.n	8003a54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d116      	bne.n	8003a82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2220      	movs	r2, #32
 8003a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6e:	f043 0220 	orr.w	r2, r3, #32
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e020      	b.n	8003ac4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	0c1b      	lsrs	r3, r3, #16
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d10c      	bne.n	8003aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	43da      	mvns	r2, r3
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	4013      	ands	r3, r2
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	bf14      	ite	ne
 8003a9e:	2301      	movne	r3, #1
 8003aa0:	2300      	moveq	r3, #0
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	e00b      	b.n	8003abe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	43da      	mvns	r2, r3
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	bf14      	ite	ne
 8003ab8:	2301      	movne	r3, #1
 8003aba:	2300      	moveq	r3, #0
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d18d      	bne.n	80039de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3710      	adds	r7, #16
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ad8:	e02d      	b.n	8003b36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ada:	68f8      	ldr	r0, [r7, #12]
 8003adc:	f000 f878 	bl	8003bd0 <I2C_IsAcknowledgeFailed>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e02d      	b.n	8003b46 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af0:	d021      	beq.n	8003b36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003af2:	f7fe fd77 	bl	80025e4 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	68ba      	ldr	r2, [r7, #8]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d302      	bcc.n	8003b08 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d116      	bne.n	8003b36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2220      	movs	r2, #32
 8003b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b22:	f043 0220 	orr.w	r2, r3, #32
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e007      	b.n	8003b46 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b40:	2b80      	cmp	r3, #128	; 0x80
 8003b42:	d1ca      	bne.n	8003ada <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b084      	sub	sp, #16
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	60f8      	str	r0, [r7, #12]
 8003b56:	60b9      	str	r1, [r7, #8]
 8003b58:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b5a:	e02d      	b.n	8003bb8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	f000 f837 	bl	8003bd0 <I2C_IsAcknowledgeFailed>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d001      	beq.n	8003b6c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e02d      	b.n	8003bc8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b72:	d021      	beq.n	8003bb8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b74:	f7fe fd36 	bl	80025e4 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	68ba      	ldr	r2, [r7, #8]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d302      	bcc.n	8003b8a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d116      	bne.n	8003bb8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2220      	movs	r2, #32
 8003b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba4:	f043 0220 	orr.w	r2, r3, #32
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e007      	b.n	8003bc8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	f003 0304 	and.w	r3, r3, #4
 8003bc2:	2b04      	cmp	r3, #4
 8003bc4:	d1ca      	bne.n	8003b5c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3710      	adds	r7, #16
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003be2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003be6:	d11b      	bne.n	8003c20 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003bf0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2220      	movs	r2, #32
 8003bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0c:	f043 0204 	orr.w	r2, r3, #4
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e000      	b.n	8003c22 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr

08003c2e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c2e:	b480      	push	{r7}
 8003c30:	b083      	sub	sp, #12
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
 8003c36:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	2b20      	cmp	r3, #32
 8003c42:	d129      	bne.n	8003c98 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2224      	movs	r2, #36	; 0x24
 8003c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f022 0201 	bic.w	r2, r2, #1
 8003c5a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f022 0210 	bic.w	r2, r2, #16
 8003c6a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	683a      	ldr	r2, [r7, #0]
 8003c78:	430a      	orrs	r2, r1
 8003c7a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f042 0201 	orr.w	r2, r2, #1
 8003c8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2220      	movs	r2, #32
 8003c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003c94:	2300      	movs	r3, #0
 8003c96:	e000      	b.n	8003c9a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003c98:	2302      	movs	r3, #2
  }
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr

08003ca6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	b085      	sub	sp, #20
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
 8003cae:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	2b20      	cmp	r3, #32
 8003cbe:	d12a      	bne.n	8003d16 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2224      	movs	r2, #36	; 0x24
 8003cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f022 0201 	bic.w	r2, r2, #1
 8003cd6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cde:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003ce0:	89fb      	ldrh	r3, [r7, #14]
 8003ce2:	f023 030f 	bic.w	r3, r3, #15
 8003ce6:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	b29a      	uxth	r2, r3
 8003cec:	89fb      	ldrh	r3, [r7, #14]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	89fa      	ldrh	r2, [r7, #14]
 8003cf8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f042 0201 	orr.w	r2, r2, #1
 8003d08:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2220      	movs	r2, #32
 8003d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d12:	2300      	movs	r3, #0
 8003d14:	e000      	b.n	8003d18 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003d16:	2302      	movs	r3, #2
  }
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3714      	adds	r7, #20
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d26:	b08f      	sub	sp, #60	; 0x3c
 8003d28:	af0a      	add	r7, sp, #40	; 0x28
 8003d2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e10f      	b.n	8003f56 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d106      	bne.n	8003d56 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f7fd fe13 	bl	800197c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2203      	movs	r2, #3
 8003d5a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d102      	bne.n	8003d70 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4618      	mov	r0, r3
 8003d76:	f003 ff18 	bl	8007baa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	603b      	str	r3, [r7, #0]
 8003d80:	687e      	ldr	r6, [r7, #4]
 8003d82:	466d      	mov	r5, sp
 8003d84:	f106 0410 	add.w	r4, r6, #16
 8003d88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d90:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d94:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d98:	1d33      	adds	r3, r6, #4
 8003d9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d9c:	6838      	ldr	r0, [r7, #0]
 8003d9e:	f003 fea3 	bl	8007ae8 <USB_CoreInit>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d005      	beq.n	8003db4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2202      	movs	r2, #2
 8003dac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e0d0      	b.n	8003f56 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2100      	movs	r1, #0
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f003 ff06 	bl	8007bcc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	73fb      	strb	r3, [r7, #15]
 8003dc4:	e04a      	b.n	8003e5c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003dc6:	7bfa      	ldrb	r2, [r7, #15]
 8003dc8:	6879      	ldr	r1, [r7, #4]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	00db      	lsls	r3, r3, #3
 8003dce:	4413      	add	r3, r2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	440b      	add	r3, r1
 8003dd4:	333d      	adds	r3, #61	; 0x3d
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003dda:	7bfa      	ldrb	r2, [r7, #15]
 8003ddc:	6879      	ldr	r1, [r7, #4]
 8003dde:	4613      	mov	r3, r2
 8003de0:	00db      	lsls	r3, r3, #3
 8003de2:	4413      	add	r3, r2
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	440b      	add	r3, r1
 8003de8:	333c      	adds	r3, #60	; 0x3c
 8003dea:	7bfa      	ldrb	r2, [r7, #15]
 8003dec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003dee:	7bfa      	ldrb	r2, [r7, #15]
 8003df0:	7bfb      	ldrb	r3, [r7, #15]
 8003df2:	b298      	uxth	r0, r3
 8003df4:	6879      	ldr	r1, [r7, #4]
 8003df6:	4613      	mov	r3, r2
 8003df8:	00db      	lsls	r3, r3, #3
 8003dfa:	4413      	add	r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	440b      	add	r3, r1
 8003e00:	3344      	adds	r3, #68	; 0x44
 8003e02:	4602      	mov	r2, r0
 8003e04:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003e06:	7bfa      	ldrb	r2, [r7, #15]
 8003e08:	6879      	ldr	r1, [r7, #4]
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	00db      	lsls	r3, r3, #3
 8003e0e:	4413      	add	r3, r2
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	440b      	add	r3, r1
 8003e14:	3340      	adds	r3, #64	; 0x40
 8003e16:	2200      	movs	r2, #0
 8003e18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003e1a:	7bfa      	ldrb	r2, [r7, #15]
 8003e1c:	6879      	ldr	r1, [r7, #4]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	00db      	lsls	r3, r3, #3
 8003e22:	4413      	add	r3, r2
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	440b      	add	r3, r1
 8003e28:	3348      	adds	r3, #72	; 0x48
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003e2e:	7bfa      	ldrb	r2, [r7, #15]
 8003e30:	6879      	ldr	r1, [r7, #4]
 8003e32:	4613      	mov	r3, r2
 8003e34:	00db      	lsls	r3, r3, #3
 8003e36:	4413      	add	r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	440b      	add	r3, r1
 8003e3c:	334c      	adds	r3, #76	; 0x4c
 8003e3e:	2200      	movs	r2, #0
 8003e40:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003e42:	7bfa      	ldrb	r2, [r7, #15]
 8003e44:	6879      	ldr	r1, [r7, #4]
 8003e46:	4613      	mov	r3, r2
 8003e48:	00db      	lsls	r3, r3, #3
 8003e4a:	4413      	add	r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	440b      	add	r3, r1
 8003e50:	3354      	adds	r3, #84	; 0x54
 8003e52:	2200      	movs	r2, #0
 8003e54:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e56:	7bfb      	ldrb	r3, [r7, #15]
 8003e58:	3301      	adds	r3, #1
 8003e5a:	73fb      	strb	r3, [r7, #15]
 8003e5c:	7bfa      	ldrb	r2, [r7, #15]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d3af      	bcc.n	8003dc6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e66:	2300      	movs	r3, #0
 8003e68:	73fb      	strb	r3, [r7, #15]
 8003e6a:	e044      	b.n	8003ef6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003e6c:	7bfa      	ldrb	r2, [r7, #15]
 8003e6e:	6879      	ldr	r1, [r7, #4]
 8003e70:	4613      	mov	r3, r2
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	4413      	add	r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	440b      	add	r3, r1
 8003e7a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003e7e:	2200      	movs	r2, #0
 8003e80:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003e82:	7bfa      	ldrb	r2, [r7, #15]
 8003e84:	6879      	ldr	r1, [r7, #4]
 8003e86:	4613      	mov	r3, r2
 8003e88:	00db      	lsls	r3, r3, #3
 8003e8a:	4413      	add	r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	440b      	add	r3, r1
 8003e90:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003e94:	7bfa      	ldrb	r2, [r7, #15]
 8003e96:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003e98:	7bfa      	ldrb	r2, [r7, #15]
 8003e9a:	6879      	ldr	r1, [r7, #4]
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	00db      	lsls	r3, r3, #3
 8003ea0:	4413      	add	r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	440b      	add	r3, r1
 8003ea6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003eaa:	2200      	movs	r2, #0
 8003eac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003eae:	7bfa      	ldrb	r2, [r7, #15]
 8003eb0:	6879      	ldr	r1, [r7, #4]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	00db      	lsls	r3, r3, #3
 8003eb6:	4413      	add	r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	440b      	add	r3, r1
 8003ebc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003ec4:	7bfa      	ldrb	r2, [r7, #15]
 8003ec6:	6879      	ldr	r1, [r7, #4]
 8003ec8:	4613      	mov	r3, r2
 8003eca:	00db      	lsls	r3, r3, #3
 8003ecc:	4413      	add	r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	440b      	add	r3, r1
 8003ed2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003eda:	7bfa      	ldrb	r2, [r7, #15]
 8003edc:	6879      	ldr	r1, [r7, #4]
 8003ede:	4613      	mov	r3, r2
 8003ee0:	00db      	lsls	r3, r3, #3
 8003ee2:	4413      	add	r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	440b      	add	r3, r1
 8003ee8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003eec:	2200      	movs	r2, #0
 8003eee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ef0:	7bfb      	ldrb	r3, [r7, #15]
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	73fb      	strb	r3, [r7, #15]
 8003ef6:	7bfa      	ldrb	r2, [r7, #15]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d3b5      	bcc.n	8003e6c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	603b      	str	r3, [r7, #0]
 8003f06:	687e      	ldr	r6, [r7, #4]
 8003f08:	466d      	mov	r5, sp
 8003f0a:	f106 0410 	add.w	r4, r6, #16
 8003f0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f16:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f1a:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f1e:	1d33      	adds	r3, r6, #4
 8003f20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f22:	6838      	ldr	r0, [r7, #0]
 8003f24:	f003 fe9e 	bl	8007c64 <USB_DevInit>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d005      	beq.n	8003f3a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2202      	movs	r2, #2
 8003f32:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e00d      	b.n	8003f56 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f004 f869 	bl	8008026 <USB_DevDisconnect>

  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003f60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b086      	sub	sp, #24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e267      	b.n	8004442 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d075      	beq.n	800406a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f7e:	4b88      	ldr	r3, [pc, #544]	; (80041a0 <HAL_RCC_OscConfig+0x240>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f003 030c 	and.w	r3, r3, #12
 8003f86:	2b04      	cmp	r3, #4
 8003f88:	d00c      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f8a:	4b85      	ldr	r3, [pc, #532]	; (80041a0 <HAL_RCC_OscConfig+0x240>)
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f92:	2b08      	cmp	r3, #8
 8003f94:	d112      	bne.n	8003fbc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f96:	4b82      	ldr	r3, [pc, #520]	; (80041a0 <HAL_RCC_OscConfig+0x240>)
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fa2:	d10b      	bne.n	8003fbc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fa4:	4b7e      	ldr	r3, [pc, #504]	; (80041a0 <HAL_RCC_OscConfig+0x240>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d05b      	beq.n	8004068 <HAL_RCC_OscConfig+0x108>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d157      	bne.n	8004068 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e242      	b.n	8004442 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fc4:	d106      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x74>
 8003fc6:	4b76      	ldr	r3, [pc, #472]	; (80041a0 <HAL_RCC_OscConfig+0x240>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a75      	ldr	r2, [pc, #468]	; (80041a0 <HAL_RCC_OscConfig+0x240>)
 8003fcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fd0:	6013      	str	r3, [r2, #0]
 8003fd2:	e01d      	b.n	8004010 <HAL_RCC_OscConfig+0xb0>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fdc:	d10c      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x98>
 8003fde:	4b70      	ldr	r3, [pc, #448]	; (80041a0 <HAL_RCC_OscConfig+0x240>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a6f      	ldr	r2, [pc, #444]	; (80041a0 <HAL_RCC_OscConfig+0x240>)
 8003fe4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fe8:	6013      	str	r3, [r2, #0]
 8003fea:	4b6d      	ldr	r3, [pc, #436]	; (80041a0 <HAL_RCC_OscConfig+0x240>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a6c      	ldr	r2, [pc, #432]	; (80041a0 <HAL_RCC_OscConfig+0x240>)
 8003ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ff4:	6013      	str	r3, [r2, #0]
 8003ff6:	e00b      	b.n	8004010 <HAL_RCC_OscConfig+0xb0>
 8003ff8:	4b69      	ldr	r3, [pc, #420]	; (80041a0 <HAL_RCC_OscConfig+0x240>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a68      	ldr	r2, [pc, #416]	; (80041a0 <HAL_RCC_OscConfig+0x240>)
 8003ffe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004002:	6013      	str	r3, [r2, #0]
 8004004:	4b66      	ldr	r3, [pc, #408]	; (80041a0 <HAL_RCC_OscConfig+0x240>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a65      	ldr	r2, [pc, #404]	; (80041a0 <HAL_RCC_OscConfig+0x240>)
 800400a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800400e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d013      	beq.n	8004040 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004018:	f7fe fae4 	bl	80025e4 <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004020:	f7fe fae0 	bl	80025e4 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b64      	cmp	r3, #100	; 0x64
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e207      	b.n	8004442 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004032:	4b5b      	ldr	r3, [pc, #364]	; (80041a0 <HAL_RCC_OscConfig+0x240>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d0f0      	beq.n	8004020 <HAL_RCC_OscConfig+0xc0>
 800403e:	e014      	b.n	800406a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004040:	f7fe fad0 	bl	80025e4 <HAL_GetTick>
 8004044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004046:	e008      	b.n	800405a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004048:	f7fe facc 	bl	80025e4 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b64      	cmp	r3, #100	; 0x64
 8004054:	d901      	bls.n	800405a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e1f3      	b.n	8004442 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800405a:	4b51      	ldr	r3, [pc, #324]	; (80041a0 <HAL_RCC_OscConfig+0x240>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1f0      	bne.n	8004048 <HAL_RCC_OscConfig+0xe8>
 8004066:	e000      	b.n	800406a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004068:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d063      	beq.n	800413e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004076:	4b4a      	ldr	r3, [pc, #296]	; (80041a0 <HAL_RCC_OscConfig+0x240>)
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f003 030c 	and.w	r3, r3, #12
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00b      	beq.n	800409a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004082:	4b47      	ldr	r3, [pc, #284]	; (80041a0 <HAL_RCC_OscConfig+0x240>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800408a:	2b08      	cmp	r3, #8
 800408c:	d11c      	bne.n	80040c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800408e:	4b44      	ldr	r3, [pc, #272]	; (80041a0 <HAL_RCC_OscConfig+0x240>)
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d116      	bne.n	80040c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800409a:	4b41      	ldr	r3, [pc, #260]	; (80041a0 <HAL_RCC_OscConfig+0x240>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d005      	beq.n	80040b2 <HAL_RCC_OscConfig+0x152>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d001      	beq.n	80040b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e1c7      	b.n	8004442 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040b2:	4b3b      	ldr	r3, [pc, #236]	; (80041a0 <HAL_RCC_OscConfig+0x240>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	00db      	lsls	r3, r3, #3
 80040c0:	4937      	ldr	r1, [pc, #220]	; (80041a0 <HAL_RCC_OscConfig+0x240>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040c6:	e03a      	b.n	800413e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d020      	beq.n	8004112 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040d0:	4b34      	ldr	r3, [pc, #208]	; (80041a4 <HAL_RCC_OscConfig+0x244>)
 80040d2:	2201      	movs	r2, #1
 80040d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d6:	f7fe fa85 	bl	80025e4 <HAL_GetTick>
 80040da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040dc:	e008      	b.n	80040f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040de:	f7fe fa81 	bl	80025e4 <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d901      	bls.n	80040f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e1a8      	b.n	8004442 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040f0:	4b2b      	ldr	r3, [pc, #172]	; (80041a0 <HAL_RCC_OscConfig+0x240>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0302 	and.w	r3, r3, #2
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d0f0      	beq.n	80040de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040fc:	4b28      	ldr	r3, [pc, #160]	; (80041a0 <HAL_RCC_OscConfig+0x240>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	00db      	lsls	r3, r3, #3
 800410a:	4925      	ldr	r1, [pc, #148]	; (80041a0 <HAL_RCC_OscConfig+0x240>)
 800410c:	4313      	orrs	r3, r2
 800410e:	600b      	str	r3, [r1, #0]
 8004110:	e015      	b.n	800413e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004112:	4b24      	ldr	r3, [pc, #144]	; (80041a4 <HAL_RCC_OscConfig+0x244>)
 8004114:	2200      	movs	r2, #0
 8004116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004118:	f7fe fa64 	bl	80025e4 <HAL_GetTick>
 800411c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800411e:	e008      	b.n	8004132 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004120:	f7fe fa60 	bl	80025e4 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b02      	cmp	r3, #2
 800412c:	d901      	bls.n	8004132 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e187      	b.n	8004442 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004132:	4b1b      	ldr	r3, [pc, #108]	; (80041a0 <HAL_RCC_OscConfig+0x240>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1f0      	bne.n	8004120 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0308 	and.w	r3, r3, #8
 8004146:	2b00      	cmp	r3, #0
 8004148:	d036      	beq.n	80041b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d016      	beq.n	8004180 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004152:	4b15      	ldr	r3, [pc, #84]	; (80041a8 <HAL_RCC_OscConfig+0x248>)
 8004154:	2201      	movs	r2, #1
 8004156:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004158:	f7fe fa44 	bl	80025e4 <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800415e:	e008      	b.n	8004172 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004160:	f7fe fa40 	bl	80025e4 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b02      	cmp	r3, #2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e167      	b.n	8004442 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004172:	4b0b      	ldr	r3, [pc, #44]	; (80041a0 <HAL_RCC_OscConfig+0x240>)
 8004174:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d0f0      	beq.n	8004160 <HAL_RCC_OscConfig+0x200>
 800417e:	e01b      	b.n	80041b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004180:	4b09      	ldr	r3, [pc, #36]	; (80041a8 <HAL_RCC_OscConfig+0x248>)
 8004182:	2200      	movs	r2, #0
 8004184:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004186:	f7fe fa2d 	bl	80025e4 <HAL_GetTick>
 800418a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800418c:	e00e      	b.n	80041ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800418e:	f7fe fa29 	bl	80025e4 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	2b02      	cmp	r3, #2
 800419a:	d907      	bls.n	80041ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e150      	b.n	8004442 <HAL_RCC_OscConfig+0x4e2>
 80041a0:	40023800 	.word	0x40023800
 80041a4:	42470000 	.word	0x42470000
 80041a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041ac:	4b88      	ldr	r3, [pc, #544]	; (80043d0 <HAL_RCC_OscConfig+0x470>)
 80041ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041b0:	f003 0302 	and.w	r3, r3, #2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d1ea      	bne.n	800418e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0304 	and.w	r3, r3, #4
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f000 8097 	beq.w	80042f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041c6:	2300      	movs	r3, #0
 80041c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041ca:	4b81      	ldr	r3, [pc, #516]	; (80043d0 <HAL_RCC_OscConfig+0x470>)
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d10f      	bne.n	80041f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041d6:	2300      	movs	r3, #0
 80041d8:	60bb      	str	r3, [r7, #8]
 80041da:	4b7d      	ldr	r3, [pc, #500]	; (80043d0 <HAL_RCC_OscConfig+0x470>)
 80041dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041de:	4a7c      	ldr	r2, [pc, #496]	; (80043d0 <HAL_RCC_OscConfig+0x470>)
 80041e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041e4:	6413      	str	r3, [r2, #64]	; 0x40
 80041e6:	4b7a      	ldr	r3, [pc, #488]	; (80043d0 <HAL_RCC_OscConfig+0x470>)
 80041e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ee:	60bb      	str	r3, [r7, #8]
 80041f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041f2:	2301      	movs	r3, #1
 80041f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041f6:	4b77      	ldr	r3, [pc, #476]	; (80043d4 <HAL_RCC_OscConfig+0x474>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d118      	bne.n	8004234 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004202:	4b74      	ldr	r3, [pc, #464]	; (80043d4 <HAL_RCC_OscConfig+0x474>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a73      	ldr	r2, [pc, #460]	; (80043d4 <HAL_RCC_OscConfig+0x474>)
 8004208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800420c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800420e:	f7fe f9e9 	bl	80025e4 <HAL_GetTick>
 8004212:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004214:	e008      	b.n	8004228 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004216:	f7fe f9e5 	bl	80025e4 <HAL_GetTick>
 800421a:	4602      	mov	r2, r0
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	2b02      	cmp	r3, #2
 8004222:	d901      	bls.n	8004228 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	e10c      	b.n	8004442 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004228:	4b6a      	ldr	r3, [pc, #424]	; (80043d4 <HAL_RCC_OscConfig+0x474>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004230:	2b00      	cmp	r3, #0
 8004232:	d0f0      	beq.n	8004216 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d106      	bne.n	800424a <HAL_RCC_OscConfig+0x2ea>
 800423c:	4b64      	ldr	r3, [pc, #400]	; (80043d0 <HAL_RCC_OscConfig+0x470>)
 800423e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004240:	4a63      	ldr	r2, [pc, #396]	; (80043d0 <HAL_RCC_OscConfig+0x470>)
 8004242:	f043 0301 	orr.w	r3, r3, #1
 8004246:	6713      	str	r3, [r2, #112]	; 0x70
 8004248:	e01c      	b.n	8004284 <HAL_RCC_OscConfig+0x324>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	2b05      	cmp	r3, #5
 8004250:	d10c      	bne.n	800426c <HAL_RCC_OscConfig+0x30c>
 8004252:	4b5f      	ldr	r3, [pc, #380]	; (80043d0 <HAL_RCC_OscConfig+0x470>)
 8004254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004256:	4a5e      	ldr	r2, [pc, #376]	; (80043d0 <HAL_RCC_OscConfig+0x470>)
 8004258:	f043 0304 	orr.w	r3, r3, #4
 800425c:	6713      	str	r3, [r2, #112]	; 0x70
 800425e:	4b5c      	ldr	r3, [pc, #368]	; (80043d0 <HAL_RCC_OscConfig+0x470>)
 8004260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004262:	4a5b      	ldr	r2, [pc, #364]	; (80043d0 <HAL_RCC_OscConfig+0x470>)
 8004264:	f043 0301 	orr.w	r3, r3, #1
 8004268:	6713      	str	r3, [r2, #112]	; 0x70
 800426a:	e00b      	b.n	8004284 <HAL_RCC_OscConfig+0x324>
 800426c:	4b58      	ldr	r3, [pc, #352]	; (80043d0 <HAL_RCC_OscConfig+0x470>)
 800426e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004270:	4a57      	ldr	r2, [pc, #348]	; (80043d0 <HAL_RCC_OscConfig+0x470>)
 8004272:	f023 0301 	bic.w	r3, r3, #1
 8004276:	6713      	str	r3, [r2, #112]	; 0x70
 8004278:	4b55      	ldr	r3, [pc, #340]	; (80043d0 <HAL_RCC_OscConfig+0x470>)
 800427a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427c:	4a54      	ldr	r2, [pc, #336]	; (80043d0 <HAL_RCC_OscConfig+0x470>)
 800427e:	f023 0304 	bic.w	r3, r3, #4
 8004282:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d015      	beq.n	80042b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800428c:	f7fe f9aa 	bl	80025e4 <HAL_GetTick>
 8004290:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004292:	e00a      	b.n	80042aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004294:	f7fe f9a6 	bl	80025e4 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	f241 3288 	movw	r2, #5000	; 0x1388
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e0cb      	b.n	8004442 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042aa:	4b49      	ldr	r3, [pc, #292]	; (80043d0 <HAL_RCC_OscConfig+0x470>)
 80042ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d0ee      	beq.n	8004294 <HAL_RCC_OscConfig+0x334>
 80042b6:	e014      	b.n	80042e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042b8:	f7fe f994 	bl	80025e4 <HAL_GetTick>
 80042bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042be:	e00a      	b.n	80042d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042c0:	f7fe f990 	bl	80025e4 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d901      	bls.n	80042d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e0b5      	b.n	8004442 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042d6:	4b3e      	ldr	r3, [pc, #248]	; (80043d0 <HAL_RCC_OscConfig+0x470>)
 80042d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1ee      	bne.n	80042c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042e2:	7dfb      	ldrb	r3, [r7, #23]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d105      	bne.n	80042f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042e8:	4b39      	ldr	r3, [pc, #228]	; (80043d0 <HAL_RCC_OscConfig+0x470>)
 80042ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ec:	4a38      	ldr	r2, [pc, #224]	; (80043d0 <HAL_RCC_OscConfig+0x470>)
 80042ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f000 80a1 	beq.w	8004440 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042fe:	4b34      	ldr	r3, [pc, #208]	; (80043d0 <HAL_RCC_OscConfig+0x470>)
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f003 030c 	and.w	r3, r3, #12
 8004306:	2b08      	cmp	r3, #8
 8004308:	d05c      	beq.n	80043c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	2b02      	cmp	r3, #2
 8004310:	d141      	bne.n	8004396 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004312:	4b31      	ldr	r3, [pc, #196]	; (80043d8 <HAL_RCC_OscConfig+0x478>)
 8004314:	2200      	movs	r2, #0
 8004316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004318:	f7fe f964 	bl	80025e4 <HAL_GetTick>
 800431c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800431e:	e008      	b.n	8004332 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004320:	f7fe f960 	bl	80025e4 <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	2b02      	cmp	r3, #2
 800432c:	d901      	bls.n	8004332 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e087      	b.n	8004442 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004332:	4b27      	ldr	r3, [pc, #156]	; (80043d0 <HAL_RCC_OscConfig+0x470>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1f0      	bne.n	8004320 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	69da      	ldr	r2, [r3, #28]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	431a      	orrs	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434c:	019b      	lsls	r3, r3, #6
 800434e:	431a      	orrs	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004354:	085b      	lsrs	r3, r3, #1
 8004356:	3b01      	subs	r3, #1
 8004358:	041b      	lsls	r3, r3, #16
 800435a:	431a      	orrs	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004360:	061b      	lsls	r3, r3, #24
 8004362:	491b      	ldr	r1, [pc, #108]	; (80043d0 <HAL_RCC_OscConfig+0x470>)
 8004364:	4313      	orrs	r3, r2
 8004366:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004368:	4b1b      	ldr	r3, [pc, #108]	; (80043d8 <HAL_RCC_OscConfig+0x478>)
 800436a:	2201      	movs	r2, #1
 800436c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800436e:	f7fe f939 	bl	80025e4 <HAL_GetTick>
 8004372:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004374:	e008      	b.n	8004388 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004376:	f7fe f935 	bl	80025e4 <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	2b02      	cmp	r3, #2
 8004382:	d901      	bls.n	8004388 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e05c      	b.n	8004442 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004388:	4b11      	ldr	r3, [pc, #68]	; (80043d0 <HAL_RCC_OscConfig+0x470>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d0f0      	beq.n	8004376 <HAL_RCC_OscConfig+0x416>
 8004394:	e054      	b.n	8004440 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004396:	4b10      	ldr	r3, [pc, #64]	; (80043d8 <HAL_RCC_OscConfig+0x478>)
 8004398:	2200      	movs	r2, #0
 800439a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800439c:	f7fe f922 	bl	80025e4 <HAL_GetTick>
 80043a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043a2:	e008      	b.n	80043b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043a4:	f7fe f91e 	bl	80025e4 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e045      	b.n	8004442 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043b6:	4b06      	ldr	r3, [pc, #24]	; (80043d0 <HAL_RCC_OscConfig+0x470>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1f0      	bne.n	80043a4 <HAL_RCC_OscConfig+0x444>
 80043c2:	e03d      	b.n	8004440 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d107      	bne.n	80043dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e038      	b.n	8004442 <HAL_RCC_OscConfig+0x4e2>
 80043d0:	40023800 	.word	0x40023800
 80043d4:	40007000 	.word	0x40007000
 80043d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043dc:	4b1b      	ldr	r3, [pc, #108]	; (800444c <HAL_RCC_OscConfig+0x4ec>)
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d028      	beq.n	800443c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d121      	bne.n	800443c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004402:	429a      	cmp	r2, r3
 8004404:	d11a      	bne.n	800443c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004406:	68fa      	ldr	r2, [r7, #12]
 8004408:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800440c:	4013      	ands	r3, r2
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004412:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004414:	4293      	cmp	r3, r2
 8004416:	d111      	bne.n	800443c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004422:	085b      	lsrs	r3, r3, #1
 8004424:	3b01      	subs	r3, #1
 8004426:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004428:	429a      	cmp	r2, r3
 800442a:	d107      	bne.n	800443c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004436:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004438:	429a      	cmp	r2, r3
 800443a:	d001      	beq.n	8004440 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e000      	b.n	8004442 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3718      	adds	r7, #24
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	40023800 	.word	0x40023800

08004450 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d101      	bne.n	8004464 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e0cc      	b.n	80045fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004464:	4b68      	ldr	r3, [pc, #416]	; (8004608 <HAL_RCC_ClockConfig+0x1b8>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 030f 	and.w	r3, r3, #15
 800446c:	683a      	ldr	r2, [r7, #0]
 800446e:	429a      	cmp	r2, r3
 8004470:	d90c      	bls.n	800448c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004472:	4b65      	ldr	r3, [pc, #404]	; (8004608 <HAL_RCC_ClockConfig+0x1b8>)
 8004474:	683a      	ldr	r2, [r7, #0]
 8004476:	b2d2      	uxtb	r2, r2
 8004478:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800447a:	4b63      	ldr	r3, [pc, #396]	; (8004608 <HAL_RCC_ClockConfig+0x1b8>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 030f 	and.w	r3, r3, #15
 8004482:	683a      	ldr	r2, [r7, #0]
 8004484:	429a      	cmp	r2, r3
 8004486:	d001      	beq.n	800448c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e0b8      	b.n	80045fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0302 	and.w	r3, r3, #2
 8004494:	2b00      	cmp	r3, #0
 8004496:	d020      	beq.n	80044da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0304 	and.w	r3, r3, #4
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d005      	beq.n	80044b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044a4:	4b59      	ldr	r3, [pc, #356]	; (800460c <HAL_RCC_ClockConfig+0x1bc>)
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	4a58      	ldr	r2, [pc, #352]	; (800460c <HAL_RCC_ClockConfig+0x1bc>)
 80044aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0308 	and.w	r3, r3, #8
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d005      	beq.n	80044c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044bc:	4b53      	ldr	r3, [pc, #332]	; (800460c <HAL_RCC_ClockConfig+0x1bc>)
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	4a52      	ldr	r2, [pc, #328]	; (800460c <HAL_RCC_ClockConfig+0x1bc>)
 80044c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044c8:	4b50      	ldr	r3, [pc, #320]	; (800460c <HAL_RCC_ClockConfig+0x1bc>)
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	494d      	ldr	r1, [pc, #308]	; (800460c <HAL_RCC_ClockConfig+0x1bc>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0301 	and.w	r3, r3, #1
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d044      	beq.n	8004570 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d107      	bne.n	80044fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ee:	4b47      	ldr	r3, [pc, #284]	; (800460c <HAL_RCC_ClockConfig+0x1bc>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d119      	bne.n	800452e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e07f      	b.n	80045fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	2b02      	cmp	r3, #2
 8004504:	d003      	beq.n	800450e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800450a:	2b03      	cmp	r3, #3
 800450c:	d107      	bne.n	800451e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800450e:	4b3f      	ldr	r3, [pc, #252]	; (800460c <HAL_RCC_ClockConfig+0x1bc>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d109      	bne.n	800452e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e06f      	b.n	80045fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800451e:	4b3b      	ldr	r3, [pc, #236]	; (800460c <HAL_RCC_ClockConfig+0x1bc>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d101      	bne.n	800452e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e067      	b.n	80045fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800452e:	4b37      	ldr	r3, [pc, #220]	; (800460c <HAL_RCC_ClockConfig+0x1bc>)
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f023 0203 	bic.w	r2, r3, #3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	4934      	ldr	r1, [pc, #208]	; (800460c <HAL_RCC_ClockConfig+0x1bc>)
 800453c:	4313      	orrs	r3, r2
 800453e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004540:	f7fe f850 	bl	80025e4 <HAL_GetTick>
 8004544:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004546:	e00a      	b.n	800455e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004548:	f7fe f84c 	bl	80025e4 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	f241 3288 	movw	r2, #5000	; 0x1388
 8004556:	4293      	cmp	r3, r2
 8004558:	d901      	bls.n	800455e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e04f      	b.n	80045fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800455e:	4b2b      	ldr	r3, [pc, #172]	; (800460c <HAL_RCC_ClockConfig+0x1bc>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f003 020c 	and.w	r2, r3, #12
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	429a      	cmp	r2, r3
 800456e:	d1eb      	bne.n	8004548 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004570:	4b25      	ldr	r3, [pc, #148]	; (8004608 <HAL_RCC_ClockConfig+0x1b8>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 030f 	and.w	r3, r3, #15
 8004578:	683a      	ldr	r2, [r7, #0]
 800457a:	429a      	cmp	r2, r3
 800457c:	d20c      	bcs.n	8004598 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800457e:	4b22      	ldr	r3, [pc, #136]	; (8004608 <HAL_RCC_ClockConfig+0x1b8>)
 8004580:	683a      	ldr	r2, [r7, #0]
 8004582:	b2d2      	uxtb	r2, r2
 8004584:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004586:	4b20      	ldr	r3, [pc, #128]	; (8004608 <HAL_RCC_ClockConfig+0x1b8>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 030f 	and.w	r3, r3, #15
 800458e:	683a      	ldr	r2, [r7, #0]
 8004590:	429a      	cmp	r2, r3
 8004592:	d001      	beq.n	8004598 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e032      	b.n	80045fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0304 	and.w	r3, r3, #4
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d008      	beq.n	80045b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045a4:	4b19      	ldr	r3, [pc, #100]	; (800460c <HAL_RCC_ClockConfig+0x1bc>)
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	4916      	ldr	r1, [pc, #88]	; (800460c <HAL_RCC_ClockConfig+0x1bc>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0308 	and.w	r3, r3, #8
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d009      	beq.n	80045d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045c2:	4b12      	ldr	r3, [pc, #72]	; (800460c <HAL_RCC_ClockConfig+0x1bc>)
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	00db      	lsls	r3, r3, #3
 80045d0:	490e      	ldr	r1, [pc, #56]	; (800460c <HAL_RCC_ClockConfig+0x1bc>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045d6:	f000 f821 	bl	800461c <HAL_RCC_GetSysClockFreq>
 80045da:	4602      	mov	r2, r0
 80045dc:	4b0b      	ldr	r3, [pc, #44]	; (800460c <HAL_RCC_ClockConfig+0x1bc>)
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	091b      	lsrs	r3, r3, #4
 80045e2:	f003 030f 	and.w	r3, r3, #15
 80045e6:	490a      	ldr	r1, [pc, #40]	; (8004610 <HAL_RCC_ClockConfig+0x1c0>)
 80045e8:	5ccb      	ldrb	r3, [r1, r3]
 80045ea:	fa22 f303 	lsr.w	r3, r2, r3
 80045ee:	4a09      	ldr	r2, [pc, #36]	; (8004614 <HAL_RCC_ClockConfig+0x1c4>)
 80045f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045f2:	4b09      	ldr	r3, [pc, #36]	; (8004618 <HAL_RCC_ClockConfig+0x1c8>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7fd ffb0 	bl	800255c <HAL_InitTick>

  return HAL_OK;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3710      	adds	r7, #16
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	40023c00 	.word	0x40023c00
 800460c:	40023800 	.word	0x40023800
 8004610:	0800973c 	.word	0x0800973c
 8004614:	20000008 	.word	0x20000008
 8004618:	20000010 	.word	0x20000010

0800461c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800461c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004620:	b094      	sub	sp, #80	; 0x50
 8004622:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004624:	2300      	movs	r3, #0
 8004626:	647b      	str	r3, [r7, #68]	; 0x44
 8004628:	2300      	movs	r3, #0
 800462a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800462c:	2300      	movs	r3, #0
 800462e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004630:	2300      	movs	r3, #0
 8004632:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004634:	4b79      	ldr	r3, [pc, #484]	; (800481c <HAL_RCC_GetSysClockFreq+0x200>)
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f003 030c 	and.w	r3, r3, #12
 800463c:	2b08      	cmp	r3, #8
 800463e:	d00d      	beq.n	800465c <HAL_RCC_GetSysClockFreq+0x40>
 8004640:	2b08      	cmp	r3, #8
 8004642:	f200 80e1 	bhi.w	8004808 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004646:	2b00      	cmp	r3, #0
 8004648:	d002      	beq.n	8004650 <HAL_RCC_GetSysClockFreq+0x34>
 800464a:	2b04      	cmp	r3, #4
 800464c:	d003      	beq.n	8004656 <HAL_RCC_GetSysClockFreq+0x3a>
 800464e:	e0db      	b.n	8004808 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004650:	4b73      	ldr	r3, [pc, #460]	; (8004820 <HAL_RCC_GetSysClockFreq+0x204>)
 8004652:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004654:	e0db      	b.n	800480e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004656:	4b73      	ldr	r3, [pc, #460]	; (8004824 <HAL_RCC_GetSysClockFreq+0x208>)
 8004658:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800465a:	e0d8      	b.n	800480e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800465c:	4b6f      	ldr	r3, [pc, #444]	; (800481c <HAL_RCC_GetSysClockFreq+0x200>)
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004664:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004666:	4b6d      	ldr	r3, [pc, #436]	; (800481c <HAL_RCC_GetSysClockFreq+0x200>)
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d063      	beq.n	800473a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004672:	4b6a      	ldr	r3, [pc, #424]	; (800481c <HAL_RCC_GetSysClockFreq+0x200>)
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	099b      	lsrs	r3, r3, #6
 8004678:	2200      	movs	r2, #0
 800467a:	63bb      	str	r3, [r7, #56]	; 0x38
 800467c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800467e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004680:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004684:	633b      	str	r3, [r7, #48]	; 0x30
 8004686:	2300      	movs	r3, #0
 8004688:	637b      	str	r3, [r7, #52]	; 0x34
 800468a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800468e:	4622      	mov	r2, r4
 8004690:	462b      	mov	r3, r5
 8004692:	f04f 0000 	mov.w	r0, #0
 8004696:	f04f 0100 	mov.w	r1, #0
 800469a:	0159      	lsls	r1, r3, #5
 800469c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046a0:	0150      	lsls	r0, r2, #5
 80046a2:	4602      	mov	r2, r0
 80046a4:	460b      	mov	r3, r1
 80046a6:	4621      	mov	r1, r4
 80046a8:	1a51      	subs	r1, r2, r1
 80046aa:	6139      	str	r1, [r7, #16]
 80046ac:	4629      	mov	r1, r5
 80046ae:	eb63 0301 	sbc.w	r3, r3, r1
 80046b2:	617b      	str	r3, [r7, #20]
 80046b4:	f04f 0200 	mov.w	r2, #0
 80046b8:	f04f 0300 	mov.w	r3, #0
 80046bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046c0:	4659      	mov	r1, fp
 80046c2:	018b      	lsls	r3, r1, #6
 80046c4:	4651      	mov	r1, sl
 80046c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046ca:	4651      	mov	r1, sl
 80046cc:	018a      	lsls	r2, r1, #6
 80046ce:	4651      	mov	r1, sl
 80046d0:	ebb2 0801 	subs.w	r8, r2, r1
 80046d4:	4659      	mov	r1, fp
 80046d6:	eb63 0901 	sbc.w	r9, r3, r1
 80046da:	f04f 0200 	mov.w	r2, #0
 80046de:	f04f 0300 	mov.w	r3, #0
 80046e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046ee:	4690      	mov	r8, r2
 80046f0:	4699      	mov	r9, r3
 80046f2:	4623      	mov	r3, r4
 80046f4:	eb18 0303 	adds.w	r3, r8, r3
 80046f8:	60bb      	str	r3, [r7, #8]
 80046fa:	462b      	mov	r3, r5
 80046fc:	eb49 0303 	adc.w	r3, r9, r3
 8004700:	60fb      	str	r3, [r7, #12]
 8004702:	f04f 0200 	mov.w	r2, #0
 8004706:	f04f 0300 	mov.w	r3, #0
 800470a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800470e:	4629      	mov	r1, r5
 8004710:	024b      	lsls	r3, r1, #9
 8004712:	4621      	mov	r1, r4
 8004714:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004718:	4621      	mov	r1, r4
 800471a:	024a      	lsls	r2, r1, #9
 800471c:	4610      	mov	r0, r2
 800471e:	4619      	mov	r1, r3
 8004720:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004722:	2200      	movs	r2, #0
 8004724:	62bb      	str	r3, [r7, #40]	; 0x28
 8004726:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004728:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800472c:	f7fb fdb0 	bl	8000290 <__aeabi_uldivmod>
 8004730:	4602      	mov	r2, r0
 8004732:	460b      	mov	r3, r1
 8004734:	4613      	mov	r3, r2
 8004736:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004738:	e058      	b.n	80047ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800473a:	4b38      	ldr	r3, [pc, #224]	; (800481c <HAL_RCC_GetSysClockFreq+0x200>)
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	099b      	lsrs	r3, r3, #6
 8004740:	2200      	movs	r2, #0
 8004742:	4618      	mov	r0, r3
 8004744:	4611      	mov	r1, r2
 8004746:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800474a:	623b      	str	r3, [r7, #32]
 800474c:	2300      	movs	r3, #0
 800474e:	627b      	str	r3, [r7, #36]	; 0x24
 8004750:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004754:	4642      	mov	r2, r8
 8004756:	464b      	mov	r3, r9
 8004758:	f04f 0000 	mov.w	r0, #0
 800475c:	f04f 0100 	mov.w	r1, #0
 8004760:	0159      	lsls	r1, r3, #5
 8004762:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004766:	0150      	lsls	r0, r2, #5
 8004768:	4602      	mov	r2, r0
 800476a:	460b      	mov	r3, r1
 800476c:	4641      	mov	r1, r8
 800476e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004772:	4649      	mov	r1, r9
 8004774:	eb63 0b01 	sbc.w	fp, r3, r1
 8004778:	f04f 0200 	mov.w	r2, #0
 800477c:	f04f 0300 	mov.w	r3, #0
 8004780:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004784:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004788:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800478c:	ebb2 040a 	subs.w	r4, r2, sl
 8004790:	eb63 050b 	sbc.w	r5, r3, fp
 8004794:	f04f 0200 	mov.w	r2, #0
 8004798:	f04f 0300 	mov.w	r3, #0
 800479c:	00eb      	lsls	r3, r5, #3
 800479e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047a2:	00e2      	lsls	r2, r4, #3
 80047a4:	4614      	mov	r4, r2
 80047a6:	461d      	mov	r5, r3
 80047a8:	4643      	mov	r3, r8
 80047aa:	18e3      	adds	r3, r4, r3
 80047ac:	603b      	str	r3, [r7, #0]
 80047ae:	464b      	mov	r3, r9
 80047b0:	eb45 0303 	adc.w	r3, r5, r3
 80047b4:	607b      	str	r3, [r7, #4]
 80047b6:	f04f 0200 	mov.w	r2, #0
 80047ba:	f04f 0300 	mov.w	r3, #0
 80047be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80047c2:	4629      	mov	r1, r5
 80047c4:	028b      	lsls	r3, r1, #10
 80047c6:	4621      	mov	r1, r4
 80047c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047cc:	4621      	mov	r1, r4
 80047ce:	028a      	lsls	r2, r1, #10
 80047d0:	4610      	mov	r0, r2
 80047d2:	4619      	mov	r1, r3
 80047d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047d6:	2200      	movs	r2, #0
 80047d8:	61bb      	str	r3, [r7, #24]
 80047da:	61fa      	str	r2, [r7, #28]
 80047dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047e0:	f7fb fd56 	bl	8000290 <__aeabi_uldivmod>
 80047e4:	4602      	mov	r2, r0
 80047e6:	460b      	mov	r3, r1
 80047e8:	4613      	mov	r3, r2
 80047ea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80047ec:	4b0b      	ldr	r3, [pc, #44]	; (800481c <HAL_RCC_GetSysClockFreq+0x200>)
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	0c1b      	lsrs	r3, r3, #16
 80047f2:	f003 0303 	and.w	r3, r3, #3
 80047f6:	3301      	adds	r3, #1
 80047f8:	005b      	lsls	r3, r3, #1
 80047fa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80047fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004800:	fbb2 f3f3 	udiv	r3, r2, r3
 8004804:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004806:	e002      	b.n	800480e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004808:	4b05      	ldr	r3, [pc, #20]	; (8004820 <HAL_RCC_GetSysClockFreq+0x204>)
 800480a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800480c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800480e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004810:	4618      	mov	r0, r3
 8004812:	3750      	adds	r7, #80	; 0x50
 8004814:	46bd      	mov	sp, r7
 8004816:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800481a:	bf00      	nop
 800481c:	40023800 	.word	0x40023800
 8004820:	00f42400 	.word	0x00f42400
 8004824:	007a1200 	.word	0x007a1200

08004828 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004828:	b480      	push	{r7}
 800482a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800482c:	4b03      	ldr	r3, [pc, #12]	; (800483c <HAL_RCC_GetHCLKFreq+0x14>)
 800482e:	681b      	ldr	r3, [r3, #0]
}
 8004830:	4618      	mov	r0, r3
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	20000008 	.word	0x20000008

08004840 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004844:	f7ff fff0 	bl	8004828 <HAL_RCC_GetHCLKFreq>
 8004848:	4602      	mov	r2, r0
 800484a:	4b05      	ldr	r3, [pc, #20]	; (8004860 <HAL_RCC_GetPCLK1Freq+0x20>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	0a9b      	lsrs	r3, r3, #10
 8004850:	f003 0307 	and.w	r3, r3, #7
 8004854:	4903      	ldr	r1, [pc, #12]	; (8004864 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004856:	5ccb      	ldrb	r3, [r1, r3]
 8004858:	fa22 f303 	lsr.w	r3, r2, r3
}
 800485c:	4618      	mov	r0, r3
 800485e:	bd80      	pop	{r7, pc}
 8004860:	40023800 	.word	0x40023800
 8004864:	0800974c 	.word	0x0800974c

08004868 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800486c:	f7ff ffdc 	bl	8004828 <HAL_RCC_GetHCLKFreq>
 8004870:	4602      	mov	r2, r0
 8004872:	4b05      	ldr	r3, [pc, #20]	; (8004888 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	0b5b      	lsrs	r3, r3, #13
 8004878:	f003 0307 	and.w	r3, r3, #7
 800487c:	4903      	ldr	r1, [pc, #12]	; (800488c <HAL_RCC_GetPCLK2Freq+0x24>)
 800487e:	5ccb      	ldrb	r3, [r1, r3]
 8004880:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004884:	4618      	mov	r0, r3
 8004886:	bd80      	pop	{r7, pc}
 8004888:	40023800 	.word	0x40023800
 800488c:	0800974c 	.word	0x0800974c

08004890 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b086      	sub	sp, #24
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004898:	2300      	movs	r3, #0
 800489a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800489c:	2300      	movs	r3, #0
 800489e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0301 	and.w	r3, r3, #1
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d10b      	bne.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d105      	bne.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d075      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80048c4:	4b91      	ldr	r3, [pc, #580]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80048c6:	2200      	movs	r2, #0
 80048c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80048ca:	f7fd fe8b 	bl	80025e4 <HAL_GetTick>
 80048ce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048d0:	e008      	b.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80048d2:	f7fd fe87 	bl	80025e4 <HAL_GetTick>
 80048d6:	4602      	mov	r2, r0
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d901      	bls.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e189      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048e4:	4b8a      	ldr	r3, [pc, #552]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d1f0      	bne.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0301 	and.w	r3, r3, #1
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d009      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	019a      	lsls	r2, r3, #6
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	071b      	lsls	r3, r3, #28
 8004908:	4981      	ldr	r1, [pc, #516]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800490a:	4313      	orrs	r3, r2
 800490c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0302 	and.w	r3, r3, #2
 8004918:	2b00      	cmp	r3, #0
 800491a:	d01f      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800491c:	4b7c      	ldr	r3, [pc, #496]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800491e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004922:	0f1b      	lsrs	r3, r3, #28
 8004924:	f003 0307 	and.w	r3, r3, #7
 8004928:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	019a      	lsls	r2, r3, #6
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	061b      	lsls	r3, r3, #24
 8004936:	431a      	orrs	r2, r3
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	071b      	lsls	r3, r3, #28
 800493c:	4974      	ldr	r1, [pc, #464]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800493e:	4313      	orrs	r3, r2
 8004940:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004944:	4b72      	ldr	r3, [pc, #456]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004946:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800494a:	f023 021f 	bic.w	r2, r3, #31
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	69db      	ldr	r3, [r3, #28]
 8004952:	3b01      	subs	r3, #1
 8004954:	496e      	ldr	r1, [pc, #440]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004956:	4313      	orrs	r3, r2
 8004958:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00d      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	019a      	lsls	r2, r3, #6
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	061b      	lsls	r3, r3, #24
 8004974:	431a      	orrs	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	071b      	lsls	r3, r3, #28
 800497c:	4964      	ldr	r1, [pc, #400]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800497e:	4313      	orrs	r3, r2
 8004980:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004984:	4b61      	ldr	r3, [pc, #388]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004986:	2201      	movs	r2, #1
 8004988:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800498a:	f7fd fe2b 	bl	80025e4 <HAL_GetTick>
 800498e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004990:	e008      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004992:	f7fd fe27 	bl	80025e4 <HAL_GetTick>
 8004996:	4602      	mov	r2, r0
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	2b02      	cmp	r3, #2
 800499e:	d901      	bls.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e129      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049a4:	4b5a      	ldr	r3, [pc, #360]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d0f0      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0304 	and.w	r3, r3, #4
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d105      	bne.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d079      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80049c8:	4b52      	ldr	r3, [pc, #328]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80049ce:	f7fd fe09 	bl	80025e4 <HAL_GetTick>
 80049d2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80049d4:	e008      	b.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80049d6:	f7fd fe05 	bl	80025e4 <HAL_GetTick>
 80049da:	4602      	mov	r2, r0
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	d901      	bls.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e107      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80049e8:	4b49      	ldr	r3, [pc, #292]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049f4:	d0ef      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0304 	and.w	r3, r3, #4
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d020      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a02:	4b43      	ldr	r3, [pc, #268]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a08:	0f1b      	lsrs	r3, r3, #28
 8004a0a:	f003 0307 	and.w	r3, r3, #7
 8004a0e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	019a      	lsls	r2, r3, #6
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	061b      	lsls	r3, r3, #24
 8004a1c:	431a      	orrs	r2, r3
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	071b      	lsls	r3, r3, #28
 8004a22:	493b      	ldr	r1, [pc, #236]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004a2a:	4b39      	ldr	r3, [pc, #228]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a30:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a1b      	ldr	r3, [r3, #32]
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	021b      	lsls	r3, r3, #8
 8004a3c:	4934      	ldr	r1, [pc, #208]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0308 	and.w	r3, r3, #8
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d01e      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a50:	4b2f      	ldr	r3, [pc, #188]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a56:	0e1b      	lsrs	r3, r3, #24
 8004a58:	f003 030f 	and.w	r3, r3, #15
 8004a5c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	019a      	lsls	r2, r3, #6
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	061b      	lsls	r3, r3, #24
 8004a68:	431a      	orrs	r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	071b      	lsls	r3, r3, #28
 8004a70:	4927      	ldr	r1, [pc, #156]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004a78:	4b25      	ldr	r3, [pc, #148]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a7e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a86:	4922      	ldr	r1, [pc, #136]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004a8e:	4b21      	ldr	r3, [pc, #132]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004a90:	2201      	movs	r2, #1
 8004a92:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a94:	f7fd fda6 	bl	80025e4 <HAL_GetTick>
 8004a98:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004a9a:	e008      	b.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004a9c:	f7fd fda2 	bl	80025e4 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d901      	bls.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e0a4      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004aae:	4b18      	ldr	r3, [pc, #96]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ab6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004aba:	d1ef      	bne.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0320 	and.w	r3, r3, #32
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f000 808b 	beq.w	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004aca:	2300      	movs	r3, #0
 8004acc:	60fb      	str	r3, [r7, #12]
 8004ace:	4b10      	ldr	r3, [pc, #64]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad2:	4a0f      	ldr	r2, [pc, #60]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8004ada:	4b0d      	ldr	r3, [pc, #52]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ae2:	60fb      	str	r3, [r7, #12]
 8004ae4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004ae6:	4b0c      	ldr	r3, [pc, #48]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a0b      	ldr	r2, [pc, #44]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004af0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004af2:	f7fd fd77 	bl	80025e4 <HAL_GetTick>
 8004af6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004af8:	e010      	b.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004afa:	f7fd fd73 	bl	80025e4 <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d909      	bls.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e075      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004b0c:	42470068 	.word	0x42470068
 8004b10:	40023800 	.word	0x40023800
 8004b14:	42470070 	.word	0x42470070
 8004b18:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b1c:	4b38      	ldr	r3, [pc, #224]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d0e8      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b28:	4b36      	ldr	r3, [pc, #216]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b30:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d02f      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b40:	693a      	ldr	r2, [r7, #16]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d028      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b46:	4b2f      	ldr	r3, [pc, #188]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b4e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b50:	4b2d      	ldr	r3, [pc, #180]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004b52:	2201      	movs	r2, #1
 8004b54:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b56:	4b2c      	ldr	r3, [pc, #176]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004b58:	2200      	movs	r2, #0
 8004b5a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004b5c:	4a29      	ldr	r2, [pc, #164]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004b62:	4b28      	ldr	r3, [pc, #160]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d114      	bne.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004b6e:	f7fd fd39 	bl	80025e4 <HAL_GetTick>
 8004b72:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b74:	e00a      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b76:	f7fd fd35 	bl	80025e4 <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d901      	bls.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e035      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b8c:	4b1d      	ldr	r3, [pc, #116]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b90:	f003 0302 	and.w	r3, r3, #2
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d0ee      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ba0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ba4:	d10d      	bne.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004ba6:	4b17      	ldr	r3, [pc, #92]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004bb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bba:	4912      	ldr	r1, [pc, #72]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	608b      	str	r3, [r1, #8]
 8004bc0:	e005      	b.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004bc2:	4b10      	ldr	r3, [pc, #64]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	4a0f      	ldr	r2, [pc, #60]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004bc8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004bcc:	6093      	str	r3, [r2, #8]
 8004bce:	4b0d      	ldr	r3, [pc, #52]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004bd0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bda:	490a      	ldr	r1, [pc, #40]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0310 	and.w	r3, r3, #16
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d004      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004bf2:	4b06      	ldr	r3, [pc, #24]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004bf4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3718      	adds	r7, #24
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	40007000 	.word	0x40007000
 8004c04:	40023800 	.word	0x40023800
 8004c08:	42470e40 	.word	0x42470e40
 8004c0c:	424711e0 	.word	0x424711e0

08004c10 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d101      	bne.n	8004c26 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e066      	b.n	8004cf4 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	7f5b      	ldrb	r3, [r3, #29]
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d105      	bne.n	8004c3c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f7fc fc72 	bl	8001520 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2202      	movs	r2, #2
 8004c40:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	22ca      	movs	r2, #202	; 0xca
 8004c48:	625a      	str	r2, [r3, #36]	; 0x24
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2253      	movs	r2, #83	; 0x53
 8004c50:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 f998 	bl	8004f88 <RTC_EnterInitMode>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004c5c:	7bfb      	ldrb	r3, [r7, #15]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d12c      	bne.n	8004cbc <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	6812      	ldr	r2, [r2, #0]
 8004c6c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004c70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c74:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	6899      	ldr	r1, [r3, #8]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685a      	ldr	r2, [r3, #4]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	431a      	orrs	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	431a      	orrs	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	430a      	orrs	r2, r1
 8004c92:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	68d2      	ldr	r2, [r2, #12]
 8004c9c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	6919      	ldr	r1, [r3, #16]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	041a      	lsls	r2, r3, #16
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	430a      	orrs	r2, r1
 8004cb0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 f99f 	bl	8004ff6 <RTC_ExitInitMode>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004cbc:	7bfb      	ldrb	r3, [r7, #15]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d113      	bne.n	8004cea <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004cd0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	699a      	ldr	r2, [r3, #24]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	430a      	orrs	r2, r1
 8004ce2:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	22ff      	movs	r2, #255	; 0xff
 8004cf0:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8004cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3710      	adds	r7, #16
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004cfc:	b590      	push	{r4, r7, lr}
 8004cfe:	b087      	sub	sp, #28
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	7f1b      	ldrb	r3, [r3, #28]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d101      	bne.n	8004d18 <HAL_RTC_SetTime+0x1c>
 8004d14:	2302      	movs	r3, #2
 8004d16:	e087      	b.n	8004e28 <HAL_RTC_SetTime+0x12c>
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2202      	movs	r2, #2
 8004d22:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d126      	bne.n	8004d78 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d102      	bne.n	8004d3e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	4618      	mov	r0, r3
 8004d44:	f000 f97c 	bl	8005040 <RTC_ByteToBcd2>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	785b      	ldrb	r3, [r3, #1]
 8004d50:	4618      	mov	r0, r3
 8004d52:	f000 f975 	bl	8005040 <RTC_ByteToBcd2>
 8004d56:	4603      	mov	r3, r0
 8004d58:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004d5a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	789b      	ldrb	r3, [r3, #2]
 8004d60:	4618      	mov	r0, r3
 8004d62:	f000 f96d 	bl	8005040 <RTC_ByteToBcd2>
 8004d66:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004d68:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	78db      	ldrb	r3, [r3, #3]
 8004d70:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004d72:	4313      	orrs	r3, r2
 8004d74:	617b      	str	r3, [r7, #20]
 8004d76:	e018      	b.n	8004daa <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d102      	bne.n	8004d8c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	785b      	ldrb	r3, [r3, #1]
 8004d96:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004d98:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004d9a:	68ba      	ldr	r2, [r7, #8]
 8004d9c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004d9e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	78db      	ldrb	r3, [r3, #3]
 8004da4:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004da6:	4313      	orrs	r3, r2
 8004da8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	22ca      	movs	r2, #202	; 0xca
 8004db0:	625a      	str	r2, [r3, #36]	; 0x24
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2253      	movs	r2, #83	; 0x53
 8004db8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004dba:	68f8      	ldr	r0, [r7, #12]
 8004dbc:	f000 f8e4 	bl	8004f88 <RTC_EnterInitMode>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004dc4:	7cfb      	ldrb	r3, [r7, #19]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d120      	bne.n	8004e0c <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004dd4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004dd8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	689a      	ldr	r2, [r3, #8]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004de8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	6899      	ldr	r1, [r3, #8]
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	68da      	ldr	r2, [r3, #12]
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	431a      	orrs	r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	430a      	orrs	r2, r1
 8004e00:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	f000 f8f7 	bl	8004ff6 <RTC_ExitInitMode>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004e0c:	7cfb      	ldrb	r3, [r7, #19]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d102      	bne.n	8004e18 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2201      	movs	r2, #1
 8004e16:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	22ff      	movs	r2, #255	; 0xff
 8004e1e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	771a      	strb	r2, [r3, #28]

  return status;
 8004e26:	7cfb      	ldrb	r3, [r7, #19]
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	371c      	adds	r7, #28
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd90      	pop	{r4, r7, pc}

08004e30 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004e30:	b590      	push	{r4, r7, lr}
 8004e32:	b087      	sub	sp, #28
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	7f1b      	ldrb	r3, [r3, #28]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d101      	bne.n	8004e4c <HAL_RTC_SetDate+0x1c>
 8004e48:	2302      	movs	r3, #2
 8004e4a:	e071      	b.n	8004f30 <HAL_RTC_SetDate+0x100>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2202      	movs	r2, #2
 8004e56:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d10e      	bne.n	8004e7c <HAL_RTC_SetDate+0x4c>
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	785b      	ldrb	r3, [r3, #1]
 8004e62:	f003 0310 	and.w	r3, r3, #16
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d008      	beq.n	8004e7c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	785b      	ldrb	r3, [r3, #1]
 8004e6e:	f023 0310 	bic.w	r3, r3, #16
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	330a      	adds	r3, #10
 8004e76:	b2da      	uxtb	r2, r3
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d11c      	bne.n	8004ebc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	78db      	ldrb	r3, [r3, #3]
 8004e86:	4618      	mov	r0, r3
 8004e88:	f000 f8da 	bl	8005040 <RTC_ByteToBcd2>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	785b      	ldrb	r3, [r3, #1]
 8004e94:	4618      	mov	r0, r3
 8004e96:	f000 f8d3 	bl	8005040 <RTC_ByteToBcd2>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004e9e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	789b      	ldrb	r3, [r3, #2]
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f000 f8cb 	bl	8005040 <RTC_ByteToBcd2>
 8004eaa:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004eac:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	617b      	str	r3, [r7, #20]
 8004eba:	e00e      	b.n	8004eda <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	78db      	ldrb	r3, [r3, #3]
 8004ec0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	785b      	ldrb	r3, [r3, #1]
 8004ec6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004ec8:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004eca:	68ba      	ldr	r2, [r7, #8]
 8004ecc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004ece:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	22ca      	movs	r2, #202	; 0xca
 8004ee0:	625a      	str	r2, [r3, #36]	; 0x24
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2253      	movs	r2, #83	; 0x53
 8004ee8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004eea:	68f8      	ldr	r0, [r7, #12]
 8004eec:	f000 f84c 	bl	8004f88 <RTC_EnterInitMode>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004ef4:	7cfb      	ldrb	r3, [r7, #19]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d10c      	bne.n	8004f14 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004f04:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004f08:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004f0a:	68f8      	ldr	r0, [r7, #12]
 8004f0c:	f000 f873 	bl	8004ff6 <RTC_ExitInitMode>
 8004f10:	4603      	mov	r3, r0
 8004f12:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004f14:	7cfb      	ldrb	r3, [r7, #19]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d102      	bne.n	8004f20 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	22ff      	movs	r2, #255	; 0xff
 8004f26:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	771a      	strb	r2, [r3, #28]

  return status;
 8004f2e:	7cfb      	ldrb	r3, [r7, #19]
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	371c      	adds	r7, #28
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd90      	pop	{r4, r7, pc}

08004f38 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f40:	2300      	movs	r3, #0
 8004f42:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	68da      	ldr	r2, [r3, #12]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f52:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f54:	f7fd fb46 	bl	80025e4 <HAL_GetTick>
 8004f58:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004f5a:	e009      	b.n	8004f70 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004f5c:	f7fd fb42 	bl	80025e4 <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f6a:	d901      	bls.n	8004f70 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e007      	b.n	8004f80 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	f003 0320 	and.w	r3, r3, #32
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d0ee      	beq.n	8004f5c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f90:	2300      	movs	r3, #0
 8004f92:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004f94:	2300      	movs	r3, #0
 8004f96:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d122      	bne.n	8004fec <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68da      	ldr	r2, [r3, #12]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004fb4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004fb6:	f7fd fb15 	bl	80025e4 <HAL_GetTick>
 8004fba:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004fbc:	e00c      	b.n	8004fd8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004fbe:	f7fd fb11 	bl	80025e4 <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fcc:	d904      	bls.n	8004fd8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2204      	movs	r2, #4
 8004fd2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d102      	bne.n	8004fec <RTC_EnterInitMode+0x64>
 8004fe6:	7bfb      	ldrb	r3, [r7, #15]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d1e8      	bne.n	8004fbe <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3710      	adds	r7, #16
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004ff6:	b580      	push	{r7, lr}
 8004ff8:	b084      	sub	sp, #16
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ffe:	2300      	movs	r3, #0
 8005000:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68da      	ldr	r2, [r3, #12]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005010:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f003 0320 	and.w	r3, r3, #32
 800501c:	2b00      	cmp	r3, #0
 800501e:	d10a      	bne.n	8005036 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f7ff ff89 	bl	8004f38 <HAL_RTC_WaitForSynchro>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d004      	beq.n	8005036 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2204      	movs	r2, #4
 8005030:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005036:	7bfb      	ldrb	r3, [r7, #15]
}
 8005038:	4618      	mov	r0, r3
 800503a:	3710      	adds	r7, #16
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	4603      	mov	r3, r0
 8005048:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800504a:	2300      	movs	r3, #0
 800504c:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800504e:	e005      	b.n	800505c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005050:	7bfb      	ldrb	r3, [r7, #15]
 8005052:	3301      	adds	r3, #1
 8005054:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8005056:	79fb      	ldrb	r3, [r7, #7]
 8005058:	3b0a      	subs	r3, #10
 800505a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800505c:	79fb      	ldrb	r3, [r7, #7]
 800505e:	2b09      	cmp	r3, #9
 8005060:	d8f6      	bhi.n	8005050 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005062:	7bfb      	ldrb	r3, [r7, #15]
 8005064:	011b      	lsls	r3, r3, #4
 8005066:	b2da      	uxtb	r2, r3
 8005068:	79fb      	ldrb	r3, [r7, #7]
 800506a:	4313      	orrs	r3, r2
 800506c:	b2db      	uxtb	r3, r3
}
 800506e:	4618      	mov	r0, r3
 8005070:	3714      	adds	r7, #20
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr

0800507a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800507a:	b580      	push	{r7, lr}
 800507c:	b082      	sub	sp, #8
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d101      	bne.n	800508c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e041      	b.n	8005110 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005092:	b2db      	uxtb	r3, r3
 8005094:	2b00      	cmp	r3, #0
 8005096:	d106      	bne.n	80050a6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f7fc fadd 	bl	8001660 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2202      	movs	r2, #2
 80050aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	3304      	adds	r3, #4
 80050b6:	4619      	mov	r1, r3
 80050b8:	4610      	mov	r0, r2
 80050ba:	f000 ffd3 	bl	8006064 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2201      	movs	r2, #1
 80050c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2201      	movs	r2, #1
 80050d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2201      	movs	r2, #1
 80050da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2201      	movs	r2, #1
 80050f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2201      	movs	r2, #1
 80050fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2201      	movs	r2, #1
 800510a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3708      	adds	r7, #8
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005118:	b480      	push	{r7}
 800511a:	b085      	sub	sp, #20
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005126:	b2db      	uxtb	r3, r3
 8005128:	2b01      	cmp	r3, #1
 800512a:	d001      	beq.n	8005130 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e04e      	b.n	80051ce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2202      	movs	r2, #2
 8005134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68da      	ldr	r2, [r3, #12]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f042 0201 	orr.w	r2, r2, #1
 8005146:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a23      	ldr	r2, [pc, #140]	; (80051dc <HAL_TIM_Base_Start_IT+0xc4>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d022      	beq.n	8005198 <HAL_TIM_Base_Start_IT+0x80>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800515a:	d01d      	beq.n	8005198 <HAL_TIM_Base_Start_IT+0x80>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a1f      	ldr	r2, [pc, #124]	; (80051e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d018      	beq.n	8005198 <HAL_TIM_Base_Start_IT+0x80>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a1e      	ldr	r2, [pc, #120]	; (80051e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d013      	beq.n	8005198 <HAL_TIM_Base_Start_IT+0x80>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a1c      	ldr	r2, [pc, #112]	; (80051e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d00e      	beq.n	8005198 <HAL_TIM_Base_Start_IT+0x80>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a1b      	ldr	r2, [pc, #108]	; (80051ec <HAL_TIM_Base_Start_IT+0xd4>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d009      	beq.n	8005198 <HAL_TIM_Base_Start_IT+0x80>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a19      	ldr	r2, [pc, #100]	; (80051f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d004      	beq.n	8005198 <HAL_TIM_Base_Start_IT+0x80>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a18      	ldr	r2, [pc, #96]	; (80051f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d111      	bne.n	80051bc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f003 0307 	and.w	r3, r3, #7
 80051a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2b06      	cmp	r3, #6
 80051a8:	d010      	beq.n	80051cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f042 0201 	orr.w	r2, r2, #1
 80051b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051ba:	e007      	b.n	80051cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f042 0201 	orr.w	r2, r2, #1
 80051ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3714      	adds	r7, #20
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	40010000 	.word	0x40010000
 80051e0:	40000400 	.word	0x40000400
 80051e4:	40000800 	.word	0x40000800
 80051e8:	40000c00 	.word	0x40000c00
 80051ec:	40010400 	.word	0x40010400
 80051f0:	40014000 	.word	0x40014000
 80051f4:	40001800 	.word	0x40001800

080051f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d101      	bne.n	800520a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e041      	b.n	800528e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005210:	b2db      	uxtb	r3, r3
 8005212:	2b00      	cmp	r3, #0
 8005214:	d106      	bne.n	8005224 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f7fc f9a8 	bl	8001574 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2202      	movs	r2, #2
 8005228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	3304      	adds	r3, #4
 8005234:	4619      	mov	r1, r3
 8005236:	4610      	mov	r0, r2
 8005238:	f000 ff14 	bl	8006064 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3708      	adds	r7, #8
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
	...

08005298 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d109      	bne.n	80052bc <HAL_TIM_PWM_Start+0x24>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	bf14      	ite	ne
 80052b4:	2301      	movne	r3, #1
 80052b6:	2300      	moveq	r3, #0
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	e022      	b.n	8005302 <HAL_TIM_PWM_Start+0x6a>
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	2b04      	cmp	r3, #4
 80052c0:	d109      	bne.n	80052d6 <HAL_TIM_PWM_Start+0x3e>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	bf14      	ite	ne
 80052ce:	2301      	movne	r3, #1
 80052d0:	2300      	moveq	r3, #0
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	e015      	b.n	8005302 <HAL_TIM_PWM_Start+0x6a>
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	2b08      	cmp	r3, #8
 80052da:	d109      	bne.n	80052f0 <HAL_TIM_PWM_Start+0x58>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	bf14      	ite	ne
 80052e8:	2301      	movne	r3, #1
 80052ea:	2300      	moveq	r3, #0
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	e008      	b.n	8005302 <HAL_TIM_PWM_Start+0x6a>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	bf14      	ite	ne
 80052fc:	2301      	movne	r3, #1
 80052fe:	2300      	moveq	r3, #0
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b00      	cmp	r3, #0
 8005304:	d001      	beq.n	800530a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e07c      	b.n	8005404 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d104      	bne.n	800531a <HAL_TIM_PWM_Start+0x82>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2202      	movs	r2, #2
 8005314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005318:	e013      	b.n	8005342 <HAL_TIM_PWM_Start+0xaa>
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	2b04      	cmp	r3, #4
 800531e:	d104      	bne.n	800532a <HAL_TIM_PWM_Start+0x92>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2202      	movs	r2, #2
 8005324:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005328:	e00b      	b.n	8005342 <HAL_TIM_PWM_Start+0xaa>
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	2b08      	cmp	r3, #8
 800532e:	d104      	bne.n	800533a <HAL_TIM_PWM_Start+0xa2>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2202      	movs	r2, #2
 8005334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005338:	e003      	b.n	8005342 <HAL_TIM_PWM_Start+0xaa>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2202      	movs	r2, #2
 800533e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2201      	movs	r2, #1
 8005348:	6839      	ldr	r1, [r7, #0]
 800534a:	4618      	mov	r0, r3
 800534c:	f001 fa9e 	bl	800688c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a2d      	ldr	r2, [pc, #180]	; (800540c <HAL_TIM_PWM_Start+0x174>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d004      	beq.n	8005364 <HAL_TIM_PWM_Start+0xcc>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a2c      	ldr	r2, [pc, #176]	; (8005410 <HAL_TIM_PWM_Start+0x178>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d101      	bne.n	8005368 <HAL_TIM_PWM_Start+0xd0>
 8005364:	2301      	movs	r3, #1
 8005366:	e000      	b.n	800536a <HAL_TIM_PWM_Start+0xd2>
 8005368:	2300      	movs	r3, #0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d007      	beq.n	800537e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800537c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a22      	ldr	r2, [pc, #136]	; (800540c <HAL_TIM_PWM_Start+0x174>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d022      	beq.n	80053ce <HAL_TIM_PWM_Start+0x136>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005390:	d01d      	beq.n	80053ce <HAL_TIM_PWM_Start+0x136>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a1f      	ldr	r2, [pc, #124]	; (8005414 <HAL_TIM_PWM_Start+0x17c>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d018      	beq.n	80053ce <HAL_TIM_PWM_Start+0x136>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a1d      	ldr	r2, [pc, #116]	; (8005418 <HAL_TIM_PWM_Start+0x180>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d013      	beq.n	80053ce <HAL_TIM_PWM_Start+0x136>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a1c      	ldr	r2, [pc, #112]	; (800541c <HAL_TIM_PWM_Start+0x184>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d00e      	beq.n	80053ce <HAL_TIM_PWM_Start+0x136>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a16      	ldr	r2, [pc, #88]	; (8005410 <HAL_TIM_PWM_Start+0x178>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d009      	beq.n	80053ce <HAL_TIM_PWM_Start+0x136>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a18      	ldr	r2, [pc, #96]	; (8005420 <HAL_TIM_PWM_Start+0x188>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d004      	beq.n	80053ce <HAL_TIM_PWM_Start+0x136>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a16      	ldr	r2, [pc, #88]	; (8005424 <HAL_TIM_PWM_Start+0x18c>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d111      	bne.n	80053f2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	f003 0307 	and.w	r3, r3, #7
 80053d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2b06      	cmp	r3, #6
 80053de:	d010      	beq.n	8005402 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f042 0201 	orr.w	r2, r2, #1
 80053ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053f0:	e007      	b.n	8005402 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f042 0201 	orr.w	r2, r2, #1
 8005400:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	3710      	adds	r7, #16
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}
 800540c:	40010000 	.word	0x40010000
 8005410:	40010400 	.word	0x40010400
 8005414:	40000400 	.word	0x40000400
 8005418:	40000800 	.word	0x40000800
 800541c:	40000c00 	.word	0x40000c00
 8005420:	40014000 	.word	0x40014000
 8005424:	40001800 	.word	0x40001800

08005428 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005432:	2300      	movs	r3, #0
 8005434:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d109      	bne.n	8005450 <HAL_TIM_PWM_Start_IT+0x28>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005442:	b2db      	uxtb	r3, r3
 8005444:	2b01      	cmp	r3, #1
 8005446:	bf14      	ite	ne
 8005448:	2301      	movne	r3, #1
 800544a:	2300      	moveq	r3, #0
 800544c:	b2db      	uxtb	r3, r3
 800544e:	e022      	b.n	8005496 <HAL_TIM_PWM_Start_IT+0x6e>
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	2b04      	cmp	r3, #4
 8005454:	d109      	bne.n	800546a <HAL_TIM_PWM_Start_IT+0x42>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800545c:	b2db      	uxtb	r3, r3
 800545e:	2b01      	cmp	r3, #1
 8005460:	bf14      	ite	ne
 8005462:	2301      	movne	r3, #1
 8005464:	2300      	moveq	r3, #0
 8005466:	b2db      	uxtb	r3, r3
 8005468:	e015      	b.n	8005496 <HAL_TIM_PWM_Start_IT+0x6e>
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	2b08      	cmp	r3, #8
 800546e:	d109      	bne.n	8005484 <HAL_TIM_PWM_Start_IT+0x5c>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005476:	b2db      	uxtb	r3, r3
 8005478:	2b01      	cmp	r3, #1
 800547a:	bf14      	ite	ne
 800547c:	2301      	movne	r3, #1
 800547e:	2300      	moveq	r3, #0
 8005480:	b2db      	uxtb	r3, r3
 8005482:	e008      	b.n	8005496 <HAL_TIM_PWM_Start_IT+0x6e>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800548a:	b2db      	uxtb	r3, r3
 800548c:	2b01      	cmp	r3, #1
 800548e:	bf14      	ite	ne
 8005490:	2301      	movne	r3, #1
 8005492:	2300      	moveq	r3, #0
 8005494:	b2db      	uxtb	r3, r3
 8005496:	2b00      	cmp	r3, #0
 8005498:	d001      	beq.n	800549e <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e0c7      	b.n	800562e <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d104      	bne.n	80054ae <HAL_TIM_PWM_Start_IT+0x86>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2202      	movs	r2, #2
 80054a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054ac:	e013      	b.n	80054d6 <HAL_TIM_PWM_Start_IT+0xae>
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	2b04      	cmp	r3, #4
 80054b2:	d104      	bne.n	80054be <HAL_TIM_PWM_Start_IT+0x96>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2202      	movs	r2, #2
 80054b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054bc:	e00b      	b.n	80054d6 <HAL_TIM_PWM_Start_IT+0xae>
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	2b08      	cmp	r3, #8
 80054c2:	d104      	bne.n	80054ce <HAL_TIM_PWM_Start_IT+0xa6>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2202      	movs	r2, #2
 80054c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054cc:	e003      	b.n	80054d6 <HAL_TIM_PWM_Start_IT+0xae>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2202      	movs	r2, #2
 80054d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	2b0c      	cmp	r3, #12
 80054da:	d841      	bhi.n	8005560 <HAL_TIM_PWM_Start_IT+0x138>
 80054dc:	a201      	add	r2, pc, #4	; (adr r2, 80054e4 <HAL_TIM_PWM_Start_IT+0xbc>)
 80054de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e2:	bf00      	nop
 80054e4:	08005519 	.word	0x08005519
 80054e8:	08005561 	.word	0x08005561
 80054ec:	08005561 	.word	0x08005561
 80054f0:	08005561 	.word	0x08005561
 80054f4:	0800552b 	.word	0x0800552b
 80054f8:	08005561 	.word	0x08005561
 80054fc:	08005561 	.word	0x08005561
 8005500:	08005561 	.word	0x08005561
 8005504:	0800553d 	.word	0x0800553d
 8005508:	08005561 	.word	0x08005561
 800550c:	08005561 	.word	0x08005561
 8005510:	08005561 	.word	0x08005561
 8005514:	0800554f 	.word	0x0800554f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68da      	ldr	r2, [r3, #12]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f042 0202 	orr.w	r2, r2, #2
 8005526:	60da      	str	r2, [r3, #12]
      break;
 8005528:	e01d      	b.n	8005566 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68da      	ldr	r2, [r3, #12]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f042 0204 	orr.w	r2, r2, #4
 8005538:	60da      	str	r2, [r3, #12]
      break;
 800553a:	e014      	b.n	8005566 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68da      	ldr	r2, [r3, #12]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f042 0208 	orr.w	r2, r2, #8
 800554a:	60da      	str	r2, [r3, #12]
      break;
 800554c:	e00b      	b.n	8005566 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	68da      	ldr	r2, [r3, #12]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f042 0210 	orr.w	r2, r2, #16
 800555c:	60da      	str	r2, [r3, #12]
      break;
 800555e:	e002      	b.n	8005566 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	73fb      	strb	r3, [r7, #15]
      break;
 8005564:	bf00      	nop
  }

  if (status == HAL_OK)
 8005566:	7bfb      	ldrb	r3, [r7, #15]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d15f      	bne.n	800562c <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2201      	movs	r2, #1
 8005572:	6839      	ldr	r1, [r7, #0]
 8005574:	4618      	mov	r0, r3
 8005576:	f001 f989 	bl	800688c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a2e      	ldr	r2, [pc, #184]	; (8005638 <HAL_TIM_PWM_Start_IT+0x210>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d004      	beq.n	800558e <HAL_TIM_PWM_Start_IT+0x166>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a2c      	ldr	r2, [pc, #176]	; (800563c <HAL_TIM_PWM_Start_IT+0x214>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d101      	bne.n	8005592 <HAL_TIM_PWM_Start_IT+0x16a>
 800558e:	2301      	movs	r3, #1
 8005590:	e000      	b.n	8005594 <HAL_TIM_PWM_Start_IT+0x16c>
 8005592:	2300      	movs	r3, #0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d007      	beq.n	80055a8 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055a6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a22      	ldr	r2, [pc, #136]	; (8005638 <HAL_TIM_PWM_Start_IT+0x210>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d022      	beq.n	80055f8 <HAL_TIM_PWM_Start_IT+0x1d0>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055ba:	d01d      	beq.n	80055f8 <HAL_TIM_PWM_Start_IT+0x1d0>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a1f      	ldr	r2, [pc, #124]	; (8005640 <HAL_TIM_PWM_Start_IT+0x218>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d018      	beq.n	80055f8 <HAL_TIM_PWM_Start_IT+0x1d0>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a1e      	ldr	r2, [pc, #120]	; (8005644 <HAL_TIM_PWM_Start_IT+0x21c>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d013      	beq.n	80055f8 <HAL_TIM_PWM_Start_IT+0x1d0>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a1c      	ldr	r2, [pc, #112]	; (8005648 <HAL_TIM_PWM_Start_IT+0x220>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d00e      	beq.n	80055f8 <HAL_TIM_PWM_Start_IT+0x1d0>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a17      	ldr	r2, [pc, #92]	; (800563c <HAL_TIM_PWM_Start_IT+0x214>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d009      	beq.n	80055f8 <HAL_TIM_PWM_Start_IT+0x1d0>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a18      	ldr	r2, [pc, #96]	; (800564c <HAL_TIM_PWM_Start_IT+0x224>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d004      	beq.n	80055f8 <HAL_TIM_PWM_Start_IT+0x1d0>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a17      	ldr	r2, [pc, #92]	; (8005650 <HAL_TIM_PWM_Start_IT+0x228>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d111      	bne.n	800561c <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f003 0307 	and.w	r3, r3, #7
 8005602:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	2b06      	cmp	r3, #6
 8005608:	d010      	beq.n	800562c <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f042 0201 	orr.w	r2, r2, #1
 8005618:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800561a:	e007      	b.n	800562c <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f042 0201 	orr.w	r2, r2, #1
 800562a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800562c:	7bfb      	ldrb	r3, [r7, #15]
}
 800562e:	4618      	mov	r0, r3
 8005630:	3710      	adds	r7, #16
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	40010000 	.word	0x40010000
 800563c:	40010400 	.word	0x40010400
 8005640:	40000400 	.word	0x40000400
 8005644:	40000800 	.word	0x40000800
 8005648:	40000c00 	.word	0x40000c00
 800564c:	40014000 	.word	0x40014000
 8005650:	40001800 	.word	0x40001800

08005654 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d101      	bne.n	8005666 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e041      	b.n	80056ea <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b00      	cmp	r3, #0
 8005670:	d106      	bne.n	8005680 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f7fb ffa0 	bl	80015c0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2202      	movs	r2, #2
 8005684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	3304      	adds	r3, #4
 8005690:	4619      	mov	r1, r3
 8005692:	4610      	mov	r0, r2
 8005694:	f000 fce6 	bl	8006064 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3708      	adds	r7, #8
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
	...

080056f4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056fe:	2300      	movs	r3, #0
 8005700:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d104      	bne.n	8005712 <HAL_TIM_IC_Start_IT+0x1e>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800570e:	b2db      	uxtb	r3, r3
 8005710:	e013      	b.n	800573a <HAL_TIM_IC_Start_IT+0x46>
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	2b04      	cmp	r3, #4
 8005716:	d104      	bne.n	8005722 <HAL_TIM_IC_Start_IT+0x2e>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800571e:	b2db      	uxtb	r3, r3
 8005720:	e00b      	b.n	800573a <HAL_TIM_IC_Start_IT+0x46>
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	2b08      	cmp	r3, #8
 8005726:	d104      	bne.n	8005732 <HAL_TIM_IC_Start_IT+0x3e>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800572e:	b2db      	uxtb	r3, r3
 8005730:	e003      	b.n	800573a <HAL_TIM_IC_Start_IT+0x46>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005738:	b2db      	uxtb	r3, r3
 800573a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d104      	bne.n	800574c <HAL_TIM_IC_Start_IT+0x58>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005748:	b2db      	uxtb	r3, r3
 800574a:	e013      	b.n	8005774 <HAL_TIM_IC_Start_IT+0x80>
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	2b04      	cmp	r3, #4
 8005750:	d104      	bne.n	800575c <HAL_TIM_IC_Start_IT+0x68>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005758:	b2db      	uxtb	r3, r3
 800575a:	e00b      	b.n	8005774 <HAL_TIM_IC_Start_IT+0x80>
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	2b08      	cmp	r3, #8
 8005760:	d104      	bne.n	800576c <HAL_TIM_IC_Start_IT+0x78>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005768:	b2db      	uxtb	r3, r3
 800576a:	e003      	b.n	8005774 <HAL_TIM_IC_Start_IT+0x80>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005772:	b2db      	uxtb	r3, r3
 8005774:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005776:	7bbb      	ldrb	r3, [r7, #14]
 8005778:	2b01      	cmp	r3, #1
 800577a:	d102      	bne.n	8005782 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800577c:	7b7b      	ldrb	r3, [r7, #13]
 800577e:	2b01      	cmp	r3, #1
 8005780:	d001      	beq.n	8005786 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e0cc      	b.n	8005920 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d104      	bne.n	8005796 <HAL_TIM_IC_Start_IT+0xa2>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2202      	movs	r2, #2
 8005790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005794:	e013      	b.n	80057be <HAL_TIM_IC_Start_IT+0xca>
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	2b04      	cmp	r3, #4
 800579a:	d104      	bne.n	80057a6 <HAL_TIM_IC_Start_IT+0xb2>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2202      	movs	r2, #2
 80057a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057a4:	e00b      	b.n	80057be <HAL_TIM_IC_Start_IT+0xca>
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	2b08      	cmp	r3, #8
 80057aa:	d104      	bne.n	80057b6 <HAL_TIM_IC_Start_IT+0xc2>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2202      	movs	r2, #2
 80057b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057b4:	e003      	b.n	80057be <HAL_TIM_IC_Start_IT+0xca>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2202      	movs	r2, #2
 80057ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d104      	bne.n	80057ce <HAL_TIM_IC_Start_IT+0xda>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2202      	movs	r2, #2
 80057c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057cc:	e013      	b.n	80057f6 <HAL_TIM_IC_Start_IT+0x102>
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	2b04      	cmp	r3, #4
 80057d2:	d104      	bne.n	80057de <HAL_TIM_IC_Start_IT+0xea>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2202      	movs	r2, #2
 80057d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80057dc:	e00b      	b.n	80057f6 <HAL_TIM_IC_Start_IT+0x102>
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	2b08      	cmp	r3, #8
 80057e2:	d104      	bne.n	80057ee <HAL_TIM_IC_Start_IT+0xfa>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2202      	movs	r2, #2
 80057e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057ec:	e003      	b.n	80057f6 <HAL_TIM_IC_Start_IT+0x102>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2202      	movs	r2, #2
 80057f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	2b0c      	cmp	r3, #12
 80057fa:	d841      	bhi.n	8005880 <HAL_TIM_IC_Start_IT+0x18c>
 80057fc:	a201      	add	r2, pc, #4	; (adr r2, 8005804 <HAL_TIM_IC_Start_IT+0x110>)
 80057fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005802:	bf00      	nop
 8005804:	08005839 	.word	0x08005839
 8005808:	08005881 	.word	0x08005881
 800580c:	08005881 	.word	0x08005881
 8005810:	08005881 	.word	0x08005881
 8005814:	0800584b 	.word	0x0800584b
 8005818:	08005881 	.word	0x08005881
 800581c:	08005881 	.word	0x08005881
 8005820:	08005881 	.word	0x08005881
 8005824:	0800585d 	.word	0x0800585d
 8005828:	08005881 	.word	0x08005881
 800582c:	08005881 	.word	0x08005881
 8005830:	08005881 	.word	0x08005881
 8005834:	0800586f 	.word	0x0800586f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68da      	ldr	r2, [r3, #12]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f042 0202 	orr.w	r2, r2, #2
 8005846:	60da      	str	r2, [r3, #12]
      break;
 8005848:	e01d      	b.n	8005886 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68da      	ldr	r2, [r3, #12]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f042 0204 	orr.w	r2, r2, #4
 8005858:	60da      	str	r2, [r3, #12]
      break;
 800585a:	e014      	b.n	8005886 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68da      	ldr	r2, [r3, #12]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f042 0208 	orr.w	r2, r2, #8
 800586a:	60da      	str	r2, [r3, #12]
      break;
 800586c:	e00b      	b.n	8005886 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68da      	ldr	r2, [r3, #12]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f042 0210 	orr.w	r2, r2, #16
 800587c:	60da      	str	r2, [r3, #12]
      break;
 800587e:	e002      	b.n	8005886 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	73fb      	strb	r3, [r7, #15]
      break;
 8005884:	bf00      	nop
  }

  if (status == HAL_OK)
 8005886:	7bfb      	ldrb	r3, [r7, #15]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d148      	bne.n	800591e <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2201      	movs	r2, #1
 8005892:	6839      	ldr	r1, [r7, #0]
 8005894:	4618      	mov	r0, r3
 8005896:	f000 fff9 	bl	800688c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a22      	ldr	r2, [pc, #136]	; (8005928 <HAL_TIM_IC_Start_IT+0x234>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d022      	beq.n	80058ea <HAL_TIM_IC_Start_IT+0x1f6>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ac:	d01d      	beq.n	80058ea <HAL_TIM_IC_Start_IT+0x1f6>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a1e      	ldr	r2, [pc, #120]	; (800592c <HAL_TIM_IC_Start_IT+0x238>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d018      	beq.n	80058ea <HAL_TIM_IC_Start_IT+0x1f6>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a1c      	ldr	r2, [pc, #112]	; (8005930 <HAL_TIM_IC_Start_IT+0x23c>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d013      	beq.n	80058ea <HAL_TIM_IC_Start_IT+0x1f6>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a1b      	ldr	r2, [pc, #108]	; (8005934 <HAL_TIM_IC_Start_IT+0x240>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d00e      	beq.n	80058ea <HAL_TIM_IC_Start_IT+0x1f6>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a19      	ldr	r2, [pc, #100]	; (8005938 <HAL_TIM_IC_Start_IT+0x244>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d009      	beq.n	80058ea <HAL_TIM_IC_Start_IT+0x1f6>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a18      	ldr	r2, [pc, #96]	; (800593c <HAL_TIM_IC_Start_IT+0x248>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d004      	beq.n	80058ea <HAL_TIM_IC_Start_IT+0x1f6>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a16      	ldr	r2, [pc, #88]	; (8005940 <HAL_TIM_IC_Start_IT+0x24c>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d111      	bne.n	800590e <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f003 0307 	and.w	r3, r3, #7
 80058f4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	2b06      	cmp	r3, #6
 80058fa:	d010      	beq.n	800591e <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f042 0201 	orr.w	r2, r2, #1
 800590a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800590c:	e007      	b.n	800591e <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f042 0201 	orr.w	r2, r2, #1
 800591c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800591e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005920:	4618      	mov	r0, r3
 8005922:	3710      	adds	r7, #16
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	40010000 	.word	0x40010000
 800592c:	40000400 	.word	0x40000400
 8005930:	40000800 	.word	0x40000800
 8005934:	40000c00 	.word	0x40000c00
 8005938:	40010400 	.word	0x40010400
 800593c:	40014000 	.word	0x40014000
 8005940:	40001800 	.word	0x40001800

08005944 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b082      	sub	sp, #8
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	f003 0302 	and.w	r3, r3, #2
 8005956:	2b02      	cmp	r3, #2
 8005958:	d122      	bne.n	80059a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	f003 0302 	and.w	r3, r3, #2
 8005964:	2b02      	cmp	r3, #2
 8005966:	d11b      	bne.n	80059a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f06f 0202 	mvn.w	r2, #2
 8005970:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2201      	movs	r2, #1
 8005976:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	699b      	ldr	r3, [r3, #24]
 800597e:	f003 0303 	and.w	r3, r3, #3
 8005982:	2b00      	cmp	r3, #0
 8005984:	d003      	beq.n	800598e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f7fc f9d0 	bl	8001d2c <HAL_TIM_IC_CaptureCallback>
 800598c:	e005      	b.n	800599a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 fb4a 	bl	8006028 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 fb51 	bl	800603c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	f003 0304 	and.w	r3, r3, #4
 80059aa:	2b04      	cmp	r3, #4
 80059ac:	d122      	bne.n	80059f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	f003 0304 	and.w	r3, r3, #4
 80059b8:	2b04      	cmp	r3, #4
 80059ba:	d11b      	bne.n	80059f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f06f 0204 	mvn.w	r2, #4
 80059c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2202      	movs	r2, #2
 80059ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	699b      	ldr	r3, [r3, #24]
 80059d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d003      	beq.n	80059e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f7fc f9a6 	bl	8001d2c <HAL_TIM_IC_CaptureCallback>
 80059e0:	e005      	b.n	80059ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 fb20 	bl	8006028 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 fb27 	bl	800603c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	f003 0308 	and.w	r3, r3, #8
 80059fe:	2b08      	cmp	r3, #8
 8005a00:	d122      	bne.n	8005a48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	f003 0308 	and.w	r3, r3, #8
 8005a0c:	2b08      	cmp	r3, #8
 8005a0e:	d11b      	bne.n	8005a48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f06f 0208 	mvn.w	r2, #8
 8005a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2204      	movs	r2, #4
 8005a1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	69db      	ldr	r3, [r3, #28]
 8005a26:	f003 0303 	and.w	r3, r3, #3
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d003      	beq.n	8005a36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f7fc f97c 	bl	8001d2c <HAL_TIM_IC_CaptureCallback>
 8005a34:	e005      	b.n	8005a42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 faf6 	bl	8006028 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 fafd 	bl	800603c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	f003 0310 	and.w	r3, r3, #16
 8005a52:	2b10      	cmp	r3, #16
 8005a54:	d122      	bne.n	8005a9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	f003 0310 	and.w	r3, r3, #16
 8005a60:	2b10      	cmp	r3, #16
 8005a62:	d11b      	bne.n	8005a9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f06f 0210 	mvn.w	r2, #16
 8005a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2208      	movs	r2, #8
 8005a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	69db      	ldr	r3, [r3, #28]
 8005a7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d003      	beq.n	8005a8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f7fc f952 	bl	8001d2c <HAL_TIM_IC_CaptureCallback>
 8005a88:	e005      	b.n	8005a96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 facc 	bl	8006028 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 fad3 	bl	800603c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	f003 0301 	and.w	r3, r3, #1
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d10e      	bne.n	8005ac8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	f003 0301 	and.w	r3, r3, #1
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d107      	bne.n	8005ac8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f06f 0201 	mvn.w	r2, #1
 8005ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f7fc f8da 	bl	8001c7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	691b      	ldr	r3, [r3, #16]
 8005ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ad2:	2b80      	cmp	r3, #128	; 0x80
 8005ad4:	d10e      	bne.n	8005af4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ae0:	2b80      	cmp	r3, #128	; 0x80
 8005ae2:	d107      	bne.n	8005af4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005aec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 ff78 	bl	80069e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005afe:	2b40      	cmp	r3, #64	; 0x40
 8005b00:	d10e      	bne.n	8005b20 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b0c:	2b40      	cmp	r3, #64	; 0x40
 8005b0e:	d107      	bne.n	8005b20 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 fa98 	bl	8006050 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	f003 0320 	and.w	r3, r3, #32
 8005b2a:	2b20      	cmp	r3, #32
 8005b2c:	d10e      	bne.n	8005b4c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	f003 0320 	and.w	r3, r3, #32
 8005b38:	2b20      	cmp	r3, #32
 8005b3a:	d107      	bne.n	8005b4c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f06f 0220 	mvn.w	r2, #32
 8005b44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 ff42 	bl	80069d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b4c:	bf00      	nop
 8005b4e:	3708      	adds	r7, #8
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b086      	sub	sp, #24
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b60:	2300      	movs	r3, #0
 8005b62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d101      	bne.n	8005b72 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005b6e:	2302      	movs	r3, #2
 8005b70:	e088      	b.n	8005c84 <HAL_TIM_IC_ConfigChannel+0x130>
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2201      	movs	r2, #1
 8005b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d11b      	bne.n	8005bb8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6818      	ldr	r0, [r3, #0]
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	6819      	ldr	r1, [r3, #0]
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	685a      	ldr	r2, [r3, #4]
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	f000 fcb8 	bl	8006504 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	699a      	ldr	r2, [r3, #24]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f022 020c 	bic.w	r2, r2, #12
 8005ba2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	6999      	ldr	r1, [r3, #24]
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	689a      	ldr	r2, [r3, #8]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	430a      	orrs	r2, r1
 8005bb4:	619a      	str	r2, [r3, #24]
 8005bb6:	e060      	b.n	8005c7a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2b04      	cmp	r3, #4
 8005bbc:	d11c      	bne.n	8005bf8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6818      	ldr	r0, [r3, #0]
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	6819      	ldr	r1, [r3, #0]
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	685a      	ldr	r2, [r3, #4]
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	f000 fd3c 	bl	800664a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	699a      	ldr	r2, [r3, #24]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005be0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	6999      	ldr	r1, [r3, #24]
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	021a      	lsls	r2, r3, #8
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	430a      	orrs	r2, r1
 8005bf4:	619a      	str	r2, [r3, #24]
 8005bf6:	e040      	b.n	8005c7a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2b08      	cmp	r3, #8
 8005bfc:	d11b      	bne.n	8005c36 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6818      	ldr	r0, [r3, #0]
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	6819      	ldr	r1, [r3, #0]
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	685a      	ldr	r2, [r3, #4]
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	f000 fd89 	bl	8006724 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	69da      	ldr	r2, [r3, #28]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f022 020c 	bic.w	r2, r2, #12
 8005c20:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	69d9      	ldr	r1, [r3, #28]
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	689a      	ldr	r2, [r3, #8]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	430a      	orrs	r2, r1
 8005c32:	61da      	str	r2, [r3, #28]
 8005c34:	e021      	b.n	8005c7a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2b0c      	cmp	r3, #12
 8005c3a:	d11c      	bne.n	8005c76 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6818      	ldr	r0, [r3, #0]
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	6819      	ldr	r1, [r3, #0]
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	685a      	ldr	r2, [r3, #4]
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	f000 fda6 	bl	800679c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	69da      	ldr	r2, [r3, #28]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005c5e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	69d9      	ldr	r1, [r3, #28]
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	021a      	lsls	r2, r3, #8
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	430a      	orrs	r2, r1
 8005c72:	61da      	str	r2, [r3, #28]
 8005c74:	e001      	b.n	8005c7a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c82:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3718      	adds	r7, #24
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b086      	sub	sp, #24
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d101      	bne.n	8005caa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005ca6:	2302      	movs	r3, #2
 8005ca8:	e0ae      	b.n	8005e08 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2201      	movs	r2, #1
 8005cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2b0c      	cmp	r3, #12
 8005cb6:	f200 809f 	bhi.w	8005df8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005cba:	a201      	add	r2, pc, #4	; (adr r2, 8005cc0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc0:	08005cf5 	.word	0x08005cf5
 8005cc4:	08005df9 	.word	0x08005df9
 8005cc8:	08005df9 	.word	0x08005df9
 8005ccc:	08005df9 	.word	0x08005df9
 8005cd0:	08005d35 	.word	0x08005d35
 8005cd4:	08005df9 	.word	0x08005df9
 8005cd8:	08005df9 	.word	0x08005df9
 8005cdc:	08005df9 	.word	0x08005df9
 8005ce0:	08005d77 	.word	0x08005d77
 8005ce4:	08005df9 	.word	0x08005df9
 8005ce8:	08005df9 	.word	0x08005df9
 8005cec:	08005df9 	.word	0x08005df9
 8005cf0:	08005db7 	.word	0x08005db7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68b9      	ldr	r1, [r7, #8]
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f000 fa52 	bl	80061a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	699a      	ldr	r2, [r3, #24]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f042 0208 	orr.w	r2, r2, #8
 8005d0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	699a      	ldr	r2, [r3, #24]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f022 0204 	bic.w	r2, r2, #4
 8005d1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	6999      	ldr	r1, [r3, #24]
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	691a      	ldr	r2, [r3, #16]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	430a      	orrs	r2, r1
 8005d30:	619a      	str	r2, [r3, #24]
      break;
 8005d32:	e064      	b.n	8005dfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	68b9      	ldr	r1, [r7, #8]
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f000 faa2 	bl	8006284 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	699a      	ldr	r2, [r3, #24]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	699a      	ldr	r2, [r3, #24]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	6999      	ldr	r1, [r3, #24]
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	691b      	ldr	r3, [r3, #16]
 8005d6a:	021a      	lsls	r2, r3, #8
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	430a      	orrs	r2, r1
 8005d72:	619a      	str	r2, [r3, #24]
      break;
 8005d74:	e043      	b.n	8005dfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68b9      	ldr	r1, [r7, #8]
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f000 faf7 	bl	8006370 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	69da      	ldr	r2, [r3, #28]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f042 0208 	orr.w	r2, r2, #8
 8005d90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	69da      	ldr	r2, [r3, #28]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f022 0204 	bic.w	r2, r2, #4
 8005da0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	69d9      	ldr	r1, [r3, #28]
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	691a      	ldr	r2, [r3, #16]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	430a      	orrs	r2, r1
 8005db2:	61da      	str	r2, [r3, #28]
      break;
 8005db4:	e023      	b.n	8005dfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68b9      	ldr	r1, [r7, #8]
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f000 fb4b 	bl	8006458 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	69da      	ldr	r2, [r3, #28]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	69da      	ldr	r2, [r3, #28]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005de0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	69d9      	ldr	r1, [r3, #28]
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	021a      	lsls	r2, r3, #8
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	430a      	orrs	r2, r1
 8005df4:	61da      	str	r2, [r3, #28]
      break;
 8005df6:	e002      	b.n	8005dfe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	75fb      	strb	r3, [r7, #23]
      break;
 8005dfc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e06:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3718      	adds	r7, #24
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d101      	bne.n	8005e2c <HAL_TIM_ConfigClockSource+0x1c>
 8005e28:	2302      	movs	r3, #2
 8005e2a:	e0b4      	b.n	8005f96 <HAL_TIM_ConfigClockSource+0x186>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2202      	movs	r2, #2
 8005e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68ba      	ldr	r2, [r7, #8]
 8005e5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e64:	d03e      	beq.n	8005ee4 <HAL_TIM_ConfigClockSource+0xd4>
 8005e66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e6a:	f200 8087 	bhi.w	8005f7c <HAL_TIM_ConfigClockSource+0x16c>
 8005e6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e72:	f000 8086 	beq.w	8005f82 <HAL_TIM_ConfigClockSource+0x172>
 8005e76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e7a:	d87f      	bhi.n	8005f7c <HAL_TIM_ConfigClockSource+0x16c>
 8005e7c:	2b70      	cmp	r3, #112	; 0x70
 8005e7e:	d01a      	beq.n	8005eb6 <HAL_TIM_ConfigClockSource+0xa6>
 8005e80:	2b70      	cmp	r3, #112	; 0x70
 8005e82:	d87b      	bhi.n	8005f7c <HAL_TIM_ConfigClockSource+0x16c>
 8005e84:	2b60      	cmp	r3, #96	; 0x60
 8005e86:	d050      	beq.n	8005f2a <HAL_TIM_ConfigClockSource+0x11a>
 8005e88:	2b60      	cmp	r3, #96	; 0x60
 8005e8a:	d877      	bhi.n	8005f7c <HAL_TIM_ConfigClockSource+0x16c>
 8005e8c:	2b50      	cmp	r3, #80	; 0x50
 8005e8e:	d03c      	beq.n	8005f0a <HAL_TIM_ConfigClockSource+0xfa>
 8005e90:	2b50      	cmp	r3, #80	; 0x50
 8005e92:	d873      	bhi.n	8005f7c <HAL_TIM_ConfigClockSource+0x16c>
 8005e94:	2b40      	cmp	r3, #64	; 0x40
 8005e96:	d058      	beq.n	8005f4a <HAL_TIM_ConfigClockSource+0x13a>
 8005e98:	2b40      	cmp	r3, #64	; 0x40
 8005e9a:	d86f      	bhi.n	8005f7c <HAL_TIM_ConfigClockSource+0x16c>
 8005e9c:	2b30      	cmp	r3, #48	; 0x30
 8005e9e:	d064      	beq.n	8005f6a <HAL_TIM_ConfigClockSource+0x15a>
 8005ea0:	2b30      	cmp	r3, #48	; 0x30
 8005ea2:	d86b      	bhi.n	8005f7c <HAL_TIM_ConfigClockSource+0x16c>
 8005ea4:	2b20      	cmp	r3, #32
 8005ea6:	d060      	beq.n	8005f6a <HAL_TIM_ConfigClockSource+0x15a>
 8005ea8:	2b20      	cmp	r3, #32
 8005eaa:	d867      	bhi.n	8005f7c <HAL_TIM_ConfigClockSource+0x16c>
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d05c      	beq.n	8005f6a <HAL_TIM_ConfigClockSource+0x15a>
 8005eb0:	2b10      	cmp	r3, #16
 8005eb2:	d05a      	beq.n	8005f6a <HAL_TIM_ConfigClockSource+0x15a>
 8005eb4:	e062      	b.n	8005f7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6818      	ldr	r0, [r3, #0]
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	6899      	ldr	r1, [r3, #8]
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	685a      	ldr	r2, [r3, #4]
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	f000 fcc1 	bl	800684c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ed8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68ba      	ldr	r2, [r7, #8]
 8005ee0:	609a      	str	r2, [r3, #8]
      break;
 8005ee2:	e04f      	b.n	8005f84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6818      	ldr	r0, [r3, #0]
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	6899      	ldr	r1, [r3, #8]
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	685a      	ldr	r2, [r3, #4]
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	f000 fcaa 	bl	800684c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	689a      	ldr	r2, [r3, #8]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f06:	609a      	str	r2, [r3, #8]
      break;
 8005f08:	e03c      	b.n	8005f84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6818      	ldr	r0, [r3, #0]
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	6859      	ldr	r1, [r3, #4]
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	461a      	mov	r2, r3
 8005f18:	f000 fb68 	bl	80065ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2150      	movs	r1, #80	; 0x50
 8005f22:	4618      	mov	r0, r3
 8005f24:	f000 fc77 	bl	8006816 <TIM_ITRx_SetConfig>
      break;
 8005f28:	e02c      	b.n	8005f84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6818      	ldr	r0, [r3, #0]
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	6859      	ldr	r1, [r3, #4]
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	461a      	mov	r2, r3
 8005f38:	f000 fbc4 	bl	80066c4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2160      	movs	r1, #96	; 0x60
 8005f42:	4618      	mov	r0, r3
 8005f44:	f000 fc67 	bl	8006816 <TIM_ITRx_SetConfig>
      break;
 8005f48:	e01c      	b.n	8005f84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6818      	ldr	r0, [r3, #0]
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	6859      	ldr	r1, [r3, #4]
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	461a      	mov	r2, r3
 8005f58:	f000 fb48 	bl	80065ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2140      	movs	r1, #64	; 0x40
 8005f62:	4618      	mov	r0, r3
 8005f64:	f000 fc57 	bl	8006816 <TIM_ITRx_SetConfig>
      break;
 8005f68:	e00c      	b.n	8005f84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4619      	mov	r1, r3
 8005f74:	4610      	mov	r0, r2
 8005f76:	f000 fc4e 	bl	8006816 <TIM_ITRx_SetConfig>
      break;
 8005f7a:	e003      	b.n	8005f84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	73fb      	strb	r3, [r7, #15]
      break;
 8005f80:	e000      	b.n	8005f84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005f82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3710      	adds	r7, #16
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
	...

08005fa0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005faa:	2300      	movs	r3, #0
 8005fac:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	2b0c      	cmp	r3, #12
 8005fb2:	d831      	bhi.n	8006018 <HAL_TIM_ReadCapturedValue+0x78>
 8005fb4:	a201      	add	r2, pc, #4	; (adr r2, 8005fbc <HAL_TIM_ReadCapturedValue+0x1c>)
 8005fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fba:	bf00      	nop
 8005fbc:	08005ff1 	.word	0x08005ff1
 8005fc0:	08006019 	.word	0x08006019
 8005fc4:	08006019 	.word	0x08006019
 8005fc8:	08006019 	.word	0x08006019
 8005fcc:	08005ffb 	.word	0x08005ffb
 8005fd0:	08006019 	.word	0x08006019
 8005fd4:	08006019 	.word	0x08006019
 8005fd8:	08006019 	.word	0x08006019
 8005fdc:	08006005 	.word	0x08006005
 8005fe0:	08006019 	.word	0x08006019
 8005fe4:	08006019 	.word	0x08006019
 8005fe8:	08006019 	.word	0x08006019
 8005fec:	0800600f 	.word	0x0800600f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ff6:	60fb      	str	r3, [r7, #12]

      break;
 8005ff8:	e00f      	b.n	800601a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006000:	60fb      	str	r3, [r7, #12]

      break;
 8006002:	e00a      	b.n	800601a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800600a:	60fb      	str	r3, [r7, #12]

      break;
 800600c:	e005      	b.n	800601a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006014:	60fb      	str	r3, [r7, #12]

      break;
 8006016:	e000      	b.n	800601a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006018:	bf00      	nop
  }

  return tmpreg;
 800601a:	68fb      	ldr	r3, [r7, #12]
}
 800601c:	4618      	mov	r0, r3
 800601e:	3714      	adds	r7, #20
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006030:	bf00      	nop
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006044:	bf00      	nop
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006058:	bf00      	nop
 800605a:	370c      	adds	r7, #12
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006064:	b480      	push	{r7}
 8006066:	b085      	sub	sp, #20
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a40      	ldr	r2, [pc, #256]	; (8006178 <TIM_Base_SetConfig+0x114>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d013      	beq.n	80060a4 <TIM_Base_SetConfig+0x40>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006082:	d00f      	beq.n	80060a4 <TIM_Base_SetConfig+0x40>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a3d      	ldr	r2, [pc, #244]	; (800617c <TIM_Base_SetConfig+0x118>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d00b      	beq.n	80060a4 <TIM_Base_SetConfig+0x40>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a3c      	ldr	r2, [pc, #240]	; (8006180 <TIM_Base_SetConfig+0x11c>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d007      	beq.n	80060a4 <TIM_Base_SetConfig+0x40>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a3b      	ldr	r2, [pc, #236]	; (8006184 <TIM_Base_SetConfig+0x120>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d003      	beq.n	80060a4 <TIM_Base_SetConfig+0x40>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a3a      	ldr	r2, [pc, #232]	; (8006188 <TIM_Base_SetConfig+0x124>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d108      	bne.n	80060b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a2f      	ldr	r2, [pc, #188]	; (8006178 <TIM_Base_SetConfig+0x114>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d02b      	beq.n	8006116 <TIM_Base_SetConfig+0xb2>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060c4:	d027      	beq.n	8006116 <TIM_Base_SetConfig+0xb2>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a2c      	ldr	r2, [pc, #176]	; (800617c <TIM_Base_SetConfig+0x118>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d023      	beq.n	8006116 <TIM_Base_SetConfig+0xb2>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a2b      	ldr	r2, [pc, #172]	; (8006180 <TIM_Base_SetConfig+0x11c>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d01f      	beq.n	8006116 <TIM_Base_SetConfig+0xb2>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4a2a      	ldr	r2, [pc, #168]	; (8006184 <TIM_Base_SetConfig+0x120>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d01b      	beq.n	8006116 <TIM_Base_SetConfig+0xb2>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a29      	ldr	r2, [pc, #164]	; (8006188 <TIM_Base_SetConfig+0x124>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d017      	beq.n	8006116 <TIM_Base_SetConfig+0xb2>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	4a28      	ldr	r2, [pc, #160]	; (800618c <TIM_Base_SetConfig+0x128>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d013      	beq.n	8006116 <TIM_Base_SetConfig+0xb2>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	4a27      	ldr	r2, [pc, #156]	; (8006190 <TIM_Base_SetConfig+0x12c>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d00f      	beq.n	8006116 <TIM_Base_SetConfig+0xb2>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	4a26      	ldr	r2, [pc, #152]	; (8006194 <TIM_Base_SetConfig+0x130>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d00b      	beq.n	8006116 <TIM_Base_SetConfig+0xb2>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	4a25      	ldr	r2, [pc, #148]	; (8006198 <TIM_Base_SetConfig+0x134>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d007      	beq.n	8006116 <TIM_Base_SetConfig+0xb2>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4a24      	ldr	r2, [pc, #144]	; (800619c <TIM_Base_SetConfig+0x138>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d003      	beq.n	8006116 <TIM_Base_SetConfig+0xb2>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4a23      	ldr	r2, [pc, #140]	; (80061a0 <TIM_Base_SetConfig+0x13c>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d108      	bne.n	8006128 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800611c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	68fa      	ldr	r2, [r7, #12]
 8006124:	4313      	orrs	r3, r2
 8006126:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	695b      	ldr	r3, [r3, #20]
 8006132:	4313      	orrs	r3, r2
 8006134:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	68fa      	ldr	r2, [r7, #12]
 800613a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	689a      	ldr	r2, [r3, #8]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a0a      	ldr	r2, [pc, #40]	; (8006178 <TIM_Base_SetConfig+0x114>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d003      	beq.n	800615c <TIM_Base_SetConfig+0xf8>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a0c      	ldr	r2, [pc, #48]	; (8006188 <TIM_Base_SetConfig+0x124>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d103      	bne.n	8006164 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	691a      	ldr	r2, [r3, #16]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	615a      	str	r2, [r3, #20]
}
 800616a:	bf00      	nop
 800616c:	3714      	adds	r7, #20
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr
 8006176:	bf00      	nop
 8006178:	40010000 	.word	0x40010000
 800617c:	40000400 	.word	0x40000400
 8006180:	40000800 	.word	0x40000800
 8006184:	40000c00 	.word	0x40000c00
 8006188:	40010400 	.word	0x40010400
 800618c:	40014000 	.word	0x40014000
 8006190:	40014400 	.word	0x40014400
 8006194:	40014800 	.word	0x40014800
 8006198:	40001800 	.word	0x40001800
 800619c:	40001c00 	.word	0x40001c00
 80061a0:	40002000 	.word	0x40002000

080061a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b087      	sub	sp, #28
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a1b      	ldr	r3, [r3, #32]
 80061b2:	f023 0201 	bic.w	r2, r3, #1
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a1b      	ldr	r3, [r3, #32]
 80061be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	699b      	ldr	r3, [r3, #24]
 80061ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f023 0303 	bic.w	r3, r3, #3
 80061da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	68fa      	ldr	r2, [r7, #12]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	f023 0302 	bic.w	r3, r3, #2
 80061ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	697a      	ldr	r2, [r7, #20]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4a20      	ldr	r2, [pc, #128]	; (800627c <TIM_OC1_SetConfig+0xd8>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d003      	beq.n	8006208 <TIM_OC1_SetConfig+0x64>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4a1f      	ldr	r2, [pc, #124]	; (8006280 <TIM_OC1_SetConfig+0xdc>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d10c      	bne.n	8006222 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	f023 0308 	bic.w	r3, r3, #8
 800620e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	697a      	ldr	r2, [r7, #20]
 8006216:	4313      	orrs	r3, r2
 8006218:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	f023 0304 	bic.w	r3, r3, #4
 8006220:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a15      	ldr	r2, [pc, #84]	; (800627c <TIM_OC1_SetConfig+0xd8>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d003      	beq.n	8006232 <TIM_OC1_SetConfig+0x8e>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4a14      	ldr	r2, [pc, #80]	; (8006280 <TIM_OC1_SetConfig+0xdc>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d111      	bne.n	8006256 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006238:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006240:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	695b      	ldr	r3, [r3, #20]
 8006246:	693a      	ldr	r2, [r7, #16]
 8006248:	4313      	orrs	r3, r2
 800624a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	699b      	ldr	r3, [r3, #24]
 8006250:	693a      	ldr	r2, [r7, #16]
 8006252:	4313      	orrs	r3, r2
 8006254:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	693a      	ldr	r2, [r7, #16]
 800625a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	68fa      	ldr	r2, [r7, #12]
 8006260:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	685a      	ldr	r2, [r3, #4]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	697a      	ldr	r2, [r7, #20]
 800626e:	621a      	str	r2, [r3, #32]
}
 8006270:	bf00      	nop
 8006272:	371c      	adds	r7, #28
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr
 800627c:	40010000 	.word	0x40010000
 8006280:	40010400 	.word	0x40010400

08006284 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006284:	b480      	push	{r7}
 8006286:	b087      	sub	sp, #28
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a1b      	ldr	r3, [r3, #32]
 8006292:	f023 0210 	bic.w	r2, r3, #16
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6a1b      	ldr	r3, [r3, #32]
 800629e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	699b      	ldr	r3, [r3, #24]
 80062aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	021b      	lsls	r3, r3, #8
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	f023 0320 	bic.w	r3, r3, #32
 80062ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	011b      	lsls	r3, r3, #4
 80062d6:	697a      	ldr	r2, [r7, #20]
 80062d8:	4313      	orrs	r3, r2
 80062da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	4a22      	ldr	r2, [pc, #136]	; (8006368 <TIM_OC2_SetConfig+0xe4>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d003      	beq.n	80062ec <TIM_OC2_SetConfig+0x68>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	4a21      	ldr	r2, [pc, #132]	; (800636c <TIM_OC2_SetConfig+0xe8>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d10d      	bne.n	8006308 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	011b      	lsls	r3, r3, #4
 80062fa:	697a      	ldr	r2, [r7, #20]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006306:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4a17      	ldr	r2, [pc, #92]	; (8006368 <TIM_OC2_SetConfig+0xe4>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d003      	beq.n	8006318 <TIM_OC2_SetConfig+0x94>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4a16      	ldr	r2, [pc, #88]	; (800636c <TIM_OC2_SetConfig+0xe8>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d113      	bne.n	8006340 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800631e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006326:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	695b      	ldr	r3, [r3, #20]
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	693a      	ldr	r2, [r7, #16]
 8006330:	4313      	orrs	r3, r2
 8006332:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	699b      	ldr	r3, [r3, #24]
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	693a      	ldr	r2, [r7, #16]
 800633c:	4313      	orrs	r3, r2
 800633e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	693a      	ldr	r2, [r7, #16]
 8006344:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	68fa      	ldr	r2, [r7, #12]
 800634a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	685a      	ldr	r2, [r3, #4]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	697a      	ldr	r2, [r7, #20]
 8006358:	621a      	str	r2, [r3, #32]
}
 800635a:	bf00      	nop
 800635c:	371c      	adds	r7, #28
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop
 8006368:	40010000 	.word	0x40010000
 800636c:	40010400 	.word	0x40010400

08006370 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006370:	b480      	push	{r7}
 8006372:	b087      	sub	sp, #28
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6a1b      	ldr	r3, [r3, #32]
 800637e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a1b      	ldr	r3, [r3, #32]
 800638a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	69db      	ldr	r3, [r3, #28]
 8006396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800639e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f023 0303 	bic.w	r3, r3, #3
 80063a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	021b      	lsls	r3, r3, #8
 80063c0:	697a      	ldr	r2, [r7, #20]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4a21      	ldr	r2, [pc, #132]	; (8006450 <TIM_OC3_SetConfig+0xe0>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d003      	beq.n	80063d6 <TIM_OC3_SetConfig+0x66>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4a20      	ldr	r2, [pc, #128]	; (8006454 <TIM_OC3_SetConfig+0xe4>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d10d      	bne.n	80063f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	021b      	lsls	r3, r3, #8
 80063e4:	697a      	ldr	r2, [r7, #20]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a16      	ldr	r2, [pc, #88]	; (8006450 <TIM_OC3_SetConfig+0xe0>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d003      	beq.n	8006402 <TIM_OC3_SetConfig+0x92>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a15      	ldr	r2, [pc, #84]	; (8006454 <TIM_OC3_SetConfig+0xe4>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d113      	bne.n	800642a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006408:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006410:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	695b      	ldr	r3, [r3, #20]
 8006416:	011b      	lsls	r3, r3, #4
 8006418:	693a      	ldr	r2, [r7, #16]
 800641a:	4313      	orrs	r3, r2
 800641c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	699b      	ldr	r3, [r3, #24]
 8006422:	011b      	lsls	r3, r3, #4
 8006424:	693a      	ldr	r2, [r7, #16]
 8006426:	4313      	orrs	r3, r2
 8006428:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	693a      	ldr	r2, [r7, #16]
 800642e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	685a      	ldr	r2, [r3, #4]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	697a      	ldr	r2, [r7, #20]
 8006442:	621a      	str	r2, [r3, #32]
}
 8006444:	bf00      	nop
 8006446:	371c      	adds	r7, #28
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr
 8006450:	40010000 	.word	0x40010000
 8006454:	40010400 	.word	0x40010400

08006458 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006458:	b480      	push	{r7}
 800645a:	b087      	sub	sp, #28
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a1b      	ldr	r3, [r3, #32]
 8006466:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a1b      	ldr	r3, [r3, #32]
 8006472:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	69db      	ldr	r3, [r3, #28]
 800647e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800648e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	021b      	lsls	r3, r3, #8
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	4313      	orrs	r3, r2
 800649a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80064a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	031b      	lsls	r3, r3, #12
 80064aa:	693a      	ldr	r2, [r7, #16]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a12      	ldr	r2, [pc, #72]	; (80064fc <TIM_OC4_SetConfig+0xa4>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d003      	beq.n	80064c0 <TIM_OC4_SetConfig+0x68>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4a11      	ldr	r2, [pc, #68]	; (8006500 <TIM_OC4_SetConfig+0xa8>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d109      	bne.n	80064d4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	695b      	ldr	r3, [r3, #20]
 80064cc:	019b      	lsls	r3, r3, #6
 80064ce:	697a      	ldr	r2, [r7, #20]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	697a      	ldr	r2, [r7, #20]
 80064d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	685a      	ldr	r2, [r3, #4]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	693a      	ldr	r2, [r7, #16]
 80064ec:	621a      	str	r2, [r3, #32]
}
 80064ee:	bf00      	nop
 80064f0:	371c      	adds	r7, #28
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop
 80064fc:	40010000 	.word	0x40010000
 8006500:	40010400 	.word	0x40010400

08006504 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006504:	b480      	push	{r7}
 8006506:	b087      	sub	sp, #28
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	607a      	str	r2, [r7, #4]
 8006510:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6a1b      	ldr	r3, [r3, #32]
 8006516:	f023 0201 	bic.w	r2, r3, #1
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	699b      	ldr	r3, [r3, #24]
 8006522:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6a1b      	ldr	r3, [r3, #32]
 8006528:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	4a28      	ldr	r2, [pc, #160]	; (80065d0 <TIM_TI1_SetConfig+0xcc>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d01b      	beq.n	800656a <TIM_TI1_SetConfig+0x66>
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006538:	d017      	beq.n	800656a <TIM_TI1_SetConfig+0x66>
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	4a25      	ldr	r2, [pc, #148]	; (80065d4 <TIM_TI1_SetConfig+0xd0>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d013      	beq.n	800656a <TIM_TI1_SetConfig+0x66>
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	4a24      	ldr	r2, [pc, #144]	; (80065d8 <TIM_TI1_SetConfig+0xd4>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d00f      	beq.n	800656a <TIM_TI1_SetConfig+0x66>
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	4a23      	ldr	r2, [pc, #140]	; (80065dc <TIM_TI1_SetConfig+0xd8>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d00b      	beq.n	800656a <TIM_TI1_SetConfig+0x66>
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	4a22      	ldr	r2, [pc, #136]	; (80065e0 <TIM_TI1_SetConfig+0xdc>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d007      	beq.n	800656a <TIM_TI1_SetConfig+0x66>
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	4a21      	ldr	r2, [pc, #132]	; (80065e4 <TIM_TI1_SetConfig+0xe0>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d003      	beq.n	800656a <TIM_TI1_SetConfig+0x66>
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	4a20      	ldr	r2, [pc, #128]	; (80065e8 <TIM_TI1_SetConfig+0xe4>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d101      	bne.n	800656e <TIM_TI1_SetConfig+0x6a>
 800656a:	2301      	movs	r3, #1
 800656c:	e000      	b.n	8006570 <TIM_TI1_SetConfig+0x6c>
 800656e:	2300      	movs	r3, #0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d008      	beq.n	8006586 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	f023 0303 	bic.w	r3, r3, #3
 800657a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800657c:	697a      	ldr	r2, [r7, #20]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4313      	orrs	r3, r2
 8006582:	617b      	str	r3, [r7, #20]
 8006584:	e003      	b.n	800658e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	f043 0301 	orr.w	r3, r3, #1
 800658c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006594:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	011b      	lsls	r3, r3, #4
 800659a:	b2db      	uxtb	r3, r3
 800659c:	697a      	ldr	r2, [r7, #20]
 800659e:	4313      	orrs	r3, r2
 80065a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	f023 030a 	bic.w	r3, r3, #10
 80065a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	f003 030a 	and.w	r3, r3, #10
 80065b0:	693a      	ldr	r2, [r7, #16]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	697a      	ldr	r2, [r7, #20]
 80065ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	693a      	ldr	r2, [r7, #16]
 80065c0:	621a      	str	r2, [r3, #32]
}
 80065c2:	bf00      	nop
 80065c4:	371c      	adds	r7, #28
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr
 80065ce:	bf00      	nop
 80065d0:	40010000 	.word	0x40010000
 80065d4:	40000400 	.word	0x40000400
 80065d8:	40000800 	.word	0x40000800
 80065dc:	40000c00 	.word	0x40000c00
 80065e0:	40010400 	.word	0x40010400
 80065e4:	40014000 	.word	0x40014000
 80065e8:	40001800 	.word	0x40001800

080065ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b087      	sub	sp, #28
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6a1b      	ldr	r3, [r3, #32]
 80065fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6a1b      	ldr	r3, [r3, #32]
 8006602:	f023 0201 	bic.w	r2, r3, #1
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	699b      	ldr	r3, [r3, #24]
 800660e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006616:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	011b      	lsls	r3, r3, #4
 800661c:	693a      	ldr	r2, [r7, #16]
 800661e:	4313      	orrs	r3, r2
 8006620:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	f023 030a 	bic.w	r3, r3, #10
 8006628:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800662a:	697a      	ldr	r2, [r7, #20]
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	4313      	orrs	r3, r2
 8006630:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	693a      	ldr	r2, [r7, #16]
 8006636:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	697a      	ldr	r2, [r7, #20]
 800663c:	621a      	str	r2, [r3, #32]
}
 800663e:	bf00      	nop
 8006640:	371c      	adds	r7, #28
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr

0800664a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800664a:	b480      	push	{r7}
 800664c:	b087      	sub	sp, #28
 800664e:	af00      	add	r7, sp, #0
 8006650:	60f8      	str	r0, [r7, #12]
 8006652:	60b9      	str	r1, [r7, #8]
 8006654:	607a      	str	r2, [r7, #4]
 8006656:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6a1b      	ldr	r3, [r3, #32]
 800665c:	f023 0210 	bic.w	r2, r3, #16
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	699b      	ldr	r3, [r3, #24]
 8006668:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6a1b      	ldr	r3, [r3, #32]
 800666e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006676:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	021b      	lsls	r3, r3, #8
 800667c:	697a      	ldr	r2, [r7, #20]
 800667e:	4313      	orrs	r3, r2
 8006680:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006688:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	031b      	lsls	r3, r3, #12
 800668e:	b29b      	uxth	r3, r3
 8006690:	697a      	ldr	r2, [r7, #20]
 8006692:	4313      	orrs	r3, r2
 8006694:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800669c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	011b      	lsls	r3, r3, #4
 80066a2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80066a6:	693a      	ldr	r2, [r7, #16]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	697a      	ldr	r2, [r7, #20]
 80066b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	693a      	ldr	r2, [r7, #16]
 80066b6:	621a      	str	r2, [r3, #32]
}
 80066b8:	bf00      	nop
 80066ba:	371c      	adds	r7, #28
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b087      	sub	sp, #28
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6a1b      	ldr	r3, [r3, #32]
 80066d4:	f023 0210 	bic.w	r2, r3, #16
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	699b      	ldr	r3, [r3, #24]
 80066e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6a1b      	ldr	r3, [r3, #32]
 80066e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	031b      	lsls	r3, r3, #12
 80066f4:	697a      	ldr	r2, [r7, #20]
 80066f6:	4313      	orrs	r3, r2
 80066f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006700:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	011b      	lsls	r3, r3, #4
 8006706:	693a      	ldr	r2, [r7, #16]
 8006708:	4313      	orrs	r3, r2
 800670a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	697a      	ldr	r2, [r7, #20]
 8006710:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	693a      	ldr	r2, [r7, #16]
 8006716:	621a      	str	r2, [r3, #32]
}
 8006718:	bf00      	nop
 800671a:	371c      	adds	r7, #28
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006724:	b480      	push	{r7}
 8006726:	b087      	sub	sp, #28
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	607a      	str	r2, [r7, #4]
 8006730:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6a1b      	ldr	r3, [r3, #32]
 8006736:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	69db      	ldr	r3, [r3, #28]
 8006742:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6a1b      	ldr	r3, [r3, #32]
 8006748:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	f023 0303 	bic.w	r3, r3, #3
 8006750:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006752:	697a      	ldr	r2, [r7, #20]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	4313      	orrs	r3, r2
 8006758:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006760:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	011b      	lsls	r3, r3, #4
 8006766:	b2db      	uxtb	r3, r3
 8006768:	697a      	ldr	r2, [r7, #20]
 800676a:	4313      	orrs	r3, r2
 800676c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006774:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	021b      	lsls	r3, r3, #8
 800677a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800677e:	693a      	ldr	r2, [r7, #16]
 8006780:	4313      	orrs	r3, r2
 8006782:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	697a      	ldr	r2, [r7, #20]
 8006788:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	693a      	ldr	r2, [r7, #16]
 800678e:	621a      	str	r2, [r3, #32]
}
 8006790:	bf00      	nop
 8006792:	371c      	adds	r7, #28
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800679c:	b480      	push	{r7}
 800679e:	b087      	sub	sp, #28
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	607a      	str	r2, [r7, #4]
 80067a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	6a1b      	ldr	r3, [r3, #32]
 80067ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	69db      	ldr	r3, [r3, #28]
 80067ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6a1b      	ldr	r3, [r3, #32]
 80067c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067c8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	021b      	lsls	r3, r3, #8
 80067ce:	697a      	ldr	r2, [r7, #20]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80067da:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	031b      	lsls	r3, r3, #12
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80067ee:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	031b      	lsls	r3, r3, #12
 80067f4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80067f8:	693a      	ldr	r2, [r7, #16]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	697a      	ldr	r2, [r7, #20]
 8006802:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	693a      	ldr	r2, [r7, #16]
 8006808:	621a      	str	r2, [r3, #32]
}
 800680a:	bf00      	nop
 800680c:	371c      	adds	r7, #28
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr

08006816 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006816:	b480      	push	{r7}
 8006818:	b085      	sub	sp, #20
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
 800681e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800682c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800682e:	683a      	ldr	r2, [r7, #0]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	4313      	orrs	r3, r2
 8006834:	f043 0307 	orr.w	r3, r3, #7
 8006838:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	609a      	str	r2, [r3, #8]
}
 8006840:	bf00      	nop
 8006842:	3714      	adds	r7, #20
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800684c:	b480      	push	{r7}
 800684e:	b087      	sub	sp, #28
 8006850:	af00      	add	r7, sp, #0
 8006852:	60f8      	str	r0, [r7, #12]
 8006854:	60b9      	str	r1, [r7, #8]
 8006856:	607a      	str	r2, [r7, #4]
 8006858:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006866:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	021a      	lsls	r2, r3, #8
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	431a      	orrs	r2, r3
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	4313      	orrs	r3, r2
 8006874:	697a      	ldr	r2, [r7, #20]
 8006876:	4313      	orrs	r3, r2
 8006878:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	697a      	ldr	r2, [r7, #20]
 800687e:	609a      	str	r2, [r3, #8]
}
 8006880:	bf00      	nop
 8006882:	371c      	adds	r7, #28
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800688c:	b480      	push	{r7}
 800688e:	b087      	sub	sp, #28
 8006890:	af00      	add	r7, sp, #0
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	f003 031f 	and.w	r3, r3, #31
 800689e:	2201      	movs	r2, #1
 80068a0:	fa02 f303 	lsl.w	r3, r2, r3
 80068a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	6a1a      	ldr	r2, [r3, #32]
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	43db      	mvns	r3, r3
 80068ae:	401a      	ands	r2, r3
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6a1a      	ldr	r2, [r3, #32]
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	f003 031f 	and.w	r3, r3, #31
 80068be:	6879      	ldr	r1, [r7, #4]
 80068c0:	fa01 f303 	lsl.w	r3, r1, r3
 80068c4:	431a      	orrs	r2, r3
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	621a      	str	r2, [r3, #32]
}
 80068ca:	bf00      	nop
 80068cc:	371c      	adds	r7, #28
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr
	...

080068d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068d8:	b480      	push	{r7}
 80068da:	b085      	sub	sp, #20
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d101      	bne.n	80068f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068ec:	2302      	movs	r3, #2
 80068ee:	e05a      	b.n	80069a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2202      	movs	r2, #2
 80068fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006916:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	4313      	orrs	r3, r2
 8006920:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	68fa      	ldr	r2, [r7, #12]
 8006928:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a21      	ldr	r2, [pc, #132]	; (80069b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d022      	beq.n	800697a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800693c:	d01d      	beq.n	800697a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a1d      	ldr	r2, [pc, #116]	; (80069b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d018      	beq.n	800697a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a1b      	ldr	r2, [pc, #108]	; (80069bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d013      	beq.n	800697a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a1a      	ldr	r2, [pc, #104]	; (80069c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d00e      	beq.n	800697a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a18      	ldr	r2, [pc, #96]	; (80069c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d009      	beq.n	800697a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a17      	ldr	r2, [pc, #92]	; (80069c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d004      	beq.n	800697a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a15      	ldr	r2, [pc, #84]	; (80069cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d10c      	bne.n	8006994 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006980:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	68ba      	ldr	r2, [r7, #8]
 8006988:	4313      	orrs	r3, r2
 800698a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	68ba      	ldr	r2, [r7, #8]
 8006992:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3714      	adds	r7, #20
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr
 80069b2:	bf00      	nop
 80069b4:	40010000 	.word	0x40010000
 80069b8:	40000400 	.word	0x40000400
 80069bc:	40000800 	.word	0x40000800
 80069c0:	40000c00 	.word	0x40000c00
 80069c4:	40010400 	.word	0x40010400
 80069c8:	40014000 	.word	0x40014000
 80069cc:	40001800 	.word	0x40001800

080069d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069d8:	bf00      	nop
 80069da:	370c      	adds	r7, #12
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069ec:	bf00      	nop
 80069ee:	370c      	adds	r7, #12
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b082      	sub	sp, #8
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d101      	bne.n	8006a0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	e03f      	b.n	8006a8a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d106      	bne.n	8006a24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f7fa ff1e 	bl	8001860 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2224      	movs	r2, #36	; 0x24
 8006a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	68da      	ldr	r2, [r3, #12]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f000 fddf 	bl	8007600 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	691a      	ldr	r2, [r3, #16]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	695a      	ldr	r2, [r3, #20]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	68da      	ldr	r2, [r3, #12]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2220      	movs	r2, #32
 8006a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2220      	movs	r2, #32
 8006a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006a88:	2300      	movs	r3, #0
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3708      	adds	r7, #8
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}

08006a92 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a92:	b580      	push	{r7, lr}
 8006a94:	b08a      	sub	sp, #40	; 0x28
 8006a96:	af02      	add	r7, sp, #8
 8006a98:	60f8      	str	r0, [r7, #12]
 8006a9a:	60b9      	str	r1, [r7, #8]
 8006a9c:	603b      	str	r3, [r7, #0]
 8006a9e:	4613      	mov	r3, r2
 8006aa0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	2b20      	cmp	r3, #32
 8006ab0:	d17c      	bne.n	8006bac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d002      	beq.n	8006abe <HAL_UART_Transmit+0x2c>
 8006ab8:	88fb      	ldrh	r3, [r7, #6]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d101      	bne.n	8006ac2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e075      	b.n	8006bae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d101      	bne.n	8006ad0 <HAL_UART_Transmit+0x3e>
 8006acc:	2302      	movs	r3, #2
 8006ace:	e06e      	b.n	8006bae <HAL_UART_Transmit+0x11c>
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2200      	movs	r2, #0
 8006adc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2221      	movs	r2, #33	; 0x21
 8006ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ae6:	f7fb fd7d 	bl	80025e4 <HAL_GetTick>
 8006aea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	88fa      	ldrh	r2, [r7, #6]
 8006af0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	88fa      	ldrh	r2, [r7, #6]
 8006af6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b00:	d108      	bne.n	8006b14 <HAL_UART_Transmit+0x82>
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	691b      	ldr	r3, [r3, #16]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d104      	bne.n	8006b14 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	61bb      	str	r3, [r7, #24]
 8006b12:	e003      	b.n	8006b1c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006b24:	e02a      	b.n	8006b7c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	9300      	str	r3, [sp, #0]
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	2180      	movs	r1, #128	; 0x80
 8006b30:	68f8      	ldr	r0, [r7, #12]
 8006b32:	f000 fb1f 	bl	8007174 <UART_WaitOnFlagUntilTimeout>
 8006b36:	4603      	mov	r3, r0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d001      	beq.n	8006b40 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006b3c:	2303      	movs	r3, #3
 8006b3e:	e036      	b.n	8006bae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d10b      	bne.n	8006b5e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	881b      	ldrh	r3, [r3, #0]
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b54:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	3302      	adds	r3, #2
 8006b5a:	61bb      	str	r3, [r7, #24]
 8006b5c:	e007      	b.n	8006b6e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	781a      	ldrb	r2, [r3, #0]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	3b01      	subs	r3, #1
 8006b76:	b29a      	uxth	r2, r3
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d1cf      	bne.n	8006b26 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	9300      	str	r3, [sp, #0]
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	2140      	movs	r1, #64	; 0x40
 8006b90:	68f8      	ldr	r0, [r7, #12]
 8006b92:	f000 faef 	bl	8007174 <UART_WaitOnFlagUntilTimeout>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d001      	beq.n	8006ba0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	e006      	b.n	8006bae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2220      	movs	r2, #32
 8006ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	e000      	b.n	8006bae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006bac:	2302      	movs	r3, #2
  }
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3720      	adds	r7, #32
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}

08006bb6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006bb6:	b580      	push	{r7, lr}
 8006bb8:	b084      	sub	sp, #16
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	60f8      	str	r0, [r7, #12]
 8006bbe:	60b9      	str	r1, [r7, #8]
 8006bc0:	4613      	mov	r3, r2
 8006bc2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	2b20      	cmp	r3, #32
 8006bce:	d11d      	bne.n	8006c0c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d002      	beq.n	8006bdc <HAL_UART_Receive_IT+0x26>
 8006bd6:	88fb      	ldrh	r3, [r7, #6]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d101      	bne.n	8006be0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e016      	b.n	8006c0e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d101      	bne.n	8006bee <HAL_UART_Receive_IT+0x38>
 8006bea:	2302      	movs	r3, #2
 8006bec:	e00f      	b.n	8006c0e <HAL_UART_Receive_IT+0x58>
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006bfc:	88fb      	ldrh	r3, [r7, #6]
 8006bfe:	461a      	mov	r2, r3
 8006c00:	68b9      	ldr	r1, [r7, #8]
 8006c02:	68f8      	ldr	r0, [r7, #12]
 8006c04:	f000 fb24 	bl	8007250 <UART_Start_Receive_IT>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	e000      	b.n	8006c0e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006c0c:	2302      	movs	r3, #2
  }
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3710      	adds	r7, #16
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
	...

08006c18 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b0ba      	sub	sp, #232	; 0xe8
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	695b      	ldr	r3, [r3, #20]
 8006c3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006c44:	2300      	movs	r3, #0
 8006c46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c4e:	f003 030f 	and.w	r3, r3, #15
 8006c52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006c56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d10f      	bne.n	8006c7e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c62:	f003 0320 	and.w	r3, r3, #32
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d009      	beq.n	8006c7e <HAL_UART_IRQHandler+0x66>
 8006c6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c6e:	f003 0320 	and.w	r3, r3, #32
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d003      	beq.n	8006c7e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 fc07 	bl	800748a <UART_Receive_IT>
      return;
 8006c7c:	e256      	b.n	800712c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006c7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	f000 80de 	beq.w	8006e44 <HAL_UART_IRQHandler+0x22c>
 8006c88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c8c:	f003 0301 	and.w	r3, r3, #1
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d106      	bne.n	8006ca2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006c94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c98:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	f000 80d1 	beq.w	8006e44 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ca6:	f003 0301 	and.w	r3, r3, #1
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d00b      	beq.n	8006cc6 <HAL_UART_IRQHandler+0xae>
 8006cae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d005      	beq.n	8006cc6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cbe:	f043 0201 	orr.w	r2, r3, #1
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006cc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cca:	f003 0304 	and.w	r3, r3, #4
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d00b      	beq.n	8006cea <HAL_UART_IRQHandler+0xd2>
 8006cd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cd6:	f003 0301 	and.w	r3, r3, #1
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d005      	beq.n	8006cea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce2:	f043 0202 	orr.w	r2, r3, #2
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cee:	f003 0302 	and.w	r3, r3, #2
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d00b      	beq.n	8006d0e <HAL_UART_IRQHandler+0xf6>
 8006cf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cfa:	f003 0301 	and.w	r3, r3, #1
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d005      	beq.n	8006d0e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d06:	f043 0204 	orr.w	r2, r3, #4
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d12:	f003 0308 	and.w	r3, r3, #8
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d011      	beq.n	8006d3e <HAL_UART_IRQHandler+0x126>
 8006d1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d1e:	f003 0320 	and.w	r3, r3, #32
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d105      	bne.n	8006d32 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006d26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d2a:	f003 0301 	and.w	r3, r3, #1
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d005      	beq.n	8006d3e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d36:	f043 0208 	orr.w	r2, r3, #8
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	f000 81ed 	beq.w	8007122 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d4c:	f003 0320 	and.w	r3, r3, #32
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d008      	beq.n	8006d66 <HAL_UART_IRQHandler+0x14e>
 8006d54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d58:	f003 0320 	and.w	r3, r3, #32
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d002      	beq.n	8006d66 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 fb92 	bl	800748a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	695b      	ldr	r3, [r3, #20]
 8006d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d70:	2b40      	cmp	r3, #64	; 0x40
 8006d72:	bf0c      	ite	eq
 8006d74:	2301      	moveq	r3, #1
 8006d76:	2300      	movne	r3, #0
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d82:	f003 0308 	and.w	r3, r3, #8
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d103      	bne.n	8006d92 <HAL_UART_IRQHandler+0x17a>
 8006d8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d04f      	beq.n	8006e32 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 fa9a 	bl	80072cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	695b      	ldr	r3, [r3, #20]
 8006d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006da2:	2b40      	cmp	r3, #64	; 0x40
 8006da4:	d141      	bne.n	8006e2a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	3314      	adds	r3, #20
 8006dac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006db4:	e853 3f00 	ldrex	r3, [r3]
 8006db8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006dbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006dc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	3314      	adds	r3, #20
 8006dce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006dd2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006dd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dda:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006dde:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006de2:	e841 2300 	strex	r3, r2, [r1]
 8006de6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006dea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d1d9      	bne.n	8006da6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d013      	beq.n	8006e22 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dfe:	4a7d      	ldr	r2, [pc, #500]	; (8006ff4 <HAL_UART_IRQHandler+0x3dc>)
 8006e00:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e06:	4618      	mov	r0, r3
 8006e08:	f7fb fd9d 	bl	8002946 <HAL_DMA_Abort_IT>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d016      	beq.n	8006e40 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006e1c:	4610      	mov	r0, r2
 8006e1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e20:	e00e      	b.n	8006e40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 f990 	bl	8007148 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e28:	e00a      	b.n	8006e40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 f98c 	bl	8007148 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e30:	e006      	b.n	8006e40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 f988 	bl	8007148 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006e3e:	e170      	b.n	8007122 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e40:	bf00      	nop
    return;
 8006e42:	e16e      	b.n	8007122 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	f040 814a 	bne.w	80070e2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e52:	f003 0310 	and.w	r3, r3, #16
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	f000 8143 	beq.w	80070e2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006e5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e60:	f003 0310 	and.w	r3, r3, #16
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	f000 813c 	beq.w	80070e2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	60bb      	str	r3, [r7, #8]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	60bb      	str	r3, [r7, #8]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	60bb      	str	r3, [r7, #8]
 8006e7e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	695b      	ldr	r3, [r3, #20]
 8006e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e8a:	2b40      	cmp	r3, #64	; 0x40
 8006e8c:	f040 80b4 	bne.w	8006ff8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006e9c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f000 8140 	beq.w	8007126 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006eaa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	f080 8139 	bcs.w	8007126 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006eba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec0:	69db      	ldr	r3, [r3, #28]
 8006ec2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ec6:	f000 8088 	beq.w	8006fda <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	330c      	adds	r3, #12
 8006ed0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ed8:	e853 3f00 	ldrex	r3, [r3]
 8006edc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006ee0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ee4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ee8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	330c      	adds	r3, #12
 8006ef2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006ef6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006efa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006efe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006f02:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006f06:	e841 2300 	strex	r3, r2, [r1]
 8006f0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006f0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d1d9      	bne.n	8006eca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	3314      	adds	r3, #20
 8006f1c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f20:	e853 3f00 	ldrex	r3, [r3]
 8006f24:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006f26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f28:	f023 0301 	bic.w	r3, r3, #1
 8006f2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	3314      	adds	r3, #20
 8006f36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006f3a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006f3e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f40:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006f42:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006f46:	e841 2300 	strex	r3, r2, [r1]
 8006f4a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006f4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d1e1      	bne.n	8006f16 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	3314      	adds	r3, #20
 8006f58:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f5c:	e853 3f00 	ldrex	r3, [r3]
 8006f60:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006f62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	3314      	adds	r3, #20
 8006f72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006f76:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006f78:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f7a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006f7c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006f7e:	e841 2300 	strex	r3, r2, [r1]
 8006f82:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006f84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d1e3      	bne.n	8006f52 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2220      	movs	r2, #32
 8006f8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	330c      	adds	r3, #12
 8006f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fa2:	e853 3f00 	ldrex	r3, [r3]
 8006fa6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006fa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006faa:	f023 0310 	bic.w	r3, r3, #16
 8006fae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	330c      	adds	r3, #12
 8006fb8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006fbc:	65ba      	str	r2, [r7, #88]	; 0x58
 8006fbe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006fc2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006fc4:	e841 2300 	strex	r3, r2, [r1]
 8006fc8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006fca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d1e3      	bne.n	8006f98 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f7fb fc46 	bl	8002866 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	1ad3      	subs	r3, r2, r3
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	4619      	mov	r1, r3
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 f8b6 	bl	800715c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006ff0:	e099      	b.n	8007126 <HAL_UART_IRQHandler+0x50e>
 8006ff2:	bf00      	nop
 8006ff4:	08007393 	.word	0x08007393
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007000:	b29b      	uxth	r3, r3
 8007002:	1ad3      	subs	r3, r2, r3
 8007004:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800700c:	b29b      	uxth	r3, r3
 800700e:	2b00      	cmp	r3, #0
 8007010:	f000 808b 	beq.w	800712a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007014:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007018:	2b00      	cmp	r3, #0
 800701a:	f000 8086 	beq.w	800712a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	330c      	adds	r3, #12
 8007024:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007028:	e853 3f00 	ldrex	r3, [r3]
 800702c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800702e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007030:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007034:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	330c      	adds	r3, #12
 800703e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007042:	647a      	str	r2, [r7, #68]	; 0x44
 8007044:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007046:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007048:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800704a:	e841 2300 	strex	r3, r2, [r1]
 800704e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007052:	2b00      	cmp	r3, #0
 8007054:	d1e3      	bne.n	800701e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	3314      	adds	r3, #20
 800705c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800705e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007060:	e853 3f00 	ldrex	r3, [r3]
 8007064:	623b      	str	r3, [r7, #32]
   return(result);
 8007066:	6a3b      	ldr	r3, [r7, #32]
 8007068:	f023 0301 	bic.w	r3, r3, #1
 800706c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	3314      	adds	r3, #20
 8007076:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800707a:	633a      	str	r2, [r7, #48]	; 0x30
 800707c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800707e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007080:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007082:	e841 2300 	strex	r3, r2, [r1]
 8007086:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708a:	2b00      	cmp	r3, #0
 800708c:	d1e3      	bne.n	8007056 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2220      	movs	r2, #32
 8007092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2200      	movs	r2, #0
 800709a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	330c      	adds	r3, #12
 80070a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	e853 3f00 	ldrex	r3, [r3]
 80070aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f023 0310 	bic.w	r3, r3, #16
 80070b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	330c      	adds	r3, #12
 80070bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80070c0:	61fa      	str	r2, [r7, #28]
 80070c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c4:	69b9      	ldr	r1, [r7, #24]
 80070c6:	69fa      	ldr	r2, [r7, #28]
 80070c8:	e841 2300 	strex	r3, r2, [r1]
 80070cc:	617b      	str	r3, [r7, #20]
   return(result);
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d1e3      	bne.n	800709c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80070d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80070d8:	4619      	mov	r1, r3
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 f83e 	bl	800715c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80070e0:	e023      	b.n	800712a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80070e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d009      	beq.n	8007102 <HAL_UART_IRQHandler+0x4ea>
 80070ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d003      	beq.n	8007102 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 f95d 	bl	80073ba <UART_Transmit_IT>
    return;
 8007100:	e014      	b.n	800712c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800710a:	2b00      	cmp	r3, #0
 800710c:	d00e      	beq.n	800712c <HAL_UART_IRQHandler+0x514>
 800710e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007116:	2b00      	cmp	r3, #0
 8007118:	d008      	beq.n	800712c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 f99d 	bl	800745a <UART_EndTransmit_IT>
    return;
 8007120:	e004      	b.n	800712c <HAL_UART_IRQHandler+0x514>
    return;
 8007122:	bf00      	nop
 8007124:	e002      	b.n	800712c <HAL_UART_IRQHandler+0x514>
      return;
 8007126:	bf00      	nop
 8007128:	e000      	b.n	800712c <HAL_UART_IRQHandler+0x514>
      return;
 800712a:	bf00      	nop
  }
}
 800712c:	37e8      	adds	r7, #232	; 0xe8
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop

08007134 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800713c:	bf00      	nop
 800713e:	370c      	adds	r7, #12
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr

08007148 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007150:	bf00      	nop
 8007152:	370c      	adds	r7, #12
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr

0800715c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	460b      	mov	r3, r1
 8007166:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007168:	bf00      	nop
 800716a:	370c      	adds	r7, #12
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b090      	sub	sp, #64	; 0x40
 8007178:	af00      	add	r7, sp, #0
 800717a:	60f8      	str	r0, [r7, #12]
 800717c:	60b9      	str	r1, [r7, #8]
 800717e:	603b      	str	r3, [r7, #0]
 8007180:	4613      	mov	r3, r2
 8007182:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007184:	e050      	b.n	8007228 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007186:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800718c:	d04c      	beq.n	8007228 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800718e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007190:	2b00      	cmp	r3, #0
 8007192:	d007      	beq.n	80071a4 <UART_WaitOnFlagUntilTimeout+0x30>
 8007194:	f7fb fa26 	bl	80025e4 <HAL_GetTick>
 8007198:	4602      	mov	r2, r0
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	1ad3      	subs	r3, r2, r3
 800719e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d241      	bcs.n	8007228 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	330c      	adds	r3, #12
 80071aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ae:	e853 3f00 	ldrex	r3, [r3]
 80071b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80071ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	330c      	adds	r3, #12
 80071c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80071c4:	637a      	str	r2, [r7, #52]	; 0x34
 80071c6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80071ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071cc:	e841 2300 	strex	r3, r2, [r1]
 80071d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80071d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d1e5      	bne.n	80071a4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	3314      	adds	r3, #20
 80071de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	e853 3f00 	ldrex	r3, [r3]
 80071e6:	613b      	str	r3, [r7, #16]
   return(result);
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	f023 0301 	bic.w	r3, r3, #1
 80071ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	3314      	adds	r3, #20
 80071f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071f8:	623a      	str	r2, [r7, #32]
 80071fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fc:	69f9      	ldr	r1, [r7, #28]
 80071fe:	6a3a      	ldr	r2, [r7, #32]
 8007200:	e841 2300 	strex	r3, r2, [r1]
 8007204:	61bb      	str	r3, [r7, #24]
   return(result);
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d1e5      	bne.n	80071d8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2220      	movs	r2, #32
 8007210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2220      	movs	r2, #32
 8007218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2200      	movs	r2, #0
 8007220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007224:	2303      	movs	r3, #3
 8007226:	e00f      	b.n	8007248 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	4013      	ands	r3, r2
 8007232:	68ba      	ldr	r2, [r7, #8]
 8007234:	429a      	cmp	r2, r3
 8007236:	bf0c      	ite	eq
 8007238:	2301      	moveq	r3, #1
 800723a:	2300      	movne	r3, #0
 800723c:	b2db      	uxtb	r3, r3
 800723e:	461a      	mov	r2, r3
 8007240:	79fb      	ldrb	r3, [r7, #7]
 8007242:	429a      	cmp	r2, r3
 8007244:	d09f      	beq.n	8007186 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007246:	2300      	movs	r3, #0
}
 8007248:	4618      	mov	r0, r3
 800724a:	3740      	adds	r7, #64	; 0x40
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007250:	b480      	push	{r7}
 8007252:	b085      	sub	sp, #20
 8007254:	af00      	add	r7, sp, #0
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	60b9      	str	r1, [r7, #8]
 800725a:	4613      	mov	r3, r2
 800725c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	68ba      	ldr	r2, [r7, #8]
 8007262:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	88fa      	ldrh	r2, [r7, #6]
 8007268:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	88fa      	ldrh	r2, [r7, #6]
 800726e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2200      	movs	r2, #0
 8007274:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2222      	movs	r2, #34	; 0x22
 800727a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2200      	movs	r2, #0
 8007282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	691b      	ldr	r3, [r3, #16]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d007      	beq.n	800729e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	68da      	ldr	r2, [r3, #12]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800729c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	695a      	ldr	r2, [r3, #20]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f042 0201 	orr.w	r2, r2, #1
 80072ac:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	68da      	ldr	r2, [r3, #12]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f042 0220 	orr.w	r2, r2, #32
 80072bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80072be:	2300      	movs	r3, #0
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3714      	adds	r7, #20
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr

080072cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b095      	sub	sp, #84	; 0x54
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	330c      	adds	r3, #12
 80072da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072de:	e853 3f00 	ldrex	r3, [r3]
 80072e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80072e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80072ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	330c      	adds	r3, #12
 80072f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80072f4:	643a      	str	r2, [r7, #64]	; 0x40
 80072f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80072fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80072fc:	e841 2300 	strex	r3, r2, [r1]
 8007300:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007304:	2b00      	cmp	r3, #0
 8007306:	d1e5      	bne.n	80072d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	3314      	adds	r3, #20
 800730e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007310:	6a3b      	ldr	r3, [r7, #32]
 8007312:	e853 3f00 	ldrex	r3, [r3]
 8007316:	61fb      	str	r3, [r7, #28]
   return(result);
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	f023 0301 	bic.w	r3, r3, #1
 800731e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	3314      	adds	r3, #20
 8007326:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007328:	62fa      	str	r2, [r7, #44]	; 0x2c
 800732a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800732c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800732e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007330:	e841 2300 	strex	r3, r2, [r1]
 8007334:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007338:	2b00      	cmp	r3, #0
 800733a:	d1e5      	bne.n	8007308 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007340:	2b01      	cmp	r3, #1
 8007342:	d119      	bne.n	8007378 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	330c      	adds	r3, #12
 800734a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	e853 3f00 	ldrex	r3, [r3]
 8007352:	60bb      	str	r3, [r7, #8]
   return(result);
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	f023 0310 	bic.w	r3, r3, #16
 800735a:	647b      	str	r3, [r7, #68]	; 0x44
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	330c      	adds	r3, #12
 8007362:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007364:	61ba      	str	r2, [r7, #24]
 8007366:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007368:	6979      	ldr	r1, [r7, #20]
 800736a:	69ba      	ldr	r2, [r7, #24]
 800736c:	e841 2300 	strex	r3, r2, [r1]
 8007370:	613b      	str	r3, [r7, #16]
   return(result);
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d1e5      	bne.n	8007344 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2220      	movs	r2, #32
 800737c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007386:	bf00      	nop
 8007388:	3754      	adds	r7, #84	; 0x54
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr

08007392 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007392:	b580      	push	{r7, lr}
 8007394:	b084      	sub	sp, #16
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800739e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2200      	movs	r2, #0
 80073a4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2200      	movs	r2, #0
 80073aa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80073ac:	68f8      	ldr	r0, [r7, #12]
 80073ae:	f7ff fecb 	bl	8007148 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073b2:	bf00      	nop
 80073b4:	3710      	adds	r7, #16
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}

080073ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80073ba:	b480      	push	{r7}
 80073bc:	b085      	sub	sp, #20
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	2b21      	cmp	r3, #33	; 0x21
 80073cc:	d13e      	bne.n	800744c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073d6:	d114      	bne.n	8007402 <UART_Transmit_IT+0x48>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	691b      	ldr	r3, [r3, #16]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d110      	bne.n	8007402 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6a1b      	ldr	r3, [r3, #32]
 80073e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	881b      	ldrh	r3, [r3, #0]
 80073ea:	461a      	mov	r2, r3
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073f4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6a1b      	ldr	r3, [r3, #32]
 80073fa:	1c9a      	adds	r2, r3, #2
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	621a      	str	r2, [r3, #32]
 8007400:	e008      	b.n	8007414 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6a1b      	ldr	r3, [r3, #32]
 8007406:	1c59      	adds	r1, r3, #1
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	6211      	str	r1, [r2, #32]
 800740c:	781a      	ldrb	r2, [r3, #0]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007418:	b29b      	uxth	r3, r3
 800741a:	3b01      	subs	r3, #1
 800741c:	b29b      	uxth	r3, r3
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	4619      	mov	r1, r3
 8007422:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007424:	2b00      	cmp	r3, #0
 8007426:	d10f      	bne.n	8007448 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	68da      	ldr	r2, [r3, #12]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007436:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	68da      	ldr	r2, [r3, #12]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007446:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007448:	2300      	movs	r3, #0
 800744a:	e000      	b.n	800744e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800744c:	2302      	movs	r3, #2
  }
}
 800744e:	4618      	mov	r0, r3
 8007450:	3714      	adds	r7, #20
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr

0800745a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800745a:	b580      	push	{r7, lr}
 800745c:	b082      	sub	sp, #8
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	68da      	ldr	r2, [r3, #12]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007470:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2220      	movs	r2, #32
 8007476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f7ff fe5a 	bl	8007134 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007480:	2300      	movs	r3, #0
}
 8007482:	4618      	mov	r0, r3
 8007484:	3708      	adds	r7, #8
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}

0800748a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800748a:	b580      	push	{r7, lr}
 800748c:	b08c      	sub	sp, #48	; 0x30
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007498:	b2db      	uxtb	r3, r3
 800749a:	2b22      	cmp	r3, #34	; 0x22
 800749c:	f040 80ab 	bne.w	80075f6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074a8:	d117      	bne.n	80074da <UART_Receive_IT+0x50>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	691b      	ldr	r3, [r3, #16]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d113      	bne.n	80074da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80074b2:	2300      	movs	r3, #0
 80074b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074c8:	b29a      	uxth	r2, r3
 80074ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074d2:	1c9a      	adds	r2, r3, #2
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	629a      	str	r2, [r3, #40]	; 0x28
 80074d8:	e026      	b.n	8007528 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074de:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80074e0:	2300      	movs	r3, #0
 80074e2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074ec:	d007      	beq.n	80074fe <UART_Receive_IT+0x74>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d10a      	bne.n	800750c <UART_Receive_IT+0x82>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	691b      	ldr	r3, [r3, #16]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d106      	bne.n	800750c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	b2da      	uxtb	r2, r3
 8007506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007508:	701a      	strb	r2, [r3, #0]
 800750a:	e008      	b.n	800751e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	b2db      	uxtb	r3, r3
 8007514:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007518:	b2da      	uxtb	r2, r3
 800751a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800751c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007522:	1c5a      	adds	r2, r3, #1
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800752c:	b29b      	uxth	r3, r3
 800752e:	3b01      	subs	r3, #1
 8007530:	b29b      	uxth	r3, r3
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	4619      	mov	r1, r3
 8007536:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007538:	2b00      	cmp	r3, #0
 800753a:	d15a      	bne.n	80075f2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	68da      	ldr	r2, [r3, #12]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f022 0220 	bic.w	r2, r2, #32
 800754a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	68da      	ldr	r2, [r3, #12]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800755a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	695a      	ldr	r2, [r3, #20]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f022 0201 	bic.w	r2, r2, #1
 800756a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2220      	movs	r2, #32
 8007570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007578:	2b01      	cmp	r3, #1
 800757a:	d135      	bne.n	80075e8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	330c      	adds	r3, #12
 8007588:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	e853 3f00 	ldrex	r3, [r3]
 8007590:	613b      	str	r3, [r7, #16]
   return(result);
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	f023 0310 	bic.w	r3, r3, #16
 8007598:	627b      	str	r3, [r7, #36]	; 0x24
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	330c      	adds	r3, #12
 80075a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075a2:	623a      	str	r2, [r7, #32]
 80075a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a6:	69f9      	ldr	r1, [r7, #28]
 80075a8:	6a3a      	ldr	r2, [r7, #32]
 80075aa:	e841 2300 	strex	r3, r2, [r1]
 80075ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d1e5      	bne.n	8007582 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f003 0310 	and.w	r3, r3, #16
 80075c0:	2b10      	cmp	r3, #16
 80075c2:	d10a      	bne.n	80075da <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80075c4:	2300      	movs	r3, #0
 80075c6:	60fb      	str	r3, [r7, #12]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	60fb      	str	r3, [r7, #12]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	60fb      	str	r3, [r7, #12]
 80075d8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80075de:	4619      	mov	r1, r3
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f7ff fdbb 	bl	800715c <HAL_UARTEx_RxEventCallback>
 80075e6:	e002      	b.n	80075ee <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f7fa fbd5 	bl	8001d98 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80075ee:	2300      	movs	r3, #0
 80075f0:	e002      	b.n	80075f8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80075f2:	2300      	movs	r3, #0
 80075f4:	e000      	b.n	80075f8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80075f6:	2302      	movs	r3, #2
  }
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3730      	adds	r7, #48	; 0x30
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007600:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007604:	b0c0      	sub	sp, #256	; 0x100
 8007606:	af00      	add	r7, sp, #0
 8007608:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800760c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	691b      	ldr	r3, [r3, #16]
 8007614:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800761c:	68d9      	ldr	r1, [r3, #12]
 800761e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	ea40 0301 	orr.w	r3, r0, r1
 8007628:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800762a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800762e:	689a      	ldr	r2, [r3, #8]
 8007630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007634:	691b      	ldr	r3, [r3, #16]
 8007636:	431a      	orrs	r2, r3
 8007638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800763c:	695b      	ldr	r3, [r3, #20]
 800763e:	431a      	orrs	r2, r3
 8007640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007644:	69db      	ldr	r3, [r3, #28]
 8007646:	4313      	orrs	r3, r2
 8007648:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800764c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	68db      	ldr	r3, [r3, #12]
 8007654:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007658:	f021 010c 	bic.w	r1, r1, #12
 800765c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007666:	430b      	orrs	r3, r1
 8007668:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800766a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	695b      	ldr	r3, [r3, #20]
 8007672:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800767a:	6999      	ldr	r1, [r3, #24]
 800767c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	ea40 0301 	orr.w	r3, r0, r1
 8007686:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800768c:	681a      	ldr	r2, [r3, #0]
 800768e:	4b8f      	ldr	r3, [pc, #572]	; (80078cc <UART_SetConfig+0x2cc>)
 8007690:	429a      	cmp	r2, r3
 8007692:	d005      	beq.n	80076a0 <UART_SetConfig+0xa0>
 8007694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007698:	681a      	ldr	r2, [r3, #0]
 800769a:	4b8d      	ldr	r3, [pc, #564]	; (80078d0 <UART_SetConfig+0x2d0>)
 800769c:	429a      	cmp	r2, r3
 800769e:	d104      	bne.n	80076aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80076a0:	f7fd f8e2 	bl	8004868 <HAL_RCC_GetPCLK2Freq>
 80076a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80076a8:	e003      	b.n	80076b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80076aa:	f7fd f8c9 	bl	8004840 <HAL_RCC_GetPCLK1Freq>
 80076ae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076b6:	69db      	ldr	r3, [r3, #28]
 80076b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076bc:	f040 810c 	bne.w	80078d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80076c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076c4:	2200      	movs	r2, #0
 80076c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80076ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80076ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80076d2:	4622      	mov	r2, r4
 80076d4:	462b      	mov	r3, r5
 80076d6:	1891      	adds	r1, r2, r2
 80076d8:	65b9      	str	r1, [r7, #88]	; 0x58
 80076da:	415b      	adcs	r3, r3
 80076dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80076de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80076e2:	4621      	mov	r1, r4
 80076e4:	eb12 0801 	adds.w	r8, r2, r1
 80076e8:	4629      	mov	r1, r5
 80076ea:	eb43 0901 	adc.w	r9, r3, r1
 80076ee:	f04f 0200 	mov.w	r2, #0
 80076f2:	f04f 0300 	mov.w	r3, #0
 80076f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80076fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80076fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007702:	4690      	mov	r8, r2
 8007704:	4699      	mov	r9, r3
 8007706:	4623      	mov	r3, r4
 8007708:	eb18 0303 	adds.w	r3, r8, r3
 800770c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007710:	462b      	mov	r3, r5
 8007712:	eb49 0303 	adc.w	r3, r9, r3
 8007716:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800771a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007726:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800772a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800772e:	460b      	mov	r3, r1
 8007730:	18db      	adds	r3, r3, r3
 8007732:	653b      	str	r3, [r7, #80]	; 0x50
 8007734:	4613      	mov	r3, r2
 8007736:	eb42 0303 	adc.w	r3, r2, r3
 800773a:	657b      	str	r3, [r7, #84]	; 0x54
 800773c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007740:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007744:	f7f8 fda4 	bl	8000290 <__aeabi_uldivmod>
 8007748:	4602      	mov	r2, r0
 800774a:	460b      	mov	r3, r1
 800774c:	4b61      	ldr	r3, [pc, #388]	; (80078d4 <UART_SetConfig+0x2d4>)
 800774e:	fba3 2302 	umull	r2, r3, r3, r2
 8007752:	095b      	lsrs	r3, r3, #5
 8007754:	011c      	lsls	r4, r3, #4
 8007756:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800775a:	2200      	movs	r2, #0
 800775c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007760:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007764:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007768:	4642      	mov	r2, r8
 800776a:	464b      	mov	r3, r9
 800776c:	1891      	adds	r1, r2, r2
 800776e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007770:	415b      	adcs	r3, r3
 8007772:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007774:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007778:	4641      	mov	r1, r8
 800777a:	eb12 0a01 	adds.w	sl, r2, r1
 800777e:	4649      	mov	r1, r9
 8007780:	eb43 0b01 	adc.w	fp, r3, r1
 8007784:	f04f 0200 	mov.w	r2, #0
 8007788:	f04f 0300 	mov.w	r3, #0
 800778c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007790:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007794:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007798:	4692      	mov	sl, r2
 800779a:	469b      	mov	fp, r3
 800779c:	4643      	mov	r3, r8
 800779e:	eb1a 0303 	adds.w	r3, sl, r3
 80077a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80077a6:	464b      	mov	r3, r9
 80077a8:	eb4b 0303 	adc.w	r3, fp, r3
 80077ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80077b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80077bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80077c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80077c4:	460b      	mov	r3, r1
 80077c6:	18db      	adds	r3, r3, r3
 80077c8:	643b      	str	r3, [r7, #64]	; 0x40
 80077ca:	4613      	mov	r3, r2
 80077cc:	eb42 0303 	adc.w	r3, r2, r3
 80077d0:	647b      	str	r3, [r7, #68]	; 0x44
 80077d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80077d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80077da:	f7f8 fd59 	bl	8000290 <__aeabi_uldivmod>
 80077de:	4602      	mov	r2, r0
 80077e0:	460b      	mov	r3, r1
 80077e2:	4611      	mov	r1, r2
 80077e4:	4b3b      	ldr	r3, [pc, #236]	; (80078d4 <UART_SetConfig+0x2d4>)
 80077e6:	fba3 2301 	umull	r2, r3, r3, r1
 80077ea:	095b      	lsrs	r3, r3, #5
 80077ec:	2264      	movs	r2, #100	; 0x64
 80077ee:	fb02 f303 	mul.w	r3, r2, r3
 80077f2:	1acb      	subs	r3, r1, r3
 80077f4:	00db      	lsls	r3, r3, #3
 80077f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80077fa:	4b36      	ldr	r3, [pc, #216]	; (80078d4 <UART_SetConfig+0x2d4>)
 80077fc:	fba3 2302 	umull	r2, r3, r3, r2
 8007800:	095b      	lsrs	r3, r3, #5
 8007802:	005b      	lsls	r3, r3, #1
 8007804:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007808:	441c      	add	r4, r3
 800780a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800780e:	2200      	movs	r2, #0
 8007810:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007814:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007818:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800781c:	4642      	mov	r2, r8
 800781e:	464b      	mov	r3, r9
 8007820:	1891      	adds	r1, r2, r2
 8007822:	63b9      	str	r1, [r7, #56]	; 0x38
 8007824:	415b      	adcs	r3, r3
 8007826:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007828:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800782c:	4641      	mov	r1, r8
 800782e:	1851      	adds	r1, r2, r1
 8007830:	6339      	str	r1, [r7, #48]	; 0x30
 8007832:	4649      	mov	r1, r9
 8007834:	414b      	adcs	r3, r1
 8007836:	637b      	str	r3, [r7, #52]	; 0x34
 8007838:	f04f 0200 	mov.w	r2, #0
 800783c:	f04f 0300 	mov.w	r3, #0
 8007840:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007844:	4659      	mov	r1, fp
 8007846:	00cb      	lsls	r3, r1, #3
 8007848:	4651      	mov	r1, sl
 800784a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800784e:	4651      	mov	r1, sl
 8007850:	00ca      	lsls	r2, r1, #3
 8007852:	4610      	mov	r0, r2
 8007854:	4619      	mov	r1, r3
 8007856:	4603      	mov	r3, r0
 8007858:	4642      	mov	r2, r8
 800785a:	189b      	adds	r3, r3, r2
 800785c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007860:	464b      	mov	r3, r9
 8007862:	460a      	mov	r2, r1
 8007864:	eb42 0303 	adc.w	r3, r2, r3
 8007868:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800786c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007878:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800787c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007880:	460b      	mov	r3, r1
 8007882:	18db      	adds	r3, r3, r3
 8007884:	62bb      	str	r3, [r7, #40]	; 0x28
 8007886:	4613      	mov	r3, r2
 8007888:	eb42 0303 	adc.w	r3, r2, r3
 800788c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800788e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007892:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007896:	f7f8 fcfb 	bl	8000290 <__aeabi_uldivmod>
 800789a:	4602      	mov	r2, r0
 800789c:	460b      	mov	r3, r1
 800789e:	4b0d      	ldr	r3, [pc, #52]	; (80078d4 <UART_SetConfig+0x2d4>)
 80078a0:	fba3 1302 	umull	r1, r3, r3, r2
 80078a4:	095b      	lsrs	r3, r3, #5
 80078a6:	2164      	movs	r1, #100	; 0x64
 80078a8:	fb01 f303 	mul.w	r3, r1, r3
 80078ac:	1ad3      	subs	r3, r2, r3
 80078ae:	00db      	lsls	r3, r3, #3
 80078b0:	3332      	adds	r3, #50	; 0x32
 80078b2:	4a08      	ldr	r2, [pc, #32]	; (80078d4 <UART_SetConfig+0x2d4>)
 80078b4:	fba2 2303 	umull	r2, r3, r2, r3
 80078b8:	095b      	lsrs	r3, r3, #5
 80078ba:	f003 0207 	and.w	r2, r3, #7
 80078be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4422      	add	r2, r4
 80078c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80078c8:	e105      	b.n	8007ad6 <UART_SetConfig+0x4d6>
 80078ca:	bf00      	nop
 80078cc:	40011000 	.word	0x40011000
 80078d0:	40011400 	.word	0x40011400
 80078d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80078d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078dc:	2200      	movs	r2, #0
 80078de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80078e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80078e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80078ea:	4642      	mov	r2, r8
 80078ec:	464b      	mov	r3, r9
 80078ee:	1891      	adds	r1, r2, r2
 80078f0:	6239      	str	r1, [r7, #32]
 80078f2:	415b      	adcs	r3, r3
 80078f4:	627b      	str	r3, [r7, #36]	; 0x24
 80078f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80078fa:	4641      	mov	r1, r8
 80078fc:	1854      	adds	r4, r2, r1
 80078fe:	4649      	mov	r1, r9
 8007900:	eb43 0501 	adc.w	r5, r3, r1
 8007904:	f04f 0200 	mov.w	r2, #0
 8007908:	f04f 0300 	mov.w	r3, #0
 800790c:	00eb      	lsls	r3, r5, #3
 800790e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007912:	00e2      	lsls	r2, r4, #3
 8007914:	4614      	mov	r4, r2
 8007916:	461d      	mov	r5, r3
 8007918:	4643      	mov	r3, r8
 800791a:	18e3      	adds	r3, r4, r3
 800791c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007920:	464b      	mov	r3, r9
 8007922:	eb45 0303 	adc.w	r3, r5, r3
 8007926:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800792a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007936:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800793a:	f04f 0200 	mov.w	r2, #0
 800793e:	f04f 0300 	mov.w	r3, #0
 8007942:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007946:	4629      	mov	r1, r5
 8007948:	008b      	lsls	r3, r1, #2
 800794a:	4621      	mov	r1, r4
 800794c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007950:	4621      	mov	r1, r4
 8007952:	008a      	lsls	r2, r1, #2
 8007954:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007958:	f7f8 fc9a 	bl	8000290 <__aeabi_uldivmod>
 800795c:	4602      	mov	r2, r0
 800795e:	460b      	mov	r3, r1
 8007960:	4b60      	ldr	r3, [pc, #384]	; (8007ae4 <UART_SetConfig+0x4e4>)
 8007962:	fba3 2302 	umull	r2, r3, r3, r2
 8007966:	095b      	lsrs	r3, r3, #5
 8007968:	011c      	lsls	r4, r3, #4
 800796a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800796e:	2200      	movs	r2, #0
 8007970:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007974:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007978:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800797c:	4642      	mov	r2, r8
 800797e:	464b      	mov	r3, r9
 8007980:	1891      	adds	r1, r2, r2
 8007982:	61b9      	str	r1, [r7, #24]
 8007984:	415b      	adcs	r3, r3
 8007986:	61fb      	str	r3, [r7, #28]
 8007988:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800798c:	4641      	mov	r1, r8
 800798e:	1851      	adds	r1, r2, r1
 8007990:	6139      	str	r1, [r7, #16]
 8007992:	4649      	mov	r1, r9
 8007994:	414b      	adcs	r3, r1
 8007996:	617b      	str	r3, [r7, #20]
 8007998:	f04f 0200 	mov.w	r2, #0
 800799c:	f04f 0300 	mov.w	r3, #0
 80079a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80079a4:	4659      	mov	r1, fp
 80079a6:	00cb      	lsls	r3, r1, #3
 80079a8:	4651      	mov	r1, sl
 80079aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80079ae:	4651      	mov	r1, sl
 80079b0:	00ca      	lsls	r2, r1, #3
 80079b2:	4610      	mov	r0, r2
 80079b4:	4619      	mov	r1, r3
 80079b6:	4603      	mov	r3, r0
 80079b8:	4642      	mov	r2, r8
 80079ba:	189b      	adds	r3, r3, r2
 80079bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80079c0:	464b      	mov	r3, r9
 80079c2:	460a      	mov	r2, r1
 80079c4:	eb42 0303 	adc.w	r3, r2, r3
 80079c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80079cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	2200      	movs	r2, #0
 80079d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80079d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80079d8:	f04f 0200 	mov.w	r2, #0
 80079dc:	f04f 0300 	mov.w	r3, #0
 80079e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80079e4:	4649      	mov	r1, r9
 80079e6:	008b      	lsls	r3, r1, #2
 80079e8:	4641      	mov	r1, r8
 80079ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80079ee:	4641      	mov	r1, r8
 80079f0:	008a      	lsls	r2, r1, #2
 80079f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80079f6:	f7f8 fc4b 	bl	8000290 <__aeabi_uldivmod>
 80079fa:	4602      	mov	r2, r0
 80079fc:	460b      	mov	r3, r1
 80079fe:	4b39      	ldr	r3, [pc, #228]	; (8007ae4 <UART_SetConfig+0x4e4>)
 8007a00:	fba3 1302 	umull	r1, r3, r3, r2
 8007a04:	095b      	lsrs	r3, r3, #5
 8007a06:	2164      	movs	r1, #100	; 0x64
 8007a08:	fb01 f303 	mul.w	r3, r1, r3
 8007a0c:	1ad3      	subs	r3, r2, r3
 8007a0e:	011b      	lsls	r3, r3, #4
 8007a10:	3332      	adds	r3, #50	; 0x32
 8007a12:	4a34      	ldr	r2, [pc, #208]	; (8007ae4 <UART_SetConfig+0x4e4>)
 8007a14:	fba2 2303 	umull	r2, r3, r2, r3
 8007a18:	095b      	lsrs	r3, r3, #5
 8007a1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a1e:	441c      	add	r4, r3
 8007a20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a24:	2200      	movs	r2, #0
 8007a26:	673b      	str	r3, [r7, #112]	; 0x70
 8007a28:	677a      	str	r2, [r7, #116]	; 0x74
 8007a2a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007a2e:	4642      	mov	r2, r8
 8007a30:	464b      	mov	r3, r9
 8007a32:	1891      	adds	r1, r2, r2
 8007a34:	60b9      	str	r1, [r7, #8]
 8007a36:	415b      	adcs	r3, r3
 8007a38:	60fb      	str	r3, [r7, #12]
 8007a3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007a3e:	4641      	mov	r1, r8
 8007a40:	1851      	adds	r1, r2, r1
 8007a42:	6039      	str	r1, [r7, #0]
 8007a44:	4649      	mov	r1, r9
 8007a46:	414b      	adcs	r3, r1
 8007a48:	607b      	str	r3, [r7, #4]
 8007a4a:	f04f 0200 	mov.w	r2, #0
 8007a4e:	f04f 0300 	mov.w	r3, #0
 8007a52:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007a56:	4659      	mov	r1, fp
 8007a58:	00cb      	lsls	r3, r1, #3
 8007a5a:	4651      	mov	r1, sl
 8007a5c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a60:	4651      	mov	r1, sl
 8007a62:	00ca      	lsls	r2, r1, #3
 8007a64:	4610      	mov	r0, r2
 8007a66:	4619      	mov	r1, r3
 8007a68:	4603      	mov	r3, r0
 8007a6a:	4642      	mov	r2, r8
 8007a6c:	189b      	adds	r3, r3, r2
 8007a6e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a70:	464b      	mov	r3, r9
 8007a72:	460a      	mov	r2, r1
 8007a74:	eb42 0303 	adc.w	r3, r2, r3
 8007a78:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	2200      	movs	r2, #0
 8007a82:	663b      	str	r3, [r7, #96]	; 0x60
 8007a84:	667a      	str	r2, [r7, #100]	; 0x64
 8007a86:	f04f 0200 	mov.w	r2, #0
 8007a8a:	f04f 0300 	mov.w	r3, #0
 8007a8e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007a92:	4649      	mov	r1, r9
 8007a94:	008b      	lsls	r3, r1, #2
 8007a96:	4641      	mov	r1, r8
 8007a98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a9c:	4641      	mov	r1, r8
 8007a9e:	008a      	lsls	r2, r1, #2
 8007aa0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007aa4:	f7f8 fbf4 	bl	8000290 <__aeabi_uldivmod>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	460b      	mov	r3, r1
 8007aac:	4b0d      	ldr	r3, [pc, #52]	; (8007ae4 <UART_SetConfig+0x4e4>)
 8007aae:	fba3 1302 	umull	r1, r3, r3, r2
 8007ab2:	095b      	lsrs	r3, r3, #5
 8007ab4:	2164      	movs	r1, #100	; 0x64
 8007ab6:	fb01 f303 	mul.w	r3, r1, r3
 8007aba:	1ad3      	subs	r3, r2, r3
 8007abc:	011b      	lsls	r3, r3, #4
 8007abe:	3332      	adds	r3, #50	; 0x32
 8007ac0:	4a08      	ldr	r2, [pc, #32]	; (8007ae4 <UART_SetConfig+0x4e4>)
 8007ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ac6:	095b      	lsrs	r3, r3, #5
 8007ac8:	f003 020f 	and.w	r2, r3, #15
 8007acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4422      	add	r2, r4
 8007ad4:	609a      	str	r2, [r3, #8]
}
 8007ad6:	bf00      	nop
 8007ad8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007adc:	46bd      	mov	sp, r7
 8007ade:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ae2:	bf00      	nop
 8007ae4:	51eb851f 	.word	0x51eb851f

08007ae8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ae8:	b084      	sub	sp, #16
 8007aea:	b580      	push	{r7, lr}
 8007aec:	b084      	sub	sp, #16
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
 8007af2:	f107 001c 	add.w	r0, r7, #28
 8007af6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d122      	bne.n	8007b46 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	68db      	ldr	r3, [r3, #12]
 8007b10:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007b14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007b28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d105      	bne.n	8007b3a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	68db      	ldr	r3, [r3, #12]
 8007b32:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 faa2 	bl	8008084 <USB_CoreReset>
 8007b40:	4603      	mov	r3, r0
 8007b42:	73fb      	strb	r3, [r7, #15]
 8007b44:	e01a      	b.n	8007b7c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	68db      	ldr	r3, [r3, #12]
 8007b4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 fa96 	bl	8008084 <USB_CoreReset>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007b5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d106      	bne.n	8007b70 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b66:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	639a      	str	r2, [r3, #56]	; 0x38
 8007b6e:	e005      	b.n	8007b7c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b74:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d10b      	bne.n	8007b9a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	f043 0206 	orr.w	r2, r3, #6
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	f043 0220 	orr.w	r2, r3, #32
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3710      	adds	r7, #16
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ba6:	b004      	add	sp, #16
 8007ba8:	4770      	bx	lr

08007baa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007baa:	b480      	push	{r7}
 8007bac:	b083      	sub	sp, #12
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	f023 0201 	bic.w	r2, r3, #1
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007bbe:	2300      	movs	r3, #0
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	370c      	adds	r7, #12
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr

08007bcc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b084      	sub	sp, #16
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	460b      	mov	r3, r1
 8007bd6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007be8:	78fb      	ldrb	r3, [r7, #3]
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d115      	bne.n	8007c1a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007bfa:	2001      	movs	r0, #1
 8007bfc:	f7fa fcfe 	bl	80025fc <HAL_Delay>
      ms++;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	3301      	adds	r3, #1
 8007c04:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 fa2e 	bl	8008068 <USB_GetMode>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	2b01      	cmp	r3, #1
 8007c10:	d01e      	beq.n	8007c50 <USB_SetCurrentMode+0x84>
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2b31      	cmp	r3, #49	; 0x31
 8007c16:	d9f0      	bls.n	8007bfa <USB_SetCurrentMode+0x2e>
 8007c18:	e01a      	b.n	8007c50 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007c1a:	78fb      	ldrb	r3, [r7, #3]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d115      	bne.n	8007c4c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	68db      	ldr	r3, [r3, #12]
 8007c24:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007c2c:	2001      	movs	r0, #1
 8007c2e:	f7fa fce5 	bl	80025fc <HAL_Delay>
      ms++;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	3301      	adds	r3, #1
 8007c36:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 fa15 	bl	8008068 <USB_GetMode>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d005      	beq.n	8007c50 <USB_SetCurrentMode+0x84>
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2b31      	cmp	r3, #49	; 0x31
 8007c48:	d9f0      	bls.n	8007c2c <USB_SetCurrentMode+0x60>
 8007c4a:	e001      	b.n	8007c50 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	e005      	b.n	8007c5c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2b32      	cmp	r3, #50	; 0x32
 8007c54:	d101      	bne.n	8007c5a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007c56:	2301      	movs	r3, #1
 8007c58:	e000      	b.n	8007c5c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007c5a:	2300      	movs	r3, #0
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3710      	adds	r7, #16
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007c64:	b084      	sub	sp, #16
 8007c66:	b580      	push	{r7, lr}
 8007c68:	b086      	sub	sp, #24
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
 8007c6e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007c72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007c76:	2300      	movs	r3, #0
 8007c78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007c7e:	2300      	movs	r3, #0
 8007c80:	613b      	str	r3, [r7, #16]
 8007c82:	e009      	b.n	8007c98 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	3340      	adds	r3, #64	; 0x40
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	4413      	add	r3, r2
 8007c8e:	2200      	movs	r2, #0
 8007c90:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	3301      	adds	r3, #1
 8007c96:	613b      	str	r3, [r7, #16]
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	2b0e      	cmp	r3, #14
 8007c9c:	d9f2      	bls.n	8007c84 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007c9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d11c      	bne.n	8007cde <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	68fa      	ldr	r2, [r7, #12]
 8007cae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007cb2:	f043 0302 	orr.w	r3, r3, #2
 8007cb6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cbc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	639a      	str	r2, [r3, #56]	; 0x38
 8007cdc:	e00b      	b.n	8007cf6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cee:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	2300      	movs	r3, #0
 8007d00:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d08:	4619      	mov	r1, r3
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d10:	461a      	mov	r2, r3
 8007d12:	680b      	ldr	r3, [r1, #0]
 8007d14:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d10c      	bne.n	8007d36 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d104      	bne.n	8007d2c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007d22:	2100      	movs	r1, #0
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 f965 	bl	8007ff4 <USB_SetDevSpeed>
 8007d2a:	e008      	b.n	8007d3e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007d2c:	2101      	movs	r1, #1
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 f960 	bl	8007ff4 <USB_SetDevSpeed>
 8007d34:	e003      	b.n	8007d3e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007d36:	2103      	movs	r1, #3
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 f95b 	bl	8007ff4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007d3e:	2110      	movs	r1, #16
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 f8f3 	bl	8007f2c <USB_FlushTxFifo>
 8007d46:	4603      	mov	r3, r0
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d001      	beq.n	8007d50 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f000 f91f 	bl	8007f94 <USB_FlushRxFifo>
 8007d56:	4603      	mov	r3, r0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d001      	beq.n	8007d60 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d66:	461a      	mov	r2, r3
 8007d68:	2300      	movs	r3, #0
 8007d6a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d72:	461a      	mov	r2, r3
 8007d74:	2300      	movs	r3, #0
 8007d76:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d7e:	461a      	mov	r2, r3
 8007d80:	2300      	movs	r3, #0
 8007d82:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d84:	2300      	movs	r3, #0
 8007d86:	613b      	str	r3, [r7, #16]
 8007d88:	e043      	b.n	8007e12 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	015a      	lsls	r2, r3, #5
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	4413      	add	r3, r2
 8007d92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007da0:	d118      	bne.n	8007dd4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d10a      	bne.n	8007dbe <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	015a      	lsls	r2, r3, #5
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	4413      	add	r3, r2
 8007db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007db4:	461a      	mov	r2, r3
 8007db6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007dba:	6013      	str	r3, [r2, #0]
 8007dbc:	e013      	b.n	8007de6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	015a      	lsls	r2, r3, #5
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	4413      	add	r3, r2
 8007dc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dca:	461a      	mov	r2, r3
 8007dcc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007dd0:	6013      	str	r3, [r2, #0]
 8007dd2:	e008      	b.n	8007de6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	015a      	lsls	r2, r3, #5
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	4413      	add	r3, r2
 8007ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007de0:	461a      	mov	r2, r3
 8007de2:	2300      	movs	r3, #0
 8007de4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	015a      	lsls	r2, r3, #5
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	4413      	add	r3, r2
 8007dee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007df2:	461a      	mov	r2, r3
 8007df4:	2300      	movs	r3, #0
 8007df6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	015a      	lsls	r2, r3, #5
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	4413      	add	r3, r2
 8007e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e04:	461a      	mov	r2, r3
 8007e06:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007e0a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	3301      	adds	r3, #1
 8007e10:	613b      	str	r3, [r7, #16]
 8007e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e14:	693a      	ldr	r2, [r7, #16]
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d3b7      	bcc.n	8007d8a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	613b      	str	r3, [r7, #16]
 8007e1e:	e043      	b.n	8007ea8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	015a      	lsls	r2, r3, #5
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	4413      	add	r3, r2
 8007e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e36:	d118      	bne.n	8007e6a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d10a      	bne.n	8007e54 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	015a      	lsls	r2, r3, #5
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	4413      	add	r3, r2
 8007e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007e50:	6013      	str	r3, [r2, #0]
 8007e52:	e013      	b.n	8007e7c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	015a      	lsls	r2, r3, #5
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	4413      	add	r3, r2
 8007e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e60:	461a      	mov	r2, r3
 8007e62:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007e66:	6013      	str	r3, [r2, #0]
 8007e68:	e008      	b.n	8007e7c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	015a      	lsls	r2, r3, #5
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	4413      	add	r3, r2
 8007e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e76:	461a      	mov	r2, r3
 8007e78:	2300      	movs	r3, #0
 8007e7a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	015a      	lsls	r2, r3, #5
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	4413      	add	r3, r2
 8007e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e88:	461a      	mov	r2, r3
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	015a      	lsls	r2, r3, #5
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	4413      	add	r3, r2
 8007e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007ea0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	613b      	str	r3, [r7, #16]
 8007ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eaa:	693a      	ldr	r2, [r7, #16]
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d3b7      	bcc.n	8007e20 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eb6:	691b      	ldr	r3, [r3, #16]
 8007eb8:	68fa      	ldr	r2, [r7, #12]
 8007eba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ebe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ec2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007ed0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d105      	bne.n	8007ee4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	699b      	ldr	r3, [r3, #24]
 8007edc:	f043 0210 	orr.w	r2, r3, #16
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	699a      	ldr	r2, [r3, #24]
 8007ee8:	4b0f      	ldr	r3, [pc, #60]	; (8007f28 <USB_DevInit+0x2c4>)
 8007eea:	4313      	orrs	r3, r2
 8007eec:	687a      	ldr	r2, [r7, #4]
 8007eee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007ef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d005      	beq.n	8007f02 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	699b      	ldr	r3, [r3, #24]
 8007efa:	f043 0208 	orr.w	r2, r3, #8
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007f02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f04:	2b01      	cmp	r3, #1
 8007f06:	d107      	bne.n	8007f18 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	699b      	ldr	r3, [r3, #24]
 8007f0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007f10:	f043 0304 	orr.w	r3, r3, #4
 8007f14:	687a      	ldr	r2, [r7, #4]
 8007f16:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007f18:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3718      	adds	r7, #24
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007f24:	b004      	add	sp, #16
 8007f26:	4770      	bx	lr
 8007f28:	803c3800 	.word	0x803c3800

08007f2c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b085      	sub	sp, #20
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007f36:	2300      	movs	r3, #0
 8007f38:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	3301      	adds	r3, #1
 8007f3e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	4a13      	ldr	r2, [pc, #76]	; (8007f90 <USB_FlushTxFifo+0x64>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d901      	bls.n	8007f4c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007f48:	2303      	movs	r3, #3
 8007f4a:	e01b      	b.n	8007f84 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	691b      	ldr	r3, [r3, #16]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	daf2      	bge.n	8007f3a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007f54:	2300      	movs	r3, #0
 8007f56:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	019b      	lsls	r3, r3, #6
 8007f5c:	f043 0220 	orr.w	r2, r3, #32
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	3301      	adds	r3, #1
 8007f68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	4a08      	ldr	r2, [pc, #32]	; (8007f90 <USB_FlushTxFifo+0x64>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d901      	bls.n	8007f76 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007f72:	2303      	movs	r3, #3
 8007f74:	e006      	b.n	8007f84 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	691b      	ldr	r3, [r3, #16]
 8007f7a:	f003 0320 	and.w	r3, r3, #32
 8007f7e:	2b20      	cmp	r3, #32
 8007f80:	d0f0      	beq.n	8007f64 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007f82:	2300      	movs	r3, #0
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3714      	adds	r7, #20
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr
 8007f90:	00030d40 	.word	0x00030d40

08007f94 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b085      	sub	sp, #20
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	4a11      	ldr	r2, [pc, #68]	; (8007ff0 <USB_FlushRxFifo+0x5c>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d901      	bls.n	8007fb2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007fae:	2303      	movs	r3, #3
 8007fb0:	e018      	b.n	8007fe4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	691b      	ldr	r3, [r3, #16]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	daf2      	bge.n	8007fa0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2210      	movs	r2, #16
 8007fc2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	3301      	adds	r3, #1
 8007fc8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	4a08      	ldr	r2, [pc, #32]	; (8007ff0 <USB_FlushRxFifo+0x5c>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d901      	bls.n	8007fd6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007fd2:	2303      	movs	r3, #3
 8007fd4:	e006      	b.n	8007fe4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	691b      	ldr	r3, [r3, #16]
 8007fda:	f003 0310 	and.w	r3, r3, #16
 8007fde:	2b10      	cmp	r3, #16
 8007fe0:	d0f0      	beq.n	8007fc4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007fe2:	2300      	movs	r3, #0
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3714      	adds	r7, #20
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr
 8007ff0:	00030d40 	.word	0x00030d40

08007ff4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b085      	sub	sp, #20
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800800a:	681a      	ldr	r2, [r3, #0]
 800800c:	78fb      	ldrb	r3, [r7, #3]
 800800e:	68f9      	ldr	r1, [r7, #12]
 8008010:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008014:	4313      	orrs	r3, r2
 8008016:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008018:	2300      	movs	r3, #0
}
 800801a:	4618      	mov	r0, r3
 800801c:	3714      	adds	r7, #20
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr

08008026 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008026:	b480      	push	{r7}
 8008028:	b085      	sub	sp, #20
 800802a:	af00      	add	r7, sp, #0
 800802c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	68fa      	ldr	r2, [r7, #12]
 800803c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008040:	f023 0303 	bic.w	r3, r3, #3
 8008044:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	68fa      	ldr	r2, [r7, #12]
 8008050:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008054:	f043 0302 	orr.w	r3, r3, #2
 8008058:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800805a:	2300      	movs	r3, #0
}
 800805c:	4618      	mov	r0, r3
 800805e:	3714      	adds	r7, #20
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr

08008068 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008068:	b480      	push	{r7}
 800806a:	b083      	sub	sp, #12
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	695b      	ldr	r3, [r3, #20]
 8008074:	f003 0301 	and.w	r3, r3, #1
}
 8008078:	4618      	mov	r0, r3
 800807a:	370c      	adds	r7, #12
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr

08008084 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008084:	b480      	push	{r7}
 8008086:	b085      	sub	sp, #20
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800808c:	2300      	movs	r3, #0
 800808e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	3301      	adds	r3, #1
 8008094:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	4a13      	ldr	r2, [pc, #76]	; (80080e8 <USB_CoreReset+0x64>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d901      	bls.n	80080a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800809e:	2303      	movs	r3, #3
 80080a0:	e01b      	b.n	80080da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	691b      	ldr	r3, [r3, #16]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	daf2      	bge.n	8008090 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80080aa:	2300      	movs	r3, #0
 80080ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	691b      	ldr	r3, [r3, #16]
 80080b2:	f043 0201 	orr.w	r2, r3, #1
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	3301      	adds	r3, #1
 80080be:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	4a09      	ldr	r2, [pc, #36]	; (80080e8 <USB_CoreReset+0x64>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d901      	bls.n	80080cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80080c8:	2303      	movs	r3, #3
 80080ca:	e006      	b.n	80080da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	691b      	ldr	r3, [r3, #16]
 80080d0:	f003 0301 	and.w	r3, r3, #1
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d0f0      	beq.n	80080ba <USB_CoreReset+0x36>

  return HAL_OK;
 80080d8:	2300      	movs	r3, #0
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3714      	adds	r7, #20
 80080de:	46bd      	mov	sp, r7
 80080e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e4:	4770      	bx	lr
 80080e6:	bf00      	nop
 80080e8:	00030d40 	.word	0x00030d40

080080ec <__errno>:
 80080ec:	4b01      	ldr	r3, [pc, #4]	; (80080f4 <__errno+0x8>)
 80080ee:	6818      	ldr	r0, [r3, #0]
 80080f0:	4770      	bx	lr
 80080f2:	bf00      	nop
 80080f4:	20000018 	.word	0x20000018

080080f8 <__libc_init_array>:
 80080f8:	b570      	push	{r4, r5, r6, lr}
 80080fa:	4d0d      	ldr	r5, [pc, #52]	; (8008130 <__libc_init_array+0x38>)
 80080fc:	4c0d      	ldr	r4, [pc, #52]	; (8008134 <__libc_init_array+0x3c>)
 80080fe:	1b64      	subs	r4, r4, r5
 8008100:	10a4      	asrs	r4, r4, #2
 8008102:	2600      	movs	r6, #0
 8008104:	42a6      	cmp	r6, r4
 8008106:	d109      	bne.n	800811c <__libc_init_array+0x24>
 8008108:	4d0b      	ldr	r5, [pc, #44]	; (8008138 <__libc_init_array+0x40>)
 800810a:	4c0c      	ldr	r4, [pc, #48]	; (800813c <__libc_init_array+0x44>)
 800810c:	f001 fa00 	bl	8009510 <_init>
 8008110:	1b64      	subs	r4, r4, r5
 8008112:	10a4      	asrs	r4, r4, #2
 8008114:	2600      	movs	r6, #0
 8008116:	42a6      	cmp	r6, r4
 8008118:	d105      	bne.n	8008126 <__libc_init_array+0x2e>
 800811a:	bd70      	pop	{r4, r5, r6, pc}
 800811c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008120:	4798      	blx	r3
 8008122:	3601      	adds	r6, #1
 8008124:	e7ee      	b.n	8008104 <__libc_init_array+0xc>
 8008126:	f855 3b04 	ldr.w	r3, [r5], #4
 800812a:	4798      	blx	r3
 800812c:	3601      	adds	r6, #1
 800812e:	e7f2      	b.n	8008116 <__libc_init_array+0x1e>
 8008130:	080097f4 	.word	0x080097f4
 8008134:	080097f4 	.word	0x080097f4
 8008138:	080097f4 	.word	0x080097f4
 800813c:	080097f8 	.word	0x080097f8

08008140 <memset>:
 8008140:	4402      	add	r2, r0
 8008142:	4603      	mov	r3, r0
 8008144:	4293      	cmp	r3, r2
 8008146:	d100      	bne.n	800814a <memset+0xa>
 8008148:	4770      	bx	lr
 800814a:	f803 1b01 	strb.w	r1, [r3], #1
 800814e:	e7f9      	b.n	8008144 <memset+0x4>

08008150 <iprintf>:
 8008150:	b40f      	push	{r0, r1, r2, r3}
 8008152:	4b0a      	ldr	r3, [pc, #40]	; (800817c <iprintf+0x2c>)
 8008154:	b513      	push	{r0, r1, r4, lr}
 8008156:	681c      	ldr	r4, [r3, #0]
 8008158:	b124      	cbz	r4, 8008164 <iprintf+0x14>
 800815a:	69a3      	ldr	r3, [r4, #24]
 800815c:	b913      	cbnz	r3, 8008164 <iprintf+0x14>
 800815e:	4620      	mov	r0, r4
 8008160:	f000 fa7e 	bl	8008660 <__sinit>
 8008164:	ab05      	add	r3, sp, #20
 8008166:	9a04      	ldr	r2, [sp, #16]
 8008168:	68a1      	ldr	r1, [r4, #8]
 800816a:	9301      	str	r3, [sp, #4]
 800816c:	4620      	mov	r0, r4
 800816e:	f000 fde3 	bl	8008d38 <_vfiprintf_r>
 8008172:	b002      	add	sp, #8
 8008174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008178:	b004      	add	sp, #16
 800817a:	4770      	bx	lr
 800817c:	20000018 	.word	0x20000018

08008180 <_puts_r>:
 8008180:	b570      	push	{r4, r5, r6, lr}
 8008182:	460e      	mov	r6, r1
 8008184:	4605      	mov	r5, r0
 8008186:	b118      	cbz	r0, 8008190 <_puts_r+0x10>
 8008188:	6983      	ldr	r3, [r0, #24]
 800818a:	b90b      	cbnz	r3, 8008190 <_puts_r+0x10>
 800818c:	f000 fa68 	bl	8008660 <__sinit>
 8008190:	69ab      	ldr	r3, [r5, #24]
 8008192:	68ac      	ldr	r4, [r5, #8]
 8008194:	b913      	cbnz	r3, 800819c <_puts_r+0x1c>
 8008196:	4628      	mov	r0, r5
 8008198:	f000 fa62 	bl	8008660 <__sinit>
 800819c:	4b2c      	ldr	r3, [pc, #176]	; (8008250 <_puts_r+0xd0>)
 800819e:	429c      	cmp	r4, r3
 80081a0:	d120      	bne.n	80081e4 <_puts_r+0x64>
 80081a2:	686c      	ldr	r4, [r5, #4]
 80081a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80081a6:	07db      	lsls	r3, r3, #31
 80081a8:	d405      	bmi.n	80081b6 <_puts_r+0x36>
 80081aa:	89a3      	ldrh	r3, [r4, #12]
 80081ac:	0598      	lsls	r0, r3, #22
 80081ae:	d402      	bmi.n	80081b6 <_puts_r+0x36>
 80081b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081b2:	f000 faf3 	bl	800879c <__retarget_lock_acquire_recursive>
 80081b6:	89a3      	ldrh	r3, [r4, #12]
 80081b8:	0719      	lsls	r1, r3, #28
 80081ba:	d51d      	bpl.n	80081f8 <_puts_r+0x78>
 80081bc:	6923      	ldr	r3, [r4, #16]
 80081be:	b1db      	cbz	r3, 80081f8 <_puts_r+0x78>
 80081c0:	3e01      	subs	r6, #1
 80081c2:	68a3      	ldr	r3, [r4, #8]
 80081c4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80081c8:	3b01      	subs	r3, #1
 80081ca:	60a3      	str	r3, [r4, #8]
 80081cc:	bb39      	cbnz	r1, 800821e <_puts_r+0x9e>
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	da38      	bge.n	8008244 <_puts_r+0xc4>
 80081d2:	4622      	mov	r2, r4
 80081d4:	210a      	movs	r1, #10
 80081d6:	4628      	mov	r0, r5
 80081d8:	f000 f868 	bl	80082ac <__swbuf_r>
 80081dc:	3001      	adds	r0, #1
 80081de:	d011      	beq.n	8008204 <_puts_r+0x84>
 80081e0:	250a      	movs	r5, #10
 80081e2:	e011      	b.n	8008208 <_puts_r+0x88>
 80081e4:	4b1b      	ldr	r3, [pc, #108]	; (8008254 <_puts_r+0xd4>)
 80081e6:	429c      	cmp	r4, r3
 80081e8:	d101      	bne.n	80081ee <_puts_r+0x6e>
 80081ea:	68ac      	ldr	r4, [r5, #8]
 80081ec:	e7da      	b.n	80081a4 <_puts_r+0x24>
 80081ee:	4b1a      	ldr	r3, [pc, #104]	; (8008258 <_puts_r+0xd8>)
 80081f0:	429c      	cmp	r4, r3
 80081f2:	bf08      	it	eq
 80081f4:	68ec      	ldreq	r4, [r5, #12]
 80081f6:	e7d5      	b.n	80081a4 <_puts_r+0x24>
 80081f8:	4621      	mov	r1, r4
 80081fa:	4628      	mov	r0, r5
 80081fc:	f000 f8a8 	bl	8008350 <__swsetup_r>
 8008200:	2800      	cmp	r0, #0
 8008202:	d0dd      	beq.n	80081c0 <_puts_r+0x40>
 8008204:	f04f 35ff 	mov.w	r5, #4294967295
 8008208:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800820a:	07da      	lsls	r2, r3, #31
 800820c:	d405      	bmi.n	800821a <_puts_r+0x9a>
 800820e:	89a3      	ldrh	r3, [r4, #12]
 8008210:	059b      	lsls	r3, r3, #22
 8008212:	d402      	bmi.n	800821a <_puts_r+0x9a>
 8008214:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008216:	f000 fac2 	bl	800879e <__retarget_lock_release_recursive>
 800821a:	4628      	mov	r0, r5
 800821c:	bd70      	pop	{r4, r5, r6, pc}
 800821e:	2b00      	cmp	r3, #0
 8008220:	da04      	bge.n	800822c <_puts_r+0xac>
 8008222:	69a2      	ldr	r2, [r4, #24]
 8008224:	429a      	cmp	r2, r3
 8008226:	dc06      	bgt.n	8008236 <_puts_r+0xb6>
 8008228:	290a      	cmp	r1, #10
 800822a:	d004      	beq.n	8008236 <_puts_r+0xb6>
 800822c:	6823      	ldr	r3, [r4, #0]
 800822e:	1c5a      	adds	r2, r3, #1
 8008230:	6022      	str	r2, [r4, #0]
 8008232:	7019      	strb	r1, [r3, #0]
 8008234:	e7c5      	b.n	80081c2 <_puts_r+0x42>
 8008236:	4622      	mov	r2, r4
 8008238:	4628      	mov	r0, r5
 800823a:	f000 f837 	bl	80082ac <__swbuf_r>
 800823e:	3001      	adds	r0, #1
 8008240:	d1bf      	bne.n	80081c2 <_puts_r+0x42>
 8008242:	e7df      	b.n	8008204 <_puts_r+0x84>
 8008244:	6823      	ldr	r3, [r4, #0]
 8008246:	250a      	movs	r5, #10
 8008248:	1c5a      	adds	r2, r3, #1
 800824a:	6022      	str	r2, [r4, #0]
 800824c:	701d      	strb	r5, [r3, #0]
 800824e:	e7db      	b.n	8008208 <_puts_r+0x88>
 8008250:	08009778 	.word	0x08009778
 8008254:	08009798 	.word	0x08009798
 8008258:	08009758 	.word	0x08009758

0800825c <puts>:
 800825c:	4b02      	ldr	r3, [pc, #8]	; (8008268 <puts+0xc>)
 800825e:	4601      	mov	r1, r0
 8008260:	6818      	ldr	r0, [r3, #0]
 8008262:	f7ff bf8d 	b.w	8008180 <_puts_r>
 8008266:	bf00      	nop
 8008268:	20000018 	.word	0x20000018

0800826c <siprintf>:
 800826c:	b40e      	push	{r1, r2, r3}
 800826e:	b500      	push	{lr}
 8008270:	b09c      	sub	sp, #112	; 0x70
 8008272:	ab1d      	add	r3, sp, #116	; 0x74
 8008274:	9002      	str	r0, [sp, #8]
 8008276:	9006      	str	r0, [sp, #24]
 8008278:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800827c:	4809      	ldr	r0, [pc, #36]	; (80082a4 <siprintf+0x38>)
 800827e:	9107      	str	r1, [sp, #28]
 8008280:	9104      	str	r1, [sp, #16]
 8008282:	4909      	ldr	r1, [pc, #36]	; (80082a8 <siprintf+0x3c>)
 8008284:	f853 2b04 	ldr.w	r2, [r3], #4
 8008288:	9105      	str	r1, [sp, #20]
 800828a:	6800      	ldr	r0, [r0, #0]
 800828c:	9301      	str	r3, [sp, #4]
 800828e:	a902      	add	r1, sp, #8
 8008290:	f000 fc28 	bl	8008ae4 <_svfiprintf_r>
 8008294:	9b02      	ldr	r3, [sp, #8]
 8008296:	2200      	movs	r2, #0
 8008298:	701a      	strb	r2, [r3, #0]
 800829a:	b01c      	add	sp, #112	; 0x70
 800829c:	f85d eb04 	ldr.w	lr, [sp], #4
 80082a0:	b003      	add	sp, #12
 80082a2:	4770      	bx	lr
 80082a4:	20000018 	.word	0x20000018
 80082a8:	ffff0208 	.word	0xffff0208

080082ac <__swbuf_r>:
 80082ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ae:	460e      	mov	r6, r1
 80082b0:	4614      	mov	r4, r2
 80082b2:	4605      	mov	r5, r0
 80082b4:	b118      	cbz	r0, 80082be <__swbuf_r+0x12>
 80082b6:	6983      	ldr	r3, [r0, #24]
 80082b8:	b90b      	cbnz	r3, 80082be <__swbuf_r+0x12>
 80082ba:	f000 f9d1 	bl	8008660 <__sinit>
 80082be:	4b21      	ldr	r3, [pc, #132]	; (8008344 <__swbuf_r+0x98>)
 80082c0:	429c      	cmp	r4, r3
 80082c2:	d12b      	bne.n	800831c <__swbuf_r+0x70>
 80082c4:	686c      	ldr	r4, [r5, #4]
 80082c6:	69a3      	ldr	r3, [r4, #24]
 80082c8:	60a3      	str	r3, [r4, #8]
 80082ca:	89a3      	ldrh	r3, [r4, #12]
 80082cc:	071a      	lsls	r2, r3, #28
 80082ce:	d52f      	bpl.n	8008330 <__swbuf_r+0x84>
 80082d0:	6923      	ldr	r3, [r4, #16]
 80082d2:	b36b      	cbz	r3, 8008330 <__swbuf_r+0x84>
 80082d4:	6923      	ldr	r3, [r4, #16]
 80082d6:	6820      	ldr	r0, [r4, #0]
 80082d8:	1ac0      	subs	r0, r0, r3
 80082da:	6963      	ldr	r3, [r4, #20]
 80082dc:	b2f6      	uxtb	r6, r6
 80082de:	4283      	cmp	r3, r0
 80082e0:	4637      	mov	r7, r6
 80082e2:	dc04      	bgt.n	80082ee <__swbuf_r+0x42>
 80082e4:	4621      	mov	r1, r4
 80082e6:	4628      	mov	r0, r5
 80082e8:	f000 f926 	bl	8008538 <_fflush_r>
 80082ec:	bb30      	cbnz	r0, 800833c <__swbuf_r+0x90>
 80082ee:	68a3      	ldr	r3, [r4, #8]
 80082f0:	3b01      	subs	r3, #1
 80082f2:	60a3      	str	r3, [r4, #8]
 80082f4:	6823      	ldr	r3, [r4, #0]
 80082f6:	1c5a      	adds	r2, r3, #1
 80082f8:	6022      	str	r2, [r4, #0]
 80082fa:	701e      	strb	r6, [r3, #0]
 80082fc:	6963      	ldr	r3, [r4, #20]
 80082fe:	3001      	adds	r0, #1
 8008300:	4283      	cmp	r3, r0
 8008302:	d004      	beq.n	800830e <__swbuf_r+0x62>
 8008304:	89a3      	ldrh	r3, [r4, #12]
 8008306:	07db      	lsls	r3, r3, #31
 8008308:	d506      	bpl.n	8008318 <__swbuf_r+0x6c>
 800830a:	2e0a      	cmp	r6, #10
 800830c:	d104      	bne.n	8008318 <__swbuf_r+0x6c>
 800830e:	4621      	mov	r1, r4
 8008310:	4628      	mov	r0, r5
 8008312:	f000 f911 	bl	8008538 <_fflush_r>
 8008316:	b988      	cbnz	r0, 800833c <__swbuf_r+0x90>
 8008318:	4638      	mov	r0, r7
 800831a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800831c:	4b0a      	ldr	r3, [pc, #40]	; (8008348 <__swbuf_r+0x9c>)
 800831e:	429c      	cmp	r4, r3
 8008320:	d101      	bne.n	8008326 <__swbuf_r+0x7a>
 8008322:	68ac      	ldr	r4, [r5, #8]
 8008324:	e7cf      	b.n	80082c6 <__swbuf_r+0x1a>
 8008326:	4b09      	ldr	r3, [pc, #36]	; (800834c <__swbuf_r+0xa0>)
 8008328:	429c      	cmp	r4, r3
 800832a:	bf08      	it	eq
 800832c:	68ec      	ldreq	r4, [r5, #12]
 800832e:	e7ca      	b.n	80082c6 <__swbuf_r+0x1a>
 8008330:	4621      	mov	r1, r4
 8008332:	4628      	mov	r0, r5
 8008334:	f000 f80c 	bl	8008350 <__swsetup_r>
 8008338:	2800      	cmp	r0, #0
 800833a:	d0cb      	beq.n	80082d4 <__swbuf_r+0x28>
 800833c:	f04f 37ff 	mov.w	r7, #4294967295
 8008340:	e7ea      	b.n	8008318 <__swbuf_r+0x6c>
 8008342:	bf00      	nop
 8008344:	08009778 	.word	0x08009778
 8008348:	08009798 	.word	0x08009798
 800834c:	08009758 	.word	0x08009758

08008350 <__swsetup_r>:
 8008350:	4b32      	ldr	r3, [pc, #200]	; (800841c <__swsetup_r+0xcc>)
 8008352:	b570      	push	{r4, r5, r6, lr}
 8008354:	681d      	ldr	r5, [r3, #0]
 8008356:	4606      	mov	r6, r0
 8008358:	460c      	mov	r4, r1
 800835a:	b125      	cbz	r5, 8008366 <__swsetup_r+0x16>
 800835c:	69ab      	ldr	r3, [r5, #24]
 800835e:	b913      	cbnz	r3, 8008366 <__swsetup_r+0x16>
 8008360:	4628      	mov	r0, r5
 8008362:	f000 f97d 	bl	8008660 <__sinit>
 8008366:	4b2e      	ldr	r3, [pc, #184]	; (8008420 <__swsetup_r+0xd0>)
 8008368:	429c      	cmp	r4, r3
 800836a:	d10f      	bne.n	800838c <__swsetup_r+0x3c>
 800836c:	686c      	ldr	r4, [r5, #4]
 800836e:	89a3      	ldrh	r3, [r4, #12]
 8008370:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008374:	0719      	lsls	r1, r3, #28
 8008376:	d42c      	bmi.n	80083d2 <__swsetup_r+0x82>
 8008378:	06dd      	lsls	r5, r3, #27
 800837a:	d411      	bmi.n	80083a0 <__swsetup_r+0x50>
 800837c:	2309      	movs	r3, #9
 800837e:	6033      	str	r3, [r6, #0]
 8008380:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008384:	81a3      	strh	r3, [r4, #12]
 8008386:	f04f 30ff 	mov.w	r0, #4294967295
 800838a:	e03e      	b.n	800840a <__swsetup_r+0xba>
 800838c:	4b25      	ldr	r3, [pc, #148]	; (8008424 <__swsetup_r+0xd4>)
 800838e:	429c      	cmp	r4, r3
 8008390:	d101      	bne.n	8008396 <__swsetup_r+0x46>
 8008392:	68ac      	ldr	r4, [r5, #8]
 8008394:	e7eb      	b.n	800836e <__swsetup_r+0x1e>
 8008396:	4b24      	ldr	r3, [pc, #144]	; (8008428 <__swsetup_r+0xd8>)
 8008398:	429c      	cmp	r4, r3
 800839a:	bf08      	it	eq
 800839c:	68ec      	ldreq	r4, [r5, #12]
 800839e:	e7e6      	b.n	800836e <__swsetup_r+0x1e>
 80083a0:	0758      	lsls	r0, r3, #29
 80083a2:	d512      	bpl.n	80083ca <__swsetup_r+0x7a>
 80083a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083a6:	b141      	cbz	r1, 80083ba <__swsetup_r+0x6a>
 80083a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80083ac:	4299      	cmp	r1, r3
 80083ae:	d002      	beq.n	80083b6 <__swsetup_r+0x66>
 80083b0:	4630      	mov	r0, r6
 80083b2:	f000 fa5b 	bl	800886c <_free_r>
 80083b6:	2300      	movs	r3, #0
 80083b8:	6363      	str	r3, [r4, #52]	; 0x34
 80083ba:	89a3      	ldrh	r3, [r4, #12]
 80083bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80083c0:	81a3      	strh	r3, [r4, #12]
 80083c2:	2300      	movs	r3, #0
 80083c4:	6063      	str	r3, [r4, #4]
 80083c6:	6923      	ldr	r3, [r4, #16]
 80083c8:	6023      	str	r3, [r4, #0]
 80083ca:	89a3      	ldrh	r3, [r4, #12]
 80083cc:	f043 0308 	orr.w	r3, r3, #8
 80083d0:	81a3      	strh	r3, [r4, #12]
 80083d2:	6923      	ldr	r3, [r4, #16]
 80083d4:	b94b      	cbnz	r3, 80083ea <__swsetup_r+0x9a>
 80083d6:	89a3      	ldrh	r3, [r4, #12]
 80083d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80083dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083e0:	d003      	beq.n	80083ea <__swsetup_r+0x9a>
 80083e2:	4621      	mov	r1, r4
 80083e4:	4630      	mov	r0, r6
 80083e6:	f000 fa01 	bl	80087ec <__smakebuf_r>
 80083ea:	89a0      	ldrh	r0, [r4, #12]
 80083ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80083f0:	f010 0301 	ands.w	r3, r0, #1
 80083f4:	d00a      	beq.n	800840c <__swsetup_r+0xbc>
 80083f6:	2300      	movs	r3, #0
 80083f8:	60a3      	str	r3, [r4, #8]
 80083fa:	6963      	ldr	r3, [r4, #20]
 80083fc:	425b      	negs	r3, r3
 80083fe:	61a3      	str	r3, [r4, #24]
 8008400:	6923      	ldr	r3, [r4, #16]
 8008402:	b943      	cbnz	r3, 8008416 <__swsetup_r+0xc6>
 8008404:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008408:	d1ba      	bne.n	8008380 <__swsetup_r+0x30>
 800840a:	bd70      	pop	{r4, r5, r6, pc}
 800840c:	0781      	lsls	r1, r0, #30
 800840e:	bf58      	it	pl
 8008410:	6963      	ldrpl	r3, [r4, #20]
 8008412:	60a3      	str	r3, [r4, #8]
 8008414:	e7f4      	b.n	8008400 <__swsetup_r+0xb0>
 8008416:	2000      	movs	r0, #0
 8008418:	e7f7      	b.n	800840a <__swsetup_r+0xba>
 800841a:	bf00      	nop
 800841c:	20000018 	.word	0x20000018
 8008420:	08009778 	.word	0x08009778
 8008424:	08009798 	.word	0x08009798
 8008428:	08009758 	.word	0x08009758

0800842c <__sflush_r>:
 800842c:	898a      	ldrh	r2, [r1, #12]
 800842e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008432:	4605      	mov	r5, r0
 8008434:	0710      	lsls	r0, r2, #28
 8008436:	460c      	mov	r4, r1
 8008438:	d458      	bmi.n	80084ec <__sflush_r+0xc0>
 800843a:	684b      	ldr	r3, [r1, #4]
 800843c:	2b00      	cmp	r3, #0
 800843e:	dc05      	bgt.n	800844c <__sflush_r+0x20>
 8008440:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008442:	2b00      	cmp	r3, #0
 8008444:	dc02      	bgt.n	800844c <__sflush_r+0x20>
 8008446:	2000      	movs	r0, #0
 8008448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800844c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800844e:	2e00      	cmp	r6, #0
 8008450:	d0f9      	beq.n	8008446 <__sflush_r+0x1a>
 8008452:	2300      	movs	r3, #0
 8008454:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008458:	682f      	ldr	r7, [r5, #0]
 800845a:	602b      	str	r3, [r5, #0]
 800845c:	d032      	beq.n	80084c4 <__sflush_r+0x98>
 800845e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008460:	89a3      	ldrh	r3, [r4, #12]
 8008462:	075a      	lsls	r2, r3, #29
 8008464:	d505      	bpl.n	8008472 <__sflush_r+0x46>
 8008466:	6863      	ldr	r3, [r4, #4]
 8008468:	1ac0      	subs	r0, r0, r3
 800846a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800846c:	b10b      	cbz	r3, 8008472 <__sflush_r+0x46>
 800846e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008470:	1ac0      	subs	r0, r0, r3
 8008472:	2300      	movs	r3, #0
 8008474:	4602      	mov	r2, r0
 8008476:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008478:	6a21      	ldr	r1, [r4, #32]
 800847a:	4628      	mov	r0, r5
 800847c:	47b0      	blx	r6
 800847e:	1c43      	adds	r3, r0, #1
 8008480:	89a3      	ldrh	r3, [r4, #12]
 8008482:	d106      	bne.n	8008492 <__sflush_r+0x66>
 8008484:	6829      	ldr	r1, [r5, #0]
 8008486:	291d      	cmp	r1, #29
 8008488:	d82c      	bhi.n	80084e4 <__sflush_r+0xb8>
 800848a:	4a2a      	ldr	r2, [pc, #168]	; (8008534 <__sflush_r+0x108>)
 800848c:	40ca      	lsrs	r2, r1
 800848e:	07d6      	lsls	r6, r2, #31
 8008490:	d528      	bpl.n	80084e4 <__sflush_r+0xb8>
 8008492:	2200      	movs	r2, #0
 8008494:	6062      	str	r2, [r4, #4]
 8008496:	04d9      	lsls	r1, r3, #19
 8008498:	6922      	ldr	r2, [r4, #16]
 800849a:	6022      	str	r2, [r4, #0]
 800849c:	d504      	bpl.n	80084a8 <__sflush_r+0x7c>
 800849e:	1c42      	adds	r2, r0, #1
 80084a0:	d101      	bne.n	80084a6 <__sflush_r+0x7a>
 80084a2:	682b      	ldr	r3, [r5, #0]
 80084a4:	b903      	cbnz	r3, 80084a8 <__sflush_r+0x7c>
 80084a6:	6560      	str	r0, [r4, #84]	; 0x54
 80084a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80084aa:	602f      	str	r7, [r5, #0]
 80084ac:	2900      	cmp	r1, #0
 80084ae:	d0ca      	beq.n	8008446 <__sflush_r+0x1a>
 80084b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80084b4:	4299      	cmp	r1, r3
 80084b6:	d002      	beq.n	80084be <__sflush_r+0x92>
 80084b8:	4628      	mov	r0, r5
 80084ba:	f000 f9d7 	bl	800886c <_free_r>
 80084be:	2000      	movs	r0, #0
 80084c0:	6360      	str	r0, [r4, #52]	; 0x34
 80084c2:	e7c1      	b.n	8008448 <__sflush_r+0x1c>
 80084c4:	6a21      	ldr	r1, [r4, #32]
 80084c6:	2301      	movs	r3, #1
 80084c8:	4628      	mov	r0, r5
 80084ca:	47b0      	blx	r6
 80084cc:	1c41      	adds	r1, r0, #1
 80084ce:	d1c7      	bne.n	8008460 <__sflush_r+0x34>
 80084d0:	682b      	ldr	r3, [r5, #0]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d0c4      	beq.n	8008460 <__sflush_r+0x34>
 80084d6:	2b1d      	cmp	r3, #29
 80084d8:	d001      	beq.n	80084de <__sflush_r+0xb2>
 80084da:	2b16      	cmp	r3, #22
 80084dc:	d101      	bne.n	80084e2 <__sflush_r+0xb6>
 80084de:	602f      	str	r7, [r5, #0]
 80084e0:	e7b1      	b.n	8008446 <__sflush_r+0x1a>
 80084e2:	89a3      	ldrh	r3, [r4, #12]
 80084e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084e8:	81a3      	strh	r3, [r4, #12]
 80084ea:	e7ad      	b.n	8008448 <__sflush_r+0x1c>
 80084ec:	690f      	ldr	r7, [r1, #16]
 80084ee:	2f00      	cmp	r7, #0
 80084f0:	d0a9      	beq.n	8008446 <__sflush_r+0x1a>
 80084f2:	0793      	lsls	r3, r2, #30
 80084f4:	680e      	ldr	r6, [r1, #0]
 80084f6:	bf08      	it	eq
 80084f8:	694b      	ldreq	r3, [r1, #20]
 80084fa:	600f      	str	r7, [r1, #0]
 80084fc:	bf18      	it	ne
 80084fe:	2300      	movne	r3, #0
 8008500:	eba6 0807 	sub.w	r8, r6, r7
 8008504:	608b      	str	r3, [r1, #8]
 8008506:	f1b8 0f00 	cmp.w	r8, #0
 800850a:	dd9c      	ble.n	8008446 <__sflush_r+0x1a>
 800850c:	6a21      	ldr	r1, [r4, #32]
 800850e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008510:	4643      	mov	r3, r8
 8008512:	463a      	mov	r2, r7
 8008514:	4628      	mov	r0, r5
 8008516:	47b0      	blx	r6
 8008518:	2800      	cmp	r0, #0
 800851a:	dc06      	bgt.n	800852a <__sflush_r+0xfe>
 800851c:	89a3      	ldrh	r3, [r4, #12]
 800851e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008522:	81a3      	strh	r3, [r4, #12]
 8008524:	f04f 30ff 	mov.w	r0, #4294967295
 8008528:	e78e      	b.n	8008448 <__sflush_r+0x1c>
 800852a:	4407      	add	r7, r0
 800852c:	eba8 0800 	sub.w	r8, r8, r0
 8008530:	e7e9      	b.n	8008506 <__sflush_r+0xda>
 8008532:	bf00      	nop
 8008534:	20400001 	.word	0x20400001

08008538 <_fflush_r>:
 8008538:	b538      	push	{r3, r4, r5, lr}
 800853a:	690b      	ldr	r3, [r1, #16]
 800853c:	4605      	mov	r5, r0
 800853e:	460c      	mov	r4, r1
 8008540:	b913      	cbnz	r3, 8008548 <_fflush_r+0x10>
 8008542:	2500      	movs	r5, #0
 8008544:	4628      	mov	r0, r5
 8008546:	bd38      	pop	{r3, r4, r5, pc}
 8008548:	b118      	cbz	r0, 8008552 <_fflush_r+0x1a>
 800854a:	6983      	ldr	r3, [r0, #24]
 800854c:	b90b      	cbnz	r3, 8008552 <_fflush_r+0x1a>
 800854e:	f000 f887 	bl	8008660 <__sinit>
 8008552:	4b14      	ldr	r3, [pc, #80]	; (80085a4 <_fflush_r+0x6c>)
 8008554:	429c      	cmp	r4, r3
 8008556:	d11b      	bne.n	8008590 <_fflush_r+0x58>
 8008558:	686c      	ldr	r4, [r5, #4]
 800855a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d0ef      	beq.n	8008542 <_fflush_r+0xa>
 8008562:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008564:	07d0      	lsls	r0, r2, #31
 8008566:	d404      	bmi.n	8008572 <_fflush_r+0x3a>
 8008568:	0599      	lsls	r1, r3, #22
 800856a:	d402      	bmi.n	8008572 <_fflush_r+0x3a>
 800856c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800856e:	f000 f915 	bl	800879c <__retarget_lock_acquire_recursive>
 8008572:	4628      	mov	r0, r5
 8008574:	4621      	mov	r1, r4
 8008576:	f7ff ff59 	bl	800842c <__sflush_r>
 800857a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800857c:	07da      	lsls	r2, r3, #31
 800857e:	4605      	mov	r5, r0
 8008580:	d4e0      	bmi.n	8008544 <_fflush_r+0xc>
 8008582:	89a3      	ldrh	r3, [r4, #12]
 8008584:	059b      	lsls	r3, r3, #22
 8008586:	d4dd      	bmi.n	8008544 <_fflush_r+0xc>
 8008588:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800858a:	f000 f908 	bl	800879e <__retarget_lock_release_recursive>
 800858e:	e7d9      	b.n	8008544 <_fflush_r+0xc>
 8008590:	4b05      	ldr	r3, [pc, #20]	; (80085a8 <_fflush_r+0x70>)
 8008592:	429c      	cmp	r4, r3
 8008594:	d101      	bne.n	800859a <_fflush_r+0x62>
 8008596:	68ac      	ldr	r4, [r5, #8]
 8008598:	e7df      	b.n	800855a <_fflush_r+0x22>
 800859a:	4b04      	ldr	r3, [pc, #16]	; (80085ac <_fflush_r+0x74>)
 800859c:	429c      	cmp	r4, r3
 800859e:	bf08      	it	eq
 80085a0:	68ec      	ldreq	r4, [r5, #12]
 80085a2:	e7da      	b.n	800855a <_fflush_r+0x22>
 80085a4:	08009778 	.word	0x08009778
 80085a8:	08009798 	.word	0x08009798
 80085ac:	08009758 	.word	0x08009758

080085b0 <std>:
 80085b0:	2300      	movs	r3, #0
 80085b2:	b510      	push	{r4, lr}
 80085b4:	4604      	mov	r4, r0
 80085b6:	e9c0 3300 	strd	r3, r3, [r0]
 80085ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80085be:	6083      	str	r3, [r0, #8]
 80085c0:	8181      	strh	r1, [r0, #12]
 80085c2:	6643      	str	r3, [r0, #100]	; 0x64
 80085c4:	81c2      	strh	r2, [r0, #14]
 80085c6:	6183      	str	r3, [r0, #24]
 80085c8:	4619      	mov	r1, r3
 80085ca:	2208      	movs	r2, #8
 80085cc:	305c      	adds	r0, #92	; 0x5c
 80085ce:	f7ff fdb7 	bl	8008140 <memset>
 80085d2:	4b05      	ldr	r3, [pc, #20]	; (80085e8 <std+0x38>)
 80085d4:	6263      	str	r3, [r4, #36]	; 0x24
 80085d6:	4b05      	ldr	r3, [pc, #20]	; (80085ec <std+0x3c>)
 80085d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80085da:	4b05      	ldr	r3, [pc, #20]	; (80085f0 <std+0x40>)
 80085dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80085de:	4b05      	ldr	r3, [pc, #20]	; (80085f4 <std+0x44>)
 80085e0:	6224      	str	r4, [r4, #32]
 80085e2:	6323      	str	r3, [r4, #48]	; 0x30
 80085e4:	bd10      	pop	{r4, pc}
 80085e6:	bf00      	nop
 80085e8:	080092e1 	.word	0x080092e1
 80085ec:	08009303 	.word	0x08009303
 80085f0:	0800933b 	.word	0x0800933b
 80085f4:	0800935f 	.word	0x0800935f

080085f8 <_cleanup_r>:
 80085f8:	4901      	ldr	r1, [pc, #4]	; (8008600 <_cleanup_r+0x8>)
 80085fa:	f000 b8af 	b.w	800875c <_fwalk_reent>
 80085fe:	bf00      	nop
 8008600:	08008539 	.word	0x08008539

08008604 <__sfmoreglue>:
 8008604:	b570      	push	{r4, r5, r6, lr}
 8008606:	2268      	movs	r2, #104	; 0x68
 8008608:	1e4d      	subs	r5, r1, #1
 800860a:	4355      	muls	r5, r2
 800860c:	460e      	mov	r6, r1
 800860e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008612:	f000 f997 	bl	8008944 <_malloc_r>
 8008616:	4604      	mov	r4, r0
 8008618:	b140      	cbz	r0, 800862c <__sfmoreglue+0x28>
 800861a:	2100      	movs	r1, #0
 800861c:	e9c0 1600 	strd	r1, r6, [r0]
 8008620:	300c      	adds	r0, #12
 8008622:	60a0      	str	r0, [r4, #8]
 8008624:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008628:	f7ff fd8a 	bl	8008140 <memset>
 800862c:	4620      	mov	r0, r4
 800862e:	bd70      	pop	{r4, r5, r6, pc}

08008630 <__sfp_lock_acquire>:
 8008630:	4801      	ldr	r0, [pc, #4]	; (8008638 <__sfp_lock_acquire+0x8>)
 8008632:	f000 b8b3 	b.w	800879c <__retarget_lock_acquire_recursive>
 8008636:	bf00      	nop
 8008638:	20000e29 	.word	0x20000e29

0800863c <__sfp_lock_release>:
 800863c:	4801      	ldr	r0, [pc, #4]	; (8008644 <__sfp_lock_release+0x8>)
 800863e:	f000 b8ae 	b.w	800879e <__retarget_lock_release_recursive>
 8008642:	bf00      	nop
 8008644:	20000e29 	.word	0x20000e29

08008648 <__sinit_lock_acquire>:
 8008648:	4801      	ldr	r0, [pc, #4]	; (8008650 <__sinit_lock_acquire+0x8>)
 800864a:	f000 b8a7 	b.w	800879c <__retarget_lock_acquire_recursive>
 800864e:	bf00      	nop
 8008650:	20000e2a 	.word	0x20000e2a

08008654 <__sinit_lock_release>:
 8008654:	4801      	ldr	r0, [pc, #4]	; (800865c <__sinit_lock_release+0x8>)
 8008656:	f000 b8a2 	b.w	800879e <__retarget_lock_release_recursive>
 800865a:	bf00      	nop
 800865c:	20000e2a 	.word	0x20000e2a

08008660 <__sinit>:
 8008660:	b510      	push	{r4, lr}
 8008662:	4604      	mov	r4, r0
 8008664:	f7ff fff0 	bl	8008648 <__sinit_lock_acquire>
 8008668:	69a3      	ldr	r3, [r4, #24]
 800866a:	b11b      	cbz	r3, 8008674 <__sinit+0x14>
 800866c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008670:	f7ff bff0 	b.w	8008654 <__sinit_lock_release>
 8008674:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008678:	6523      	str	r3, [r4, #80]	; 0x50
 800867a:	4b13      	ldr	r3, [pc, #76]	; (80086c8 <__sinit+0x68>)
 800867c:	4a13      	ldr	r2, [pc, #76]	; (80086cc <__sinit+0x6c>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	62a2      	str	r2, [r4, #40]	; 0x28
 8008682:	42a3      	cmp	r3, r4
 8008684:	bf04      	itt	eq
 8008686:	2301      	moveq	r3, #1
 8008688:	61a3      	streq	r3, [r4, #24]
 800868a:	4620      	mov	r0, r4
 800868c:	f000 f820 	bl	80086d0 <__sfp>
 8008690:	6060      	str	r0, [r4, #4]
 8008692:	4620      	mov	r0, r4
 8008694:	f000 f81c 	bl	80086d0 <__sfp>
 8008698:	60a0      	str	r0, [r4, #8]
 800869a:	4620      	mov	r0, r4
 800869c:	f000 f818 	bl	80086d0 <__sfp>
 80086a0:	2200      	movs	r2, #0
 80086a2:	60e0      	str	r0, [r4, #12]
 80086a4:	2104      	movs	r1, #4
 80086a6:	6860      	ldr	r0, [r4, #4]
 80086a8:	f7ff ff82 	bl	80085b0 <std>
 80086ac:	68a0      	ldr	r0, [r4, #8]
 80086ae:	2201      	movs	r2, #1
 80086b0:	2109      	movs	r1, #9
 80086b2:	f7ff ff7d 	bl	80085b0 <std>
 80086b6:	68e0      	ldr	r0, [r4, #12]
 80086b8:	2202      	movs	r2, #2
 80086ba:	2112      	movs	r1, #18
 80086bc:	f7ff ff78 	bl	80085b0 <std>
 80086c0:	2301      	movs	r3, #1
 80086c2:	61a3      	str	r3, [r4, #24]
 80086c4:	e7d2      	b.n	800866c <__sinit+0xc>
 80086c6:	bf00      	nop
 80086c8:	08009754 	.word	0x08009754
 80086cc:	080085f9 	.word	0x080085f9

080086d0 <__sfp>:
 80086d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086d2:	4607      	mov	r7, r0
 80086d4:	f7ff ffac 	bl	8008630 <__sfp_lock_acquire>
 80086d8:	4b1e      	ldr	r3, [pc, #120]	; (8008754 <__sfp+0x84>)
 80086da:	681e      	ldr	r6, [r3, #0]
 80086dc:	69b3      	ldr	r3, [r6, #24]
 80086de:	b913      	cbnz	r3, 80086e6 <__sfp+0x16>
 80086e0:	4630      	mov	r0, r6
 80086e2:	f7ff ffbd 	bl	8008660 <__sinit>
 80086e6:	3648      	adds	r6, #72	; 0x48
 80086e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80086ec:	3b01      	subs	r3, #1
 80086ee:	d503      	bpl.n	80086f8 <__sfp+0x28>
 80086f0:	6833      	ldr	r3, [r6, #0]
 80086f2:	b30b      	cbz	r3, 8008738 <__sfp+0x68>
 80086f4:	6836      	ldr	r6, [r6, #0]
 80086f6:	e7f7      	b.n	80086e8 <__sfp+0x18>
 80086f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80086fc:	b9d5      	cbnz	r5, 8008734 <__sfp+0x64>
 80086fe:	4b16      	ldr	r3, [pc, #88]	; (8008758 <__sfp+0x88>)
 8008700:	60e3      	str	r3, [r4, #12]
 8008702:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008706:	6665      	str	r5, [r4, #100]	; 0x64
 8008708:	f000 f847 	bl	800879a <__retarget_lock_init_recursive>
 800870c:	f7ff ff96 	bl	800863c <__sfp_lock_release>
 8008710:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008714:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008718:	6025      	str	r5, [r4, #0]
 800871a:	61a5      	str	r5, [r4, #24]
 800871c:	2208      	movs	r2, #8
 800871e:	4629      	mov	r1, r5
 8008720:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008724:	f7ff fd0c 	bl	8008140 <memset>
 8008728:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800872c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008730:	4620      	mov	r0, r4
 8008732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008734:	3468      	adds	r4, #104	; 0x68
 8008736:	e7d9      	b.n	80086ec <__sfp+0x1c>
 8008738:	2104      	movs	r1, #4
 800873a:	4638      	mov	r0, r7
 800873c:	f7ff ff62 	bl	8008604 <__sfmoreglue>
 8008740:	4604      	mov	r4, r0
 8008742:	6030      	str	r0, [r6, #0]
 8008744:	2800      	cmp	r0, #0
 8008746:	d1d5      	bne.n	80086f4 <__sfp+0x24>
 8008748:	f7ff ff78 	bl	800863c <__sfp_lock_release>
 800874c:	230c      	movs	r3, #12
 800874e:	603b      	str	r3, [r7, #0]
 8008750:	e7ee      	b.n	8008730 <__sfp+0x60>
 8008752:	bf00      	nop
 8008754:	08009754 	.word	0x08009754
 8008758:	ffff0001 	.word	0xffff0001

0800875c <_fwalk_reent>:
 800875c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008760:	4606      	mov	r6, r0
 8008762:	4688      	mov	r8, r1
 8008764:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008768:	2700      	movs	r7, #0
 800876a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800876e:	f1b9 0901 	subs.w	r9, r9, #1
 8008772:	d505      	bpl.n	8008780 <_fwalk_reent+0x24>
 8008774:	6824      	ldr	r4, [r4, #0]
 8008776:	2c00      	cmp	r4, #0
 8008778:	d1f7      	bne.n	800876a <_fwalk_reent+0xe>
 800877a:	4638      	mov	r0, r7
 800877c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008780:	89ab      	ldrh	r3, [r5, #12]
 8008782:	2b01      	cmp	r3, #1
 8008784:	d907      	bls.n	8008796 <_fwalk_reent+0x3a>
 8008786:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800878a:	3301      	adds	r3, #1
 800878c:	d003      	beq.n	8008796 <_fwalk_reent+0x3a>
 800878e:	4629      	mov	r1, r5
 8008790:	4630      	mov	r0, r6
 8008792:	47c0      	blx	r8
 8008794:	4307      	orrs	r7, r0
 8008796:	3568      	adds	r5, #104	; 0x68
 8008798:	e7e9      	b.n	800876e <_fwalk_reent+0x12>

0800879a <__retarget_lock_init_recursive>:
 800879a:	4770      	bx	lr

0800879c <__retarget_lock_acquire_recursive>:
 800879c:	4770      	bx	lr

0800879e <__retarget_lock_release_recursive>:
 800879e:	4770      	bx	lr

080087a0 <__swhatbuf_r>:
 80087a0:	b570      	push	{r4, r5, r6, lr}
 80087a2:	460e      	mov	r6, r1
 80087a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087a8:	2900      	cmp	r1, #0
 80087aa:	b096      	sub	sp, #88	; 0x58
 80087ac:	4614      	mov	r4, r2
 80087ae:	461d      	mov	r5, r3
 80087b0:	da08      	bge.n	80087c4 <__swhatbuf_r+0x24>
 80087b2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80087b6:	2200      	movs	r2, #0
 80087b8:	602a      	str	r2, [r5, #0]
 80087ba:	061a      	lsls	r2, r3, #24
 80087bc:	d410      	bmi.n	80087e0 <__swhatbuf_r+0x40>
 80087be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087c2:	e00e      	b.n	80087e2 <__swhatbuf_r+0x42>
 80087c4:	466a      	mov	r2, sp
 80087c6:	f000 fdf1 	bl	80093ac <_fstat_r>
 80087ca:	2800      	cmp	r0, #0
 80087cc:	dbf1      	blt.n	80087b2 <__swhatbuf_r+0x12>
 80087ce:	9a01      	ldr	r2, [sp, #4]
 80087d0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80087d4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80087d8:	425a      	negs	r2, r3
 80087da:	415a      	adcs	r2, r3
 80087dc:	602a      	str	r2, [r5, #0]
 80087de:	e7ee      	b.n	80087be <__swhatbuf_r+0x1e>
 80087e0:	2340      	movs	r3, #64	; 0x40
 80087e2:	2000      	movs	r0, #0
 80087e4:	6023      	str	r3, [r4, #0]
 80087e6:	b016      	add	sp, #88	; 0x58
 80087e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080087ec <__smakebuf_r>:
 80087ec:	898b      	ldrh	r3, [r1, #12]
 80087ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80087f0:	079d      	lsls	r5, r3, #30
 80087f2:	4606      	mov	r6, r0
 80087f4:	460c      	mov	r4, r1
 80087f6:	d507      	bpl.n	8008808 <__smakebuf_r+0x1c>
 80087f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80087fc:	6023      	str	r3, [r4, #0]
 80087fe:	6123      	str	r3, [r4, #16]
 8008800:	2301      	movs	r3, #1
 8008802:	6163      	str	r3, [r4, #20]
 8008804:	b002      	add	sp, #8
 8008806:	bd70      	pop	{r4, r5, r6, pc}
 8008808:	ab01      	add	r3, sp, #4
 800880a:	466a      	mov	r2, sp
 800880c:	f7ff ffc8 	bl	80087a0 <__swhatbuf_r>
 8008810:	9900      	ldr	r1, [sp, #0]
 8008812:	4605      	mov	r5, r0
 8008814:	4630      	mov	r0, r6
 8008816:	f000 f895 	bl	8008944 <_malloc_r>
 800881a:	b948      	cbnz	r0, 8008830 <__smakebuf_r+0x44>
 800881c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008820:	059a      	lsls	r2, r3, #22
 8008822:	d4ef      	bmi.n	8008804 <__smakebuf_r+0x18>
 8008824:	f023 0303 	bic.w	r3, r3, #3
 8008828:	f043 0302 	orr.w	r3, r3, #2
 800882c:	81a3      	strh	r3, [r4, #12]
 800882e:	e7e3      	b.n	80087f8 <__smakebuf_r+0xc>
 8008830:	4b0d      	ldr	r3, [pc, #52]	; (8008868 <__smakebuf_r+0x7c>)
 8008832:	62b3      	str	r3, [r6, #40]	; 0x28
 8008834:	89a3      	ldrh	r3, [r4, #12]
 8008836:	6020      	str	r0, [r4, #0]
 8008838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800883c:	81a3      	strh	r3, [r4, #12]
 800883e:	9b00      	ldr	r3, [sp, #0]
 8008840:	6163      	str	r3, [r4, #20]
 8008842:	9b01      	ldr	r3, [sp, #4]
 8008844:	6120      	str	r0, [r4, #16]
 8008846:	b15b      	cbz	r3, 8008860 <__smakebuf_r+0x74>
 8008848:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800884c:	4630      	mov	r0, r6
 800884e:	f000 fdbf 	bl	80093d0 <_isatty_r>
 8008852:	b128      	cbz	r0, 8008860 <__smakebuf_r+0x74>
 8008854:	89a3      	ldrh	r3, [r4, #12]
 8008856:	f023 0303 	bic.w	r3, r3, #3
 800885a:	f043 0301 	orr.w	r3, r3, #1
 800885e:	81a3      	strh	r3, [r4, #12]
 8008860:	89a0      	ldrh	r0, [r4, #12]
 8008862:	4305      	orrs	r5, r0
 8008864:	81a5      	strh	r5, [r4, #12]
 8008866:	e7cd      	b.n	8008804 <__smakebuf_r+0x18>
 8008868:	080085f9 	.word	0x080085f9

0800886c <_free_r>:
 800886c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800886e:	2900      	cmp	r1, #0
 8008870:	d044      	beq.n	80088fc <_free_r+0x90>
 8008872:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008876:	9001      	str	r0, [sp, #4]
 8008878:	2b00      	cmp	r3, #0
 800887a:	f1a1 0404 	sub.w	r4, r1, #4
 800887e:	bfb8      	it	lt
 8008880:	18e4      	addlt	r4, r4, r3
 8008882:	f000 fdef 	bl	8009464 <__malloc_lock>
 8008886:	4a1e      	ldr	r2, [pc, #120]	; (8008900 <_free_r+0x94>)
 8008888:	9801      	ldr	r0, [sp, #4]
 800888a:	6813      	ldr	r3, [r2, #0]
 800888c:	b933      	cbnz	r3, 800889c <_free_r+0x30>
 800888e:	6063      	str	r3, [r4, #4]
 8008890:	6014      	str	r4, [r2, #0]
 8008892:	b003      	add	sp, #12
 8008894:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008898:	f000 bdea 	b.w	8009470 <__malloc_unlock>
 800889c:	42a3      	cmp	r3, r4
 800889e:	d908      	bls.n	80088b2 <_free_r+0x46>
 80088a0:	6825      	ldr	r5, [r4, #0]
 80088a2:	1961      	adds	r1, r4, r5
 80088a4:	428b      	cmp	r3, r1
 80088a6:	bf01      	itttt	eq
 80088a8:	6819      	ldreq	r1, [r3, #0]
 80088aa:	685b      	ldreq	r3, [r3, #4]
 80088ac:	1949      	addeq	r1, r1, r5
 80088ae:	6021      	streq	r1, [r4, #0]
 80088b0:	e7ed      	b.n	800888e <_free_r+0x22>
 80088b2:	461a      	mov	r2, r3
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	b10b      	cbz	r3, 80088bc <_free_r+0x50>
 80088b8:	42a3      	cmp	r3, r4
 80088ba:	d9fa      	bls.n	80088b2 <_free_r+0x46>
 80088bc:	6811      	ldr	r1, [r2, #0]
 80088be:	1855      	adds	r5, r2, r1
 80088c0:	42a5      	cmp	r5, r4
 80088c2:	d10b      	bne.n	80088dc <_free_r+0x70>
 80088c4:	6824      	ldr	r4, [r4, #0]
 80088c6:	4421      	add	r1, r4
 80088c8:	1854      	adds	r4, r2, r1
 80088ca:	42a3      	cmp	r3, r4
 80088cc:	6011      	str	r1, [r2, #0]
 80088ce:	d1e0      	bne.n	8008892 <_free_r+0x26>
 80088d0:	681c      	ldr	r4, [r3, #0]
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	6053      	str	r3, [r2, #4]
 80088d6:	4421      	add	r1, r4
 80088d8:	6011      	str	r1, [r2, #0]
 80088da:	e7da      	b.n	8008892 <_free_r+0x26>
 80088dc:	d902      	bls.n	80088e4 <_free_r+0x78>
 80088de:	230c      	movs	r3, #12
 80088e0:	6003      	str	r3, [r0, #0]
 80088e2:	e7d6      	b.n	8008892 <_free_r+0x26>
 80088e4:	6825      	ldr	r5, [r4, #0]
 80088e6:	1961      	adds	r1, r4, r5
 80088e8:	428b      	cmp	r3, r1
 80088ea:	bf04      	itt	eq
 80088ec:	6819      	ldreq	r1, [r3, #0]
 80088ee:	685b      	ldreq	r3, [r3, #4]
 80088f0:	6063      	str	r3, [r4, #4]
 80088f2:	bf04      	itt	eq
 80088f4:	1949      	addeq	r1, r1, r5
 80088f6:	6021      	streq	r1, [r4, #0]
 80088f8:	6054      	str	r4, [r2, #4]
 80088fa:	e7ca      	b.n	8008892 <_free_r+0x26>
 80088fc:	b003      	add	sp, #12
 80088fe:	bd30      	pop	{r4, r5, pc}
 8008900:	20000e2c 	.word	0x20000e2c

08008904 <sbrk_aligned>:
 8008904:	b570      	push	{r4, r5, r6, lr}
 8008906:	4e0e      	ldr	r6, [pc, #56]	; (8008940 <sbrk_aligned+0x3c>)
 8008908:	460c      	mov	r4, r1
 800890a:	6831      	ldr	r1, [r6, #0]
 800890c:	4605      	mov	r5, r0
 800890e:	b911      	cbnz	r1, 8008916 <sbrk_aligned+0x12>
 8008910:	f000 fcd6 	bl	80092c0 <_sbrk_r>
 8008914:	6030      	str	r0, [r6, #0]
 8008916:	4621      	mov	r1, r4
 8008918:	4628      	mov	r0, r5
 800891a:	f000 fcd1 	bl	80092c0 <_sbrk_r>
 800891e:	1c43      	adds	r3, r0, #1
 8008920:	d00a      	beq.n	8008938 <sbrk_aligned+0x34>
 8008922:	1cc4      	adds	r4, r0, #3
 8008924:	f024 0403 	bic.w	r4, r4, #3
 8008928:	42a0      	cmp	r0, r4
 800892a:	d007      	beq.n	800893c <sbrk_aligned+0x38>
 800892c:	1a21      	subs	r1, r4, r0
 800892e:	4628      	mov	r0, r5
 8008930:	f000 fcc6 	bl	80092c0 <_sbrk_r>
 8008934:	3001      	adds	r0, #1
 8008936:	d101      	bne.n	800893c <sbrk_aligned+0x38>
 8008938:	f04f 34ff 	mov.w	r4, #4294967295
 800893c:	4620      	mov	r0, r4
 800893e:	bd70      	pop	{r4, r5, r6, pc}
 8008940:	20000e30 	.word	0x20000e30

08008944 <_malloc_r>:
 8008944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008948:	1ccd      	adds	r5, r1, #3
 800894a:	f025 0503 	bic.w	r5, r5, #3
 800894e:	3508      	adds	r5, #8
 8008950:	2d0c      	cmp	r5, #12
 8008952:	bf38      	it	cc
 8008954:	250c      	movcc	r5, #12
 8008956:	2d00      	cmp	r5, #0
 8008958:	4607      	mov	r7, r0
 800895a:	db01      	blt.n	8008960 <_malloc_r+0x1c>
 800895c:	42a9      	cmp	r1, r5
 800895e:	d905      	bls.n	800896c <_malloc_r+0x28>
 8008960:	230c      	movs	r3, #12
 8008962:	603b      	str	r3, [r7, #0]
 8008964:	2600      	movs	r6, #0
 8008966:	4630      	mov	r0, r6
 8008968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800896c:	4e2e      	ldr	r6, [pc, #184]	; (8008a28 <_malloc_r+0xe4>)
 800896e:	f000 fd79 	bl	8009464 <__malloc_lock>
 8008972:	6833      	ldr	r3, [r6, #0]
 8008974:	461c      	mov	r4, r3
 8008976:	bb34      	cbnz	r4, 80089c6 <_malloc_r+0x82>
 8008978:	4629      	mov	r1, r5
 800897a:	4638      	mov	r0, r7
 800897c:	f7ff ffc2 	bl	8008904 <sbrk_aligned>
 8008980:	1c43      	adds	r3, r0, #1
 8008982:	4604      	mov	r4, r0
 8008984:	d14d      	bne.n	8008a22 <_malloc_r+0xde>
 8008986:	6834      	ldr	r4, [r6, #0]
 8008988:	4626      	mov	r6, r4
 800898a:	2e00      	cmp	r6, #0
 800898c:	d140      	bne.n	8008a10 <_malloc_r+0xcc>
 800898e:	6823      	ldr	r3, [r4, #0]
 8008990:	4631      	mov	r1, r6
 8008992:	4638      	mov	r0, r7
 8008994:	eb04 0803 	add.w	r8, r4, r3
 8008998:	f000 fc92 	bl	80092c0 <_sbrk_r>
 800899c:	4580      	cmp	r8, r0
 800899e:	d13a      	bne.n	8008a16 <_malloc_r+0xd2>
 80089a0:	6821      	ldr	r1, [r4, #0]
 80089a2:	3503      	adds	r5, #3
 80089a4:	1a6d      	subs	r5, r5, r1
 80089a6:	f025 0503 	bic.w	r5, r5, #3
 80089aa:	3508      	adds	r5, #8
 80089ac:	2d0c      	cmp	r5, #12
 80089ae:	bf38      	it	cc
 80089b0:	250c      	movcc	r5, #12
 80089b2:	4629      	mov	r1, r5
 80089b4:	4638      	mov	r0, r7
 80089b6:	f7ff ffa5 	bl	8008904 <sbrk_aligned>
 80089ba:	3001      	adds	r0, #1
 80089bc:	d02b      	beq.n	8008a16 <_malloc_r+0xd2>
 80089be:	6823      	ldr	r3, [r4, #0]
 80089c0:	442b      	add	r3, r5
 80089c2:	6023      	str	r3, [r4, #0]
 80089c4:	e00e      	b.n	80089e4 <_malloc_r+0xa0>
 80089c6:	6822      	ldr	r2, [r4, #0]
 80089c8:	1b52      	subs	r2, r2, r5
 80089ca:	d41e      	bmi.n	8008a0a <_malloc_r+0xc6>
 80089cc:	2a0b      	cmp	r2, #11
 80089ce:	d916      	bls.n	80089fe <_malloc_r+0xba>
 80089d0:	1961      	adds	r1, r4, r5
 80089d2:	42a3      	cmp	r3, r4
 80089d4:	6025      	str	r5, [r4, #0]
 80089d6:	bf18      	it	ne
 80089d8:	6059      	strne	r1, [r3, #4]
 80089da:	6863      	ldr	r3, [r4, #4]
 80089dc:	bf08      	it	eq
 80089de:	6031      	streq	r1, [r6, #0]
 80089e0:	5162      	str	r2, [r4, r5]
 80089e2:	604b      	str	r3, [r1, #4]
 80089e4:	4638      	mov	r0, r7
 80089e6:	f104 060b 	add.w	r6, r4, #11
 80089ea:	f000 fd41 	bl	8009470 <__malloc_unlock>
 80089ee:	f026 0607 	bic.w	r6, r6, #7
 80089f2:	1d23      	adds	r3, r4, #4
 80089f4:	1af2      	subs	r2, r6, r3
 80089f6:	d0b6      	beq.n	8008966 <_malloc_r+0x22>
 80089f8:	1b9b      	subs	r3, r3, r6
 80089fa:	50a3      	str	r3, [r4, r2]
 80089fc:	e7b3      	b.n	8008966 <_malloc_r+0x22>
 80089fe:	6862      	ldr	r2, [r4, #4]
 8008a00:	42a3      	cmp	r3, r4
 8008a02:	bf0c      	ite	eq
 8008a04:	6032      	streq	r2, [r6, #0]
 8008a06:	605a      	strne	r2, [r3, #4]
 8008a08:	e7ec      	b.n	80089e4 <_malloc_r+0xa0>
 8008a0a:	4623      	mov	r3, r4
 8008a0c:	6864      	ldr	r4, [r4, #4]
 8008a0e:	e7b2      	b.n	8008976 <_malloc_r+0x32>
 8008a10:	4634      	mov	r4, r6
 8008a12:	6876      	ldr	r6, [r6, #4]
 8008a14:	e7b9      	b.n	800898a <_malloc_r+0x46>
 8008a16:	230c      	movs	r3, #12
 8008a18:	603b      	str	r3, [r7, #0]
 8008a1a:	4638      	mov	r0, r7
 8008a1c:	f000 fd28 	bl	8009470 <__malloc_unlock>
 8008a20:	e7a1      	b.n	8008966 <_malloc_r+0x22>
 8008a22:	6025      	str	r5, [r4, #0]
 8008a24:	e7de      	b.n	80089e4 <_malloc_r+0xa0>
 8008a26:	bf00      	nop
 8008a28:	20000e2c 	.word	0x20000e2c

08008a2c <__ssputs_r>:
 8008a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a30:	688e      	ldr	r6, [r1, #8]
 8008a32:	429e      	cmp	r6, r3
 8008a34:	4682      	mov	sl, r0
 8008a36:	460c      	mov	r4, r1
 8008a38:	4690      	mov	r8, r2
 8008a3a:	461f      	mov	r7, r3
 8008a3c:	d838      	bhi.n	8008ab0 <__ssputs_r+0x84>
 8008a3e:	898a      	ldrh	r2, [r1, #12]
 8008a40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008a44:	d032      	beq.n	8008aac <__ssputs_r+0x80>
 8008a46:	6825      	ldr	r5, [r4, #0]
 8008a48:	6909      	ldr	r1, [r1, #16]
 8008a4a:	eba5 0901 	sub.w	r9, r5, r1
 8008a4e:	6965      	ldr	r5, [r4, #20]
 8008a50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008a54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008a58:	3301      	adds	r3, #1
 8008a5a:	444b      	add	r3, r9
 8008a5c:	106d      	asrs	r5, r5, #1
 8008a5e:	429d      	cmp	r5, r3
 8008a60:	bf38      	it	cc
 8008a62:	461d      	movcc	r5, r3
 8008a64:	0553      	lsls	r3, r2, #21
 8008a66:	d531      	bpl.n	8008acc <__ssputs_r+0xa0>
 8008a68:	4629      	mov	r1, r5
 8008a6a:	f7ff ff6b 	bl	8008944 <_malloc_r>
 8008a6e:	4606      	mov	r6, r0
 8008a70:	b950      	cbnz	r0, 8008a88 <__ssputs_r+0x5c>
 8008a72:	230c      	movs	r3, #12
 8008a74:	f8ca 3000 	str.w	r3, [sl]
 8008a78:	89a3      	ldrh	r3, [r4, #12]
 8008a7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a7e:	81a3      	strh	r3, [r4, #12]
 8008a80:	f04f 30ff 	mov.w	r0, #4294967295
 8008a84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a88:	6921      	ldr	r1, [r4, #16]
 8008a8a:	464a      	mov	r2, r9
 8008a8c:	f000 fcc2 	bl	8009414 <memcpy>
 8008a90:	89a3      	ldrh	r3, [r4, #12]
 8008a92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008a96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a9a:	81a3      	strh	r3, [r4, #12]
 8008a9c:	6126      	str	r6, [r4, #16]
 8008a9e:	6165      	str	r5, [r4, #20]
 8008aa0:	444e      	add	r6, r9
 8008aa2:	eba5 0509 	sub.w	r5, r5, r9
 8008aa6:	6026      	str	r6, [r4, #0]
 8008aa8:	60a5      	str	r5, [r4, #8]
 8008aaa:	463e      	mov	r6, r7
 8008aac:	42be      	cmp	r6, r7
 8008aae:	d900      	bls.n	8008ab2 <__ssputs_r+0x86>
 8008ab0:	463e      	mov	r6, r7
 8008ab2:	6820      	ldr	r0, [r4, #0]
 8008ab4:	4632      	mov	r2, r6
 8008ab6:	4641      	mov	r1, r8
 8008ab8:	f000 fcba 	bl	8009430 <memmove>
 8008abc:	68a3      	ldr	r3, [r4, #8]
 8008abe:	1b9b      	subs	r3, r3, r6
 8008ac0:	60a3      	str	r3, [r4, #8]
 8008ac2:	6823      	ldr	r3, [r4, #0]
 8008ac4:	4433      	add	r3, r6
 8008ac6:	6023      	str	r3, [r4, #0]
 8008ac8:	2000      	movs	r0, #0
 8008aca:	e7db      	b.n	8008a84 <__ssputs_r+0x58>
 8008acc:	462a      	mov	r2, r5
 8008ace:	f000 fcd5 	bl	800947c <_realloc_r>
 8008ad2:	4606      	mov	r6, r0
 8008ad4:	2800      	cmp	r0, #0
 8008ad6:	d1e1      	bne.n	8008a9c <__ssputs_r+0x70>
 8008ad8:	6921      	ldr	r1, [r4, #16]
 8008ada:	4650      	mov	r0, sl
 8008adc:	f7ff fec6 	bl	800886c <_free_r>
 8008ae0:	e7c7      	b.n	8008a72 <__ssputs_r+0x46>
	...

08008ae4 <_svfiprintf_r>:
 8008ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ae8:	4698      	mov	r8, r3
 8008aea:	898b      	ldrh	r3, [r1, #12]
 8008aec:	061b      	lsls	r3, r3, #24
 8008aee:	b09d      	sub	sp, #116	; 0x74
 8008af0:	4607      	mov	r7, r0
 8008af2:	460d      	mov	r5, r1
 8008af4:	4614      	mov	r4, r2
 8008af6:	d50e      	bpl.n	8008b16 <_svfiprintf_r+0x32>
 8008af8:	690b      	ldr	r3, [r1, #16]
 8008afa:	b963      	cbnz	r3, 8008b16 <_svfiprintf_r+0x32>
 8008afc:	2140      	movs	r1, #64	; 0x40
 8008afe:	f7ff ff21 	bl	8008944 <_malloc_r>
 8008b02:	6028      	str	r0, [r5, #0]
 8008b04:	6128      	str	r0, [r5, #16]
 8008b06:	b920      	cbnz	r0, 8008b12 <_svfiprintf_r+0x2e>
 8008b08:	230c      	movs	r3, #12
 8008b0a:	603b      	str	r3, [r7, #0]
 8008b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b10:	e0d1      	b.n	8008cb6 <_svfiprintf_r+0x1d2>
 8008b12:	2340      	movs	r3, #64	; 0x40
 8008b14:	616b      	str	r3, [r5, #20]
 8008b16:	2300      	movs	r3, #0
 8008b18:	9309      	str	r3, [sp, #36]	; 0x24
 8008b1a:	2320      	movs	r3, #32
 8008b1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b20:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b24:	2330      	movs	r3, #48	; 0x30
 8008b26:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008cd0 <_svfiprintf_r+0x1ec>
 8008b2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b2e:	f04f 0901 	mov.w	r9, #1
 8008b32:	4623      	mov	r3, r4
 8008b34:	469a      	mov	sl, r3
 8008b36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b3a:	b10a      	cbz	r2, 8008b40 <_svfiprintf_r+0x5c>
 8008b3c:	2a25      	cmp	r2, #37	; 0x25
 8008b3e:	d1f9      	bne.n	8008b34 <_svfiprintf_r+0x50>
 8008b40:	ebba 0b04 	subs.w	fp, sl, r4
 8008b44:	d00b      	beq.n	8008b5e <_svfiprintf_r+0x7a>
 8008b46:	465b      	mov	r3, fp
 8008b48:	4622      	mov	r2, r4
 8008b4a:	4629      	mov	r1, r5
 8008b4c:	4638      	mov	r0, r7
 8008b4e:	f7ff ff6d 	bl	8008a2c <__ssputs_r>
 8008b52:	3001      	adds	r0, #1
 8008b54:	f000 80aa 	beq.w	8008cac <_svfiprintf_r+0x1c8>
 8008b58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b5a:	445a      	add	r2, fp
 8008b5c:	9209      	str	r2, [sp, #36]	; 0x24
 8008b5e:	f89a 3000 	ldrb.w	r3, [sl]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	f000 80a2 	beq.w	8008cac <_svfiprintf_r+0x1c8>
 8008b68:	2300      	movs	r3, #0
 8008b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8008b6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b72:	f10a 0a01 	add.w	sl, sl, #1
 8008b76:	9304      	str	r3, [sp, #16]
 8008b78:	9307      	str	r3, [sp, #28]
 8008b7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b7e:	931a      	str	r3, [sp, #104]	; 0x68
 8008b80:	4654      	mov	r4, sl
 8008b82:	2205      	movs	r2, #5
 8008b84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b88:	4851      	ldr	r0, [pc, #324]	; (8008cd0 <_svfiprintf_r+0x1ec>)
 8008b8a:	f7f7 fb31 	bl	80001f0 <memchr>
 8008b8e:	9a04      	ldr	r2, [sp, #16]
 8008b90:	b9d8      	cbnz	r0, 8008bca <_svfiprintf_r+0xe6>
 8008b92:	06d0      	lsls	r0, r2, #27
 8008b94:	bf44      	itt	mi
 8008b96:	2320      	movmi	r3, #32
 8008b98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b9c:	0711      	lsls	r1, r2, #28
 8008b9e:	bf44      	itt	mi
 8008ba0:	232b      	movmi	r3, #43	; 0x2b
 8008ba2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ba6:	f89a 3000 	ldrb.w	r3, [sl]
 8008baa:	2b2a      	cmp	r3, #42	; 0x2a
 8008bac:	d015      	beq.n	8008bda <_svfiprintf_r+0xf6>
 8008bae:	9a07      	ldr	r2, [sp, #28]
 8008bb0:	4654      	mov	r4, sl
 8008bb2:	2000      	movs	r0, #0
 8008bb4:	f04f 0c0a 	mov.w	ip, #10
 8008bb8:	4621      	mov	r1, r4
 8008bba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bbe:	3b30      	subs	r3, #48	; 0x30
 8008bc0:	2b09      	cmp	r3, #9
 8008bc2:	d94e      	bls.n	8008c62 <_svfiprintf_r+0x17e>
 8008bc4:	b1b0      	cbz	r0, 8008bf4 <_svfiprintf_r+0x110>
 8008bc6:	9207      	str	r2, [sp, #28]
 8008bc8:	e014      	b.n	8008bf4 <_svfiprintf_r+0x110>
 8008bca:	eba0 0308 	sub.w	r3, r0, r8
 8008bce:	fa09 f303 	lsl.w	r3, r9, r3
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	9304      	str	r3, [sp, #16]
 8008bd6:	46a2      	mov	sl, r4
 8008bd8:	e7d2      	b.n	8008b80 <_svfiprintf_r+0x9c>
 8008bda:	9b03      	ldr	r3, [sp, #12]
 8008bdc:	1d19      	adds	r1, r3, #4
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	9103      	str	r1, [sp, #12]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	bfbb      	ittet	lt
 8008be6:	425b      	neglt	r3, r3
 8008be8:	f042 0202 	orrlt.w	r2, r2, #2
 8008bec:	9307      	strge	r3, [sp, #28]
 8008bee:	9307      	strlt	r3, [sp, #28]
 8008bf0:	bfb8      	it	lt
 8008bf2:	9204      	strlt	r2, [sp, #16]
 8008bf4:	7823      	ldrb	r3, [r4, #0]
 8008bf6:	2b2e      	cmp	r3, #46	; 0x2e
 8008bf8:	d10c      	bne.n	8008c14 <_svfiprintf_r+0x130>
 8008bfa:	7863      	ldrb	r3, [r4, #1]
 8008bfc:	2b2a      	cmp	r3, #42	; 0x2a
 8008bfe:	d135      	bne.n	8008c6c <_svfiprintf_r+0x188>
 8008c00:	9b03      	ldr	r3, [sp, #12]
 8008c02:	1d1a      	adds	r2, r3, #4
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	9203      	str	r2, [sp, #12]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	bfb8      	it	lt
 8008c0c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c10:	3402      	adds	r4, #2
 8008c12:	9305      	str	r3, [sp, #20]
 8008c14:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008ce0 <_svfiprintf_r+0x1fc>
 8008c18:	7821      	ldrb	r1, [r4, #0]
 8008c1a:	2203      	movs	r2, #3
 8008c1c:	4650      	mov	r0, sl
 8008c1e:	f7f7 fae7 	bl	80001f0 <memchr>
 8008c22:	b140      	cbz	r0, 8008c36 <_svfiprintf_r+0x152>
 8008c24:	2340      	movs	r3, #64	; 0x40
 8008c26:	eba0 000a 	sub.w	r0, r0, sl
 8008c2a:	fa03 f000 	lsl.w	r0, r3, r0
 8008c2e:	9b04      	ldr	r3, [sp, #16]
 8008c30:	4303      	orrs	r3, r0
 8008c32:	3401      	adds	r4, #1
 8008c34:	9304      	str	r3, [sp, #16]
 8008c36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c3a:	4826      	ldr	r0, [pc, #152]	; (8008cd4 <_svfiprintf_r+0x1f0>)
 8008c3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c40:	2206      	movs	r2, #6
 8008c42:	f7f7 fad5 	bl	80001f0 <memchr>
 8008c46:	2800      	cmp	r0, #0
 8008c48:	d038      	beq.n	8008cbc <_svfiprintf_r+0x1d8>
 8008c4a:	4b23      	ldr	r3, [pc, #140]	; (8008cd8 <_svfiprintf_r+0x1f4>)
 8008c4c:	bb1b      	cbnz	r3, 8008c96 <_svfiprintf_r+0x1b2>
 8008c4e:	9b03      	ldr	r3, [sp, #12]
 8008c50:	3307      	adds	r3, #7
 8008c52:	f023 0307 	bic.w	r3, r3, #7
 8008c56:	3308      	adds	r3, #8
 8008c58:	9303      	str	r3, [sp, #12]
 8008c5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c5c:	4433      	add	r3, r6
 8008c5e:	9309      	str	r3, [sp, #36]	; 0x24
 8008c60:	e767      	b.n	8008b32 <_svfiprintf_r+0x4e>
 8008c62:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c66:	460c      	mov	r4, r1
 8008c68:	2001      	movs	r0, #1
 8008c6a:	e7a5      	b.n	8008bb8 <_svfiprintf_r+0xd4>
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	3401      	adds	r4, #1
 8008c70:	9305      	str	r3, [sp, #20]
 8008c72:	4619      	mov	r1, r3
 8008c74:	f04f 0c0a 	mov.w	ip, #10
 8008c78:	4620      	mov	r0, r4
 8008c7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c7e:	3a30      	subs	r2, #48	; 0x30
 8008c80:	2a09      	cmp	r2, #9
 8008c82:	d903      	bls.n	8008c8c <_svfiprintf_r+0x1a8>
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d0c5      	beq.n	8008c14 <_svfiprintf_r+0x130>
 8008c88:	9105      	str	r1, [sp, #20]
 8008c8a:	e7c3      	b.n	8008c14 <_svfiprintf_r+0x130>
 8008c8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c90:	4604      	mov	r4, r0
 8008c92:	2301      	movs	r3, #1
 8008c94:	e7f0      	b.n	8008c78 <_svfiprintf_r+0x194>
 8008c96:	ab03      	add	r3, sp, #12
 8008c98:	9300      	str	r3, [sp, #0]
 8008c9a:	462a      	mov	r2, r5
 8008c9c:	4b0f      	ldr	r3, [pc, #60]	; (8008cdc <_svfiprintf_r+0x1f8>)
 8008c9e:	a904      	add	r1, sp, #16
 8008ca0:	4638      	mov	r0, r7
 8008ca2:	f3af 8000 	nop.w
 8008ca6:	1c42      	adds	r2, r0, #1
 8008ca8:	4606      	mov	r6, r0
 8008caa:	d1d6      	bne.n	8008c5a <_svfiprintf_r+0x176>
 8008cac:	89ab      	ldrh	r3, [r5, #12]
 8008cae:	065b      	lsls	r3, r3, #25
 8008cb0:	f53f af2c 	bmi.w	8008b0c <_svfiprintf_r+0x28>
 8008cb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008cb6:	b01d      	add	sp, #116	; 0x74
 8008cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cbc:	ab03      	add	r3, sp, #12
 8008cbe:	9300      	str	r3, [sp, #0]
 8008cc0:	462a      	mov	r2, r5
 8008cc2:	4b06      	ldr	r3, [pc, #24]	; (8008cdc <_svfiprintf_r+0x1f8>)
 8008cc4:	a904      	add	r1, sp, #16
 8008cc6:	4638      	mov	r0, r7
 8008cc8:	f000 f9d4 	bl	8009074 <_printf_i>
 8008ccc:	e7eb      	b.n	8008ca6 <_svfiprintf_r+0x1c2>
 8008cce:	bf00      	nop
 8008cd0:	080097b8 	.word	0x080097b8
 8008cd4:	080097c2 	.word	0x080097c2
 8008cd8:	00000000 	.word	0x00000000
 8008cdc:	08008a2d 	.word	0x08008a2d
 8008ce0:	080097be 	.word	0x080097be

08008ce4 <__sfputc_r>:
 8008ce4:	6893      	ldr	r3, [r2, #8]
 8008ce6:	3b01      	subs	r3, #1
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	b410      	push	{r4}
 8008cec:	6093      	str	r3, [r2, #8]
 8008cee:	da08      	bge.n	8008d02 <__sfputc_r+0x1e>
 8008cf0:	6994      	ldr	r4, [r2, #24]
 8008cf2:	42a3      	cmp	r3, r4
 8008cf4:	db01      	blt.n	8008cfa <__sfputc_r+0x16>
 8008cf6:	290a      	cmp	r1, #10
 8008cf8:	d103      	bne.n	8008d02 <__sfputc_r+0x1e>
 8008cfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cfe:	f7ff bad5 	b.w	80082ac <__swbuf_r>
 8008d02:	6813      	ldr	r3, [r2, #0]
 8008d04:	1c58      	adds	r0, r3, #1
 8008d06:	6010      	str	r0, [r2, #0]
 8008d08:	7019      	strb	r1, [r3, #0]
 8008d0a:	4608      	mov	r0, r1
 8008d0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d10:	4770      	bx	lr

08008d12 <__sfputs_r>:
 8008d12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d14:	4606      	mov	r6, r0
 8008d16:	460f      	mov	r7, r1
 8008d18:	4614      	mov	r4, r2
 8008d1a:	18d5      	adds	r5, r2, r3
 8008d1c:	42ac      	cmp	r4, r5
 8008d1e:	d101      	bne.n	8008d24 <__sfputs_r+0x12>
 8008d20:	2000      	movs	r0, #0
 8008d22:	e007      	b.n	8008d34 <__sfputs_r+0x22>
 8008d24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d28:	463a      	mov	r2, r7
 8008d2a:	4630      	mov	r0, r6
 8008d2c:	f7ff ffda 	bl	8008ce4 <__sfputc_r>
 8008d30:	1c43      	adds	r3, r0, #1
 8008d32:	d1f3      	bne.n	8008d1c <__sfputs_r+0xa>
 8008d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008d38 <_vfiprintf_r>:
 8008d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d3c:	460d      	mov	r5, r1
 8008d3e:	b09d      	sub	sp, #116	; 0x74
 8008d40:	4614      	mov	r4, r2
 8008d42:	4698      	mov	r8, r3
 8008d44:	4606      	mov	r6, r0
 8008d46:	b118      	cbz	r0, 8008d50 <_vfiprintf_r+0x18>
 8008d48:	6983      	ldr	r3, [r0, #24]
 8008d4a:	b90b      	cbnz	r3, 8008d50 <_vfiprintf_r+0x18>
 8008d4c:	f7ff fc88 	bl	8008660 <__sinit>
 8008d50:	4b89      	ldr	r3, [pc, #548]	; (8008f78 <_vfiprintf_r+0x240>)
 8008d52:	429d      	cmp	r5, r3
 8008d54:	d11b      	bne.n	8008d8e <_vfiprintf_r+0x56>
 8008d56:	6875      	ldr	r5, [r6, #4]
 8008d58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d5a:	07d9      	lsls	r1, r3, #31
 8008d5c:	d405      	bmi.n	8008d6a <_vfiprintf_r+0x32>
 8008d5e:	89ab      	ldrh	r3, [r5, #12]
 8008d60:	059a      	lsls	r2, r3, #22
 8008d62:	d402      	bmi.n	8008d6a <_vfiprintf_r+0x32>
 8008d64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d66:	f7ff fd19 	bl	800879c <__retarget_lock_acquire_recursive>
 8008d6a:	89ab      	ldrh	r3, [r5, #12]
 8008d6c:	071b      	lsls	r3, r3, #28
 8008d6e:	d501      	bpl.n	8008d74 <_vfiprintf_r+0x3c>
 8008d70:	692b      	ldr	r3, [r5, #16]
 8008d72:	b9eb      	cbnz	r3, 8008db0 <_vfiprintf_r+0x78>
 8008d74:	4629      	mov	r1, r5
 8008d76:	4630      	mov	r0, r6
 8008d78:	f7ff faea 	bl	8008350 <__swsetup_r>
 8008d7c:	b1c0      	cbz	r0, 8008db0 <_vfiprintf_r+0x78>
 8008d7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d80:	07dc      	lsls	r4, r3, #31
 8008d82:	d50e      	bpl.n	8008da2 <_vfiprintf_r+0x6a>
 8008d84:	f04f 30ff 	mov.w	r0, #4294967295
 8008d88:	b01d      	add	sp, #116	; 0x74
 8008d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d8e:	4b7b      	ldr	r3, [pc, #492]	; (8008f7c <_vfiprintf_r+0x244>)
 8008d90:	429d      	cmp	r5, r3
 8008d92:	d101      	bne.n	8008d98 <_vfiprintf_r+0x60>
 8008d94:	68b5      	ldr	r5, [r6, #8]
 8008d96:	e7df      	b.n	8008d58 <_vfiprintf_r+0x20>
 8008d98:	4b79      	ldr	r3, [pc, #484]	; (8008f80 <_vfiprintf_r+0x248>)
 8008d9a:	429d      	cmp	r5, r3
 8008d9c:	bf08      	it	eq
 8008d9e:	68f5      	ldreq	r5, [r6, #12]
 8008da0:	e7da      	b.n	8008d58 <_vfiprintf_r+0x20>
 8008da2:	89ab      	ldrh	r3, [r5, #12]
 8008da4:	0598      	lsls	r0, r3, #22
 8008da6:	d4ed      	bmi.n	8008d84 <_vfiprintf_r+0x4c>
 8008da8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008daa:	f7ff fcf8 	bl	800879e <__retarget_lock_release_recursive>
 8008dae:	e7e9      	b.n	8008d84 <_vfiprintf_r+0x4c>
 8008db0:	2300      	movs	r3, #0
 8008db2:	9309      	str	r3, [sp, #36]	; 0x24
 8008db4:	2320      	movs	r3, #32
 8008db6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008dba:	f8cd 800c 	str.w	r8, [sp, #12]
 8008dbe:	2330      	movs	r3, #48	; 0x30
 8008dc0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008f84 <_vfiprintf_r+0x24c>
 8008dc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008dc8:	f04f 0901 	mov.w	r9, #1
 8008dcc:	4623      	mov	r3, r4
 8008dce:	469a      	mov	sl, r3
 8008dd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008dd4:	b10a      	cbz	r2, 8008dda <_vfiprintf_r+0xa2>
 8008dd6:	2a25      	cmp	r2, #37	; 0x25
 8008dd8:	d1f9      	bne.n	8008dce <_vfiprintf_r+0x96>
 8008dda:	ebba 0b04 	subs.w	fp, sl, r4
 8008dde:	d00b      	beq.n	8008df8 <_vfiprintf_r+0xc0>
 8008de0:	465b      	mov	r3, fp
 8008de2:	4622      	mov	r2, r4
 8008de4:	4629      	mov	r1, r5
 8008de6:	4630      	mov	r0, r6
 8008de8:	f7ff ff93 	bl	8008d12 <__sfputs_r>
 8008dec:	3001      	adds	r0, #1
 8008dee:	f000 80aa 	beq.w	8008f46 <_vfiprintf_r+0x20e>
 8008df2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008df4:	445a      	add	r2, fp
 8008df6:	9209      	str	r2, [sp, #36]	; 0x24
 8008df8:	f89a 3000 	ldrb.w	r3, [sl]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	f000 80a2 	beq.w	8008f46 <_vfiprintf_r+0x20e>
 8008e02:	2300      	movs	r3, #0
 8008e04:	f04f 32ff 	mov.w	r2, #4294967295
 8008e08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e0c:	f10a 0a01 	add.w	sl, sl, #1
 8008e10:	9304      	str	r3, [sp, #16]
 8008e12:	9307      	str	r3, [sp, #28]
 8008e14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e18:	931a      	str	r3, [sp, #104]	; 0x68
 8008e1a:	4654      	mov	r4, sl
 8008e1c:	2205      	movs	r2, #5
 8008e1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e22:	4858      	ldr	r0, [pc, #352]	; (8008f84 <_vfiprintf_r+0x24c>)
 8008e24:	f7f7 f9e4 	bl	80001f0 <memchr>
 8008e28:	9a04      	ldr	r2, [sp, #16]
 8008e2a:	b9d8      	cbnz	r0, 8008e64 <_vfiprintf_r+0x12c>
 8008e2c:	06d1      	lsls	r1, r2, #27
 8008e2e:	bf44      	itt	mi
 8008e30:	2320      	movmi	r3, #32
 8008e32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e36:	0713      	lsls	r3, r2, #28
 8008e38:	bf44      	itt	mi
 8008e3a:	232b      	movmi	r3, #43	; 0x2b
 8008e3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e40:	f89a 3000 	ldrb.w	r3, [sl]
 8008e44:	2b2a      	cmp	r3, #42	; 0x2a
 8008e46:	d015      	beq.n	8008e74 <_vfiprintf_r+0x13c>
 8008e48:	9a07      	ldr	r2, [sp, #28]
 8008e4a:	4654      	mov	r4, sl
 8008e4c:	2000      	movs	r0, #0
 8008e4e:	f04f 0c0a 	mov.w	ip, #10
 8008e52:	4621      	mov	r1, r4
 8008e54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e58:	3b30      	subs	r3, #48	; 0x30
 8008e5a:	2b09      	cmp	r3, #9
 8008e5c:	d94e      	bls.n	8008efc <_vfiprintf_r+0x1c4>
 8008e5e:	b1b0      	cbz	r0, 8008e8e <_vfiprintf_r+0x156>
 8008e60:	9207      	str	r2, [sp, #28]
 8008e62:	e014      	b.n	8008e8e <_vfiprintf_r+0x156>
 8008e64:	eba0 0308 	sub.w	r3, r0, r8
 8008e68:	fa09 f303 	lsl.w	r3, r9, r3
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	9304      	str	r3, [sp, #16]
 8008e70:	46a2      	mov	sl, r4
 8008e72:	e7d2      	b.n	8008e1a <_vfiprintf_r+0xe2>
 8008e74:	9b03      	ldr	r3, [sp, #12]
 8008e76:	1d19      	adds	r1, r3, #4
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	9103      	str	r1, [sp, #12]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	bfbb      	ittet	lt
 8008e80:	425b      	neglt	r3, r3
 8008e82:	f042 0202 	orrlt.w	r2, r2, #2
 8008e86:	9307      	strge	r3, [sp, #28]
 8008e88:	9307      	strlt	r3, [sp, #28]
 8008e8a:	bfb8      	it	lt
 8008e8c:	9204      	strlt	r2, [sp, #16]
 8008e8e:	7823      	ldrb	r3, [r4, #0]
 8008e90:	2b2e      	cmp	r3, #46	; 0x2e
 8008e92:	d10c      	bne.n	8008eae <_vfiprintf_r+0x176>
 8008e94:	7863      	ldrb	r3, [r4, #1]
 8008e96:	2b2a      	cmp	r3, #42	; 0x2a
 8008e98:	d135      	bne.n	8008f06 <_vfiprintf_r+0x1ce>
 8008e9a:	9b03      	ldr	r3, [sp, #12]
 8008e9c:	1d1a      	adds	r2, r3, #4
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	9203      	str	r2, [sp, #12]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	bfb8      	it	lt
 8008ea6:	f04f 33ff 	movlt.w	r3, #4294967295
 8008eaa:	3402      	adds	r4, #2
 8008eac:	9305      	str	r3, [sp, #20]
 8008eae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008f94 <_vfiprintf_r+0x25c>
 8008eb2:	7821      	ldrb	r1, [r4, #0]
 8008eb4:	2203      	movs	r2, #3
 8008eb6:	4650      	mov	r0, sl
 8008eb8:	f7f7 f99a 	bl	80001f0 <memchr>
 8008ebc:	b140      	cbz	r0, 8008ed0 <_vfiprintf_r+0x198>
 8008ebe:	2340      	movs	r3, #64	; 0x40
 8008ec0:	eba0 000a 	sub.w	r0, r0, sl
 8008ec4:	fa03 f000 	lsl.w	r0, r3, r0
 8008ec8:	9b04      	ldr	r3, [sp, #16]
 8008eca:	4303      	orrs	r3, r0
 8008ecc:	3401      	adds	r4, #1
 8008ece:	9304      	str	r3, [sp, #16]
 8008ed0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ed4:	482c      	ldr	r0, [pc, #176]	; (8008f88 <_vfiprintf_r+0x250>)
 8008ed6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008eda:	2206      	movs	r2, #6
 8008edc:	f7f7 f988 	bl	80001f0 <memchr>
 8008ee0:	2800      	cmp	r0, #0
 8008ee2:	d03f      	beq.n	8008f64 <_vfiprintf_r+0x22c>
 8008ee4:	4b29      	ldr	r3, [pc, #164]	; (8008f8c <_vfiprintf_r+0x254>)
 8008ee6:	bb1b      	cbnz	r3, 8008f30 <_vfiprintf_r+0x1f8>
 8008ee8:	9b03      	ldr	r3, [sp, #12]
 8008eea:	3307      	adds	r3, #7
 8008eec:	f023 0307 	bic.w	r3, r3, #7
 8008ef0:	3308      	adds	r3, #8
 8008ef2:	9303      	str	r3, [sp, #12]
 8008ef4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ef6:	443b      	add	r3, r7
 8008ef8:	9309      	str	r3, [sp, #36]	; 0x24
 8008efa:	e767      	b.n	8008dcc <_vfiprintf_r+0x94>
 8008efc:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f00:	460c      	mov	r4, r1
 8008f02:	2001      	movs	r0, #1
 8008f04:	e7a5      	b.n	8008e52 <_vfiprintf_r+0x11a>
 8008f06:	2300      	movs	r3, #0
 8008f08:	3401      	adds	r4, #1
 8008f0a:	9305      	str	r3, [sp, #20]
 8008f0c:	4619      	mov	r1, r3
 8008f0e:	f04f 0c0a 	mov.w	ip, #10
 8008f12:	4620      	mov	r0, r4
 8008f14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f18:	3a30      	subs	r2, #48	; 0x30
 8008f1a:	2a09      	cmp	r2, #9
 8008f1c:	d903      	bls.n	8008f26 <_vfiprintf_r+0x1ee>
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d0c5      	beq.n	8008eae <_vfiprintf_r+0x176>
 8008f22:	9105      	str	r1, [sp, #20]
 8008f24:	e7c3      	b.n	8008eae <_vfiprintf_r+0x176>
 8008f26:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f2a:	4604      	mov	r4, r0
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	e7f0      	b.n	8008f12 <_vfiprintf_r+0x1da>
 8008f30:	ab03      	add	r3, sp, #12
 8008f32:	9300      	str	r3, [sp, #0]
 8008f34:	462a      	mov	r2, r5
 8008f36:	4b16      	ldr	r3, [pc, #88]	; (8008f90 <_vfiprintf_r+0x258>)
 8008f38:	a904      	add	r1, sp, #16
 8008f3a:	4630      	mov	r0, r6
 8008f3c:	f3af 8000 	nop.w
 8008f40:	4607      	mov	r7, r0
 8008f42:	1c78      	adds	r0, r7, #1
 8008f44:	d1d6      	bne.n	8008ef4 <_vfiprintf_r+0x1bc>
 8008f46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f48:	07d9      	lsls	r1, r3, #31
 8008f4a:	d405      	bmi.n	8008f58 <_vfiprintf_r+0x220>
 8008f4c:	89ab      	ldrh	r3, [r5, #12]
 8008f4e:	059a      	lsls	r2, r3, #22
 8008f50:	d402      	bmi.n	8008f58 <_vfiprintf_r+0x220>
 8008f52:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f54:	f7ff fc23 	bl	800879e <__retarget_lock_release_recursive>
 8008f58:	89ab      	ldrh	r3, [r5, #12]
 8008f5a:	065b      	lsls	r3, r3, #25
 8008f5c:	f53f af12 	bmi.w	8008d84 <_vfiprintf_r+0x4c>
 8008f60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f62:	e711      	b.n	8008d88 <_vfiprintf_r+0x50>
 8008f64:	ab03      	add	r3, sp, #12
 8008f66:	9300      	str	r3, [sp, #0]
 8008f68:	462a      	mov	r2, r5
 8008f6a:	4b09      	ldr	r3, [pc, #36]	; (8008f90 <_vfiprintf_r+0x258>)
 8008f6c:	a904      	add	r1, sp, #16
 8008f6e:	4630      	mov	r0, r6
 8008f70:	f000 f880 	bl	8009074 <_printf_i>
 8008f74:	e7e4      	b.n	8008f40 <_vfiprintf_r+0x208>
 8008f76:	bf00      	nop
 8008f78:	08009778 	.word	0x08009778
 8008f7c:	08009798 	.word	0x08009798
 8008f80:	08009758 	.word	0x08009758
 8008f84:	080097b8 	.word	0x080097b8
 8008f88:	080097c2 	.word	0x080097c2
 8008f8c:	00000000 	.word	0x00000000
 8008f90:	08008d13 	.word	0x08008d13
 8008f94:	080097be 	.word	0x080097be

08008f98 <_printf_common>:
 8008f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f9c:	4616      	mov	r6, r2
 8008f9e:	4699      	mov	r9, r3
 8008fa0:	688a      	ldr	r2, [r1, #8]
 8008fa2:	690b      	ldr	r3, [r1, #16]
 8008fa4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	bfb8      	it	lt
 8008fac:	4613      	movlt	r3, r2
 8008fae:	6033      	str	r3, [r6, #0]
 8008fb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008fb4:	4607      	mov	r7, r0
 8008fb6:	460c      	mov	r4, r1
 8008fb8:	b10a      	cbz	r2, 8008fbe <_printf_common+0x26>
 8008fba:	3301      	adds	r3, #1
 8008fbc:	6033      	str	r3, [r6, #0]
 8008fbe:	6823      	ldr	r3, [r4, #0]
 8008fc0:	0699      	lsls	r1, r3, #26
 8008fc2:	bf42      	ittt	mi
 8008fc4:	6833      	ldrmi	r3, [r6, #0]
 8008fc6:	3302      	addmi	r3, #2
 8008fc8:	6033      	strmi	r3, [r6, #0]
 8008fca:	6825      	ldr	r5, [r4, #0]
 8008fcc:	f015 0506 	ands.w	r5, r5, #6
 8008fd0:	d106      	bne.n	8008fe0 <_printf_common+0x48>
 8008fd2:	f104 0a19 	add.w	sl, r4, #25
 8008fd6:	68e3      	ldr	r3, [r4, #12]
 8008fd8:	6832      	ldr	r2, [r6, #0]
 8008fda:	1a9b      	subs	r3, r3, r2
 8008fdc:	42ab      	cmp	r3, r5
 8008fde:	dc26      	bgt.n	800902e <_printf_common+0x96>
 8008fe0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008fe4:	1e13      	subs	r3, r2, #0
 8008fe6:	6822      	ldr	r2, [r4, #0]
 8008fe8:	bf18      	it	ne
 8008fea:	2301      	movne	r3, #1
 8008fec:	0692      	lsls	r2, r2, #26
 8008fee:	d42b      	bmi.n	8009048 <_printf_common+0xb0>
 8008ff0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ff4:	4649      	mov	r1, r9
 8008ff6:	4638      	mov	r0, r7
 8008ff8:	47c0      	blx	r8
 8008ffa:	3001      	adds	r0, #1
 8008ffc:	d01e      	beq.n	800903c <_printf_common+0xa4>
 8008ffe:	6823      	ldr	r3, [r4, #0]
 8009000:	68e5      	ldr	r5, [r4, #12]
 8009002:	6832      	ldr	r2, [r6, #0]
 8009004:	f003 0306 	and.w	r3, r3, #6
 8009008:	2b04      	cmp	r3, #4
 800900a:	bf08      	it	eq
 800900c:	1aad      	subeq	r5, r5, r2
 800900e:	68a3      	ldr	r3, [r4, #8]
 8009010:	6922      	ldr	r2, [r4, #16]
 8009012:	bf0c      	ite	eq
 8009014:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009018:	2500      	movne	r5, #0
 800901a:	4293      	cmp	r3, r2
 800901c:	bfc4      	itt	gt
 800901e:	1a9b      	subgt	r3, r3, r2
 8009020:	18ed      	addgt	r5, r5, r3
 8009022:	2600      	movs	r6, #0
 8009024:	341a      	adds	r4, #26
 8009026:	42b5      	cmp	r5, r6
 8009028:	d11a      	bne.n	8009060 <_printf_common+0xc8>
 800902a:	2000      	movs	r0, #0
 800902c:	e008      	b.n	8009040 <_printf_common+0xa8>
 800902e:	2301      	movs	r3, #1
 8009030:	4652      	mov	r2, sl
 8009032:	4649      	mov	r1, r9
 8009034:	4638      	mov	r0, r7
 8009036:	47c0      	blx	r8
 8009038:	3001      	adds	r0, #1
 800903a:	d103      	bne.n	8009044 <_printf_common+0xac>
 800903c:	f04f 30ff 	mov.w	r0, #4294967295
 8009040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009044:	3501      	adds	r5, #1
 8009046:	e7c6      	b.n	8008fd6 <_printf_common+0x3e>
 8009048:	18e1      	adds	r1, r4, r3
 800904a:	1c5a      	adds	r2, r3, #1
 800904c:	2030      	movs	r0, #48	; 0x30
 800904e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009052:	4422      	add	r2, r4
 8009054:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009058:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800905c:	3302      	adds	r3, #2
 800905e:	e7c7      	b.n	8008ff0 <_printf_common+0x58>
 8009060:	2301      	movs	r3, #1
 8009062:	4622      	mov	r2, r4
 8009064:	4649      	mov	r1, r9
 8009066:	4638      	mov	r0, r7
 8009068:	47c0      	blx	r8
 800906a:	3001      	adds	r0, #1
 800906c:	d0e6      	beq.n	800903c <_printf_common+0xa4>
 800906e:	3601      	adds	r6, #1
 8009070:	e7d9      	b.n	8009026 <_printf_common+0x8e>
	...

08009074 <_printf_i>:
 8009074:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009078:	7e0f      	ldrb	r7, [r1, #24]
 800907a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800907c:	2f78      	cmp	r7, #120	; 0x78
 800907e:	4691      	mov	r9, r2
 8009080:	4680      	mov	r8, r0
 8009082:	460c      	mov	r4, r1
 8009084:	469a      	mov	sl, r3
 8009086:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800908a:	d807      	bhi.n	800909c <_printf_i+0x28>
 800908c:	2f62      	cmp	r7, #98	; 0x62
 800908e:	d80a      	bhi.n	80090a6 <_printf_i+0x32>
 8009090:	2f00      	cmp	r7, #0
 8009092:	f000 80d8 	beq.w	8009246 <_printf_i+0x1d2>
 8009096:	2f58      	cmp	r7, #88	; 0x58
 8009098:	f000 80a3 	beq.w	80091e2 <_printf_i+0x16e>
 800909c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80090a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80090a4:	e03a      	b.n	800911c <_printf_i+0xa8>
 80090a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80090aa:	2b15      	cmp	r3, #21
 80090ac:	d8f6      	bhi.n	800909c <_printf_i+0x28>
 80090ae:	a101      	add	r1, pc, #4	; (adr r1, 80090b4 <_printf_i+0x40>)
 80090b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80090b4:	0800910d 	.word	0x0800910d
 80090b8:	08009121 	.word	0x08009121
 80090bc:	0800909d 	.word	0x0800909d
 80090c0:	0800909d 	.word	0x0800909d
 80090c4:	0800909d 	.word	0x0800909d
 80090c8:	0800909d 	.word	0x0800909d
 80090cc:	08009121 	.word	0x08009121
 80090d0:	0800909d 	.word	0x0800909d
 80090d4:	0800909d 	.word	0x0800909d
 80090d8:	0800909d 	.word	0x0800909d
 80090dc:	0800909d 	.word	0x0800909d
 80090e0:	0800922d 	.word	0x0800922d
 80090e4:	08009151 	.word	0x08009151
 80090e8:	0800920f 	.word	0x0800920f
 80090ec:	0800909d 	.word	0x0800909d
 80090f0:	0800909d 	.word	0x0800909d
 80090f4:	0800924f 	.word	0x0800924f
 80090f8:	0800909d 	.word	0x0800909d
 80090fc:	08009151 	.word	0x08009151
 8009100:	0800909d 	.word	0x0800909d
 8009104:	0800909d 	.word	0x0800909d
 8009108:	08009217 	.word	0x08009217
 800910c:	682b      	ldr	r3, [r5, #0]
 800910e:	1d1a      	adds	r2, r3, #4
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	602a      	str	r2, [r5, #0]
 8009114:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009118:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800911c:	2301      	movs	r3, #1
 800911e:	e0a3      	b.n	8009268 <_printf_i+0x1f4>
 8009120:	6820      	ldr	r0, [r4, #0]
 8009122:	6829      	ldr	r1, [r5, #0]
 8009124:	0606      	lsls	r6, r0, #24
 8009126:	f101 0304 	add.w	r3, r1, #4
 800912a:	d50a      	bpl.n	8009142 <_printf_i+0xce>
 800912c:	680e      	ldr	r6, [r1, #0]
 800912e:	602b      	str	r3, [r5, #0]
 8009130:	2e00      	cmp	r6, #0
 8009132:	da03      	bge.n	800913c <_printf_i+0xc8>
 8009134:	232d      	movs	r3, #45	; 0x2d
 8009136:	4276      	negs	r6, r6
 8009138:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800913c:	485e      	ldr	r0, [pc, #376]	; (80092b8 <_printf_i+0x244>)
 800913e:	230a      	movs	r3, #10
 8009140:	e019      	b.n	8009176 <_printf_i+0x102>
 8009142:	680e      	ldr	r6, [r1, #0]
 8009144:	602b      	str	r3, [r5, #0]
 8009146:	f010 0f40 	tst.w	r0, #64	; 0x40
 800914a:	bf18      	it	ne
 800914c:	b236      	sxthne	r6, r6
 800914e:	e7ef      	b.n	8009130 <_printf_i+0xbc>
 8009150:	682b      	ldr	r3, [r5, #0]
 8009152:	6820      	ldr	r0, [r4, #0]
 8009154:	1d19      	adds	r1, r3, #4
 8009156:	6029      	str	r1, [r5, #0]
 8009158:	0601      	lsls	r1, r0, #24
 800915a:	d501      	bpl.n	8009160 <_printf_i+0xec>
 800915c:	681e      	ldr	r6, [r3, #0]
 800915e:	e002      	b.n	8009166 <_printf_i+0xf2>
 8009160:	0646      	lsls	r6, r0, #25
 8009162:	d5fb      	bpl.n	800915c <_printf_i+0xe8>
 8009164:	881e      	ldrh	r6, [r3, #0]
 8009166:	4854      	ldr	r0, [pc, #336]	; (80092b8 <_printf_i+0x244>)
 8009168:	2f6f      	cmp	r7, #111	; 0x6f
 800916a:	bf0c      	ite	eq
 800916c:	2308      	moveq	r3, #8
 800916e:	230a      	movne	r3, #10
 8009170:	2100      	movs	r1, #0
 8009172:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009176:	6865      	ldr	r5, [r4, #4]
 8009178:	60a5      	str	r5, [r4, #8]
 800917a:	2d00      	cmp	r5, #0
 800917c:	bfa2      	ittt	ge
 800917e:	6821      	ldrge	r1, [r4, #0]
 8009180:	f021 0104 	bicge.w	r1, r1, #4
 8009184:	6021      	strge	r1, [r4, #0]
 8009186:	b90e      	cbnz	r6, 800918c <_printf_i+0x118>
 8009188:	2d00      	cmp	r5, #0
 800918a:	d04d      	beq.n	8009228 <_printf_i+0x1b4>
 800918c:	4615      	mov	r5, r2
 800918e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009192:	fb03 6711 	mls	r7, r3, r1, r6
 8009196:	5dc7      	ldrb	r7, [r0, r7]
 8009198:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800919c:	4637      	mov	r7, r6
 800919e:	42bb      	cmp	r3, r7
 80091a0:	460e      	mov	r6, r1
 80091a2:	d9f4      	bls.n	800918e <_printf_i+0x11a>
 80091a4:	2b08      	cmp	r3, #8
 80091a6:	d10b      	bne.n	80091c0 <_printf_i+0x14c>
 80091a8:	6823      	ldr	r3, [r4, #0]
 80091aa:	07de      	lsls	r6, r3, #31
 80091ac:	d508      	bpl.n	80091c0 <_printf_i+0x14c>
 80091ae:	6923      	ldr	r3, [r4, #16]
 80091b0:	6861      	ldr	r1, [r4, #4]
 80091b2:	4299      	cmp	r1, r3
 80091b4:	bfde      	ittt	le
 80091b6:	2330      	movle	r3, #48	; 0x30
 80091b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80091bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80091c0:	1b52      	subs	r2, r2, r5
 80091c2:	6122      	str	r2, [r4, #16]
 80091c4:	f8cd a000 	str.w	sl, [sp]
 80091c8:	464b      	mov	r3, r9
 80091ca:	aa03      	add	r2, sp, #12
 80091cc:	4621      	mov	r1, r4
 80091ce:	4640      	mov	r0, r8
 80091d0:	f7ff fee2 	bl	8008f98 <_printf_common>
 80091d4:	3001      	adds	r0, #1
 80091d6:	d14c      	bne.n	8009272 <_printf_i+0x1fe>
 80091d8:	f04f 30ff 	mov.w	r0, #4294967295
 80091dc:	b004      	add	sp, #16
 80091de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091e2:	4835      	ldr	r0, [pc, #212]	; (80092b8 <_printf_i+0x244>)
 80091e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80091e8:	6829      	ldr	r1, [r5, #0]
 80091ea:	6823      	ldr	r3, [r4, #0]
 80091ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80091f0:	6029      	str	r1, [r5, #0]
 80091f2:	061d      	lsls	r5, r3, #24
 80091f4:	d514      	bpl.n	8009220 <_printf_i+0x1ac>
 80091f6:	07df      	lsls	r7, r3, #31
 80091f8:	bf44      	itt	mi
 80091fa:	f043 0320 	orrmi.w	r3, r3, #32
 80091fe:	6023      	strmi	r3, [r4, #0]
 8009200:	b91e      	cbnz	r6, 800920a <_printf_i+0x196>
 8009202:	6823      	ldr	r3, [r4, #0]
 8009204:	f023 0320 	bic.w	r3, r3, #32
 8009208:	6023      	str	r3, [r4, #0]
 800920a:	2310      	movs	r3, #16
 800920c:	e7b0      	b.n	8009170 <_printf_i+0xfc>
 800920e:	6823      	ldr	r3, [r4, #0]
 8009210:	f043 0320 	orr.w	r3, r3, #32
 8009214:	6023      	str	r3, [r4, #0]
 8009216:	2378      	movs	r3, #120	; 0x78
 8009218:	4828      	ldr	r0, [pc, #160]	; (80092bc <_printf_i+0x248>)
 800921a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800921e:	e7e3      	b.n	80091e8 <_printf_i+0x174>
 8009220:	0659      	lsls	r1, r3, #25
 8009222:	bf48      	it	mi
 8009224:	b2b6      	uxthmi	r6, r6
 8009226:	e7e6      	b.n	80091f6 <_printf_i+0x182>
 8009228:	4615      	mov	r5, r2
 800922a:	e7bb      	b.n	80091a4 <_printf_i+0x130>
 800922c:	682b      	ldr	r3, [r5, #0]
 800922e:	6826      	ldr	r6, [r4, #0]
 8009230:	6961      	ldr	r1, [r4, #20]
 8009232:	1d18      	adds	r0, r3, #4
 8009234:	6028      	str	r0, [r5, #0]
 8009236:	0635      	lsls	r5, r6, #24
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	d501      	bpl.n	8009240 <_printf_i+0x1cc>
 800923c:	6019      	str	r1, [r3, #0]
 800923e:	e002      	b.n	8009246 <_printf_i+0x1d2>
 8009240:	0670      	lsls	r0, r6, #25
 8009242:	d5fb      	bpl.n	800923c <_printf_i+0x1c8>
 8009244:	8019      	strh	r1, [r3, #0]
 8009246:	2300      	movs	r3, #0
 8009248:	6123      	str	r3, [r4, #16]
 800924a:	4615      	mov	r5, r2
 800924c:	e7ba      	b.n	80091c4 <_printf_i+0x150>
 800924e:	682b      	ldr	r3, [r5, #0]
 8009250:	1d1a      	adds	r2, r3, #4
 8009252:	602a      	str	r2, [r5, #0]
 8009254:	681d      	ldr	r5, [r3, #0]
 8009256:	6862      	ldr	r2, [r4, #4]
 8009258:	2100      	movs	r1, #0
 800925a:	4628      	mov	r0, r5
 800925c:	f7f6 ffc8 	bl	80001f0 <memchr>
 8009260:	b108      	cbz	r0, 8009266 <_printf_i+0x1f2>
 8009262:	1b40      	subs	r0, r0, r5
 8009264:	6060      	str	r0, [r4, #4]
 8009266:	6863      	ldr	r3, [r4, #4]
 8009268:	6123      	str	r3, [r4, #16]
 800926a:	2300      	movs	r3, #0
 800926c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009270:	e7a8      	b.n	80091c4 <_printf_i+0x150>
 8009272:	6923      	ldr	r3, [r4, #16]
 8009274:	462a      	mov	r2, r5
 8009276:	4649      	mov	r1, r9
 8009278:	4640      	mov	r0, r8
 800927a:	47d0      	blx	sl
 800927c:	3001      	adds	r0, #1
 800927e:	d0ab      	beq.n	80091d8 <_printf_i+0x164>
 8009280:	6823      	ldr	r3, [r4, #0]
 8009282:	079b      	lsls	r3, r3, #30
 8009284:	d413      	bmi.n	80092ae <_printf_i+0x23a>
 8009286:	68e0      	ldr	r0, [r4, #12]
 8009288:	9b03      	ldr	r3, [sp, #12]
 800928a:	4298      	cmp	r0, r3
 800928c:	bfb8      	it	lt
 800928e:	4618      	movlt	r0, r3
 8009290:	e7a4      	b.n	80091dc <_printf_i+0x168>
 8009292:	2301      	movs	r3, #1
 8009294:	4632      	mov	r2, r6
 8009296:	4649      	mov	r1, r9
 8009298:	4640      	mov	r0, r8
 800929a:	47d0      	blx	sl
 800929c:	3001      	adds	r0, #1
 800929e:	d09b      	beq.n	80091d8 <_printf_i+0x164>
 80092a0:	3501      	adds	r5, #1
 80092a2:	68e3      	ldr	r3, [r4, #12]
 80092a4:	9903      	ldr	r1, [sp, #12]
 80092a6:	1a5b      	subs	r3, r3, r1
 80092a8:	42ab      	cmp	r3, r5
 80092aa:	dcf2      	bgt.n	8009292 <_printf_i+0x21e>
 80092ac:	e7eb      	b.n	8009286 <_printf_i+0x212>
 80092ae:	2500      	movs	r5, #0
 80092b0:	f104 0619 	add.w	r6, r4, #25
 80092b4:	e7f5      	b.n	80092a2 <_printf_i+0x22e>
 80092b6:	bf00      	nop
 80092b8:	080097c9 	.word	0x080097c9
 80092bc:	080097da 	.word	0x080097da

080092c0 <_sbrk_r>:
 80092c0:	b538      	push	{r3, r4, r5, lr}
 80092c2:	4d06      	ldr	r5, [pc, #24]	; (80092dc <_sbrk_r+0x1c>)
 80092c4:	2300      	movs	r3, #0
 80092c6:	4604      	mov	r4, r0
 80092c8:	4608      	mov	r0, r1
 80092ca:	602b      	str	r3, [r5, #0]
 80092cc:	f7f8 fc8e 	bl	8001bec <_sbrk>
 80092d0:	1c43      	adds	r3, r0, #1
 80092d2:	d102      	bne.n	80092da <_sbrk_r+0x1a>
 80092d4:	682b      	ldr	r3, [r5, #0]
 80092d6:	b103      	cbz	r3, 80092da <_sbrk_r+0x1a>
 80092d8:	6023      	str	r3, [r4, #0]
 80092da:	bd38      	pop	{r3, r4, r5, pc}
 80092dc:	20000e34 	.word	0x20000e34

080092e0 <__sread>:
 80092e0:	b510      	push	{r4, lr}
 80092e2:	460c      	mov	r4, r1
 80092e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092e8:	f000 f8f8 	bl	80094dc <_read_r>
 80092ec:	2800      	cmp	r0, #0
 80092ee:	bfab      	itete	ge
 80092f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80092f2:	89a3      	ldrhlt	r3, [r4, #12]
 80092f4:	181b      	addge	r3, r3, r0
 80092f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80092fa:	bfac      	ite	ge
 80092fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80092fe:	81a3      	strhlt	r3, [r4, #12]
 8009300:	bd10      	pop	{r4, pc}

08009302 <__swrite>:
 8009302:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009306:	461f      	mov	r7, r3
 8009308:	898b      	ldrh	r3, [r1, #12]
 800930a:	05db      	lsls	r3, r3, #23
 800930c:	4605      	mov	r5, r0
 800930e:	460c      	mov	r4, r1
 8009310:	4616      	mov	r6, r2
 8009312:	d505      	bpl.n	8009320 <__swrite+0x1e>
 8009314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009318:	2302      	movs	r3, #2
 800931a:	2200      	movs	r2, #0
 800931c:	f000 f868 	bl	80093f0 <_lseek_r>
 8009320:	89a3      	ldrh	r3, [r4, #12]
 8009322:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009326:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800932a:	81a3      	strh	r3, [r4, #12]
 800932c:	4632      	mov	r2, r6
 800932e:	463b      	mov	r3, r7
 8009330:	4628      	mov	r0, r5
 8009332:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009336:	f000 b817 	b.w	8009368 <_write_r>

0800933a <__sseek>:
 800933a:	b510      	push	{r4, lr}
 800933c:	460c      	mov	r4, r1
 800933e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009342:	f000 f855 	bl	80093f0 <_lseek_r>
 8009346:	1c43      	adds	r3, r0, #1
 8009348:	89a3      	ldrh	r3, [r4, #12]
 800934a:	bf15      	itete	ne
 800934c:	6560      	strne	r0, [r4, #84]	; 0x54
 800934e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009352:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009356:	81a3      	strheq	r3, [r4, #12]
 8009358:	bf18      	it	ne
 800935a:	81a3      	strhne	r3, [r4, #12]
 800935c:	bd10      	pop	{r4, pc}

0800935e <__sclose>:
 800935e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009362:	f000 b813 	b.w	800938c <_close_r>
	...

08009368 <_write_r>:
 8009368:	b538      	push	{r3, r4, r5, lr}
 800936a:	4d07      	ldr	r5, [pc, #28]	; (8009388 <_write_r+0x20>)
 800936c:	4604      	mov	r4, r0
 800936e:	4608      	mov	r0, r1
 8009370:	4611      	mov	r1, r2
 8009372:	2200      	movs	r2, #0
 8009374:	602a      	str	r2, [r5, #0]
 8009376:	461a      	mov	r2, r3
 8009378:	f7f8 fbe7 	bl	8001b4a <_write>
 800937c:	1c43      	adds	r3, r0, #1
 800937e:	d102      	bne.n	8009386 <_write_r+0x1e>
 8009380:	682b      	ldr	r3, [r5, #0]
 8009382:	b103      	cbz	r3, 8009386 <_write_r+0x1e>
 8009384:	6023      	str	r3, [r4, #0]
 8009386:	bd38      	pop	{r3, r4, r5, pc}
 8009388:	20000e34 	.word	0x20000e34

0800938c <_close_r>:
 800938c:	b538      	push	{r3, r4, r5, lr}
 800938e:	4d06      	ldr	r5, [pc, #24]	; (80093a8 <_close_r+0x1c>)
 8009390:	2300      	movs	r3, #0
 8009392:	4604      	mov	r4, r0
 8009394:	4608      	mov	r0, r1
 8009396:	602b      	str	r3, [r5, #0]
 8009398:	f7f8 fbf3 	bl	8001b82 <_close>
 800939c:	1c43      	adds	r3, r0, #1
 800939e:	d102      	bne.n	80093a6 <_close_r+0x1a>
 80093a0:	682b      	ldr	r3, [r5, #0]
 80093a2:	b103      	cbz	r3, 80093a6 <_close_r+0x1a>
 80093a4:	6023      	str	r3, [r4, #0]
 80093a6:	bd38      	pop	{r3, r4, r5, pc}
 80093a8:	20000e34 	.word	0x20000e34

080093ac <_fstat_r>:
 80093ac:	b538      	push	{r3, r4, r5, lr}
 80093ae:	4d07      	ldr	r5, [pc, #28]	; (80093cc <_fstat_r+0x20>)
 80093b0:	2300      	movs	r3, #0
 80093b2:	4604      	mov	r4, r0
 80093b4:	4608      	mov	r0, r1
 80093b6:	4611      	mov	r1, r2
 80093b8:	602b      	str	r3, [r5, #0]
 80093ba:	f7f8 fbee 	bl	8001b9a <_fstat>
 80093be:	1c43      	adds	r3, r0, #1
 80093c0:	d102      	bne.n	80093c8 <_fstat_r+0x1c>
 80093c2:	682b      	ldr	r3, [r5, #0]
 80093c4:	b103      	cbz	r3, 80093c8 <_fstat_r+0x1c>
 80093c6:	6023      	str	r3, [r4, #0]
 80093c8:	bd38      	pop	{r3, r4, r5, pc}
 80093ca:	bf00      	nop
 80093cc:	20000e34 	.word	0x20000e34

080093d0 <_isatty_r>:
 80093d0:	b538      	push	{r3, r4, r5, lr}
 80093d2:	4d06      	ldr	r5, [pc, #24]	; (80093ec <_isatty_r+0x1c>)
 80093d4:	2300      	movs	r3, #0
 80093d6:	4604      	mov	r4, r0
 80093d8:	4608      	mov	r0, r1
 80093da:	602b      	str	r3, [r5, #0]
 80093dc:	f7f8 fbed 	bl	8001bba <_isatty>
 80093e0:	1c43      	adds	r3, r0, #1
 80093e2:	d102      	bne.n	80093ea <_isatty_r+0x1a>
 80093e4:	682b      	ldr	r3, [r5, #0]
 80093e6:	b103      	cbz	r3, 80093ea <_isatty_r+0x1a>
 80093e8:	6023      	str	r3, [r4, #0]
 80093ea:	bd38      	pop	{r3, r4, r5, pc}
 80093ec:	20000e34 	.word	0x20000e34

080093f0 <_lseek_r>:
 80093f0:	b538      	push	{r3, r4, r5, lr}
 80093f2:	4d07      	ldr	r5, [pc, #28]	; (8009410 <_lseek_r+0x20>)
 80093f4:	4604      	mov	r4, r0
 80093f6:	4608      	mov	r0, r1
 80093f8:	4611      	mov	r1, r2
 80093fa:	2200      	movs	r2, #0
 80093fc:	602a      	str	r2, [r5, #0]
 80093fe:	461a      	mov	r2, r3
 8009400:	f7f8 fbe6 	bl	8001bd0 <_lseek>
 8009404:	1c43      	adds	r3, r0, #1
 8009406:	d102      	bne.n	800940e <_lseek_r+0x1e>
 8009408:	682b      	ldr	r3, [r5, #0]
 800940a:	b103      	cbz	r3, 800940e <_lseek_r+0x1e>
 800940c:	6023      	str	r3, [r4, #0]
 800940e:	bd38      	pop	{r3, r4, r5, pc}
 8009410:	20000e34 	.word	0x20000e34

08009414 <memcpy>:
 8009414:	440a      	add	r2, r1
 8009416:	4291      	cmp	r1, r2
 8009418:	f100 33ff 	add.w	r3, r0, #4294967295
 800941c:	d100      	bne.n	8009420 <memcpy+0xc>
 800941e:	4770      	bx	lr
 8009420:	b510      	push	{r4, lr}
 8009422:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009426:	f803 4f01 	strb.w	r4, [r3, #1]!
 800942a:	4291      	cmp	r1, r2
 800942c:	d1f9      	bne.n	8009422 <memcpy+0xe>
 800942e:	bd10      	pop	{r4, pc}

08009430 <memmove>:
 8009430:	4288      	cmp	r0, r1
 8009432:	b510      	push	{r4, lr}
 8009434:	eb01 0402 	add.w	r4, r1, r2
 8009438:	d902      	bls.n	8009440 <memmove+0x10>
 800943a:	4284      	cmp	r4, r0
 800943c:	4623      	mov	r3, r4
 800943e:	d807      	bhi.n	8009450 <memmove+0x20>
 8009440:	1e43      	subs	r3, r0, #1
 8009442:	42a1      	cmp	r1, r4
 8009444:	d008      	beq.n	8009458 <memmove+0x28>
 8009446:	f811 2b01 	ldrb.w	r2, [r1], #1
 800944a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800944e:	e7f8      	b.n	8009442 <memmove+0x12>
 8009450:	4402      	add	r2, r0
 8009452:	4601      	mov	r1, r0
 8009454:	428a      	cmp	r2, r1
 8009456:	d100      	bne.n	800945a <memmove+0x2a>
 8009458:	bd10      	pop	{r4, pc}
 800945a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800945e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009462:	e7f7      	b.n	8009454 <memmove+0x24>

08009464 <__malloc_lock>:
 8009464:	4801      	ldr	r0, [pc, #4]	; (800946c <__malloc_lock+0x8>)
 8009466:	f7ff b999 	b.w	800879c <__retarget_lock_acquire_recursive>
 800946a:	bf00      	nop
 800946c:	20000e28 	.word	0x20000e28

08009470 <__malloc_unlock>:
 8009470:	4801      	ldr	r0, [pc, #4]	; (8009478 <__malloc_unlock+0x8>)
 8009472:	f7ff b994 	b.w	800879e <__retarget_lock_release_recursive>
 8009476:	bf00      	nop
 8009478:	20000e28 	.word	0x20000e28

0800947c <_realloc_r>:
 800947c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009480:	4680      	mov	r8, r0
 8009482:	4614      	mov	r4, r2
 8009484:	460e      	mov	r6, r1
 8009486:	b921      	cbnz	r1, 8009492 <_realloc_r+0x16>
 8009488:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800948c:	4611      	mov	r1, r2
 800948e:	f7ff ba59 	b.w	8008944 <_malloc_r>
 8009492:	b92a      	cbnz	r2, 80094a0 <_realloc_r+0x24>
 8009494:	f7ff f9ea 	bl	800886c <_free_r>
 8009498:	4625      	mov	r5, r4
 800949a:	4628      	mov	r0, r5
 800949c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094a0:	f000 f82e 	bl	8009500 <_malloc_usable_size_r>
 80094a4:	4284      	cmp	r4, r0
 80094a6:	4607      	mov	r7, r0
 80094a8:	d802      	bhi.n	80094b0 <_realloc_r+0x34>
 80094aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80094ae:	d812      	bhi.n	80094d6 <_realloc_r+0x5a>
 80094b0:	4621      	mov	r1, r4
 80094b2:	4640      	mov	r0, r8
 80094b4:	f7ff fa46 	bl	8008944 <_malloc_r>
 80094b8:	4605      	mov	r5, r0
 80094ba:	2800      	cmp	r0, #0
 80094bc:	d0ed      	beq.n	800949a <_realloc_r+0x1e>
 80094be:	42bc      	cmp	r4, r7
 80094c0:	4622      	mov	r2, r4
 80094c2:	4631      	mov	r1, r6
 80094c4:	bf28      	it	cs
 80094c6:	463a      	movcs	r2, r7
 80094c8:	f7ff ffa4 	bl	8009414 <memcpy>
 80094cc:	4631      	mov	r1, r6
 80094ce:	4640      	mov	r0, r8
 80094d0:	f7ff f9cc 	bl	800886c <_free_r>
 80094d4:	e7e1      	b.n	800949a <_realloc_r+0x1e>
 80094d6:	4635      	mov	r5, r6
 80094d8:	e7df      	b.n	800949a <_realloc_r+0x1e>
	...

080094dc <_read_r>:
 80094dc:	b538      	push	{r3, r4, r5, lr}
 80094de:	4d07      	ldr	r5, [pc, #28]	; (80094fc <_read_r+0x20>)
 80094e0:	4604      	mov	r4, r0
 80094e2:	4608      	mov	r0, r1
 80094e4:	4611      	mov	r1, r2
 80094e6:	2200      	movs	r2, #0
 80094e8:	602a      	str	r2, [r5, #0]
 80094ea:	461a      	mov	r2, r3
 80094ec:	f7f8 fb10 	bl	8001b10 <_read>
 80094f0:	1c43      	adds	r3, r0, #1
 80094f2:	d102      	bne.n	80094fa <_read_r+0x1e>
 80094f4:	682b      	ldr	r3, [r5, #0]
 80094f6:	b103      	cbz	r3, 80094fa <_read_r+0x1e>
 80094f8:	6023      	str	r3, [r4, #0]
 80094fa:	bd38      	pop	{r3, r4, r5, pc}
 80094fc:	20000e34 	.word	0x20000e34

08009500 <_malloc_usable_size_r>:
 8009500:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009504:	1f18      	subs	r0, r3, #4
 8009506:	2b00      	cmp	r3, #0
 8009508:	bfbc      	itt	lt
 800950a:	580b      	ldrlt	r3, [r1, r0]
 800950c:	18c0      	addlt	r0, r0, r3
 800950e:	4770      	bx	lr

08009510 <_init>:
 8009510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009512:	bf00      	nop
 8009514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009516:	bc08      	pop	{r3}
 8009518:	469e      	mov	lr, r3
 800951a:	4770      	bx	lr

0800951c <_fini>:
 800951c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800951e:	bf00      	nop
 8009520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009522:	bc08      	pop	{r3}
 8009524:	469e      	mov	lr, r3
 8009526:	4770      	bx	lr
