
kenGwon_WashingMachine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cb8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  08009e68  08009e68  00019e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0b0  0800a0b0  00020184  2**0
                  CONTENTS
  4 .ARM          00000008  0800a0b0  0800a0b0  0001a0b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a0b8  0800a0b8  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0b8  0800a0b8  0001a0b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a0bc  0800a0bc  0001a0bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  0800a0c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020184  2**0
                  CONTENTS
 10 .bss          00000e48  20000184  20000184  00020184  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000fcc  20000fcc  00020184  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020164  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004322  00000000  00000000  00040318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019a8  00000000  00000000  00044640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000017d8  00000000  00000000  00045fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002adb9  00000000  00000000  000477c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022b5b  00000000  00000000  00072579  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee105  00000000  00000000  000950d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001831d9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007344  00000000  00000000  0018322c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000184 	.word	0x20000184
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009e50 	.word	0x08009e50

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000188 	.word	0x20000188
 80001ec:	08009e50 	.word	0x08009e50

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <DHT11_Init>:

/*
 * desc: DHT11은 active-low로 작동하기 때문에 초기화 과정에서 전위를 1로 셋팅해준다.
 */
void DHT11_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_DATA_RIN, GPIO_PIN_SET);
 8000598:	2201      	movs	r2, #1
 800059a:	2101      	movs	r1, #1
 800059c:	4804      	ldr	r0, [pc, #16]	; (80005b0 <DHT11_Init+0x1c>)
 800059e:	f003 fbb9 	bl	8003d14 <HAL_GPIO_WritePin>
	HAL_Delay(3000); // 초기화 할때는 딱 한번만 일어나기 때문에 hal_delay()를 줘도 상관 없다.
 80005a2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80005a6:	f002 fd01 	bl	8002fac <HAL_Delay>
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40020000 	.word	0x40020000

080005b4 <LCD_Command>:
	}
#endif
}

void LCD_Command(uint8_t command)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af02      	add	r7, sp, #8
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = command & 0xf0;
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	f023 030f 	bic.w	r3, r3, #15
 80005c4:	73fb      	strb	r3, [r7, #15]
	low_nibble = (command<<4) & 0xf0;
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	011b      	lsls	r3, r3, #4
 80005ca:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 80005cc:	7bfb      	ldrb	r3, [r7, #15]
 80005ce:	f043 030c 	orr.w	r3, r3, #12
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 80005d6:	7bfb      	ldrb	r3, [r7, #15]
 80005d8:	f043 0308 	orr.w	r3, r3, #8
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 80005e0:	7bbb      	ldrb	r3, [r7, #14]
 80005e2:	f043 030c 	orr.w	r3, r3, #12
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 80005ea:	7bbb      	ldrb	r3, [r7, #14]
 80005ec:	f043 0308 	orr.w	r3, r3, #8
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 80005f4:	bf00      	nop
 80005f6:	f107 0208 	add.w	r2, r7, #8
 80005fa:	2364      	movs	r3, #100	; 0x64
 80005fc:	9300      	str	r3, [sp, #0]
 80005fe:	2304      	movs	r3, #4
 8000600:	214e      	movs	r1, #78	; 0x4e
 8000602:	4805      	ldr	r0, [pc, #20]	; (8000618 <LCD_Command+0x64>)
 8000604:	f003 fce4 	bl	8003fd0 <HAL_I2C_Master_Transmit>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d1f3      	bne.n	80005f6 <LCD_Command+0x42>
			i2c_buffer, 4, 100)!=HAL_OK){
		//HAL_Delay(1);
	}
	return;
 800060e:	bf00      	nop
}
 8000610:	3710      	adds	r7, #16
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	200003e4 	.word	0x200003e4

0800061c <LCD_Data>:

// 1 byte write... 딱 한개의 캐릭터만 찍는 것이다.
void LCD_Data(uint8_t data)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af02      	add	r7, sp, #8
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = data & 0xf0;
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	f023 030f 	bic.w	r3, r3, #15
 800062c:	73fb      	strb	r3, [r7, #15]
	low_nibble = (data<<4) & 0xf0;
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	011b      	lsls	r3, r3, #4
 8000632:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 8000634:	7bfb      	ldrb	r3, [r7, #15]
 8000636:	f043 030d 	orr.w	r3, r3, #13
 800063a:	b2db      	uxtb	r3, r3
 800063c:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 800063e:	7bfb      	ldrb	r3, [r7, #15]
 8000640:	f043 0309 	orr.w	r3, r3, #9
 8000644:	b2db      	uxtb	r3, r3
 8000646:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 8000648:	7bbb      	ldrb	r3, [r7, #14]
 800064a:	f043 030d 	orr.w	r3, r3, #13
 800064e:	b2db      	uxtb	r3, r3
 8000650:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 8000652:	7bbb      	ldrb	r3, [r7, #14]
 8000654:	f043 0309 	orr.w	r3, r3, #9
 8000658:	b2db      	uxtb	r3, r3
 800065a:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 800065c:	bf00      	nop
 800065e:	f107 0208 	add.w	r2, r7, #8
 8000662:	2364      	movs	r3, #100	; 0x64
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	2304      	movs	r3, #4
 8000668:	214e      	movs	r1, #78	; 0x4e
 800066a:	4805      	ldr	r0, [pc, #20]	; (8000680 <LCD_Data+0x64>)
 800066c:	f003 fcb0 	bl	8003fd0 <HAL_I2C_Master_Transmit>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d1f3      	bne.n	800065e <LCD_Data+0x42>
			i2c_buffer, 4, 100)!=HAL_OK){
		//HAL_Delay(1);
	}
	return;
 8000676:	bf00      	nop
}
 8000678:	3710      	adds	r7, #16
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	200003e4 	.word	0x200003e4

08000684 <I2C_LCD_Init>:

// lcd 초기화
void I2C_LCD_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0

	LCD_Command(0x33);
 8000688:	2033      	movs	r0, #51	; 0x33
 800068a:	f7ff ff93 	bl	80005b4 <LCD_Command>
	LCD_Command(0x32);
 800068e:	2032      	movs	r0, #50	; 0x32
 8000690:	f7ff ff90 	bl	80005b4 <LCD_Command>
	LCD_Command(0x28);	//Function Set 4-bit mode
 8000694:	2028      	movs	r0, #40	; 0x28
 8000696:	f7ff ff8d 	bl	80005b4 <LCD_Command>
	LCD_Command(DISPLAY_ON);
 800069a:	200c      	movs	r0, #12
 800069c:	f7ff ff8a 	bl	80005b4 <LCD_Command>
	LCD_Command(0x06);	//Entry mode set
 80006a0:	2006      	movs	r0, #6
 80006a2:	f7ff ff87 	bl	80005b4 <LCD_Command>
	LCD_Command(CLEAR_DISPLAY);
 80006a6:	2001      	movs	r0, #1
 80006a8:	f7ff ff84 	bl	80005b4 <LCD_Command>
	HAL_Delay(2);
 80006ac:	2002      	movs	r0, #2
 80006ae:	f002 fc7d 	bl	8002fac <HAL_Delay>
}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}

080006b6 <LCD_String>:

// null을 만날때 까지 string을 LCD에 출력
void LCD_String(uint8_t *str)
{
 80006b6:	b580      	push	{r7, lr}
 80006b8:	b082      	sub	sp, #8
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	6078      	str	r0, [r7, #4]
	while(*str) // 널문자를 만날 때까지
 80006be:	e006      	b.n	80006ce <LCD_String+0x18>
	{
		LCD_Data(*str++);
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	1c5a      	adds	r2, r3, #1
 80006c4:	607a      	str	r2, [r7, #4]
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff ffa7 	bl	800061c <LCD_Data>
	while(*str) // 널문자를 만날 때까지
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d1f4      	bne.n	80006c0 <LCD_String+0xa>
	}
}
 80006d6:	bf00      	nop
 80006d8:	bf00      	nop
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <Move_Cursor>:

// 해당 줄,col으로 이동 하는 함수
void Move_Cursor(uint8_t row, uint8_t column)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	460a      	mov	r2, r1
 80006ea:	71fb      	strb	r3, [r7, #7]
 80006ec:	4613      	mov	r3, r2
 80006ee:	71bb      	strb	r3, [r7, #6]
	LCD_Command(0x80 | row<<6 | column);
 80006f0:	79fb      	ldrb	r3, [r7, #7]
 80006f2:	019b      	lsls	r3, r3, #6
 80006f4:	b2da      	uxtb	r2, r3
 80006f6:	79bb      	ldrb	r3, [r7, #6]
 80006f8:	4313      	orrs	r3, r2
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000700:	b2db      	uxtb	r3, r3
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff ff56 	bl	80005b4 <LCD_Command>
	return;
 8000708:	bf00      	nop
}
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <Get_Button>:
 * param2: 함수가 접근하는 푸시 버튼 1개에 대응하는 1개 핀의 주소
 * param3: 함수가 접근하는 푸시 버튼 1개가 button_status[] 배열 상의 몇번째 인덱스에 해당하게 할 것인지를 결정하는 값
 * return: 푸시 버튼의 상태 (BUTTON_RELEASE 또는 BUTTON_PRESS)
 */
int Get_Button(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint8_t button_number)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	460b      	mov	r3, r1
 800071a:	807b      	strh	r3, [r7, #2]
 800071c:	4613      	mov	r3, r2
 800071e:	707b      	strb	r3, [r7, #1]
	unsigned char curr_state; // uint8_t로 선언해도 되지만 unsigned char로 선언한 이유는 여기에 담기는 값이 비록 0 또는 1이겠지만, 그것을 BUTTON_PRESS 또는 BUTTON_RELEASE와 같은 논리적 상태로 보겠다는 개발자의 의도를 담은 선언이다.
	curr_state = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin); // 0(BUTTON_PRESS) 또는 1(BUTTON_RELEASE)
 8000720:	887b      	ldrh	r3, [r7, #2]
 8000722:	4619      	mov	r1, r3
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f003 fadd 	bl	8003ce4 <HAL_GPIO_ReadPin>
 800072a:	4603      	mov	r3, r0
 800072c:	73fb      	strb	r3, [r7, #15]

	if (curr_state == BUTTON_PRESS && button_status[button_number] == BUTTON_RELEASE)
 800072e:	7bfb      	ldrb	r3, [r7, #15]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d10d      	bne.n	8000750 <Get_Button+0x40>
 8000734:	787b      	ldrb	r3, [r7, #1]
 8000736:	4a11      	ldr	r2, [pc, #68]	; (800077c <Get_Button+0x6c>)
 8000738:	5cd3      	ldrb	r3, [r2, r3]
 800073a:	2b01      	cmp	r3, #1
 800073c:	d108      	bne.n	8000750 <Get_Button+0x40>
	{
		HAL_Delay(100); // 0.1초 동안 노이즈가 지나가길 기다림
 800073e:	2064      	movs	r0, #100	; 0x64
 8000740:	f002 fc34 	bl	8002fac <HAL_Delay>
		button_status[button_number] = BUTTON_PRESS; // 누르긴 눌렀으니까 우선 button_status배열 상의 상태를 BUTTON_PRESS로 바꿔준다.
 8000744:	787b      	ldrb	r3, [r7, #1]
 8000746:	4a0d      	ldr	r2, [pc, #52]	; (800077c <Get_Button+0x6c>)
 8000748:	2100      	movs	r1, #0
 800074a:	54d1      	strb	r1, [r2, r3]
		return BUTTON_RELEASE; // 아직은 버튼을 누른것으로 간주할 수 없다.(왜냐하면 button_status배열 상의 버튼의 기존 상태가 BUTTON_RELEASE였기 때문이다.)
 800074c:	2301      	movs	r3, #1
 800074e:	e011      	b.n	8000774 <Get_Button+0x64>
	}
	else if (curr_state == BUTTON_RELEASE && button_status[button_number] == BUTTON_PRESS)
 8000750:	7bfb      	ldrb	r3, [r7, #15]
 8000752:	2b01      	cmp	r3, #1
 8000754:	d10d      	bne.n	8000772 <Get_Button+0x62>
 8000756:	787b      	ldrb	r3, [r7, #1]
 8000758:	4a08      	ldr	r2, [pc, #32]	; (800077c <Get_Button+0x6c>)
 800075a:	5cd3      	ldrb	r3, [r2, r3]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d108      	bne.n	8000772 <Get_Button+0x62>
	{
		button_status[button_number] = BUTTON_RELEASE; // button_status배열 상의 상태를 curr_state에 맞게 다시 초기화해주고
 8000760:	787b      	ldrb	r3, [r7, #1]
 8000762:	4a06      	ldr	r2, [pc, #24]	; (800077c <Get_Button+0x6c>)
 8000764:	2101      	movs	r1, #1
 8000766:	54d1      	strb	r1, [r2, r3]
		HAL_Delay(30);
 8000768:	201e      	movs	r0, #30
 800076a:	f002 fc1f 	bl	8002fac <HAL_Delay>
		return BUTTON_PRESS; // 정말 버튼을 누른 것으로 인정
 800076e:	2300      	movs	r3, #0
 8000770:	e000      	b.n	8000774 <Get_Button+0x64>
	}

	return BUTTON_RELEASE;
 8000772:	2301      	movs	r3, #1
}
 8000774:	4618      	mov	r0, r3
 8000776:	3710      	adds	r7, #16
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000000 	.word	0x20000000

08000780 <Mode_Complete_Alarm>:
	HAL_Delay(100);
}


void Mode_Complete_Alarm(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
	int divide_freq = 1600000;
 8000786:	4b22      	ldr	r3, [pc, #136]	; (8000810 <Mode_Complete_Alarm+0x90>)
 8000788:	603b      	str	r3, [r7, #0]

	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 800078a:	210c      	movs	r1, #12
 800078c:	4821      	ldr	r0, [pc, #132]	; (8000814 <Mode_Complete_Alarm+0x94>)
 800078e:	f005 fb25 	bl	8005ddc <HAL_TIM_PWM_Start>

	for (int i = 0; i < sizeof(mode_complete_note)/sizeof(uint32_t); i++)
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	e02c      	b.n	80007f2 <Mode_Complete_Alarm+0x72>
	{
		__HAL_TIM_SET_AUTORELOAD(&htim5, divide_freq / mode_complete_note[i]);
 8000798:	6839      	ldr	r1, [r7, #0]
 800079a:	4a1f      	ldr	r2, [pc, #124]	; (8000818 <Mode_Complete_Alarm+0x98>)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007a2:	4b1c      	ldr	r3, [pc, #112]	; (8000814 <Mode_Complete_Alarm+0x94>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	fbb1 f2f2 	udiv	r2, r1, r2
 80007aa:	62da      	str	r2, [r3, #44]	; 0x2c
 80007ac:	683a      	ldr	r2, [r7, #0]
 80007ae:	491a      	ldr	r1, [pc, #104]	; (8000818 <Mode_Complete_Alarm+0x98>)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ba:	4a16      	ldr	r2, [pc, #88]	; (8000814 <Mode_Complete_Alarm+0x94>)
 80007bc:	60d3      	str	r3, [r2, #12]
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, divide_freq / mode_complete_note[i] / 2);
 80007be:	683a      	ldr	r2, [r7, #0]
 80007c0:	4915      	ldr	r1, [pc, #84]	; (8000818 <Mode_Complete_Alarm+0x98>)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80007cc:	4b11      	ldr	r3, [pc, #68]	; (8000814 <Mode_Complete_Alarm+0x94>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	0852      	lsrs	r2, r2, #1
 80007d2:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_Delay(200*mode_complete_rythm[i]);
 80007d4:	4a11      	ldr	r2, [pc, #68]	; (800081c <Mode_Complete_Alarm+0x9c>)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007dc:	22c8      	movs	r2, #200	; 0xc8
 80007de:	fb02 f303 	mul.w	r3, r2, r3
 80007e2:	4618      	mov	r0, r3
 80007e4:	f002 fbe2 	bl	8002fac <HAL_Delay>
		noTone();
 80007e8:	f000 f81a 	bl	8000820 <noTone>
	for (int i = 0; i < sizeof(mode_complete_note)/sizeof(uint32_t); i++)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	3301      	adds	r3, #1
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	2b1a      	cmp	r3, #26
 80007f6:	d9cf      	bls.n	8000798 <Mode_Complete_Alarm+0x18>
	}

	HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_4);
 80007f8:	210c      	movs	r1, #12
 80007fa:	4806      	ldr	r0, [pc, #24]	; (8000814 <Mode_Complete_Alarm+0x94>)
 80007fc:	f005 fbb6 	bl	8005f6c <HAL_TIM_PWM_Stop>
	HAL_Delay(1000);
 8000800:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000804:	f002 fbd2 	bl	8002fac <HAL_Delay>
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	00186a00 	.word	0x00186a00
 8000814:	20000530 	.word	0x20000530
 8000818:	20000008 	.word	0x20000008
 800081c:	20000074 	.word	0x20000074

08000820 <noTone>:

/*
 * desc:
 * */
void noTone(void)
 {
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
     htim5.Instance->CCR1=0;
 8000824:	4b04      	ldr	r3, [pc, #16]	; (8000838 <noTone+0x18>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2200      	movs	r2, #0
 800082a:	635a      	str	r2, [r3, #52]	; 0x34
     HAL_Delay(50);
 800082c:	2032      	movs	r0, #50	; 0x32
 800082e:	f002 fbbd 	bl	8002fac <HAL_Delay>
 }
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000530 	.word	0x20000530

0800083c <DCmotor_Forward_Rotate>:
/*
 * desc: DC모터를 원하는 시간동안 정방향 회전시킨 뒤 멈춘다.
 * param1: DC모터가 가동하는 시간(초 단위)
 */
void DCmotor_Forward_Rotate(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 8000840:	2201      	movs	r2, #1
 8000842:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000846:	4805      	ldr	r0, [pc, #20]	; (800085c <DCmotor_Forward_Rotate+0x20>)
 8000848:	f003 fa64 	bl	8003d14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 800084c:	2200      	movs	r2, #0
 800084e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000852:	4802      	ldr	r0, [pc, #8]	; (800085c <DCmotor_Forward_Rotate+0x20>)
 8000854:	f003 fa5e 	bl	8003d14 <HAL_GPIO_WritePin>
}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40021000 	.word	0x40021000

08000860 <DCmotor_Backward_Rotate>:
/*
 * desc: DC모터를 원하는 시간동안 역방향 회전시킨 뒤 멈춘다.
 * param1: DC모터가 가동하는 시간(초 단위)
 */
void DCmotor_Backward_Rotate(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8000864:	2200      	movs	r2, #0
 8000866:	f44f 7180 	mov.w	r1, #256	; 0x100
 800086a:	4805      	ldr	r0, [pc, #20]	; (8000880 <DCmotor_Backward_Rotate+0x20>)
 800086c:	f003 fa52 	bl	8003d14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 8000870:	2201      	movs	r2, #1
 8000872:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000876:	4802      	ldr	r0, [pc, #8]	; (8000880 <DCmotor_Backward_Rotate+0x20>)
 8000878:	f003 fa4c 	bl	8003d14 <HAL_GPIO_WritePin>
}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40021000 	.word	0x40021000

08000884 <DCmotor_Break>:

/*
 * desc: DC모터를 멈춘다.
 */
void DCmotor_Break(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 8000888:	2201      	movs	r2, #1
 800088a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800088e:	4805      	ldr	r0, [pc, #20]	; (80008a4 <DCmotor_Break+0x20>)
 8000890:	f003 fa40 	bl	8003d14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 8000894:	2201      	movs	r2, #1
 8000896:	f44f 7100 	mov.w	r1, #512	; 0x200
 800089a:	4802      	ldr	r0, [pc, #8]	; (80008a4 <DCmotor_Break+0x20>)
 800089c:	f003 fa3a 	bl	8003d14 <HAL_GPIO_WritePin>
}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40021000 	.word	0x40021000

080008a8 <DCmotor_Set_DutyCycle>:

void DCmotor_Set_DutyCycle(uint16_t duty_cycle)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, duty_cycle);
 80008b2:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <DCmotor_Set_DutyCycle+0x20>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	88fa      	ldrh	r2, [r7, #6]
 80008b8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80008ba:	bf00      	nop
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	200004e8 	.word	0x200004e8

080008cc <FND4digit_off>:

/*
 * desc:
 */
void FND4digit_off(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
#if 0 // common 에노우드 WCN4-
	HAL_GPIO_WritePin(FND_COM_PORT, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(FND_DATA_PORT,FND_font[8]|FND_p, GPIO_PIN_SET);
#else // common 캐소우드 CL5642AH30
	HAL_GPIO_WritePin(FND_COM_PORT, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_SET);
 80008d0:	2201      	movs	r2, #1
 80008d2:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 80008d6:	4809      	ldr	r0, [pc, #36]	; (80008fc <FND4digit_off+0x30>)
 80008d8:	f003 fa1c 	bl	8003d14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FND_DATA_PORT,FND_font[8]|FND_p, GPIO_PIN_RESET);
 80008dc:	4b08      	ldr	r3, [pc, #32]	; (8000900 <FND4digit_off+0x34>)
 80008de:	6a1b      	ldr	r3, [r3, #32]
 80008e0:	b29b      	uxth	r3, r3
 80008e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80008e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80008ea:	b29b      	uxth	r3, r3
 80008ec:	2200      	movs	r2, #0
 80008ee:	4619      	mov	r1, r3
 80008f0:	4804      	ldr	r0, [pc, #16]	; (8000904 <FND4digit_off+0x38>)
 80008f2:	f003 fa0f 	bl	8003d14 <HAL_GPIO_WritePin>
#endif
	return;
 80008f6:	bf00      	nop
}
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40020800 	.word	0x40020800
 8000900:	200000e8 	.word	0x200000e8
 8000904:	40020400 	.word	0x40020400

08000908 <FND4digit_time_update>:
/*
 * desc: 초 단위로 들어온 시간을 시:분:초 형태로 잘라서, 분:초만 FND 배열에 넣는다.
 * param1: 초 단위로 환산된 시간
 */
static void FND4digit_time_update(uint32_t time)
{
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
	uint8_t miniute, second, miniute_tens, miniute_units, second_tens, second_units;

	miniute = (time % 3600) / 60;
 8000910:	687a      	ldr	r2, [r7, #4]
 8000912:	4b33      	ldr	r3, [pc, #204]	; (80009e0 <FND4digit_time_update+0xd8>)
 8000914:	fba3 1302 	umull	r1, r3, r3, r2
 8000918:	0adb      	lsrs	r3, r3, #11
 800091a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800091e:	fb01 f303 	mul.w	r3, r1, r3
 8000922:	1ad3      	subs	r3, r2, r3
 8000924:	4a2f      	ldr	r2, [pc, #188]	; (80009e4 <FND4digit_time_update+0xdc>)
 8000926:	fba2 2303 	umull	r2, r3, r2, r3
 800092a:	095b      	lsrs	r3, r3, #5
 800092c:	73fb      	strb	r3, [r7, #15]
	second = (time % 3600) % 60;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4a2b      	ldr	r2, [pc, #172]	; (80009e0 <FND4digit_time_update+0xd8>)
 8000932:	fba2 1203 	umull	r1, r2, r2, r3
 8000936:	0ad2      	lsrs	r2, r2, #11
 8000938:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800093c:	fb01 f202 	mul.w	r2, r1, r2
 8000940:	1a9a      	subs	r2, r3, r2
 8000942:	4b28      	ldr	r3, [pc, #160]	; (80009e4 <FND4digit_time_update+0xdc>)
 8000944:	fba3 1302 	umull	r1, r3, r3, r2
 8000948:	0959      	lsrs	r1, r3, #5
 800094a:	460b      	mov	r3, r1
 800094c:	011b      	lsls	r3, r3, #4
 800094e:	1a5b      	subs	r3, r3, r1
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	1ad1      	subs	r1, r2, r3
 8000954:	460b      	mov	r3, r1
 8000956:	73bb      	strb	r3, [r7, #14]

	miniute_tens = miniute / 10;
 8000958:	7bfb      	ldrb	r3, [r7, #15]
 800095a:	4a23      	ldr	r2, [pc, #140]	; (80009e8 <FND4digit_time_update+0xe0>)
 800095c:	fba2 2303 	umull	r2, r3, r2, r3
 8000960:	08db      	lsrs	r3, r3, #3
 8000962:	737b      	strb	r3, [r7, #13]
	miniute_units = miniute % 10;
 8000964:	7bfa      	ldrb	r2, [r7, #15]
 8000966:	4b20      	ldr	r3, [pc, #128]	; (80009e8 <FND4digit_time_update+0xe0>)
 8000968:	fba3 1302 	umull	r1, r3, r3, r2
 800096c:	08d9      	lsrs	r1, r3, #3
 800096e:	460b      	mov	r3, r1
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	440b      	add	r3, r1
 8000974:	005b      	lsls	r3, r3, #1
 8000976:	1ad3      	subs	r3, r2, r3
 8000978:	733b      	strb	r3, [r7, #12]
	second_tens = second / 10;
 800097a:	7bbb      	ldrb	r3, [r7, #14]
 800097c:	4a1a      	ldr	r2, [pc, #104]	; (80009e8 <FND4digit_time_update+0xe0>)
 800097e:	fba2 2303 	umull	r2, r3, r2, r3
 8000982:	08db      	lsrs	r3, r3, #3
 8000984:	72fb      	strb	r3, [r7, #11]
	second_units = second % 10;
 8000986:	7bba      	ldrb	r2, [r7, #14]
 8000988:	4b17      	ldr	r3, [pc, #92]	; (80009e8 <FND4digit_time_update+0xe0>)
 800098a:	fba3 1302 	umull	r1, r3, r3, r2
 800098e:	08d9      	lsrs	r1, r3, #3
 8000990:	460b      	mov	r3, r1
 8000992:	009b      	lsls	r3, r3, #2
 8000994:	440b      	add	r3, r1
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	1ad3      	subs	r3, r2, r3
 800099a:	72bb      	strb	r3, [r7, #10]

	// 분
	FND[0] = FND_font[second_units]; // FND 오른쪽 끝 자리
 800099c:	7abb      	ldrb	r3, [r7, #10]
 800099e:	4a13      	ldr	r2, [pc, #76]	; (80009ec <FND4digit_time_update+0xe4>)
 80009a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009a4:	b29a      	uxth	r2, r3
 80009a6:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <FND4digit_time_update+0xe8>)
 80009a8:	801a      	strh	r2, [r3, #0]
	FND[1] = FND_font[second_tens];
 80009aa:	7afb      	ldrb	r3, [r7, #11]
 80009ac:	4a0f      	ldr	r2, [pc, #60]	; (80009ec <FND4digit_time_update+0xe4>)
 80009ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009b2:	b29a      	uxth	r2, r3
 80009b4:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <FND4digit_time_update+0xe8>)
 80009b6:	805a      	strh	r2, [r3, #2]
	// 초
	FND[2] = FND_font[miniute_units];
 80009b8:	7b3b      	ldrb	r3, [r7, #12]
 80009ba:	4a0c      	ldr	r2, [pc, #48]	; (80009ec <FND4digit_time_update+0xe4>)
 80009bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009c0:	b29a      	uxth	r2, r3
 80009c2:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <FND4digit_time_update+0xe8>)
 80009c4:	809a      	strh	r2, [r3, #4]
	FND[3] = FND_font[miniute_tens]; // FND 왼쪽 끝 자리
 80009c6:	7b7b      	ldrb	r3, [r7, #13]
 80009c8:	4a08      	ldr	r2, [pc, #32]	; (80009ec <FND4digit_time_update+0xe4>)
 80009ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ce:	b29a      	uxth	r2, r3
 80009d0:	4b07      	ldr	r3, [pc, #28]	; (80009f0 <FND4digit_time_update+0xe8>)
 80009d2:	80da      	strh	r2, [r3, #6]
}
 80009d4:	bf00      	nop
 80009d6:	3714      	adds	r7, #20
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	91a2b3c5 	.word	0x91a2b3c5
 80009e4:	88888889 	.word	0x88888889
 80009e8:	cccccccd 	.word	0xcccccccd
 80009ec:	200000e8 	.word	0x200000e8
 80009f0:	200001a0 	.word	0x200001a0

080009f4 <FND4digit_time_display>:
/*
 * desc: 초 단위로 들어온 시간을 00:00(분:초) 형태로 FND에 출력한다.
 * param1: 초 단위로 환산된 시간
 */
void FND4digit_time_display(uint32_t time)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	static unsigned int msec=0;    // ms counter
	static int i=0;     // FND position indicator


	if (fnd1ms_counter >= 1)   // 2ms reached
 80009fc:	4b20      	ldr	r3, [pc, #128]	; (8000a80 <FND4digit_time_display+0x8c>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	dd38      	ble.n	8000a76 <FND4digit_time_display+0x82>
	{
		fnd1ms_counter=0;
 8000a04:	4b1e      	ldr	r3, [pc, #120]	; (8000a80 <FND4digit_time_display+0x8c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
		msec += 1;
 8000a0a:	4b1e      	ldr	r3, [pc, #120]	; (8000a84 <FND4digit_time_display+0x90>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	4a1c      	ldr	r2, [pc, #112]	; (8000a84 <FND4digit_time_display+0x90>)
 8000a12:	6013      	str	r3, [r2, #0]

		if (msec > 1000)   // 1000ms reached
 8000a14:	4b1b      	ldr	r3, [pc, #108]	; (8000a84 <FND4digit_time_display+0x90>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a1c:	d905      	bls.n	8000a2a <FND4digit_time_display+0x36>
		{
			msec = 0;
 8000a1e:	4b19      	ldr	r3, [pc, #100]	; (8000a84 <FND4digit_time_display+0x90>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
			FND4digit_time_update(time);
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f7ff ff6f 	bl	8000908 <FND4digit_time_update>
		}
		FND4digit_off();
 8000a2a:	f7ff ff4f 	bl	80008cc <FND4digit_off>

#if 0 // common 애노우드  WCN4-
		HAL_GPIO_WritePin(FND_COM_PORT,FND_digit[i], GPIO_PIN_SET);
		HAL_GPIO_WritePin(FND_DATA_PORT, FND[i], GPIO_PIN_RESET);
#else // common 캐소우드 CL5642AH30
		HAL_GPIO_WritePin(FND_COM_PORT,FND_digit[i], GPIO_PIN_RESET);
 8000a2e:	4b16      	ldr	r3, [pc, #88]	; (8000a88 <FND4digit_time_display+0x94>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a16      	ldr	r2, [pc, #88]	; (8000a8c <FND4digit_time_display+0x98>)
 8000a34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a38:	2200      	movs	r2, #0
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4814      	ldr	r0, [pc, #80]	; (8000a90 <FND4digit_time_display+0x9c>)
 8000a3e:	f003 f969 	bl	8003d14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FND_DATA_PORT, FND[i], GPIO_PIN_SET);
 8000a42:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <FND4digit_time_display+0x94>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4a13      	ldr	r2, [pc, #76]	; (8000a94 <FND4digit_time_display+0xa0>)
 8000a48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4811      	ldr	r0, [pc, #68]	; (8000a98 <FND4digit_time_display+0xa4>)
 8000a52:	f003 f95f 	bl	8003d14 <HAL_GPIO_WritePin>
#endif
		i++;   // 다음 display할 FND를 가리킨다.
 8000a56:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <FND4digit_time_display+0x94>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	4a0a      	ldr	r2, [pc, #40]	; (8000a88 <FND4digit_time_display+0x94>)
 8000a5e:	6013      	str	r3, [r2, #0]
		i %= 4;
 8000a60:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <FND4digit_time_display+0x94>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	425a      	negs	r2, r3
 8000a66:	f003 0303 	and.w	r3, r3, #3
 8000a6a:	f002 0203 	and.w	r2, r2, #3
 8000a6e:	bf58      	it	pl
 8000a70:	4253      	negpl	r3, r2
 8000a72:	4a05      	ldr	r2, [pc, #20]	; (8000a88 <FND4digit_time_display+0x94>)
 8000a74:	6013      	str	r3, [r2, #0]
	}

}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000b9c 	.word	0x20000b9c
 8000a84:	200001a8 	.word	0x200001a8
 8000a88:	200001ac 	.word	0x200001ac
 8000a8c:	200000e0 	.word	0x200000e0
 8000a90:	40020800 	.word	0x40020800
 8000a94:	200001a0 	.word	0x200001a0
 8000a98:	40020400 	.word	0x40020400

08000a9c <bcd2dec>:
	HAL_RTC_SetTime(&hrtc, &my_systemTime, RTC_FORMAT_BCD);
}

// 0010 0111 -> 23 (.ioc 환경변수 설정에서 날자값을 bcd포맷으로 저장하게 했기 때문에 이렇게 된다. binary 포맷이었다면 0001 0111 이었을 것)
uint8_t bcd2dec(uint8_t byte)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	71fb      	strb	r3, [r7, #7]
	uint8_t high, low;
	low = byte & 0x0f; // 하위 4bit (low nibble)
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	f003 030f 	and.w	r3, r3, #15
 8000aac:	73fb      	strb	r3, [r7, #15]
	high = (byte >> 4) * 10; // 상위 4bit (high nibble)
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	091b      	lsrs	r3, r3, #4
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	0092      	lsls	r2, r2, #2
 8000ab8:	4413      	add	r3, r2
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	73bb      	strb	r3, [r7, #14]

	return high + low;
 8000abe:	7bba      	ldrb	r2, [r7, #14]
 8000ac0:	7bfb      	ldrb	r3, [r7, #15]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	b2db      	uxtb	r3, r3
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3714      	adds	r7, #20
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
	...

08000ad4 <dec2bcd>:

// 23 -> 0010 0111
uint8_t dec2bcd(uint8_t byte)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	71fb      	strb	r3, [r7, #7]
	uint8_t high, low;

	high = (byte / 10) << 4;
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	4a0d      	ldr	r2, [pc, #52]	; (8000b18 <dec2bcd+0x44>)
 8000ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ae6:	08db      	lsrs	r3, r3, #3
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	011b      	lsls	r3, r3, #4
 8000aec:	73fb      	strb	r3, [r7, #15]
	low = (byte % 10);
 8000aee:	79fa      	ldrb	r2, [r7, #7]
 8000af0:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <dec2bcd+0x44>)
 8000af2:	fba3 1302 	umull	r1, r3, r3, r2
 8000af6:	08d9      	lsrs	r1, r3, #3
 8000af8:	460b      	mov	r3, r1
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	440b      	add	r3, r1
 8000afe:	005b      	lsls	r3, r3, #1
 8000b00:	1ad3      	subs	r3, r2, r3
 8000b02:	73bb      	strb	r3, [r7, #14]

	return high + low;
 8000b04:	7bfa      	ldrb	r2, [r7, #15]
 8000b06:	7bbb      	ldrb	r3, [r7, #14]
 8000b08:	4413      	add	r3, r2
 8000b0a:	b2db      	uxtb	r3, r3
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3714      	adds	r7, #20
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	cccccccd 	.word	0xcccccccd

08000b1c <LEDbar_All_Off>:

/*
 * desc: ledbar가 모두 꺼진다.
 */
void LEDbar_All_Off(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, 0xff, 0);
 8000b20:	2200      	movs	r2, #0
 8000b22:	21ff      	movs	r1, #255	; 0xff
 8000b24:	4802      	ldr	r0, [pc, #8]	; (8000b30 <LEDbar_All_Off+0x14>)
 8000b26:	f003 f8f5 	bl	8003d14 <HAL_GPIO_WritePin>
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40020c00 	.word	0x40020c00

08000b34 <LEDbar_On_Up>:

/*
 * desc: ledbar는 8개의 led로 구성되어 있는데, 아래서부터 위로 한칸씩 올라가면서 1개의 led가 켜졌다가 꺼진다.
 */
void LEDbar_On_Up(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
	static int i = 0;

	if (TIM10_10ms_counter_ledbar >= 20)
 8000b38:	4b10      	ldr	r3, [pc, #64]	; (8000b7c <LEDbar_On_Up+0x48>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2b13      	cmp	r3, #19
 8000b3e:	d91b      	bls.n	8000b78 <LEDbar_On_Up+0x44>
	{
		TIM10_10ms_counter_ledbar = 0;
 8000b40:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <LEDbar_On_Up+0x48>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]

		if (i == 8)
 8000b46:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <LEDbar_On_Up+0x4c>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	2b08      	cmp	r3, #8
 8000b4c:	d104      	bne.n	8000b58 <LEDbar_On_Up+0x24>
		{
			LEDbar_All_Off();
 8000b4e:	f7ff ffe5 	bl	8000b1c <LEDbar_All_Off>
			i = 0;
 8000b52:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <LEDbar_On_Up+0x4c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
		}

		LEDbar_All_Off();
 8000b58:	f7ff ffe0 	bl	8000b1c <LEDbar_All_Off>
		HAL_GPIO_WritePin(GPIOD, 0x01 << i++, 1);
 8000b5c:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <LEDbar_On_Up+0x4c>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	1c5a      	adds	r2, r3, #1
 8000b62:	4907      	ldr	r1, [pc, #28]	; (8000b80 <LEDbar_On_Up+0x4c>)
 8000b64:	600a      	str	r2, [r1, #0]
 8000b66:	2201      	movs	r2, #1
 8000b68:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6c:	b29b      	uxth	r3, r3
 8000b6e:	2201      	movs	r2, #1
 8000b70:	4619      	mov	r1, r3
 8000b72:	4804      	ldr	r0, [pc, #16]	; (8000b84 <LEDbar_On_Up+0x50>)
 8000b74:	f003 f8ce 	bl	8003d14 <HAL_GPIO_WritePin>
	}
}
 8000b78:	bf00      	nop
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20000bac 	.word	0x20000bac
 8000b80:	200001b0 	.word	0x200001b0
 8000b84:	40020c00 	.word	0x40020c00

08000b88 <LEDbar_Keepon_Up>:

/*
 * desc: ledbar는 8개의 led로 구성되어 있는데, 아래서부터 위로 한칸씩 올라가면서 켜진 LED는 유지하면서 1개의 led가 추가로 켜진다.
 */
void LEDbar_Keepon_Up(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
	static int i = 0;

	if (TIM10_10ms_counter_ledbar >= 20)
 8000b8c:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <LEDbar_Keepon_Up+0x44>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	2b13      	cmp	r3, #19
 8000b92:	d919      	bls.n	8000bc8 <LEDbar_Keepon_Up+0x40>
	{
		TIM10_10ms_counter_ledbar = 0;
 8000b94:	4b0d      	ldr	r3, [pc, #52]	; (8000bcc <LEDbar_Keepon_Up+0x44>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]

		if (i == 8)
 8000b9a:	4b0d      	ldr	r3, [pc, #52]	; (8000bd0 <LEDbar_Keepon_Up+0x48>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	2b08      	cmp	r3, #8
 8000ba0:	d104      	bne.n	8000bac <LEDbar_Keepon_Up+0x24>
		{
			LEDbar_All_Off();
 8000ba2:	f7ff ffbb 	bl	8000b1c <LEDbar_All_Off>
			i = 0;
 8000ba6:	4b0a      	ldr	r3, [pc, #40]	; (8000bd0 <LEDbar_Keepon_Up+0x48>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(GPIOD, 0x00|(0x01 << i++), 1);
 8000bac:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <LEDbar_Keepon_Up+0x48>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	1c5a      	adds	r2, r3, #1
 8000bb2:	4907      	ldr	r1, [pc, #28]	; (8000bd0 <LEDbar_Keepon_Up+0x48>)
 8000bb4:	600a      	str	r2, [r1, #0]
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4804      	ldr	r0, [pc, #16]	; (8000bd4 <LEDbar_Keepon_Up+0x4c>)
 8000bc4:	f003 f8a6 	bl	8003d14 <HAL_GPIO_WritePin>
	}
}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20000bac 	.word	0x20000bac
 8000bd0:	200001b4 	.word	0x200001b4
 8000bd4:	40020c00 	.word	0x40020c00

08000bd8 <LEDbar_Flower_On>:

/*
 * desc: ledbar는 8개의 led로 구성되어 있는데, led가 펴져나가는 물결 모양으로 점멸되게 한다.
 */
void LEDbar_Flower_On(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
	static int i = 0;

	if (TIM10_10ms_counter_ledbar >= 20)
 8000bdc:	4b16      	ldr	r3, [pc, #88]	; (8000c38 <LEDbar_Flower_On+0x60>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2b13      	cmp	r3, #19
 8000be2:	d926      	bls.n	8000c32 <LEDbar_Flower_On+0x5a>
	{
		TIM10_10ms_counter_ledbar = 0;
 8000be4:	4b14      	ldr	r3, [pc, #80]	; (8000c38 <LEDbar_Flower_On+0x60>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]

		if (i == 4)
 8000bea:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <LEDbar_Flower_On+0x64>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2b04      	cmp	r3, #4
 8000bf0:	d104      	bne.n	8000bfc <LEDbar_Flower_On+0x24>
		{
			LEDbar_All_Off();
 8000bf2:	f7ff ff93 	bl	8000b1c <LEDbar_All_Off>
			i = 0;
 8000bf6:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <LEDbar_Flower_On+0x64>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(GPIOD, 0x08 >> i, 1);
 8000bfc:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <LEDbar_Flower_On+0x64>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2208      	movs	r2, #8
 8000c02:	fa42 f303 	asr.w	r3, r2, r3
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	2201      	movs	r2, #1
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	480c      	ldr	r0, [pc, #48]	; (8000c40 <LEDbar_Flower_On+0x68>)
 8000c0e:	f003 f881 	bl	8003d14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, 0x10 << i, 1);
 8000c12:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <LEDbar_Flower_On+0x64>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	2210      	movs	r2, #16
 8000c18:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	2201      	movs	r2, #1
 8000c20:	4619      	mov	r1, r3
 8000c22:	4807      	ldr	r0, [pc, #28]	; (8000c40 <LEDbar_Flower_On+0x68>)
 8000c24:	f003 f876 	bl	8003d14 <HAL_GPIO_WritePin>
		i++;
 8000c28:	4b04      	ldr	r3, [pc, #16]	; (8000c3c <LEDbar_Flower_On+0x64>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	4a03      	ldr	r2, [pc, #12]	; (8000c3c <LEDbar_Flower_On+0x64>)
 8000c30:	6013      	str	r3, [r2, #0]
	}
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20000bac 	.word	0x20000bac
 8000c3c:	200001b8 	.word	0x200001b8
 8000c40:	40020c00 	.word	0x40020c00

08000c44 <HAL_STSTICK_Handler>:
// ---------- call by SysTick_Handler of stm32f4xx_it.c ----------
// ARM default timer
// enter here every 1ms
volatile int fnd1ms_counter = 0;
void HAL_STSTICK_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
	fnd1ms_counter++; // 1ms timer
 8000c48:	4b04      	ldr	r3, [pc, #16]	; (8000c5c <HAL_STSTICK_Handler+0x18>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	4a03      	ldr	r2, [pc, #12]	; (8000c5c <HAL_STSTICK_Handler+0x18>)
 8000c50:	6013      	str	r3, [r2, #0]
}
 8000c52:	bf00      	nop
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	20000b9c 	.word	0x20000b9c

08000c60 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE   // Add for printf
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000c68:	1d39      	adds	r1, r7, #4
 8000c6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c6e:	2201      	movs	r2, #1
 8000c70:	4803      	ldr	r0, [pc, #12]	; (8000c80 <__io_putchar+0x20>)
 8000c72:	f006 fd20 	bl	80076b6 <HAL_UART_Transmit>

  return ch;
 8000c76:	687b      	ldr	r3, [r7, #4]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20000608 	.word	0x20000608

08000c84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c88:	f002 f91e 	bl	8002ec8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c8c:	f000 f824 	bl	8000cd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c90:	f000 fbda 	bl	8001448 <MX_GPIO_Init>
  MX_ETH_Init();
 8000c94:	f000 f88c 	bl	8000db0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000c98:	f000 fb54 	bl	8001344 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000c9c:	f000 fba6 	bl	80013ec <MX_USB_OTG_FS_PCD_Init>
  MX_TIM10_Init();
 8000ca0:	f000 fb08 	bl	80012b4 <MX_TIM10_Init>
  MX_TIM11_Init();
 8000ca4:	f000 fb2a 	bl	80012fc <MX_TIM11_Init>
  MX_I2C1_Init();
 8000ca8:	f000 f8d0 	bl	8000e4c <MX_I2C1_Init>
  MX_TIM3_Init();
 8000cac:	f000 f9c2 	bl	8001034 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000cb0:	f000 fa14 	bl	80010dc <MX_TIM4_Init>
  MX_TIM2_Init();
 8000cb4:	f000 f964 	bl	8000f80 <MX_TIM2_Init>
  MX_USART6_UART_Init();
 8000cb8:	f000 fb6e 	bl	8001398 <MX_USART6_UART_Init>
  MX_RTC_Init();
 8000cbc:	f000 f906 	bl	8000ecc <MX_RTC_Init>
  MX_TIM5_Init();
 8000cc0:	f000 fa82 	bl	80011c8 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  printf("enter main()!!!\n");
 8000cc4:	4803      	ldr	r0, [pc, #12]	; (8000cd4 <main+0x50>)
 8000cc6:	f008 f8c3 	bl	8008e50 <puts>
  I2C_LCD_Init();
#endif
  // ============================== END for Fan_Machine.c ==============================


  WashingMachine_Init();
 8000cca:	f001 fb5b 	bl	8002384 <WashingMachine_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  WashingMachine_Processing();
 8000cce:	f001 fb8f 	bl	80023f0 <WashingMachine_Processing>
 8000cd2:	e7fc      	b.n	8000cce <main+0x4a>
 8000cd4:	08009e68 	.word	0x08009e68

08000cd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b094      	sub	sp, #80	; 0x50
 8000cdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cde:	f107 0320 	add.w	r3, r7, #32
 8000ce2:	2230      	movs	r2, #48	; 0x30
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f008 f83c 	bl	8008d64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cec:	f107 030c 	add.w	r3, r7, #12
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	60bb      	str	r3, [r7, #8]
 8000d00:	4b29      	ldr	r3, [pc, #164]	; (8000da8 <SystemClock_Config+0xd0>)
 8000d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d04:	4a28      	ldr	r2, [pc, #160]	; (8000da8 <SystemClock_Config+0xd0>)
 8000d06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d0c:	4b26      	ldr	r3, [pc, #152]	; (8000da8 <SystemClock_Config+0xd0>)
 8000d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d14:	60bb      	str	r3, [r7, #8]
 8000d16:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d18:	2300      	movs	r3, #0
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	4b23      	ldr	r3, [pc, #140]	; (8000dac <SystemClock_Config+0xd4>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a22      	ldr	r2, [pc, #136]	; (8000dac <SystemClock_Config+0xd4>)
 8000d22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d26:	6013      	str	r3, [r2, #0]
 8000d28:	4b20      	ldr	r3, [pc, #128]	; (8000dac <SystemClock_Config+0xd4>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d30:	607b      	str	r3, [r7, #4]
 8000d32:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000d34:	2309      	movs	r3, #9
 8000d36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d38:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000d3c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d42:	2302      	movs	r3, #2
 8000d44:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d46:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d4c:	2304      	movs	r3, #4
 8000d4e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000d50:	23a8      	movs	r3, #168	; 0xa8
 8000d52:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d54:	2302      	movs	r3, #2
 8000d56:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d58:	2307      	movs	r3, #7
 8000d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d5c:	f107 0320 	add.w	r3, r7, #32
 8000d60:	4618      	mov	r0, r3
 8000d62:	f003 fdd5 	bl	8004910 <HAL_RCC_OscConfig>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000d6c:	f000 fcbc 	bl	80016e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d70:	230f      	movs	r3, #15
 8000d72:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d74:	2302      	movs	r3, #2
 8000d76:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d7c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d80:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d86:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d88:	f107 030c 	add.w	r3, r7, #12
 8000d8c:	2105      	movs	r1, #5
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f004 f836 	bl	8004e00 <HAL_RCC_ClockConfig>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000d9a:	f000 fca5 	bl	80016e8 <Error_Handler>
  }
}
 8000d9e:	bf00      	nop
 8000da0:	3750      	adds	r7, #80	; 0x50
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40023800 	.word	0x40023800
 8000dac:	40007000 	.word	0x40007000

08000db0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000db4:	4b1f      	ldr	r3, [pc, #124]	; (8000e34 <MX_ETH_Init+0x84>)
 8000db6:	4a20      	ldr	r2, [pc, #128]	; (8000e38 <MX_ETH_Init+0x88>)
 8000db8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000dba:	4b20      	ldr	r3, [pc, #128]	; (8000e3c <MX_ETH_Init+0x8c>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000dc0:	4b1e      	ldr	r3, [pc, #120]	; (8000e3c <MX_ETH_Init+0x8c>)
 8000dc2:	2280      	movs	r2, #128	; 0x80
 8000dc4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000dc6:	4b1d      	ldr	r3, [pc, #116]	; (8000e3c <MX_ETH_Init+0x8c>)
 8000dc8:	22e1      	movs	r2, #225	; 0xe1
 8000dca:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000dcc:	4b1b      	ldr	r3, [pc, #108]	; (8000e3c <MX_ETH_Init+0x8c>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000dd2:	4b1a      	ldr	r3, [pc, #104]	; (8000e3c <MX_ETH_Init+0x8c>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000dd8:	4b18      	ldr	r3, [pc, #96]	; (8000e3c <MX_ETH_Init+0x8c>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000dde:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <MX_ETH_Init+0x84>)
 8000de0:	4a16      	ldr	r2, [pc, #88]	; (8000e3c <MX_ETH_Init+0x8c>)
 8000de2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000de4:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <MX_ETH_Init+0x84>)
 8000de6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000dea:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000dec:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <MX_ETH_Init+0x84>)
 8000dee:	4a14      	ldr	r2, [pc, #80]	; (8000e40 <MX_ETH_Init+0x90>)
 8000df0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000df2:	4b10      	ldr	r3, [pc, #64]	; (8000e34 <MX_ETH_Init+0x84>)
 8000df4:	4a13      	ldr	r2, [pc, #76]	; (8000e44 <MX_ETH_Init+0x94>)
 8000df6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000df8:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <MX_ETH_Init+0x84>)
 8000dfa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000dfe:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000e00:	480c      	ldr	r0, [pc, #48]	; (8000e34 <MX_ETH_Init+0x84>)
 8000e02:	f002 fa9b 	bl	800333c <HAL_ETH_Init>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000e0c:	f000 fc6c 	bl	80016e8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000e10:	2238      	movs	r2, #56	; 0x38
 8000e12:	2100      	movs	r1, #0
 8000e14:	480c      	ldr	r0, [pc, #48]	; (8000e48 <MX_ETH_Init+0x98>)
 8000e16:	f007 ffa5 	bl	8008d64 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000e1a:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <MX_ETH_Init+0x98>)
 8000e1c:	2221      	movs	r2, #33	; 0x21
 8000e1e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000e20:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <MX_ETH_Init+0x98>)
 8000e22:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000e26:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000e28:	4b07      	ldr	r3, [pc, #28]	; (8000e48 <MX_ETH_Init+0x98>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000334 	.word	0x20000334
 8000e38:	40028000 	.word	0x40028000
 8000e3c:	20000ba0 	.word	0x20000ba0
 8000e40:	20000294 	.word	0x20000294
 8000e44:	200001f4 	.word	0x200001f4
 8000e48:	200001bc 	.word	0x200001bc

08000e4c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e50:	4b1b      	ldr	r3, [pc, #108]	; (8000ec0 <MX_I2C1_Init+0x74>)
 8000e52:	4a1c      	ldr	r2, [pc, #112]	; (8000ec4 <MX_I2C1_Init+0x78>)
 8000e54:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e56:	4b1a      	ldr	r3, [pc, #104]	; (8000ec0 <MX_I2C1_Init+0x74>)
 8000e58:	4a1b      	ldr	r2, [pc, #108]	; (8000ec8 <MX_I2C1_Init+0x7c>)
 8000e5a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e5c:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <MX_I2C1_Init+0x74>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e62:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <MX_I2C1_Init+0x74>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e68:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <MX_I2C1_Init+0x74>)
 8000e6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e6e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e70:	4b13      	ldr	r3, [pc, #76]	; (8000ec0 <MX_I2C1_Init+0x74>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e76:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <MX_I2C1_Init+0x74>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e7c:	4b10      	ldr	r3, [pc, #64]	; (8000ec0 <MX_I2C1_Init+0x74>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e82:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <MX_I2C1_Init+0x74>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e88:	480d      	ldr	r0, [pc, #52]	; (8000ec0 <MX_I2C1_Init+0x74>)
 8000e8a:	f002 ff5d 	bl	8003d48 <HAL_I2C_Init>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e94:	f000 fc28 	bl	80016e8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4809      	ldr	r0, [pc, #36]	; (8000ec0 <MX_I2C1_Init+0x74>)
 8000e9c:	f003 fb9f 	bl	80045de <HAL_I2CEx_ConfigAnalogFilter>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000ea6:	f000 fc1f 	bl	80016e8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000eaa:	2100      	movs	r1, #0
 8000eac:	4804      	ldr	r0, [pc, #16]	; (8000ec0 <MX_I2C1_Init+0x74>)
 8000eae:	f003 fbd2 	bl	8004656 <HAL_I2CEx_ConfigDigitalFilter>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000eb8:	f000 fc16 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	200003e4 	.word	0x200003e4
 8000ec4:	40005400 	.word	0x40005400
 8000ec8:	000186a0 	.word	0x000186a0

08000ecc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000ed2:	1d3b      	adds	r3, r7, #4
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ee4:	4b24      	ldr	r3, [pc, #144]	; (8000f78 <MX_RTC_Init+0xac>)
 8000ee6:	4a25      	ldr	r2, [pc, #148]	; (8000f7c <MX_RTC_Init+0xb0>)
 8000ee8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000eea:	4b23      	ldr	r3, [pc, #140]	; (8000f78 <MX_RTC_Init+0xac>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000ef0:	4b21      	ldr	r3, [pc, #132]	; (8000f78 <MX_RTC_Init+0xac>)
 8000ef2:	227f      	movs	r2, #127	; 0x7f
 8000ef4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000ef6:	4b20      	ldr	r3, [pc, #128]	; (8000f78 <MX_RTC_Init+0xac>)
 8000ef8:	22ff      	movs	r2, #255	; 0xff
 8000efa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000efc:	4b1e      	ldr	r3, [pc, #120]	; (8000f78 <MX_RTC_Init+0xac>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f02:	4b1d      	ldr	r3, [pc, #116]	; (8000f78 <MX_RTC_Init+0xac>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f08:	4b1b      	ldr	r3, [pc, #108]	; (8000f78 <MX_RTC_Init+0xac>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f0e:	481a      	ldr	r0, [pc, #104]	; (8000f78 <MX_RTC_Init+0xac>)
 8000f10:	f004 fb56 	bl	80055c0 <HAL_RTC_Init>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000f1a:	f000 fbe5 	bl	80016e8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x8;
 8000f1e:	2308      	movs	r3, #8
 8000f20:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x38;
 8000f22:	2338      	movs	r3, #56	; 0x38
 8000f24:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x15;
 8000f26:	2315      	movs	r3, #21
 8000f28:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000f32:	1d3b      	adds	r3, r7, #4
 8000f34:	2201      	movs	r2, #1
 8000f36:	4619      	mov	r1, r3
 8000f38:	480f      	ldr	r0, [pc, #60]	; (8000f78 <MX_RTC_Init+0xac>)
 8000f3a:	f004 fbb7 	bl	80056ac <HAL_RTC_SetTime>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000f44:	f000 fbd0 	bl	80016e8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_OCTOBER;
 8000f4c:	2310      	movs	r3, #16
 8000f4e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x16;
 8000f50:	2316      	movs	r3, #22
 8000f52:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 8000f54:	2323      	movs	r3, #35	; 0x23
 8000f56:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000f58:	463b      	mov	r3, r7
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4806      	ldr	r0, [pc, #24]	; (8000f78 <MX_RTC_Init+0xac>)
 8000f60:	f004 fc9c 	bl	800589c <HAL_RTC_SetDate>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000f6a:	f000 fbbd 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f6e:	bf00      	nop
 8000f70:	3718      	adds	r7, #24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000438 	.word	0x20000438
 8000f7c:	40002800 	.word	0x40002800

08000f80 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08a      	sub	sp, #40	; 0x28
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f86:	f107 0320 	add.w	r3, r7, #32
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f90:	1d3b      	adds	r3, r7, #4
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	605a      	str	r2, [r3, #4]
 8000f98:	609a      	str	r2, [r3, #8]
 8000f9a:	60da      	str	r2, [r3, #12]
 8000f9c:	611a      	str	r2, [r3, #16]
 8000f9e:	615a      	str	r2, [r3, #20]
 8000fa0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fa2:	4b23      	ldr	r3, [pc, #140]	; (8001030 <MX_TIM2_Init+0xb0>)
 8000fa4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fa8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680-1;
 8000faa:	4b21      	ldr	r3, [pc, #132]	; (8001030 <MX_TIM2_Init+0xb0>)
 8000fac:	f240 628f 	movw	r2, #1679	; 0x68f
 8000fb0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb2:	4b1f      	ldr	r3, [pc, #124]	; (8001030 <MX_TIM2_Init+0xb0>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000fb8:	4b1d      	ldr	r3, [pc, #116]	; (8001030 <MX_TIM2_Init+0xb0>)
 8000fba:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fbe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc0:	4b1b      	ldr	r3, [pc, #108]	; (8001030 <MX_TIM2_Init+0xb0>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fc6:	4b1a      	ldr	r3, [pc, #104]	; (8001030 <MX_TIM2_Init+0xb0>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000fcc:	4818      	ldr	r0, [pc, #96]	; (8001030 <MX_TIM2_Init+0xb0>)
 8000fce:	f004 feb5 	bl	8005d3c <HAL_TIM_PWM_Init>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000fd8:	f000 fb86 	bl	80016e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fe4:	f107 0320 	add.w	r3, r7, #32
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4811      	ldr	r0, [pc, #68]	; (8001030 <MX_TIM2_Init+0xb0>)
 8000fec:	f006 fa86 	bl	80074fc <HAL_TIMEx_MasterConfigSynchronization>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000ff6:	f000 fb77 	bl	80016e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ffa:	2360      	movs	r3, #96	; 0x60
 8000ffc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8000ffe:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001002:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001004:	2300      	movs	r3, #0
 8001006:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800100c:	1d3b      	adds	r3, r7, #4
 800100e:	2200      	movs	r2, #0
 8001010:	4619      	mov	r1, r3
 8001012:	4807      	ldr	r0, [pc, #28]	; (8001030 <MX_TIM2_Init+0xb0>)
 8001014:	f005 fc4c 	bl	80068b0 <HAL_TIM_PWM_ConfigChannel>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 800101e:	f000 fb63 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001022:	4803      	ldr	r0, [pc, #12]	; (8001030 <MX_TIM2_Init+0xb0>)
 8001024:	f000 fdd2 	bl	8001bcc <HAL_TIM_MspPostInit>

}
 8001028:	bf00      	nop
 800102a:	3728      	adds	r7, #40	; 0x28
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20000458 	.word	0x20000458

08001034 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800103a:	f107 0310 	add.w	r3, r7, #16
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001044:	463b      	mov	r3, r7
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]
 800104e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001050:	4b20      	ldr	r3, [pc, #128]	; (80010d4 <MX_TIM3_Init+0xa0>)
 8001052:	4a21      	ldr	r2, [pc, #132]	; (80010d8 <MX_TIM3_Init+0xa4>)
 8001054:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8001056:	4b1f      	ldr	r3, [pc, #124]	; (80010d4 <MX_TIM3_Init+0xa0>)
 8001058:	2253      	movs	r2, #83	; 0x53
 800105a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800105c:	4b1d      	ldr	r3, [pc, #116]	; (80010d4 <MX_TIM3_Init+0xa0>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001062:	4b1c      	ldr	r3, [pc, #112]	; (80010d4 <MX_TIM3_Init+0xa0>)
 8001064:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001068:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800106a:	4b1a      	ldr	r3, [pc, #104]	; (80010d4 <MX_TIM3_Init+0xa0>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001070:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <MX_TIM3_Init+0xa0>)
 8001072:	2200      	movs	r2, #0
 8001074:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001076:	4817      	ldr	r0, [pc, #92]	; (80010d4 <MX_TIM3_Init+0xa0>)
 8001078:	f005 f8fe 	bl	8006278 <HAL_TIM_IC_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001082:	f000 fb31 	bl	80016e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800108a:	2300      	movs	r3, #0
 800108c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800108e:	f107 0310 	add.w	r3, r7, #16
 8001092:	4619      	mov	r1, r3
 8001094:	480f      	ldr	r0, [pc, #60]	; (80010d4 <MX_TIM3_Init+0xa0>)
 8001096:	f006 fa31 	bl	80074fc <HAL_TIMEx_MasterConfigSynchronization>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80010a0:	f000 fb22 	bl	80016e8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80010a4:	230a      	movs	r3, #10
 80010a6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010a8:	2301      	movs	r3, #1
 80010aa:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80010ac:	2300      	movs	r3, #0
 80010ae:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80010b4:	463b      	mov	r3, r7
 80010b6:	2200      	movs	r2, #0
 80010b8:	4619      	mov	r1, r3
 80010ba:	4806      	ldr	r0, [pc, #24]	; (80010d4 <MX_TIM3_Init+0xa0>)
 80010bc:	f005 fb5c 	bl	8006778 <HAL_TIM_IC_ConfigChannel>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80010c6:	f000 fb0f 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80010ca:	bf00      	nop
 80010cc:	3718      	adds	r7, #24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	200004a0 	.word	0x200004a0
 80010d8:	40000400 	.word	0x40000400

080010dc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08e      	sub	sp, #56	; 0x38
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	609a      	str	r2, [r3, #8]
 80010ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f0:	f107 0320 	add.w	r3, r7, #32
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
 8001108:	615a      	str	r2, [r3, #20]
 800110a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800110c:	4b2c      	ldr	r3, [pc, #176]	; (80011c0 <MX_TIM4_Init+0xe4>)
 800110e:	4a2d      	ldr	r2, [pc, #180]	; (80011c4 <MX_TIM4_Init+0xe8>)
 8001110:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840-1;
 8001112:	4b2b      	ldr	r3, [pc, #172]	; (80011c0 <MX_TIM4_Init+0xe4>)
 8001114:	f240 3247 	movw	r2, #839	; 0x347
 8001118:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800111a:	4b29      	ldr	r3, [pc, #164]	; (80011c0 <MX_TIM4_Init+0xe4>)
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8001120:	4b27      	ldr	r3, [pc, #156]	; (80011c0 <MX_TIM4_Init+0xe4>)
 8001122:	2263      	movs	r2, #99	; 0x63
 8001124:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001126:	4b26      	ldr	r3, [pc, #152]	; (80011c0 <MX_TIM4_Init+0xe4>)
 8001128:	2200      	movs	r2, #0
 800112a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800112c:	4b24      	ldr	r3, [pc, #144]	; (80011c0 <MX_TIM4_Init+0xe4>)
 800112e:	2200      	movs	r2, #0
 8001130:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001132:	4823      	ldr	r0, [pc, #140]	; (80011c0 <MX_TIM4_Init+0xe4>)
 8001134:	f004 fd42 	bl	8005bbc <HAL_TIM_Base_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800113e:	f000 fad3 	bl	80016e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001142:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001146:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001148:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800114c:	4619      	mov	r1, r3
 800114e:	481c      	ldr	r0, [pc, #112]	; (80011c0 <MX_TIM4_Init+0xe4>)
 8001150:	f005 fc70 	bl	8006a34 <HAL_TIM_ConfigClockSource>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800115a:	f000 fac5 	bl	80016e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800115e:	4818      	ldr	r0, [pc, #96]	; (80011c0 <MX_TIM4_Init+0xe4>)
 8001160:	f004 fdec 	bl	8005d3c <HAL_TIM_PWM_Init>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800116a:	f000 fabd 	bl	80016e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800116e:	2300      	movs	r3, #0
 8001170:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001172:	2300      	movs	r3, #0
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001176:	f107 0320 	add.w	r3, r7, #32
 800117a:	4619      	mov	r1, r3
 800117c:	4810      	ldr	r0, [pc, #64]	; (80011c0 <MX_TIM4_Init+0xe4>)
 800117e:	f006 f9bd 	bl	80074fc <HAL_TIMEx_MasterConfigSynchronization>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001188:	f000 faae 	bl	80016e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800118c:	2360      	movs	r3, #96	; 0x60
 800118e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 70-1;
 8001190:	2345      	movs	r3, #69	; 0x45
 8001192:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001194:	2300      	movs	r3, #0
 8001196:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001198:	2304      	movs	r3, #4
 800119a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800119c:	1d3b      	adds	r3, r7, #4
 800119e:	2200      	movs	r2, #0
 80011a0:	4619      	mov	r1, r3
 80011a2:	4807      	ldr	r0, [pc, #28]	; (80011c0 <MX_TIM4_Init+0xe4>)
 80011a4:	f005 fb84 	bl	80068b0 <HAL_TIM_PWM_ConfigChannel>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80011ae:	f000 fa9b 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80011b2:	4803      	ldr	r0, [pc, #12]	; (80011c0 <MX_TIM4_Init+0xe4>)
 80011b4:	f000 fd0a 	bl	8001bcc <HAL_TIM_MspPostInit>

}
 80011b8:	bf00      	nop
 80011ba:	3738      	adds	r7, #56	; 0x38
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	200004e8 	.word	0x200004e8
 80011c4:	40000800 	.word	0x40000800

080011c8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08e      	sub	sp, #56	; 0x38
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	605a      	str	r2, [r3, #4]
 80011d8:	609a      	str	r2, [r3, #8]
 80011da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011dc:	f107 0320 	add.w	r3, r7, #32
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011e6:	1d3b      	adds	r3, r7, #4
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
 80011f4:	615a      	str	r2, [r3, #20]
 80011f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80011f8:	4b2c      	ldr	r3, [pc, #176]	; (80012ac <MX_TIM5_Init+0xe4>)
 80011fa:	4a2d      	ldr	r2, [pc, #180]	; (80012b0 <MX_TIM5_Init+0xe8>)
 80011fc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 52.5-1;
 80011fe:	4b2b      	ldr	r3, [pc, #172]	; (80012ac <MX_TIM5_Init+0xe4>)
 8001200:	2233      	movs	r2, #51	; 0x33
 8001202:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001204:	4b29      	ldr	r3, [pc, #164]	; (80012ac <MX_TIM5_Init+0xe4>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 400-1;
 800120a:	4b28      	ldr	r3, [pc, #160]	; (80012ac <MX_TIM5_Init+0xe4>)
 800120c:	f240 128f 	movw	r2, #399	; 0x18f
 8001210:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001212:	4b26      	ldr	r3, [pc, #152]	; (80012ac <MX_TIM5_Init+0xe4>)
 8001214:	2200      	movs	r2, #0
 8001216:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001218:	4b24      	ldr	r3, [pc, #144]	; (80012ac <MX_TIM5_Init+0xe4>)
 800121a:	2200      	movs	r2, #0
 800121c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800121e:	4823      	ldr	r0, [pc, #140]	; (80012ac <MX_TIM5_Init+0xe4>)
 8001220:	f004 fccc 	bl	8005bbc <HAL_TIM_Base_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800122a:	f000 fa5d 	bl	80016e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800122e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001232:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001234:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001238:	4619      	mov	r1, r3
 800123a:	481c      	ldr	r0, [pc, #112]	; (80012ac <MX_TIM5_Init+0xe4>)
 800123c:	f005 fbfa 	bl	8006a34 <HAL_TIM_ConfigClockSource>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8001246:	f000 fa4f 	bl	80016e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800124a:	4818      	ldr	r0, [pc, #96]	; (80012ac <MX_TIM5_Init+0xe4>)
 800124c:	f004 fd76 	bl	8005d3c <HAL_TIM_PWM_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8001256:	f000 fa47 	bl	80016e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800125a:	2300      	movs	r3, #0
 800125c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800125e:	2300      	movs	r3, #0
 8001260:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001262:	f107 0320 	add.w	r3, r7, #32
 8001266:	4619      	mov	r1, r3
 8001268:	4810      	ldr	r0, [pc, #64]	; (80012ac <MX_TIM5_Init+0xe4>)
 800126a:	f006 f947 	bl	80074fc <HAL_TIMEx_MasterConfigSynchronization>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001274:	f000 fa38 	bl	80016e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001278:	2360      	movs	r3, #96	; 0x60
 800127a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 200-1;
 800127c:	23c7      	movs	r3, #199	; 0xc7
 800127e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001280:	2300      	movs	r3, #0
 8001282:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001288:	1d3b      	adds	r3, r7, #4
 800128a:	220c      	movs	r2, #12
 800128c:	4619      	mov	r1, r3
 800128e:	4807      	ldr	r0, [pc, #28]	; (80012ac <MX_TIM5_Init+0xe4>)
 8001290:	f005 fb0e 	bl	80068b0 <HAL_TIM_PWM_ConfigChannel>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800129a:	f000 fa25 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800129e:	4803      	ldr	r0, [pc, #12]	; (80012ac <MX_TIM5_Init+0xe4>)
 80012a0:	f000 fc94 	bl	8001bcc <HAL_TIM_MspPostInit>

}
 80012a4:	bf00      	nop
 80012a6:	3738      	adds	r7, #56	; 0x38
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20000530 	.word	0x20000530
 80012b0:	40000c00 	.word	0x40000c00

080012b4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80012b8:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <MX_TIM10_Init+0x40>)
 80012ba:	4a0f      	ldr	r2, [pc, #60]	; (80012f8 <MX_TIM10_Init+0x44>)
 80012bc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 80012be:	4b0d      	ldr	r3, [pc, #52]	; (80012f4 <MX_TIM10_Init+0x40>)
 80012c0:	22a7      	movs	r2, #167	; 0xa7
 80012c2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c4:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <MX_TIM10_Init+0x40>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000-1;
 80012ca:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <MX_TIM10_Init+0x40>)
 80012cc:	f242 720f 	movw	r2, #9999	; 0x270f
 80012d0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d2:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <MX_TIM10_Init+0x40>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <MX_TIM10_Init+0x40>)
 80012da:	2200      	movs	r2, #0
 80012dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80012de:	4805      	ldr	r0, [pc, #20]	; (80012f4 <MX_TIM10_Init+0x40>)
 80012e0:	f004 fc6c 	bl	8005bbc <HAL_TIM_Base_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80012ea:	f000 f9fd 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000578 	.word	0x20000578
 80012f8:	40014400 	.word	0x40014400

080012fc <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001300:	4b0e      	ldr	r3, [pc, #56]	; (800133c <MX_TIM11_Init+0x40>)
 8001302:	4a0f      	ldr	r2, [pc, #60]	; (8001340 <MX_TIM11_Init+0x44>)
 8001304:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 168-1;
 8001306:	4b0d      	ldr	r3, [pc, #52]	; (800133c <MX_TIM11_Init+0x40>)
 8001308:	22a7      	movs	r2, #167	; 0xa7
 800130a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800130c:	4b0b      	ldr	r3, [pc, #44]	; (800133c <MX_TIM11_Init+0x40>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001312:	4b0a      	ldr	r3, [pc, #40]	; (800133c <MX_TIM11_Init+0x40>)
 8001314:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001318:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800131a:	4b08      	ldr	r3, [pc, #32]	; (800133c <MX_TIM11_Init+0x40>)
 800131c:	2200      	movs	r2, #0
 800131e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001320:	4b06      	ldr	r3, [pc, #24]	; (800133c <MX_TIM11_Init+0x40>)
 8001322:	2200      	movs	r2, #0
 8001324:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001326:	4805      	ldr	r0, [pc, #20]	; (800133c <MX_TIM11_Init+0x40>)
 8001328:	f004 fc48 	bl	8005bbc <HAL_TIM_Base_Init>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001332:	f000 f9d9 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	200005c0 	.word	0x200005c0
 8001340:	40014800 	.word	0x40014800

08001344 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001348:	4b11      	ldr	r3, [pc, #68]	; (8001390 <MX_USART3_UART_Init+0x4c>)
 800134a:	4a12      	ldr	r2, [pc, #72]	; (8001394 <MX_USART3_UART_Init+0x50>)
 800134c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800134e:	4b10      	ldr	r3, [pc, #64]	; (8001390 <MX_USART3_UART_Init+0x4c>)
 8001350:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001354:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001356:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <MX_USART3_UART_Init+0x4c>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800135c:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <MX_USART3_UART_Init+0x4c>)
 800135e:	2200      	movs	r2, #0
 8001360:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001362:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <MX_USART3_UART_Init+0x4c>)
 8001364:	2200      	movs	r2, #0
 8001366:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001368:	4b09      	ldr	r3, [pc, #36]	; (8001390 <MX_USART3_UART_Init+0x4c>)
 800136a:	220c      	movs	r2, #12
 800136c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800136e:	4b08      	ldr	r3, [pc, #32]	; (8001390 <MX_USART3_UART_Init+0x4c>)
 8001370:	2200      	movs	r2, #0
 8001372:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <MX_USART3_UART_Init+0x4c>)
 8001376:	2200      	movs	r2, #0
 8001378:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800137a:	4805      	ldr	r0, [pc, #20]	; (8001390 <MX_USART3_UART_Init+0x4c>)
 800137c:	f006 f94e 	bl	800761c <HAL_UART_Init>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001386:	f000 f9af 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000608 	.word	0x20000608
 8001394:	40004800 	.word	0x40004800

08001398 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800139c:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <MX_USART6_UART_Init+0x4c>)
 800139e:	4a12      	ldr	r2, [pc, #72]	; (80013e8 <MX_USART6_UART_Init+0x50>)
 80013a0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80013a2:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <MX_USART6_UART_Init+0x4c>)
 80013a4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80013a8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80013aa:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <MX_USART6_UART_Init+0x4c>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80013b0:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <MX_USART6_UART_Init+0x4c>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80013b6:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <MX_USART6_UART_Init+0x4c>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80013bc:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <MX_USART6_UART_Init+0x4c>)
 80013be:	220c      	movs	r2, #12
 80013c0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013c2:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <MX_USART6_UART_Init+0x4c>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c8:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <MX_USART6_UART_Init+0x4c>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80013ce:	4805      	ldr	r0, [pc, #20]	; (80013e4 <MX_USART6_UART_Init+0x4c>)
 80013d0:	f006 f924 	bl	800761c <HAL_UART_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80013da:	f000 f985 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	2000064c 	.word	0x2000064c
 80013e8:	40011400 	.word	0x40011400

080013ec <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80013f0:	4b14      	ldr	r3, [pc, #80]	; (8001444 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80013f6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80013f8:	4b12      	ldr	r3, [pc, #72]	; (8001444 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013fa:	2204      	movs	r2, #4
 80013fc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80013fe:	4b11      	ldr	r3, [pc, #68]	; (8001444 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001400:	2202      	movs	r2, #2
 8001402:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001404:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001406:	2200      	movs	r2, #0
 8001408:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800140a:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800140c:	2202      	movs	r2, #2
 800140e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001412:	2201      	movs	r2, #1
 8001414:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001416:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001418:	2200      	movs	r2, #0
 800141a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800141c:	4b09      	ldr	r3, [pc, #36]	; (8001444 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800141e:	2200      	movs	r2, #0
 8001420:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001422:	4b08      	ldr	r3, [pc, #32]	; (8001444 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001424:	2201      	movs	r2, #1
 8001426:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800142a:	2200      	movs	r2, #0
 800142c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800142e:	4805      	ldr	r0, [pc, #20]	; (8001444 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001430:	f003 f950 	bl	80046d4 <HAL_PCD_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800143a:	f000 f955 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20000690 	.word	0x20000690

08001448 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08e      	sub	sp, #56	; 0x38
 800144c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	605a      	str	r2, [r3, #4]
 8001458:	609a      	str	r2, [r3, #8]
 800145a:	60da      	str	r2, [r3, #12]
 800145c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	623b      	str	r3, [r7, #32]
 8001462:	4b99      	ldr	r3, [pc, #612]	; (80016c8 <MX_GPIO_Init+0x280>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a98      	ldr	r2, [pc, #608]	; (80016c8 <MX_GPIO_Init+0x280>)
 8001468:	f043 0304 	orr.w	r3, r3, #4
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b96      	ldr	r3, [pc, #600]	; (80016c8 <MX_GPIO_Init+0x280>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0304 	and.w	r3, r3, #4
 8001476:	623b      	str	r3, [r7, #32]
 8001478:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	61fb      	str	r3, [r7, #28]
 800147e:	4b92      	ldr	r3, [pc, #584]	; (80016c8 <MX_GPIO_Init+0x280>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a91      	ldr	r2, [pc, #580]	; (80016c8 <MX_GPIO_Init+0x280>)
 8001484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b8f      	ldr	r3, [pc, #572]	; (80016c8 <MX_GPIO_Init+0x280>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001492:	61fb      	str	r3, [r7, #28]
 8001494:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	61bb      	str	r3, [r7, #24]
 800149a:	4b8b      	ldr	r3, [pc, #556]	; (80016c8 <MX_GPIO_Init+0x280>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a8a      	ldr	r2, [pc, #552]	; (80016c8 <MX_GPIO_Init+0x280>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b88      	ldr	r3, [pc, #544]	; (80016c8 <MX_GPIO_Init+0x280>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	61bb      	str	r3, [r7, #24]
 80014b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	617b      	str	r3, [r7, #20]
 80014b6:	4b84      	ldr	r3, [pc, #528]	; (80016c8 <MX_GPIO_Init+0x280>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a83      	ldr	r2, [pc, #524]	; (80016c8 <MX_GPIO_Init+0x280>)
 80014bc:	f043 0302 	orr.w	r3, r3, #2
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b81      	ldr	r3, [pc, #516]	; (80016c8 <MX_GPIO_Init+0x280>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	617b      	str	r3, [r7, #20]
 80014cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	613b      	str	r3, [r7, #16]
 80014d2:	4b7d      	ldr	r3, [pc, #500]	; (80016c8 <MX_GPIO_Init+0x280>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a7c      	ldr	r2, [pc, #496]	; (80016c8 <MX_GPIO_Init+0x280>)
 80014d8:	f043 0320 	orr.w	r3, r3, #32
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b7a      	ldr	r3, [pc, #488]	; (80016c8 <MX_GPIO_Init+0x280>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0320 	and.w	r3, r3, #32
 80014e6:	613b      	str	r3, [r7, #16]
 80014e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	4b76      	ldr	r3, [pc, #472]	; (80016c8 <MX_GPIO_Init+0x280>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a75      	ldr	r2, [pc, #468]	; (80016c8 <MX_GPIO_Init+0x280>)
 80014f4:	f043 0310 	orr.w	r3, r3, #16
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b73      	ldr	r3, [pc, #460]	; (80016c8 <MX_GPIO_Init+0x280>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f003 0310 	and.w	r3, r3, #16
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	4b6f      	ldr	r3, [pc, #444]	; (80016c8 <MX_GPIO_Init+0x280>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	4a6e      	ldr	r2, [pc, #440]	; (80016c8 <MX_GPIO_Init+0x280>)
 8001510:	f043 0308 	orr.w	r3, r3, #8
 8001514:	6313      	str	r3, [r2, #48]	; 0x30
 8001516:	4b6c      	ldr	r3, [pc, #432]	; (80016c8 <MX_GPIO_Init+0x280>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	f003 0308 	and.w	r3, r3, #8
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	607b      	str	r3, [r7, #4]
 8001526:	4b68      	ldr	r3, [pc, #416]	; (80016c8 <MX_GPIO_Init+0x280>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	4a67      	ldr	r2, [pc, #412]	; (80016c8 <MX_GPIO_Init+0x280>)
 800152c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001530:	6313      	str	r3, [r2, #48]	; 0x30
 8001532:	4b65      	ldr	r3, [pc, #404]	; (80016c8 <MX_GPIO_Init+0x280>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 800153e:	2200      	movs	r2, #0
 8001540:	2101      	movs	r1, #1
 8001542:	4862      	ldr	r0, [pc, #392]	; (80016cc <MX_GPIO_Init+0x284>)
 8001544:	f002 fbe6 	bl	8003d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|FND_A_Pin|FND_B_Pin|FND_G_Pin
 8001548:	2200      	movs	r2, #0
 800154a:	f24d 01ff 	movw	r1, #53503	; 0xd0ff
 800154e:	4860      	ldr	r0, [pc, #384]	; (80016d0 <MX_GPIO_Init+0x288>)
 8001550:	f002 fbe0 	bl	8003d14 <HAL_GPIO_WritePin>
                          |LD3_Pin|FND_DP_Pin|FND_C_Pin|FND_D_Pin
                          |FND_E_Pin|FND_F_Pin|LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, GPIO_PIN_RESET);
 8001554:	2200      	movs	r2, #0
 8001556:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800155a:	485e      	ldr	r0, [pc, #376]	; (80016d4 <MX_GPIO_Init+0x28c>)
 800155c:	f002 fbda 	bl	8003d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, IN1_DCMOTOR_Pin|IN2_DCMOTOR_Pin|FAN_ROTATE_DERECTION_LED_Pin, GPIO_PIN_RESET);
 8001560:	2200      	movs	r2, #0
 8001562:	f44f 510c 	mov.w	r1, #8960	; 0x2300
 8001566:	485c      	ldr	r0, [pc, #368]	; (80016d8 <MX_GPIO_Init+0x290>)
 8001568:	f002 fbd4 	bl	8003d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800156c:	2200      	movs	r2, #0
 800156e:	2140      	movs	r1, #64	; 0x40
 8001570:	485a      	ldr	r0, [pc, #360]	; (80016dc <MX_GPIO_Init+0x294>)
 8001572:	f002 fbcf 	bl	8003d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FND_D1_Pin|FND_D2_Pin|FND_D3_Pin|FND_D4_Pin, GPIO_PIN_RESET);
 8001576:	2200      	movs	r2, #0
 8001578:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 800157c:	4858      	ldr	r0, [pc, #352]	; (80016e0 <MX_GPIO_Init+0x298>)
 800157e:	f002 fbc9 	bl	8003d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LEDBAR0_Pin|LEDBAR1_Pin|LEDBAR2_Pin|LEDBAR3_Pin
 8001582:	2200      	movs	r2, #0
 8001584:	21ff      	movs	r1, #255	; 0xff
 8001586:	4857      	ldr	r0, [pc, #348]	; (80016e4 <MX_GPIO_Init+0x29c>)
 8001588:	f002 fbc4 	bl	8003d14 <HAL_GPIO_WritePin>
                          |LEDBAR4_Pin|LEDBAR5_Pin|LEDBAR6_Pin|LEDBAR7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800158c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001592:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001596:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800159c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a0:	4619      	mov	r1, r3
 80015a2:	484f      	ldr	r0, [pc, #316]	; (80016e0 <MX_GPIO_Init+0x298>)
 80015a4:	f002 f9f2 	bl	800398c <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 80015a8:	2301      	movs	r3, #1
 80015aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ac:	2301      	movs	r3, #1
 80015ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b4:	2300      	movs	r3, #0
 80015b6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 80015b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015bc:	4619      	mov	r1, r3
 80015be:	4843      	ldr	r0, [pc, #268]	; (80016cc <MX_GPIO_Init+0x284>)
 80015c0:	f002 f9e4 	bl	800398c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin FND_A_Pin FND_B_Pin FND_G_Pin
                           LD3_Pin FND_DP_Pin FND_C_Pin FND_D_Pin
                           FND_E_Pin FND_F_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|FND_A_Pin|FND_B_Pin|FND_G_Pin
 80015c4:	f24d 03ff 	movw	r3, #53503	; 0xd0ff
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
                          |LD3_Pin|FND_DP_Pin|FND_C_Pin|FND_D_Pin
                          |FND_E_Pin|FND_F_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ca:	2301      	movs	r3, #1
 80015cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	2300      	movs	r3, #0
 80015d4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015da:	4619      	mov	r1, r3
 80015dc:	483c      	ldr	r0, [pc, #240]	; (80016d0 <MX_GPIO_Init+0x288>)
 80015de:	f002 f9d5 	bl	800398c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULTRASONIC_TRIGGER_Pin */
  GPIO_InitStruct.Pin = ULTRASONIC_TRIGGER_Pin;
 80015e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e8:	2301      	movs	r3, #1
 80015ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f0:	2300      	movs	r3, #0
 80015f2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ULTRASONIC_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 80015f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f8:	4619      	mov	r1, r3
 80015fa:	4836      	ldr	r0, [pc, #216]	; (80016d4 <MX_GPIO_Init+0x28c>)
 80015fc:	f002 f9c6 	bl	800398c <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_DCMOTOR_Pin IN2_DCMOTOR_Pin FAN_ROTATE_DERECTION_LED_Pin */
  GPIO_InitStruct.Pin = IN1_DCMOTOR_Pin|IN2_DCMOTOR_Pin|FAN_ROTATE_DERECTION_LED_Pin;
 8001600:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001606:	2301      	movs	r3, #1
 8001608:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160e:	2300      	movs	r3, #0
 8001610:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001612:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001616:	4619      	mov	r1, r3
 8001618:	482f      	ldr	r0, [pc, #188]	; (80016d8 <MX_GPIO_Init+0x290>)
 800161a:	f002 f9b7 	bl	800398c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON3_Pin BUTTON2_Pin BUTTON1_Pin BUTTON0_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON2_Pin|BUTTON1_Pin|BUTTON0_Pin;
 800161e:	f44f 4354 	mov.w	r3, #54272	; 0xd400
 8001622:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001624:	2300      	movs	r3, #0
 8001626:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800162c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001630:	4619      	mov	r1, r3
 8001632:	4829      	ldr	r0, [pc, #164]	; (80016d8 <MX_GPIO_Init+0x290>)
 8001634:	f002 f9aa 	bl	800398c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON4_Pin */
  GPIO_InitStruct.Pin = BUTTON4_Pin;
 8001638:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800163e:	2300      	movs	r3, #0
 8001640:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BUTTON4_GPIO_Port, &GPIO_InitStruct);
 8001646:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800164a:	4619      	mov	r1, r3
 800164c:	4820      	ldr	r0, [pc, #128]	; (80016d0 <MX_GPIO_Init+0x288>)
 800164e:	f002 f99d 	bl	800398c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001652:	2340      	movs	r3, #64	; 0x40
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001656:	2301      	movs	r3, #1
 8001658:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165e:	2300      	movs	r3, #0
 8001660:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001662:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001666:	4619      	mov	r1, r3
 8001668:	481c      	ldr	r0, [pc, #112]	; (80016dc <MX_GPIO_Init+0x294>)
 800166a:	f002 f98f 	bl	800398c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800166e:	2380      	movs	r3, #128	; 0x80
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001672:	2300      	movs	r3, #0
 8001674:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800167a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800167e:	4619      	mov	r1, r3
 8001680:	4816      	ldr	r0, [pc, #88]	; (80016dc <MX_GPIO_Init+0x294>)
 8001682:	f002 f983 	bl	800398c <HAL_GPIO_Init>

  /*Configure GPIO pins : FND_D1_Pin FND_D2_Pin FND_D3_Pin FND_D4_Pin */
  GPIO_InitStruct.Pin = FND_D1_Pin|FND_D2_Pin|FND_D3_Pin|FND_D4_Pin;
 8001686:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800168a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168c:	2301      	movs	r3, #1
 800168e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001694:	2300      	movs	r3, #0
 8001696:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001698:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800169c:	4619      	mov	r1, r3
 800169e:	4810      	ldr	r0, [pc, #64]	; (80016e0 <MX_GPIO_Init+0x298>)
 80016a0:	f002 f974 	bl	800398c <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDBAR0_Pin LEDBAR1_Pin LEDBAR2_Pin LEDBAR3_Pin
                           LEDBAR4_Pin LEDBAR5_Pin LEDBAR6_Pin LEDBAR7_Pin */
  GPIO_InitStruct.Pin = LEDBAR0_Pin|LEDBAR1_Pin|LEDBAR2_Pin|LEDBAR3_Pin
 80016a4:	23ff      	movs	r3, #255	; 0xff
 80016a6:	627b      	str	r3, [r7, #36]	; 0x24
                          |LEDBAR4_Pin|LEDBAR5_Pin|LEDBAR6_Pin|LEDBAR7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a8:	2301      	movs	r3, #1
 80016aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b0:	2300      	movs	r3, #0
 80016b2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b8:	4619      	mov	r1, r3
 80016ba:	480a      	ldr	r0, [pc, #40]	; (80016e4 <MX_GPIO_Init+0x29c>)
 80016bc:	f002 f966 	bl	800398c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016c0:	bf00      	nop
 80016c2:	3738      	adds	r7, #56	; 0x38
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40023800 	.word	0x40023800
 80016cc:	40020000 	.word	0x40020000
 80016d0:	40020400 	.word	0x40020400
 80016d4:	40021400 	.word	0x40021400
 80016d8:	40021000 	.word	0x40021000
 80016dc:	40021800 	.word	0x40021800
 80016e0:	40020800 	.word	0x40020800
 80016e4:	40020c00 	.word	0x40020c00

080016e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016ec:	b672      	cpsid	i
}
 80016ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016f0:	e7fe      	b.n	80016f0 <Error_Handler+0x8>
	...

080016f4 <open_WashingMachine_Lid>:
	// 서보모터 데이터 시트에서 1.5ms동안 유지되는 high 신호는 90도 회전으로 본다. ==> 0.00002 * 75개
	// 서보모터 데이터 시트에서 1ms동안 유지되는 high 신호는 0도 회전으로 본다. ==> 0.00002 * 50개
}

void open_WashingMachine_Lid(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 50);
 80016f8:	4b04      	ldr	r3, [pc, #16]	; (800170c <open_WashingMachine_Lid+0x18>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2232      	movs	r2, #50	; 0x32
 80016fe:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	20000458 	.word	0x20000458

08001710 <close_WashingMachine_Lid>:

void close_WashingMachine_Lid(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 100);
 8001714:	4b04      	ldr	r3, [pc, #16]	; (8001728 <close_WashingMachine_Lid+0x18>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2264      	movs	r2, #100	; 0x64
 800171a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	20000458 	.word	0x20000458

0800172c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	607b      	str	r3, [r7, #4]
 8001736:	4b10      	ldr	r3, [pc, #64]	; (8001778 <HAL_MspInit+0x4c>)
 8001738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173a:	4a0f      	ldr	r2, [pc, #60]	; (8001778 <HAL_MspInit+0x4c>)
 800173c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001740:	6453      	str	r3, [r2, #68]	; 0x44
 8001742:	4b0d      	ldr	r3, [pc, #52]	; (8001778 <HAL_MspInit+0x4c>)
 8001744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001746:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800174a:	607b      	str	r3, [r7, #4]
 800174c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	603b      	str	r3, [r7, #0]
 8001752:	4b09      	ldr	r3, [pc, #36]	; (8001778 <HAL_MspInit+0x4c>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001756:	4a08      	ldr	r2, [pc, #32]	; (8001778 <HAL_MspInit+0x4c>)
 8001758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800175c:	6413      	str	r3, [r2, #64]	; 0x40
 800175e:	4b06      	ldr	r3, [pc, #24]	; (8001778 <HAL_MspInit+0x4c>)
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001766:	603b      	str	r3, [r7, #0]
 8001768:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	40023800 	.word	0x40023800

0800177c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08e      	sub	sp, #56	; 0x38
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001784:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]
 8001792:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a55      	ldr	r2, [pc, #340]	; (80018f0 <HAL_ETH_MspInit+0x174>)
 800179a:	4293      	cmp	r3, r2
 800179c:	f040 80a4 	bne.w	80018e8 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80017a0:	2300      	movs	r3, #0
 80017a2:	623b      	str	r3, [r7, #32]
 80017a4:	4b53      	ldr	r3, [pc, #332]	; (80018f4 <HAL_ETH_MspInit+0x178>)
 80017a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a8:	4a52      	ldr	r2, [pc, #328]	; (80018f4 <HAL_ETH_MspInit+0x178>)
 80017aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017ae:	6313      	str	r3, [r2, #48]	; 0x30
 80017b0:	4b50      	ldr	r3, [pc, #320]	; (80018f4 <HAL_ETH_MspInit+0x178>)
 80017b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b8:	623b      	str	r3, [r7, #32]
 80017ba:	6a3b      	ldr	r3, [r7, #32]
 80017bc:	2300      	movs	r3, #0
 80017be:	61fb      	str	r3, [r7, #28]
 80017c0:	4b4c      	ldr	r3, [pc, #304]	; (80018f4 <HAL_ETH_MspInit+0x178>)
 80017c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c4:	4a4b      	ldr	r2, [pc, #300]	; (80018f4 <HAL_ETH_MspInit+0x178>)
 80017c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80017ca:	6313      	str	r3, [r2, #48]	; 0x30
 80017cc:	4b49      	ldr	r3, [pc, #292]	; (80018f4 <HAL_ETH_MspInit+0x178>)
 80017ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017d4:	61fb      	str	r3, [r7, #28]
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	2300      	movs	r3, #0
 80017da:	61bb      	str	r3, [r7, #24]
 80017dc:	4b45      	ldr	r3, [pc, #276]	; (80018f4 <HAL_ETH_MspInit+0x178>)
 80017de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e0:	4a44      	ldr	r2, [pc, #272]	; (80018f4 <HAL_ETH_MspInit+0x178>)
 80017e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80017e6:	6313      	str	r3, [r2, #48]	; 0x30
 80017e8:	4b42      	ldr	r3, [pc, #264]	; (80018f4 <HAL_ETH_MspInit+0x178>)
 80017ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80017f0:	61bb      	str	r3, [r7, #24]
 80017f2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]
 80017f8:	4b3e      	ldr	r3, [pc, #248]	; (80018f4 <HAL_ETH_MspInit+0x178>)
 80017fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fc:	4a3d      	ldr	r2, [pc, #244]	; (80018f4 <HAL_ETH_MspInit+0x178>)
 80017fe:	f043 0304 	orr.w	r3, r3, #4
 8001802:	6313      	str	r3, [r2, #48]	; 0x30
 8001804:	4b3b      	ldr	r3, [pc, #236]	; (80018f4 <HAL_ETH_MspInit+0x178>)
 8001806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001808:	f003 0304 	and.w	r3, r3, #4
 800180c:	617b      	str	r3, [r7, #20]
 800180e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001810:	2300      	movs	r3, #0
 8001812:	613b      	str	r3, [r7, #16]
 8001814:	4b37      	ldr	r3, [pc, #220]	; (80018f4 <HAL_ETH_MspInit+0x178>)
 8001816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001818:	4a36      	ldr	r2, [pc, #216]	; (80018f4 <HAL_ETH_MspInit+0x178>)
 800181a:	f043 0301 	orr.w	r3, r3, #1
 800181e:	6313      	str	r3, [r2, #48]	; 0x30
 8001820:	4b34      	ldr	r3, [pc, #208]	; (80018f4 <HAL_ETH_MspInit+0x178>)
 8001822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001824:	f003 0301 	and.w	r3, r3, #1
 8001828:	613b      	str	r3, [r7, #16]
 800182a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800182c:	2300      	movs	r3, #0
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	4b30      	ldr	r3, [pc, #192]	; (80018f4 <HAL_ETH_MspInit+0x178>)
 8001832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001834:	4a2f      	ldr	r2, [pc, #188]	; (80018f4 <HAL_ETH_MspInit+0x178>)
 8001836:	f043 0302 	orr.w	r3, r3, #2
 800183a:	6313      	str	r3, [r2, #48]	; 0x30
 800183c:	4b2d      	ldr	r3, [pc, #180]	; (80018f4 <HAL_ETH_MspInit+0x178>)
 800183e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001848:	2300      	movs	r3, #0
 800184a:	60bb      	str	r3, [r7, #8]
 800184c:	4b29      	ldr	r3, [pc, #164]	; (80018f4 <HAL_ETH_MspInit+0x178>)
 800184e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001850:	4a28      	ldr	r2, [pc, #160]	; (80018f4 <HAL_ETH_MspInit+0x178>)
 8001852:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001856:	6313      	str	r3, [r2, #48]	; 0x30
 8001858:	4b26      	ldr	r3, [pc, #152]	; (80018f4 <HAL_ETH_MspInit+0x178>)
 800185a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001860:	60bb      	str	r3, [r7, #8]
 8001862:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001864:	2332      	movs	r3, #50	; 0x32
 8001866:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001868:	2302      	movs	r3, #2
 800186a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001870:	2303      	movs	r3, #3
 8001872:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001874:	230b      	movs	r3, #11
 8001876:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001878:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800187c:	4619      	mov	r1, r3
 800187e:	481e      	ldr	r0, [pc, #120]	; (80018f8 <HAL_ETH_MspInit+0x17c>)
 8001880:	f002 f884 	bl	800398c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001884:	2386      	movs	r3, #134	; 0x86
 8001886:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001888:	2302      	movs	r3, #2
 800188a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	2300      	movs	r3, #0
 800188e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001890:	2303      	movs	r3, #3
 8001892:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001894:	230b      	movs	r3, #11
 8001896:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001898:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800189c:	4619      	mov	r1, r3
 800189e:	4817      	ldr	r0, [pc, #92]	; (80018fc <HAL_ETH_MspInit+0x180>)
 80018a0:	f002 f874 	bl	800398c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80018a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018aa:	2302      	movs	r3, #2
 80018ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b2:	2303      	movs	r3, #3
 80018b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018b6:	230b      	movs	r3, #11
 80018b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80018ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018be:	4619      	mov	r1, r3
 80018c0:	480f      	ldr	r0, [pc, #60]	; (8001900 <HAL_ETH_MspInit+0x184>)
 80018c2:	f002 f863 	bl	800398c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80018c6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80018ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018cc:	2302      	movs	r3, #2
 80018ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d4:	2303      	movs	r3, #3
 80018d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018d8:	230b      	movs	r3, #11
 80018da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e0:	4619      	mov	r1, r3
 80018e2:	4808      	ldr	r0, [pc, #32]	; (8001904 <HAL_ETH_MspInit+0x188>)
 80018e4:	f002 f852 	bl	800398c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80018e8:	bf00      	nop
 80018ea:	3738      	adds	r7, #56	; 0x38
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40028000 	.word	0x40028000
 80018f4:	40023800 	.word	0x40023800
 80018f8:	40020800 	.word	0x40020800
 80018fc:	40020000 	.word	0x40020000
 8001900:	40020400 	.word	0x40020400
 8001904:	40021800 	.word	0x40021800

08001908 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b08a      	sub	sp, #40	; 0x28
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001910:	f107 0314 	add.w	r3, r7, #20
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a19      	ldr	r2, [pc, #100]	; (800198c <HAL_I2C_MspInit+0x84>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d12c      	bne.n	8001984 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	613b      	str	r3, [r7, #16]
 800192e:	4b18      	ldr	r3, [pc, #96]	; (8001990 <HAL_I2C_MspInit+0x88>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	4a17      	ldr	r2, [pc, #92]	; (8001990 <HAL_I2C_MspInit+0x88>)
 8001934:	f043 0302 	orr.w	r3, r3, #2
 8001938:	6313      	str	r3, [r2, #48]	; 0x30
 800193a:	4b15      	ldr	r3, [pc, #84]	; (8001990 <HAL_I2C_MspInit+0x88>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	613b      	str	r3, [r7, #16]
 8001944:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001946:	f44f 7340 	mov.w	r3, #768	; 0x300
 800194a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800194c:	2312      	movs	r3, #18
 800194e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001954:	2303      	movs	r3, #3
 8001956:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001958:	2304      	movs	r3, #4
 800195a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800195c:	f107 0314 	add.w	r3, r7, #20
 8001960:	4619      	mov	r1, r3
 8001962:	480c      	ldr	r0, [pc, #48]	; (8001994 <HAL_I2C_MspInit+0x8c>)
 8001964:	f002 f812 	bl	800398c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001968:	2300      	movs	r3, #0
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	4b08      	ldr	r3, [pc, #32]	; (8001990 <HAL_I2C_MspInit+0x88>)
 800196e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001970:	4a07      	ldr	r2, [pc, #28]	; (8001990 <HAL_I2C_MspInit+0x88>)
 8001972:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001976:	6413      	str	r3, [r2, #64]	; 0x40
 8001978:	4b05      	ldr	r3, [pc, #20]	; (8001990 <HAL_I2C_MspInit+0x88>)
 800197a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001984:	bf00      	nop
 8001986:	3728      	adds	r7, #40	; 0x28
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40005400 	.word	0x40005400
 8001990:	40023800 	.word	0x40023800
 8001994:	40020400 	.word	0x40020400

08001998 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08e      	sub	sp, #56	; 0x38
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019a0:	f107 0308 	add.w	r3, r7, #8
 80019a4:	2230      	movs	r2, #48	; 0x30
 80019a6:	2100      	movs	r1, #0
 80019a8:	4618      	mov	r0, r3
 80019aa:	f007 f9db 	bl	8008d64 <memset>
  if(hrtc->Instance==RTC)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a0c      	ldr	r2, [pc, #48]	; (80019e4 <HAL_RTC_MspInit+0x4c>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d111      	bne.n	80019dc <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80019b8:	2320      	movs	r3, #32
 80019ba:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80019bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019c0:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019c2:	f107 0308 	add.w	r3, r7, #8
 80019c6:	4618      	mov	r0, r3
 80019c8:	f003 fc3a 	bl	8005240 <HAL_RCCEx_PeriphCLKConfig>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80019d2:	f7ff fe89 	bl	80016e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80019d6:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <HAL_RTC_MspInit+0x50>)
 80019d8:	2201      	movs	r2, #1
 80019da:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80019dc:	bf00      	nop
 80019de:	3738      	adds	r7, #56	; 0x38
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40002800 	.word	0x40002800
 80019e8:	42470e3c 	.word	0x42470e3c

080019ec <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019fc:	d115      	bne.n	8001a2a <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <HAL_TIM_PWM_MspInit+0x48>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	4a0b      	ldr	r2, [pc, #44]	; (8001a34 <HAL_TIM_PWM_MspInit+0x48>)
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a0e:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <HAL_TIM_PWM_MspInit+0x48>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	201c      	movs	r0, #28
 8001a20:	f001 fbc3 	bl	80031aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a24:	201c      	movs	r0, #28
 8001a26:	f001 fbdc 	bl	80031e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a2a:	bf00      	nop
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40023800 	.word	0x40023800

08001a38 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08a      	sub	sp, #40	; 0x28
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a40:	f107 0314 	add.w	r3, r7, #20
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a1d      	ldr	r2, [pc, #116]	; (8001acc <HAL_TIM_IC_MspInit+0x94>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d133      	bne.n	8001ac2 <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	613b      	str	r3, [r7, #16]
 8001a5e:	4b1c      	ldr	r3, [pc, #112]	; (8001ad0 <HAL_TIM_IC_MspInit+0x98>)
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	4a1b      	ldr	r2, [pc, #108]	; (8001ad0 <HAL_TIM_IC_MspInit+0x98>)
 8001a64:	f043 0302 	orr.w	r3, r3, #2
 8001a68:	6413      	str	r3, [r2, #64]	; 0x40
 8001a6a:	4b19      	ldr	r3, [pc, #100]	; (8001ad0 <HAL_TIM_IC_MspInit+0x98>)
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	613b      	str	r3, [r7, #16]
 8001a74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	4b15      	ldr	r3, [pc, #84]	; (8001ad0 <HAL_TIM_IC_MspInit+0x98>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	4a14      	ldr	r2, [pc, #80]	; (8001ad0 <HAL_TIM_IC_MspInit+0x98>)
 8001a80:	f043 0301 	orr.w	r3, r3, #1
 8001a84:	6313      	str	r3, [r2, #48]	; 0x30
 8001a86:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <HAL_TIM_IC_MspInit+0x98>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = ULTRASONIC_TIM3_CH1_Pin;
 8001a92:	2340      	movs	r3, #64	; 0x40
 8001a94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a96:	2302      	movs	r3, #2
 8001a98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ULTRASONIC_TIM3_CH1_GPIO_Port, &GPIO_InitStruct);
 8001aa6:	f107 0314 	add.w	r3, r7, #20
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4809      	ldr	r0, [pc, #36]	; (8001ad4 <HAL_TIM_IC_MspInit+0x9c>)
 8001aae:	f001 ff6d 	bl	800398c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	201d      	movs	r0, #29
 8001ab8:	f001 fb77 	bl	80031aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001abc:	201d      	movs	r0, #29
 8001abe:	f001 fb90 	bl	80031e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001ac2:	bf00      	nop
 8001ac4:	3728      	adds	r7, #40	; 0x28
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40000400 	.word	0x40000400
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	40020000 	.word	0x40020000

08001ad8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a34      	ldr	r2, [pc, #208]	; (8001bb8 <HAL_TIM_Base_MspInit+0xe0>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d10e      	bne.n	8001b08 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	617b      	str	r3, [r7, #20]
 8001aee:	4b33      	ldr	r3, [pc, #204]	; (8001bbc <HAL_TIM_Base_MspInit+0xe4>)
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	4a32      	ldr	r2, [pc, #200]	; (8001bbc <HAL_TIM_Base_MspInit+0xe4>)
 8001af4:	f043 0304 	orr.w	r3, r3, #4
 8001af8:	6413      	str	r3, [r2, #64]	; 0x40
 8001afa:	4b30      	ldr	r3, [pc, #192]	; (8001bbc <HAL_TIM_Base_MspInit+0xe4>)
 8001afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afe:	f003 0304 	and.w	r3, r3, #4
 8001b02:	617b      	str	r3, [r7, #20]
 8001b04:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001b06:	e052      	b.n	8001bae <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM5)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a2c      	ldr	r2, [pc, #176]	; (8001bc0 <HAL_TIM_Base_MspInit+0xe8>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d116      	bne.n	8001b40 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	613b      	str	r3, [r7, #16]
 8001b16:	4b29      	ldr	r3, [pc, #164]	; (8001bbc <HAL_TIM_Base_MspInit+0xe4>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	4a28      	ldr	r2, [pc, #160]	; (8001bbc <HAL_TIM_Base_MspInit+0xe4>)
 8001b1c:	f043 0308 	orr.w	r3, r3, #8
 8001b20:	6413      	str	r3, [r2, #64]	; 0x40
 8001b22:	4b26      	ldr	r3, [pc, #152]	; (8001bbc <HAL_TIM_Base_MspInit+0xe4>)
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	f003 0308 	and.w	r3, r3, #8
 8001b2a:	613b      	str	r3, [r7, #16]
 8001b2c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2100      	movs	r1, #0
 8001b32:	2032      	movs	r0, #50	; 0x32
 8001b34:	f001 fb39 	bl	80031aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001b38:	2032      	movs	r0, #50	; 0x32
 8001b3a:	f001 fb52 	bl	80031e2 <HAL_NVIC_EnableIRQ>
}
 8001b3e:	e036      	b.n	8001bae <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM10)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a1f      	ldr	r2, [pc, #124]	; (8001bc4 <HAL_TIM_Base_MspInit+0xec>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d116      	bne.n	8001b78 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	4b1b      	ldr	r3, [pc, #108]	; (8001bbc <HAL_TIM_Base_MspInit+0xe4>)
 8001b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b52:	4a1a      	ldr	r2, [pc, #104]	; (8001bbc <HAL_TIM_Base_MspInit+0xe4>)
 8001b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b58:	6453      	str	r3, [r2, #68]	; 0x44
 8001b5a:	4b18      	ldr	r3, [pc, #96]	; (8001bbc <HAL_TIM_Base_MspInit+0xe4>)
 8001b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001b66:	2200      	movs	r2, #0
 8001b68:	2100      	movs	r1, #0
 8001b6a:	2019      	movs	r0, #25
 8001b6c:	f001 fb1d 	bl	80031aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001b70:	2019      	movs	r0, #25
 8001b72:	f001 fb36 	bl	80031e2 <HAL_NVIC_EnableIRQ>
}
 8001b76:	e01a      	b.n	8001bae <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM11)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a12      	ldr	r2, [pc, #72]	; (8001bc8 <HAL_TIM_Base_MspInit+0xf0>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d115      	bne.n	8001bae <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	60bb      	str	r3, [r7, #8]
 8001b86:	4b0d      	ldr	r3, [pc, #52]	; (8001bbc <HAL_TIM_Base_MspInit+0xe4>)
 8001b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8a:	4a0c      	ldr	r2, [pc, #48]	; (8001bbc <HAL_TIM_Base_MspInit+0xe4>)
 8001b8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b90:	6453      	str	r3, [r2, #68]	; 0x44
 8001b92:	4b0a      	ldr	r3, [pc, #40]	; (8001bbc <HAL_TIM_Base_MspInit+0xe4>)
 8001b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b9a:	60bb      	str	r3, [r7, #8]
 8001b9c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	201a      	movs	r0, #26
 8001ba4:	f001 fb01 	bl	80031aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001ba8:	201a      	movs	r0, #26
 8001baa:	f001 fb1a 	bl	80031e2 <HAL_NVIC_EnableIRQ>
}
 8001bae:	bf00      	nop
 8001bb0:	3718      	adds	r7, #24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40000800 	.word	0x40000800
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	40000c00 	.word	0x40000c00
 8001bc4:	40014400 	.word	0x40014400
 8001bc8:	40014800 	.word	0x40014800

08001bcc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b08a      	sub	sp, #40	; 0x28
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd4:	f107 0314 	add.w	r3, r7, #20
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]
 8001be2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bec:	d11e      	bne.n	8001c2c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	613b      	str	r3, [r7, #16]
 8001bf2:	4b34      	ldr	r3, [pc, #208]	; (8001cc4 <HAL_TIM_MspPostInit+0xf8>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	4a33      	ldr	r2, [pc, #204]	; (8001cc4 <HAL_TIM_MspPostInit+0xf8>)
 8001bf8:	f043 0301 	orr.w	r3, r3, #1
 8001bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfe:	4b31      	ldr	r3, [pc, #196]	; (8001cc4 <HAL_TIM_MspPostInit+0xf8>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	613b      	str	r3, [r7, #16]
 8001c08:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c0a:	2320      	movs	r3, #32
 8001c0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c16:	2300      	movs	r3, #0
 8001c18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1e:	f107 0314 	add.w	r3, r7, #20
 8001c22:	4619      	mov	r1, r3
 8001c24:	4828      	ldr	r0, [pc, #160]	; (8001cc8 <HAL_TIM_MspPostInit+0xfc>)
 8001c26:	f001 feb1 	bl	800398c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001c2a:	e047      	b.n	8001cbc <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM4)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a26      	ldr	r2, [pc, #152]	; (8001ccc <HAL_TIM_MspPostInit+0x100>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d11f      	bne.n	8001c76 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	60fb      	str	r3, [r7, #12]
 8001c3a:	4b22      	ldr	r3, [pc, #136]	; (8001cc4 <HAL_TIM_MspPostInit+0xf8>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	4a21      	ldr	r2, [pc, #132]	; (8001cc4 <HAL_TIM_MspPostInit+0xf8>)
 8001c40:	f043 0308 	orr.w	r3, r3, #8
 8001c44:	6313      	str	r3, [r2, #48]	; 0x30
 8001c46:	4b1f      	ldr	r3, [pc, #124]	; (8001cc4 <HAL_TIM_MspPostInit+0xf8>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	f003 0308 	and.w	r3, r3, #8
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001c52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c58:	2302      	movs	r3, #2
 8001c5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c60:	2300      	movs	r3, #0
 8001c62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001c64:	2302      	movs	r3, #2
 8001c66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c68:	f107 0314 	add.w	r3, r7, #20
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4818      	ldr	r0, [pc, #96]	; (8001cd0 <HAL_TIM_MspPostInit+0x104>)
 8001c70:	f001 fe8c 	bl	800398c <HAL_GPIO_Init>
}
 8001c74:	e022      	b.n	8001cbc <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM5)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a16      	ldr	r2, [pc, #88]	; (8001cd4 <HAL_TIM_MspPostInit+0x108>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d11d      	bne.n	8001cbc <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c80:	2300      	movs	r3, #0
 8001c82:	60bb      	str	r3, [r7, #8]
 8001c84:	4b0f      	ldr	r3, [pc, #60]	; (8001cc4 <HAL_TIM_MspPostInit+0xf8>)
 8001c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c88:	4a0e      	ldr	r2, [pc, #56]	; (8001cc4 <HAL_TIM_MspPostInit+0xf8>)
 8001c8a:	f043 0301 	orr.w	r3, r3, #1
 8001c8e:	6313      	str	r3, [r2, #48]	; 0x30
 8001c90:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <HAL_TIM_MspPostInit+0xf8>)
 8001c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c94:	f003 0301 	and.w	r3, r3, #1
 8001c98:	60bb      	str	r3, [r7, #8]
 8001c9a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8001c9c:	2308      	movs	r3, #8
 8001c9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001cac:	2302      	movs	r3, #2
 8001cae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001cb0:	f107 0314 	add.w	r3, r7, #20
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4804      	ldr	r0, [pc, #16]	; (8001cc8 <HAL_TIM_MspPostInit+0xfc>)
 8001cb8:	f001 fe68 	bl	800398c <HAL_GPIO_Init>
}
 8001cbc:	bf00      	nop
 8001cbe:	3728      	adds	r7, #40	; 0x28
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	40020000 	.word	0x40020000
 8001ccc:	40000800 	.word	0x40000800
 8001cd0:	40020c00 	.word	0x40020c00
 8001cd4:	40000c00 	.word	0x40000c00

08001cd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b08c      	sub	sp, #48	; 0x30
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce0:	f107 031c 	add.w	r3, r7, #28
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	605a      	str	r2, [r3, #4]
 8001cea:	609a      	str	r2, [r3, #8]
 8001cec:	60da      	str	r2, [r3, #12]
 8001cee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a3a      	ldr	r2, [pc, #232]	; (8001de0 <HAL_UART_MspInit+0x108>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d135      	bne.n	8001d66 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	61bb      	str	r3, [r7, #24]
 8001cfe:	4b39      	ldr	r3, [pc, #228]	; (8001de4 <HAL_UART_MspInit+0x10c>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	4a38      	ldr	r2, [pc, #224]	; (8001de4 <HAL_UART_MspInit+0x10c>)
 8001d04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d08:	6413      	str	r3, [r2, #64]	; 0x40
 8001d0a:	4b36      	ldr	r3, [pc, #216]	; (8001de4 <HAL_UART_MspInit+0x10c>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d12:	61bb      	str	r3, [r7, #24]
 8001d14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	617b      	str	r3, [r7, #20]
 8001d1a:	4b32      	ldr	r3, [pc, #200]	; (8001de4 <HAL_UART_MspInit+0x10c>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	4a31      	ldr	r2, [pc, #196]	; (8001de4 <HAL_UART_MspInit+0x10c>)
 8001d20:	f043 0308 	orr.w	r3, r3, #8
 8001d24:	6313      	str	r3, [r2, #48]	; 0x30
 8001d26:	4b2f      	ldr	r3, [pc, #188]	; (8001de4 <HAL_UART_MspInit+0x10c>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	f003 0308 	and.w	r3, r3, #8
 8001d2e:	617b      	str	r3, [r7, #20]
 8001d30:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001d32:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d40:	2303      	movs	r3, #3
 8001d42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d44:	2307      	movs	r3, #7
 8001d46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d48:	f107 031c 	add.w	r3, r7, #28
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4826      	ldr	r0, [pc, #152]	; (8001de8 <HAL_UART_MspInit+0x110>)
 8001d50:	f001 fe1c 	bl	800398c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001d54:	2200      	movs	r2, #0
 8001d56:	2100      	movs	r1, #0
 8001d58:	2027      	movs	r0, #39	; 0x27
 8001d5a:	f001 fa26 	bl	80031aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001d5e:	2027      	movs	r0, #39	; 0x27
 8001d60:	f001 fa3f 	bl	80031e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001d64:	e038      	b.n	8001dd8 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART6)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a20      	ldr	r2, [pc, #128]	; (8001dec <HAL_UART_MspInit+0x114>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d133      	bne.n	8001dd8 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001d70:	2300      	movs	r3, #0
 8001d72:	613b      	str	r3, [r7, #16]
 8001d74:	4b1b      	ldr	r3, [pc, #108]	; (8001de4 <HAL_UART_MspInit+0x10c>)
 8001d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d78:	4a1a      	ldr	r2, [pc, #104]	; (8001de4 <HAL_UART_MspInit+0x10c>)
 8001d7a:	f043 0320 	orr.w	r3, r3, #32
 8001d7e:	6453      	str	r3, [r2, #68]	; 0x44
 8001d80:	4b18      	ldr	r3, [pc, #96]	; (8001de4 <HAL_UART_MspInit+0x10c>)
 8001d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d84:	f003 0320 	and.w	r3, r3, #32
 8001d88:	613b      	str	r3, [r7, #16]
 8001d8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	4b14      	ldr	r3, [pc, #80]	; (8001de4 <HAL_UART_MspInit+0x10c>)
 8001d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d94:	4a13      	ldr	r2, [pc, #76]	; (8001de4 <HAL_UART_MspInit+0x10c>)
 8001d96:	f043 0304 	orr.w	r3, r3, #4
 8001d9a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9c:	4b11      	ldr	r3, [pc, #68]	; (8001de4 <HAL_UART_MspInit+0x10c>)
 8001d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da0:	f003 0304 	and.w	r3, r3, #4
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001da8:	23c0      	movs	r3, #192	; 0xc0
 8001daa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dac:	2302      	movs	r3, #2
 8001dae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db4:	2303      	movs	r3, #3
 8001db6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001db8:	2308      	movs	r3, #8
 8001dba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dbc:	f107 031c 	add.w	r3, r7, #28
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	480b      	ldr	r0, [pc, #44]	; (8001df0 <HAL_UART_MspInit+0x118>)
 8001dc4:	f001 fde2 	bl	800398c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001dc8:	2200      	movs	r2, #0
 8001dca:	2100      	movs	r1, #0
 8001dcc:	2047      	movs	r0, #71	; 0x47
 8001dce:	f001 f9ec 	bl	80031aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001dd2:	2047      	movs	r0, #71	; 0x47
 8001dd4:	f001 fa05 	bl	80031e2 <HAL_NVIC_EnableIRQ>
}
 8001dd8:	bf00      	nop
 8001dda:	3730      	adds	r7, #48	; 0x30
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40004800 	.word	0x40004800
 8001de4:	40023800 	.word	0x40023800
 8001de8:	40020c00 	.word	0x40020c00
 8001dec:	40011400 	.word	0x40011400
 8001df0:	40020800 	.word	0x40020800

08001df4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b08a      	sub	sp, #40	; 0x28
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dfc:	f107 0314 	add.w	r3, r7, #20
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	605a      	str	r2, [r3, #4]
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	60da      	str	r2, [r3, #12]
 8001e0a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e14:	d13f      	bne.n	8001e96 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	613b      	str	r3, [r7, #16]
 8001e1a:	4b21      	ldr	r3, [pc, #132]	; (8001ea0 <HAL_PCD_MspInit+0xac>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	4a20      	ldr	r2, [pc, #128]	; (8001ea0 <HAL_PCD_MspInit+0xac>)
 8001e20:	f043 0301 	orr.w	r3, r3, #1
 8001e24:	6313      	str	r3, [r2, #48]	; 0x30
 8001e26:	4b1e      	ldr	r3, [pc, #120]	; (8001ea0 <HAL_PCD_MspInit+0xac>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	613b      	str	r3, [r7, #16]
 8001e30:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001e32:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001e36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e40:	2303      	movs	r3, #3
 8001e42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001e44:	230a      	movs	r3, #10
 8001e46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e48:	f107 0314 	add.w	r3, r7, #20
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4815      	ldr	r0, [pc, #84]	; (8001ea4 <HAL_PCD_MspInit+0xb0>)
 8001e50:	f001 fd9c 	bl	800398c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001e54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001e62:	f107 0314 	add.w	r3, r7, #20
 8001e66:	4619      	mov	r1, r3
 8001e68:	480e      	ldr	r0, [pc, #56]	; (8001ea4 <HAL_PCD_MspInit+0xb0>)
 8001e6a:	f001 fd8f 	bl	800398c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001e6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ea0 <HAL_PCD_MspInit+0xac>)
 8001e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e72:	4a0b      	ldr	r2, [pc, #44]	; (8001ea0 <HAL_PCD_MspInit+0xac>)
 8001e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e78:	6353      	str	r3, [r2, #52]	; 0x34
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60fb      	str	r3, [r7, #12]
 8001e7e:	4b08      	ldr	r3, [pc, #32]	; (8001ea0 <HAL_PCD_MspInit+0xac>)
 8001e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e82:	4a07      	ldr	r2, [pc, #28]	; (8001ea0 <HAL_PCD_MspInit+0xac>)
 8001e84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e88:	6453      	str	r3, [r2, #68]	; 0x44
 8001e8a:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <HAL_PCD_MspInit+0xac>)
 8001e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001e96:	bf00      	nop
 8001e98:	3728      	adds	r7, #40	; 0x28
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	40020000 	.word	0x40020000

08001ea8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001eac:	e7fe      	b.n	8001eac <NMI_Handler+0x4>

08001eae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eb2:	e7fe      	b.n	8001eb2 <HardFault_Handler+0x4>

08001eb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eb8:	e7fe      	b.n	8001eb8 <MemManage_Handler+0x4>

08001eba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ebe:	e7fe      	b.n	8001ebe <BusFault_Handler+0x4>

08001ec0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ec4:	e7fe      	b.n	8001ec4 <UsageFault_Handler+0x4>

08001ec6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ed8:	bf00      	nop
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ef4:	f001 f83a 	bl	8002f6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_STSTICK_Handler(); // ADD_kenGwon_231017
 8001ef8:	f7fe fea4 	bl	8000c44 <HAL_STSTICK_Handler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001efc:	bf00      	nop
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001f04:	4802      	ldr	r0, [pc, #8]	; (8001f10 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001f06:	f004 fb2f 	bl	8006568 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	20000578 	.word	0x20000578

08001f14 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001f18:	4802      	ldr	r0, [pc, #8]	; (8001f24 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001f1a:	f004 fb25 	bl	8006568 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001f1e:	bf00      	nop
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	200005c0 	.word	0x200005c0

08001f28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f2c:	4802      	ldr	r0, [pc, #8]	; (8001f38 <TIM2_IRQHandler+0x10>)
 8001f2e:	f004 fb1b 	bl	8006568 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f32:	bf00      	nop
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	20000458 	.word	0x20000458

08001f3c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f40:	4802      	ldr	r0, [pc, #8]	; (8001f4c <TIM3_IRQHandler+0x10>)
 8001f42:	f004 fb11 	bl	8006568 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	200004a0 	.word	0x200004a0

08001f50 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001f54:	4802      	ldr	r0, [pc, #8]	; (8001f60 <USART3_IRQHandler+0x10>)
 8001f56:	f005 fc71 	bl	800783c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	20000608 	.word	0x20000608

08001f64 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001f68:	4802      	ldr	r0, [pc, #8]	; (8001f74 <TIM5_IRQHandler+0x10>)
 8001f6a:	f004 fafd 	bl	8006568 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000530 	.word	0x20000530

08001f78 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001f7c:	4802      	ldr	r0, [pc, #8]	; (8001f88 <USART6_IRQHandler+0x10>)
 8001f7e:	f005 fc5d 	bl	800783c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	2000064c 	.word	0x2000064c

08001f8c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f98:	2300      	movs	r3, #0
 8001f9a:	617b      	str	r3, [r7, #20]
 8001f9c:	e00a      	b.n	8001fb4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f9e:	f3af 8000 	nop.w
 8001fa2:	4601      	mov	r1, r0
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	1c5a      	adds	r2, r3, #1
 8001fa8:	60ba      	str	r2, [r7, #8]
 8001faa:	b2ca      	uxtb	r2, r1
 8001fac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	617b      	str	r3, [r7, #20]
 8001fb4:	697a      	ldr	r2, [r7, #20]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	dbf0      	blt.n	8001f9e <_read+0x12>
  }

  return len;
 8001fbc:	687b      	ldr	r3, [r7, #4]
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3718      	adds	r7, #24
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b086      	sub	sp, #24
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	60f8      	str	r0, [r7, #12]
 8001fce:	60b9      	str	r1, [r7, #8]
 8001fd0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	617b      	str	r3, [r7, #20]
 8001fd6:	e009      	b.n	8001fec <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	1c5a      	adds	r2, r3, #1
 8001fdc:	60ba      	str	r2, [r7, #8]
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7fe fe3d 	bl	8000c60 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	617b      	str	r3, [r7, #20]
 8001fec:	697a      	ldr	r2, [r7, #20]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	dbf1      	blt.n	8001fd8 <_write+0x12>
  }
  return len;
 8001ff4:	687b      	ldr	r3, [r7, #4]
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3718      	adds	r7, #24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <_close>:

int _close(int file)
{
 8001ffe:	b480      	push	{r7}
 8002000:	b083      	sub	sp, #12
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002006:	f04f 33ff 	mov.w	r3, #4294967295
}
 800200a:	4618      	mov	r0, r3
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002016:	b480      	push	{r7}
 8002018:	b083      	sub	sp, #12
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
 800201e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002026:	605a      	str	r2, [r3, #4]
  return 0;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <_isatty>:

int _isatty(int file)
{
 8002036:	b480      	push	{r7}
 8002038:	b083      	sub	sp, #12
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800203e:	2301      	movs	r3, #1
}
 8002040:	4618      	mov	r0, r3
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3714      	adds	r7, #20
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
	...

08002068 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002070:	4a14      	ldr	r2, [pc, #80]	; (80020c4 <_sbrk+0x5c>)
 8002072:	4b15      	ldr	r3, [pc, #84]	; (80020c8 <_sbrk+0x60>)
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800207c:	4b13      	ldr	r3, [pc, #76]	; (80020cc <_sbrk+0x64>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d102      	bne.n	800208a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002084:	4b11      	ldr	r3, [pc, #68]	; (80020cc <_sbrk+0x64>)
 8002086:	4a12      	ldr	r2, [pc, #72]	; (80020d0 <_sbrk+0x68>)
 8002088:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800208a:	4b10      	ldr	r3, [pc, #64]	; (80020cc <_sbrk+0x64>)
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4413      	add	r3, r2
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	429a      	cmp	r2, r3
 8002096:	d207      	bcs.n	80020a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002098:	f006 fe3a 	bl	8008d10 <__errno>
 800209c:	4603      	mov	r3, r0
 800209e:	220c      	movs	r2, #12
 80020a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020a2:	f04f 33ff 	mov.w	r3, #4294967295
 80020a6:	e009      	b.n	80020bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020a8:	4b08      	ldr	r3, [pc, #32]	; (80020cc <_sbrk+0x64>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020ae:	4b07      	ldr	r3, [pc, #28]	; (80020cc <_sbrk+0x64>)
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4413      	add	r3, r2
 80020b6:	4a05      	ldr	r2, [pc, #20]	; (80020cc <_sbrk+0x64>)
 80020b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020ba:	68fb      	ldr	r3, [r7, #12]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3718      	adds	r7, #24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	20030000 	.word	0x20030000
 80020c8:	00000400 	.word	0x00000400
 80020cc:	20000ba8 	.word	0x20000ba8
 80020d0:	20000fd0 	.word	0x20000fd0

080020d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020d8:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <SystemInit+0x20>)
 80020da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020de:	4a05      	ldr	r2, [pc, #20]	; (80020f4 <SystemInit+0x20>)
 80020e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020e8:	bf00      	nop
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	e000ed00 	.word	0xe000ed00

080020f8 <HAL_TIM_PeriodElapsedCallback>:
/*
 * desc: 타이머가 counter period를 채울 때마다 콜백되는 함수이다.
 * param1: 타이머 구조체
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
	static uint8_t WM_forward_backward = 0;

	// 1MHz로 분주되어 있는 TIM10이 10000번의 counter period를 채울때마다 콜백되어 변수들을 1씩 증가시킨다.(즉 10ms 타이머 기능을 함)
	if (htim->Instance == TIM10)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a1d      	ldr	r2, [pc, #116]	; (800217c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d131      	bne.n	800216e <HAL_TIM_PeriodElapsedCallback+0x76>
	{
		TIM10_10ms_counter_ledbar++;
 800210a:	4b1d      	ldr	r3, [pc, #116]	; (8002180 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	3301      	adds	r3, #1
 8002110:	4a1b      	ldr	r2, [pc, #108]	; (8002180 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002112:	6013      	str	r3, [r2, #0]
		TIM10_10ms_counter_DHT11++;
 8002114:	4b1b      	ldr	r3, [pc, #108]	; (8002184 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	3301      	adds	r3, #1
 800211a:	4a1a      	ldr	r2, [pc, #104]	; (8002184 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800211c:	6013      	str	r3, [r2, #0]
		TIM10_10ms_counter_ultrasonic++;
 800211e:	4b1a      	ldr	r3, [pc, #104]	; (8002188 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	3301      	adds	r3, #1
 8002124:	4a18      	ldr	r2, [pc, #96]	; (8002188 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002126:	6013      	str	r3, [r2, #0]
		TIM10_10ms_fan_auto_mode_remain_time_decrease++;
 8002128:	4b18      	ldr	r3, [pc, #96]	; (800218c <HAL_TIM_PeriodElapsedCallback+0x94>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	3301      	adds	r3, #1
 800212e:	4a17      	ldr	r2, [pc, #92]	; (800218c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002130:	6013      	str	r3, [r2, #0]
		TIM10_10ms_fan_rotate_direction_led++;
 8002132:	4b17      	ldr	r3, [pc, #92]	; (8002190 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	3301      	adds	r3, #1
 8002138:	4a15      	ldr	r2, [pc, #84]	; (8002190 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800213a:	6013      	str	r3, [r2, #0]
		TIM10_10ms_fan_lcd_display_clear++;
 800213c:	4b15      	ldr	r3, [pc, #84]	; (8002194 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	3301      	adds	r3, #1
 8002142:	4a14      	ldr	r2, [pc, #80]	; (8002194 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002144:	6013      	str	r3, [r2, #0]
		TIM10_10ms_dcmotor_activate_time++;
 8002146:	4b14      	ldr	r3, [pc, #80]	; (8002198 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	3301      	adds	r3, #1
 800214c:	4a12      	ldr	r2, [pc, #72]	; (8002198 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800214e:	6013      	str	r3, [r2, #0]

		TIM10_10ms_WM_wash_timer++;
 8002150:	4b12      	ldr	r3, [pc, #72]	; (800219c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	3301      	adds	r3, #1
 8002156:	4a11      	ldr	r2, [pc, #68]	; (800219c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002158:	6013      	str	r3, [r2, #0]
		TIM10_10ms_WM_rinse_timer++;
 800215a:	4b11      	ldr	r3, [pc, #68]	; (80021a0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	3301      	adds	r3, #1
 8002160:	4a0f      	ldr	r2, [pc, #60]	; (80021a0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002162:	6013      	str	r3, [r2, #0]
		TIM10_10ms_WM_spin_timer++;
 8002164:	4b0f      	ldr	r3, [pc, #60]	; (80021a4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	3301      	adds	r3, #1
 800216a:	4a0e      	ldr	r2, [pc, #56]	; (80021a4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800216c:	6013      	str	r3, [r2, #0]
	}
}
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	40014400 	.word	0x40014400
 8002180:	20000bac 	.word	0x20000bac
 8002184:	20000bb0 	.word	0x20000bb0
 8002188:	20000bb4 	.word	0x20000bb4
 800218c:	20000bb8 	.word	0x20000bb8
 8002190:	20000bbc 	.word	0x20000bbc
 8002194:	20000bc0 	.word	0x20000bc0
 8002198:	20000bc4 	.word	0x20000bc4
 800219c:	20000bc8 	.word	0x20000bc8
 80021a0:	20000bcc 	.word	0x20000bcc
 80021a4:	20000bd0 	.word	0x20000bd0

080021a8 <HAL_TIM_IC_CaptureCallback>:
/*
 * desc: Input Capture direct mode로 동작하는 타이머가 각 조건에 맞는 완료할때마다 콜백되는 함수이다.
 * param1: 타이머 구조체
 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
	// 초음파 센서의 ECHO핀와 연결되어 있는 TIM6가 상승edge 또는 하강edge 인풋을 캡쳐할 때마다 아래 동작을 실행한다.
	if (htim->Instance == TIM3)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a13      	ldr	r2, [pc, #76]	; (8002204 <HAL_TIM_IC_CaptureCallback+0x5c>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d11f      	bne.n	80021fa <HAL_TIM_IC_CaptureCallback+0x52>
	{
		if (rising_falling_edge_capture_flag == 0) // 상승엣지 때문에 콜백 펑션에 들어온 경우
 80021ba:	4b13      	ldr	r3, [pc, #76]	; (8002208 <HAL_TIM_IC_CaptureCallback+0x60>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d107      	bne.n	80021d4 <HAL_TIM_IC_CaptureCallback+0x2c>
		{
			__HAL_TIM_SET_COUNTER(htim, 0); // 펄스를 셀 카운터를 초기화 하고 세기 시작하는 것이다.
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2200      	movs	r2, #0
 80021ca:	625a      	str	r2, [r3, #36]	; 0x24
			rising_falling_edge_capture_flag = 1; // 다음에 콜백 펑선이 불릴 때는 당연히 하강 엣지일 때 일 것이므로 플래그변수를 1로 셋팅해준다.
 80021cc:	4b0e      	ldr	r3, [pc, #56]	; (8002208 <HAL_TIM_IC_CaptureCallback+0x60>)
 80021ce:	2201      	movs	r2, #1
 80021d0:	701a      	strb	r2, [r3, #0]
			rising_falling_edge_capture_flag = 0; // 이제 다음 펄스를 또 카운트 하기 위해서 플래그 변수를 초기화 해준다.
			ultrasonic_distance = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // 상승엣지부터 하강엣지까지 펄스가 몇번 카운트 되었는지 그 값을 읽어온다.
			one_cycle_capture_finish_flag = 1; // 초음파 측정완료
		}
	}
}
 80021d2:	e012      	b.n	80021fa <HAL_TIM_IC_CaptureCallback+0x52>
		else if (rising_falling_edge_capture_flag == 1) // 하강 엣지 때문에 콜백 펑션에 들어온 경우
 80021d4:	4b0c      	ldr	r3, [pc, #48]	; (8002208 <HAL_TIM_IC_CaptureCallback+0x60>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d10d      	bne.n	80021fa <HAL_TIM_IC_CaptureCallback+0x52>
			rising_falling_edge_capture_flag = 0; // 이제 다음 펄스를 또 카운트 하기 위해서 플래그 변수를 초기화 해준다.
 80021de:	4b0a      	ldr	r3, [pc, #40]	; (8002208 <HAL_TIM_IC_CaptureCallback+0x60>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	701a      	strb	r2, [r3, #0]
			ultrasonic_distance = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // 상승엣지부터 하강엣지까지 펄스가 몇번 카운트 되었는지 그 값을 읽어온다.
 80021e4:	2100      	movs	r1, #0
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f004 fcec 	bl	8006bc4 <HAL_TIM_ReadCapturedValue>
 80021ec:	4603      	mov	r3, r0
 80021ee:	461a      	mov	r2, r3
 80021f0:	4b06      	ldr	r3, [pc, #24]	; (800220c <HAL_TIM_IC_CaptureCallback+0x64>)
 80021f2:	601a      	str	r2, [r3, #0]
			one_cycle_capture_finish_flag = 1; // 초음파 측정완료
 80021f4:	4b06      	ldr	r3, [pc, #24]	; (8002210 <HAL_TIM_IC_CaptureCallback+0x68>)
 80021f6:	2201      	movs	r2, #1
 80021f8:	701a      	strb	r2, [r3, #0]
}
 80021fa:	bf00      	nop
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	40000400 	.word	0x40000400
 8002208:	20000bd9 	.word	0x20000bd9
 800220c:	20000bd4 	.word	0x20000bd4
 8002210:	20000bd8 	.word	0x20000bd8

08002214 <HAL_UART_RxCpltCallback>:
 * desc: UART통신으로 MCU의 RX가 외부기기의 TX로부터 1데이터 프레임(1바이트)를 수신할 때마다 HW 인터럽트를 통해 콜백되어 실행되는 함수이다.
 *       (HW와 SW의 만나는 약속장소 = call back function)
 * param1: UART 구조체
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002214:	b590      	push	{r4, r7, lr}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
	// ComPortMaster의 TX를 통해 "ledallon\n"이 UART 통신으로 MCU의 RX로 송신되면,
	// MCU단에서는 1데이터 프레임(1바이트) 단위로 콜백 펑션이 호출되기 때문에 l, e, d, a, l, l, o, n, \n 하나하나에 이 콜백 펑션이 호출되는 것이다.
	if (huart == &huart3) // PC의 ComPortMaster와 연결된 huart3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a4c      	ldr	r2, [pc, #304]	; (8002350 <HAL_UART_RxCpltCallback+0x13c>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d160      	bne.n	80022e6 <HAL_UART_RxCpltCallback+0xd2>
	{
		if ((queue_rear+1)%QUEUE_MAX != queue_front)
 8002224:	4b4b      	ldr	r3, [pc, #300]	; (8002354 <HAL_UART_RxCpltCallback+0x140>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	1c59      	adds	r1, r3, #1
 800222a:	4b4b      	ldr	r3, [pc, #300]	; (8002358 <HAL_UART_RxCpltCallback+0x144>)
 800222c:	fb83 2301 	smull	r2, r3, r3, r1
 8002230:	10da      	asrs	r2, r3, #3
 8002232:	17cb      	asrs	r3, r1, #31
 8002234:	1ad2      	subs	r2, r2, r3
 8002236:	4613      	mov	r3, r2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	4413      	add	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	1aca      	subs	r2, r1, r3
 8002240:	4b46      	ldr	r3, [pc, #280]	; (800235c <HAL_UART_RxCpltCallback+0x148>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	429a      	cmp	r2, r3
 8002246:	d049      	beq.n	80022dc <HAL_UART_RxCpltCallback+0xc8>
		{
			if (rx_index < COMMAND_LENGTH)
 8002248:	4b45      	ldr	r3, [pc, #276]	; (8002360 <HAL_UART_RxCpltCallback+0x14c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2b27      	cmp	r3, #39	; 0x27
 800224e:	dc3f      	bgt.n	80022d0 <HAL_UART_RxCpltCallback+0xbc>
			{
				if (rx_data == '\n' || rx_data == '\r')
 8002250:	4b44      	ldr	r3, [pc, #272]	; (8002364 <HAL_UART_RxCpltCallback+0x150>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	2b0a      	cmp	r3, #10
 8002256:	d003      	beq.n	8002260 <HAL_UART_RxCpltCallback+0x4c>
 8002258:	4b42      	ldr	r3, [pc, #264]	; (8002364 <HAL_UART_RxCpltCallback+0x150>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	2b0d      	cmp	r3, #13
 800225e:	d124      	bne.n	80022aa <HAL_UART_RxCpltCallback+0x96>
				{
					rx_buff[queue_rear][rx_index] = '\0';
 8002260:	4b3c      	ldr	r3, [pc, #240]	; (8002354 <HAL_UART_RxCpltCallback+0x140>)
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	4b3e      	ldr	r3, [pc, #248]	; (8002360 <HAL_UART_RxCpltCallback+0x14c>)
 8002266:	6819      	ldr	r1, [r3, #0]
 8002268:	483f      	ldr	r0, [pc, #252]	; (8002368 <HAL_UART_RxCpltCallback+0x154>)
 800226a:	4613      	mov	r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	4413      	add	r3, r2
 8002270:	00db      	lsls	r3, r3, #3
 8002272:	4403      	add	r3, r0
 8002274:	440b      	add	r3, r1
 8002276:	2200      	movs	r2, #0
 8002278:	701a      	strb	r2, [r3, #0]
					rx_index = 0;
 800227a:	4b39      	ldr	r3, [pc, #228]	; (8002360 <HAL_UART_RxCpltCallback+0x14c>)
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
					queue_rear++;
 8002280:	4b34      	ldr	r3, [pc, #208]	; (8002354 <HAL_UART_RxCpltCallback+0x140>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	3301      	adds	r3, #1
 8002286:	4a33      	ldr	r2, [pc, #204]	; (8002354 <HAL_UART_RxCpltCallback+0x140>)
 8002288:	6013      	str	r3, [r2, #0]
					queue_rear %= QUEUE_MAX;
 800228a:	4b32      	ldr	r3, [pc, #200]	; (8002354 <HAL_UART_RxCpltCallback+0x140>)
 800228c:	6819      	ldr	r1, [r3, #0]
 800228e:	4b32      	ldr	r3, [pc, #200]	; (8002358 <HAL_UART_RxCpltCallback+0x144>)
 8002290:	fb83 2301 	smull	r2, r3, r3, r1
 8002294:	10da      	asrs	r2, r3, #3
 8002296:	17cb      	asrs	r3, r1, #31
 8002298:	1ad2      	subs	r2, r2, r3
 800229a:	4613      	mov	r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	4413      	add	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	1aca      	subs	r2, r1, r3
 80022a4:	4b2b      	ldr	r3, [pc, #172]	; (8002354 <HAL_UART_RxCpltCallback+0x140>)
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	e018      	b.n	80022dc <HAL_UART_RxCpltCallback+0xc8>
				}
				else
				{
					rx_buff[queue_rear][rx_index++] = rx_data;
 80022aa:	4b2a      	ldr	r3, [pc, #168]	; (8002354 <HAL_UART_RxCpltCallback+0x140>)
 80022ac:	6819      	ldr	r1, [r3, #0]
 80022ae:	4b2c      	ldr	r3, [pc, #176]	; (8002360 <HAL_UART_RxCpltCallback+0x14c>)
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	1c53      	adds	r3, r2, #1
 80022b4:	482a      	ldr	r0, [pc, #168]	; (8002360 <HAL_UART_RxCpltCallback+0x14c>)
 80022b6:	6003      	str	r3, [r0, #0]
 80022b8:	4b2a      	ldr	r3, [pc, #168]	; (8002364 <HAL_UART_RxCpltCallback+0x150>)
 80022ba:	781c      	ldrb	r4, [r3, #0]
 80022bc:	482a      	ldr	r0, [pc, #168]	; (8002368 <HAL_UART_RxCpltCallback+0x154>)
 80022be:	460b      	mov	r3, r1
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	440b      	add	r3, r1
 80022c4:	00db      	lsls	r3, r3, #3
 80022c6:	4403      	add	r3, r0
 80022c8:	4413      	add	r3, r2
 80022ca:	4622      	mov	r2, r4
 80022cc:	701a      	strb	r2, [r3, #0]
 80022ce:	e005      	b.n	80022dc <HAL_UART_RxCpltCallback+0xc8>
				}
			}
			else
			{
				rx_index = 0;
 80022d0:	4b23      	ldr	r3, [pc, #140]	; (8002360 <HAL_UART_RxCpltCallback+0x14c>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]
				printf("Message Overflow !!!\n");
 80022d6:	4825      	ldr	r0, [pc, #148]	; (800236c <HAL_UART_RxCpltCallback+0x158>)
 80022d8:	f006 fdba 	bl	8008e50 <puts>
		{

		}

		// 주의: 반드시 HAL_UART_Receive_IT() 함수를 call 해줘야 다음 인터럽트가 이어서 발생이 가능해진다.
		HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 80022dc:	2201      	movs	r2, #1
 80022de:	4921      	ldr	r1, [pc, #132]	; (8002364 <HAL_UART_RxCpltCallback+0x150>)
 80022e0:	481b      	ldr	r0, [pc, #108]	; (8002350 <HAL_UART_RxCpltCallback+0x13c>)
 80022e2:	f005 fa7a 	bl	80077da <HAL_UART_Receive_IT>
	}

	if (huart == &huart6) // Bluetooth와 연결된 huart6
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a21      	ldr	r2, [pc, #132]	; (8002370 <HAL_UART_RxCpltCallback+0x15c>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d12c      	bne.n	8002348 <HAL_UART_RxCpltCallback+0x134>
	{
		if (bt_rx_index < COMMAND_LENGTH) // 현재까지 들어온 byte가 40byte를 넘지 않으면
 80022ee:	4b21      	ldr	r3, [pc, #132]	; (8002374 <HAL_UART_RxCpltCallback+0x160>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2b27      	cmp	r3, #39	; 0x27
 80022f4:	dc1d      	bgt.n	8002332 <HAL_UART_RxCpltCallback+0x11e>
		{
			if(bt_rx_data == '\n' || bt_rx_data == '\r')
 80022f6:	4b20      	ldr	r3, [pc, #128]	; (8002378 <HAL_UART_RxCpltCallback+0x164>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	2b0a      	cmp	r3, #10
 80022fc:	d003      	beq.n	8002306 <HAL_UART_RxCpltCallback+0xf2>
 80022fe:	4b1e      	ldr	r3, [pc, #120]	; (8002378 <HAL_UART_RxCpltCallback+0x164>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	2b0d      	cmp	r3, #13
 8002304:	d10b      	bne.n	800231e <HAL_UART_RxCpltCallback+0x10a>
			{
				bt_rx_buff[bt_rx_index] = 0; // '\0'
 8002306:	4b1b      	ldr	r3, [pc, #108]	; (8002374 <HAL_UART_RxCpltCallback+0x160>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a1c      	ldr	r2, [pc, #112]	; (800237c <HAL_UART_RxCpltCallback+0x168>)
 800230c:	2100      	movs	r1, #0
 800230e:	54d1      	strb	r1, [r2, r3]
				bt_newline_detect_flag = 1;
 8002310:	4b1b      	ldr	r3, [pc, #108]	; (8002380 <HAL_UART_RxCpltCallback+0x16c>)
 8002312:	2201      	movs	r2, #1
 8002314:	701a      	strb	r2, [r3, #0]
				bt_rx_index = 0; // 다음 메시지 저장을 위해서 rx_index값을 0으로 한다.
 8002316:	4b17      	ldr	r3, [pc, #92]	; (8002374 <HAL_UART_RxCpltCallback+0x160>)
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	e00f      	b.n	800233e <HAL_UART_RxCpltCallback+0x12a>
			}
			else
			{
				bt_rx_buff[bt_rx_index++] = bt_rx_data;
 800231e:	4b15      	ldr	r3, [pc, #84]	; (8002374 <HAL_UART_RxCpltCallback+0x160>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	1c5a      	adds	r2, r3, #1
 8002324:	4913      	ldr	r1, [pc, #76]	; (8002374 <HAL_UART_RxCpltCallback+0x160>)
 8002326:	600a      	str	r2, [r1, #0]
 8002328:	4a13      	ldr	r2, [pc, #76]	; (8002378 <HAL_UART_RxCpltCallback+0x164>)
 800232a:	7811      	ldrb	r1, [r2, #0]
 800232c:	4a13      	ldr	r2, [pc, #76]	; (800237c <HAL_UART_RxCpltCallback+0x168>)
 800232e:	54d1      	strb	r1, [r2, r3]
 8002330:	e005      	b.n	800233e <HAL_UART_RxCpltCallback+0x12a>
			}
		}
		else
		{
			bt_rx_index = 0;
 8002332:	4b10      	ldr	r3, [pc, #64]	; (8002374 <HAL_UART_RxCpltCallback+0x160>)
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
			printf("Message Overflow !!!\n");
 8002338:	480c      	ldr	r0, [pc, #48]	; (800236c <HAL_UART_RxCpltCallback+0x158>)
 800233a:	f006 fd89 	bl	8008e50 <puts>
		}

		// 주의: 반드시 HAL_UART_Receive_IT() 함수를 call 해줘야 다음 인터럽트가 이어서 발생이 가능해진다.
		HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1);
 800233e:	2201      	movs	r2, #1
 8002340:	490d      	ldr	r1, [pc, #52]	; (8002378 <HAL_UART_RxCpltCallback+0x164>)
 8002342:	480b      	ldr	r0, [pc, #44]	; (8002370 <HAL_UART_RxCpltCallback+0x15c>)
 8002344:	f005 fa49 	bl	80077da <HAL_UART_Receive_IT>
	}
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	bd90      	pop	{r4, r7, pc}
 8002350:	20000608 	.word	0x20000608
 8002354:	20000f00 	.word	0x20000f00
 8002358:	66666667 	.word	0x66666667
 800235c:	20000efc 	.word	0x20000efc
 8002360:	20000f04 	.word	0x20000f04
 8002364:	20000f35 	.word	0x20000f35
 8002368:	20000bdc 	.word	0x20000bdc
 800236c:	08009e78 	.word	0x08009e78
 8002370:	2000064c 	.word	0x2000064c
 8002374:	20000f30 	.word	0x20000f30
 8002378:	20000f36 	.word	0x20000f36
 800237c:	20000f08 	.word	0x20000f08
 8002380:	20000f34 	.word	0x20000f34

08002384 <WashingMachine_Init>:

/*
 * desc: 세탁기 프로그램 구동에 필요한 H/W를 켠다.
 */
void WashingMachine_Init(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // 세탁기 뚜껑 개폐용 SERVO motor 구동하기 위해 필요
 8002388:	2100      	movs	r1, #0
 800238a:	4810      	ldr	r0, [pc, #64]	; (80023cc <WashingMachine_Init+0x48>)
 800238c:	f003 fd26 	bl	8005ddc <HAL_TIM_PWM_Start>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1); // 세탁기 뚜껑 개폐 상태 확인하는 초음파센서 활용하기 위해 필요
 8002390:	2100      	movs	r1, #0
 8002392:	480f      	ldr	r0, [pc, #60]	; (80023d0 <WashingMachine_Init+0x4c>)
 8002394:	f003 ffc0 	bl	8006318 <HAL_TIM_IC_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1); // 드럼통 동작용 DC motor 구동하기 위해 필요
 8002398:	2100      	movs	r1, #0
 800239a:	480e      	ldr	r0, [pc, #56]	; (80023d4 <WashingMachine_Init+0x50>)
 800239c:	f003 fe56 	bl	800604c <HAL_TIM_PWM_Start_IT>
//	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4); // 세탁, 헹굼, 탈수 동작완료 안내 부저 작동을 위해 필요
	HAL_TIM_Base_Start_IT(&htim10); // 다수의 10ms 타이머 활옹하기 위해 필요
 80023a0:	480d      	ldr	r0, [pc, #52]	; (80023d8 <WashingMachine_Init+0x54>)
 80023a2:	f003 fc5b 	bl	8005c5c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim11); // DHT11센서에서 delay_us() 함수가 올바르게 작동해야 하므로 필요
 80023a6:	480d      	ldr	r0, [pc, #52]	; (80023dc <WashingMachine_Init+0x58>)
 80023a8:	f003 fc58 	bl	8005c5c <HAL_TIM_Base_Start_IT>
	DHT11_Init(); // 탈수 완료 여부 확인하는 온습도 센서 활용하기 위해 필요
 80023ac:	f7fe f8f2 	bl	8000594 <DHT11_Init>
	I2C_LCD_Init(); // 세탁기 상태 보여주는 LCD 활용하기 위해 필요
 80023b0:	f7fe f968 	bl	8000684 <I2C_LCD_Init>

	HAL_UART_Receive_IT(&huart3, &rx_data, 1); // activate interrupt from RX huart3
 80023b4:	2201      	movs	r2, #1
 80023b6:	490a      	ldr	r1, [pc, #40]	; (80023e0 <WashingMachine_Init+0x5c>)
 80023b8:	480a      	ldr	r0, [pc, #40]	; (80023e4 <WashingMachine_Init+0x60>)
 80023ba:	f005 fa0e 	bl	80077da <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1); // activate interrupt from RX huart6
 80023be:	2201      	movs	r2, #1
 80023c0:	4909      	ldr	r1, [pc, #36]	; (80023e8 <WashingMachine_Init+0x64>)
 80023c2:	480a      	ldr	r0, [pc, #40]	; (80023ec <WashingMachine_Init+0x68>)
 80023c4:	f005 fa09 	bl	80077da <HAL_UART_Receive_IT>
}
 80023c8:	bf00      	nop
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	20000458 	.word	0x20000458
 80023d0:	200004a0 	.word	0x200004a0
 80023d4:	200004e8 	.word	0x200004e8
 80023d8:	20000578 	.word	0x20000578
 80023dc:	200005c0 	.word	0x200005c0
 80023e0:	20000f35 	.word	0x20000f35
 80023e4:	20000608 	.word	0x20000608
 80023e8:	20000f36 	.word	0x20000f36
 80023ec:	2000064c 	.word	0x2000064c

080023f0 <WashingMachine_Processing>:

/*
 * desc: 세탁기 프로그램의 메인 동작을 결정하는 함수이다.
 */
void WashingMachine_Processing(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
	switch (WashingMachine_curr_status)
 80023f4:	4b0f      	ldr	r3, [pc, #60]	; (8002434 <WashingMachine_Processing+0x44>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2b03      	cmp	r3, #3
 80023fa:	d817      	bhi.n	800242c <WashingMachine_Processing+0x3c>
 80023fc:	a201      	add	r2, pc, #4	; (adr r2, 8002404 <WashingMachine_Processing+0x14>)
 80023fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002402:	bf00      	nop
 8002404:	08002415 	.word	0x08002415
 8002408:	0800241b 	.word	0x0800241b
 800240c:	08002421 	.word	0x08002421
 8002410:	08002427 	.word	0x08002427
	{
		case IDLE_MODE:
			Idle_Mode_Laundry();
 8002414:	f000 f810 	bl	8002438 <Idle_Mode_Laundry>
			break;
 8002418:	e009      	b.n	800242e <WashingMachine_Processing+0x3e>

		case WASH_MODE:
			Wash_Mode_Laundry();
 800241a:	f000 f837 	bl	800248c <Wash_Mode_Laundry>
			break;
 800241e:	e006      	b.n	800242e <WashingMachine_Processing+0x3e>

		case RINSE_MODE:
			Rinse_Mode_Laundry();
 8002420:	f000 f97a 	bl	8002718 <Rinse_Mode_Laundry>
			break;
 8002424:	e003      	b.n	800242e <WashingMachine_Processing+0x3e>

		case SPIN_MODE:
			Spin_Mode_Laundry();
 8002426:	f000 fa9d 	bl	8002964 <Spin_Mode_Laundry>
			break;
 800242a:	e000      	b.n	800242e <WashingMachine_Processing+0x3e>

		default:
			break;
 800242c:	bf00      	nop
	}
}
 800242e:	bf00      	nop
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	20000f37 	.word	0x20000f37

08002438 <Idle_Mode_Laundry>:

/*
 * desc:
 */
static void Idle_Mode_Laundry(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
	Idle_Mode_Display();
 800243c:	f000 fbda 	bl	8002bf4 <Idle_Mode_Display>
	open_WashingMachine_Lid();
 8002440:	f7ff f958 	bl	80016f4 <open_WashingMachine_Lid>

	DCmotor_Break();
 8002444:	f7fe fa1e 	bl	8000884 <DCmotor_Break>
	LEDbar_All_Off();
 8002448:	f7fe fb68 	bl	8000b1c <LEDbar_All_Off>

	if (Get_Button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)
 800244c:	2200      	movs	r2, #0
 800244e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002452:	480c      	ldr	r0, [pc, #48]	; (8002484 <Idle_Mode_Laundry+0x4c>)
 8002454:	f7fe f95c 	bl	8000710 <Get_Button>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d10f      	bne.n	800247e <Idle_Mode_Laundry+0x46>
	{
		WashingMachine_curr_status++;
 800245e:	4b0a      	ldr	r3, [pc, #40]	; (8002488 <Idle_Mode_Laundry+0x50>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	3301      	adds	r3, #1
 8002464:	b2da      	uxtb	r2, r3
 8002466:	4b08      	ldr	r3, [pc, #32]	; (8002488 <Idle_Mode_Laundry+0x50>)
 8002468:	701a      	strb	r2, [r3, #0]
		WashingMachine_curr_status %= 4;
 800246a:	4b07      	ldr	r3, [pc, #28]	; (8002488 <Idle_Mode_Laundry+0x50>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	f003 0303 	and.w	r3, r3, #3
 8002472:	b2da      	uxtb	r2, r3
 8002474:	4b04      	ldr	r3, [pc, #16]	; (8002488 <Idle_Mode_Laundry+0x50>)
 8002476:	701a      	strb	r2, [r3, #0]
		LCD_Command(CLEAR_DISPLAY); // 버튼을 누르는 순간마다 clear display해줘서 쓰레기값 방지
 8002478:	2001      	movs	r0, #1
 800247a:	f7fe f89b 	bl	80005b4 <LCD_Command>
	}
}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	40021000 	.word	0x40021000
 8002488:	20000f37 	.word	0x20000f37

0800248c <Wash_Mode_Laundry>:
/*
 * desc: "세탁/헹굼/탈수" 중 "세탁"에 관련된 동작을 실행하는 함수이다.
 *       세탁모드에서 드럼통 모터는 70%의 고정 duty cycle 출력으로 작동한다.
 */
static void Wash_Mode_Laundry(void)
{
 800248c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800248e:	b085      	sub	sp, #20
 8002490:	af04      	add	r7, sp, #16
	static uint8_t dcmotor_forward_backward_flag = FORWARD;
	static uint32_t wash_remain_time = 0;
	static RTC_TimeTypeDef wash_complete_time = {0};

	/************************BEGIN 기본 동작 부분************************/
	WashingMachine_3Mode_Display(wash_mode_start_stop_flag, wash_remain_time, wash_complete_time);
 8002492:	4b96      	ldr	r3, [pc, #600]	; (80026ec <Wash_Mode_Laundry+0x260>)
 8002494:	781d      	ldrb	r5, [r3, #0]
 8002496:	4b96      	ldr	r3, [pc, #600]	; (80026f0 <Wash_Mode_Laundry+0x264>)
 8002498:	681e      	ldr	r6, [r3, #0]
 800249a:	4b96      	ldr	r3, [pc, #600]	; (80026f4 <Wash_Mode_Laundry+0x268>)
 800249c:	466c      	mov	r4, sp
 800249e:	f103 0208 	add.w	r2, r3, #8
 80024a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80024a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80024a8:	cb0c      	ldmia	r3, {r2, r3}
 80024aa:	4631      	mov	r1, r6
 80024ac:	4628      	mov	r0, r5
 80024ae:	f000 fbc9 	bl	8002c44 <WashingMachine_3Mode_Display>
	close_WashingMachine_Lid();
 80024b2:	f7ff f92d 	bl	8001710 <close_WashingMachine_Lid>

	// 뚜껑이 열려있으면 동작을 중지하고 idle 화면으로 이동
	if (Check_Lid_Open())
 80024b6:	f000 fb95 	bl	8002be4 <Check_Lid_Open>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d005      	beq.n	80024cc <Wash_Mode_Laundry+0x40>
	{
		WashingMachine_curr_status = 0;
 80024c0:	4b8d      	ldr	r3, [pc, #564]	; (80026f8 <Wash_Mode_Laundry+0x26c>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	701a      	strb	r2, [r3, #0]
		LCD_Command(CLEAR_DISPLAY);
 80024c6:	2001      	movs	r0, #1
 80024c8:	f7fe f874 	bl	80005b4 <LCD_Command>
	}


	if (wash_mode_start_stop_flag == STOP)
 80024cc:	4b87      	ldr	r3, [pc, #540]	; (80026ec <Wash_Mode_Laundry+0x260>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d102      	bne.n	80024da <Wash_Mode_Laundry+0x4e>
	{
		DCmotor_Break();
 80024d4:	f7fe f9d6 	bl	8000884 <DCmotor_Break>
 80024d8:	e03a      	b.n	8002550 <Wash_Mode_Laundry+0xc4>
	}
	else if (wash_mode_start_stop_flag == START && wash_remain_time > 0)
 80024da:	4b84      	ldr	r3, [pc, #528]	; (80026ec <Wash_Mode_Laundry+0x260>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d12b      	bne.n	800253a <Wash_Mode_Laundry+0xae>
 80024e2:	4b83      	ldr	r3, [pc, #524]	; (80026f0 <Wash_Mode_Laundry+0x264>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d027      	beq.n	800253a <Wash_Mode_Laundry+0xae>
	{
		// 남은시간은 자동으로 1초씩 감소
		if (TIM10_10ms_WM_wash_timer > 100)
 80024ea:	4b84      	ldr	r3, [pc, #528]	; (80026fc <Wash_Mode_Laundry+0x270>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2b64      	cmp	r3, #100	; 0x64
 80024f0:	d912      	bls.n	8002518 <Wash_Mode_Laundry+0x8c>
		{
			TIM10_10ms_WM_wash_timer = 0;
 80024f2:	4b82      	ldr	r3, [pc, #520]	; (80026fc <Wash_Mode_Laundry+0x270>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]
			wash_remain_time--;
 80024f8:	4b7d      	ldr	r3, [pc, #500]	; (80026f0 <Wash_Mode_Laundry+0x264>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	3b01      	subs	r3, #1
 80024fe:	4a7c      	ldr	r2, [pc, #496]	; (80026f0 <Wash_Mode_Laundry+0x264>)
 8002500:	6013      	str	r3, [r2, #0]
			if (wash_remain_time < 0) {wash_remain_time = 0;}

			if (dcmotor_forward_backward_flag == FORWARD)
 8002502:	4b7f      	ldr	r3, [pc, #508]	; (8002700 <Wash_Mode_Laundry+0x274>)
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d103      	bne.n	8002512 <Wash_Mode_Laundry+0x86>
			{
				dcmotor_forward_backward_flag = BACKWARD;
 800250a:	4b7d      	ldr	r3, [pc, #500]	; (8002700 <Wash_Mode_Laundry+0x274>)
 800250c:	2201      	movs	r2, #1
 800250e:	701a      	strb	r2, [r3, #0]
 8002510:	e002      	b.n	8002518 <Wash_Mode_Laundry+0x8c>
			}
			else
			{
				dcmotor_forward_backward_flag = FORWARD;
 8002512:	4b7b      	ldr	r3, [pc, #492]	; (8002700 <Wash_Mode_Laundry+0x274>)
 8002514:	2200      	movs	r2, #0
 8002516:	701a      	strb	r2, [r3, #0]
			}
		}

		// 세탁모드에서 드럼통을 앞뒤로 흔들어주기 위해서..
		if (dcmotor_forward_backward_flag == 0)
 8002518:	4b79      	ldr	r3, [pc, #484]	; (8002700 <Wash_Mode_Laundry+0x274>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d102      	bne.n	8002526 <Wash_Mode_Laundry+0x9a>
		{
			DCmotor_Forward_Rotate();
 8002520:	f7fe f98c 	bl	800083c <DCmotor_Forward_Rotate>
 8002524:	e001      	b.n	800252a <Wash_Mode_Laundry+0x9e>
		}
		else
		{
			DCmotor_Backward_Rotate();
 8002526:	f7fe f99b 	bl	8000860 <DCmotor_Backward_Rotate>
		}

		LEDbar_Flower_On();
 800252a:	f7fe fb55 	bl	8000bd8 <LEDbar_Flower_On>
		FND4digit_time_display(wash_remain_time);
 800252e:	4b70      	ldr	r3, [pc, #448]	; (80026f0 <Wash_Mode_Laundry+0x264>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4618      	mov	r0, r3
 8002534:	f7fe fa5e 	bl	80009f4 <FND4digit_time_display>
 8002538:	e00a      	b.n	8002550 <Wash_Mode_Laundry+0xc4>
	}
	else // 플래그는 start이지만 남은시간이 0이하가 된 경우 여기로 빠짐
	{
		DCmotor_Break();
 800253a:	f7fe f9a3 	bl	8000884 <DCmotor_Break>
		LEDbar_All_Off();
 800253e:	f7fe faed 	bl	8000b1c <LEDbar_All_Off>
		FND4digit_off();
 8002542:	f7fe f9c3 	bl	80008cc <FND4digit_off>
		wash_mode_start_stop_flag = STOP;
 8002546:	4b69      	ldr	r3, [pc, #420]	; (80026ec <Wash_Mode_Laundry+0x260>)
 8002548:	2200      	movs	r2, #0
 800254a:	701a      	strb	r2, [r3, #0]
		Mode_Complete_Alarm();
 800254c:	f7fe f918 	bl	8000780 <Mode_Complete_Alarm>
	}
	/************************END 기본 동작 부분************************/

	/************************BEGIN 버튼 입력 인터럽트 부분************************/
	// 세탁 모드 상태를 기억한 상태로 다음 모드로 이동
	if (Get_Button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)
 8002550:	2200      	movs	r2, #0
 8002552:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002556:	486b      	ldr	r0, [pc, #428]	; (8002704 <Wash_Mode_Laundry+0x278>)
 8002558:	f7fe f8da 	bl	8000710 <Get_Button>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d10f      	bne.n	8002582 <Wash_Mode_Laundry+0xf6>
	{
		WashingMachine_curr_status++;
 8002562:	4b65      	ldr	r3, [pc, #404]	; (80026f8 <Wash_Mode_Laundry+0x26c>)
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	3301      	adds	r3, #1
 8002568:	b2da      	uxtb	r2, r3
 800256a:	4b63      	ldr	r3, [pc, #396]	; (80026f8 <Wash_Mode_Laundry+0x26c>)
 800256c:	701a      	strb	r2, [r3, #0]
		WashingMachine_curr_status %= 4;
 800256e:	4b62      	ldr	r3, [pc, #392]	; (80026f8 <Wash_Mode_Laundry+0x26c>)
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	f003 0303 	and.w	r3, r3, #3
 8002576:	b2da      	uxtb	r2, r3
 8002578:	4b5f      	ldr	r3, [pc, #380]	; (80026f8 <Wash_Mode_Laundry+0x26c>)
 800257a:	701a      	strb	r2, [r3, #0]
		LCD_Command(CLEAR_DISPLAY); // 버튼을 누르는 순간마다 clear display해줘서 쓰레기값 방지
 800257c:	2001      	movs	r0, #1
 800257e:	f7fe f819 	bl	80005b4 <LCD_Command>
	}

	// 세탁에 소요할 시간을 1분 증가시킨다.
	if (Get_Button(BUTTON1_GPIO_Port, BUTTON1_Pin, 1) == BUTTON_PRESS)
 8002582:	2201      	movs	r2, #1
 8002584:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002588:	485e      	ldr	r0, [pc, #376]	; (8002704 <Wash_Mode_Laundry+0x278>)
 800258a:	f7fe f8c1 	bl	8000710 <Get_Button>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d107      	bne.n	80025a4 <Wash_Mode_Laundry+0x118>
	{
		wash_remain_time += 60;
 8002594:	4b56      	ldr	r3, [pc, #344]	; (80026f0 <Wash_Mode_Laundry+0x264>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	333c      	adds	r3, #60	; 0x3c
 800259a:	4a55      	ldr	r2, [pc, #340]	; (80026f0 <Wash_Mode_Laundry+0x264>)
 800259c:	6013      	str	r3, [r2, #0]
		LCD_Command(CLEAR_DISPLAY); // 버튼을 누르는 순간마다 clear display해줘서 쓰레기값 방지
 800259e:	2001      	movs	r0, #1
 80025a0:	f7fe f808 	bl	80005b4 <LCD_Command>
	}

	// 세탁에 소요할 시간을 1초 증가시킨다.
	if (Get_Button(BUTTON2_GPIO_Port, BUTTON2_Pin, 2) == BUTTON_PRESS)
 80025a4:	2202      	movs	r2, #2
 80025a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025aa:	4856      	ldr	r0, [pc, #344]	; (8002704 <Wash_Mode_Laundry+0x278>)
 80025ac:	f7fe f8b0 	bl	8000710 <Get_Button>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d107      	bne.n	80025c6 <Wash_Mode_Laundry+0x13a>
	{
		wash_remain_time += 1;
 80025b6:	4b4e      	ldr	r3, [pc, #312]	; (80026f0 <Wash_Mode_Laundry+0x264>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	3301      	adds	r3, #1
 80025bc:	4a4c      	ldr	r2, [pc, #304]	; (80026f0 <Wash_Mode_Laundry+0x264>)
 80025be:	6013      	str	r3, [r2, #0]
		LCD_Command(CLEAR_DISPLAY); // 버튼을 누르는 순간마다 clear display해줘서 쓰레기값 방지
 80025c0:	2001      	movs	r0, #1
 80025c2:	f7fd fff7 	bl	80005b4 <LCD_Command>
	}

	// 동작 시간을 설정 완료했다면, 세탁기 구동을 시작한다.
	if (Get_Button(BUTTON3_GPIO_Port, BUTTON3_Pin, 3) == BUTTON_PRESS)
 80025c6:	2203      	movs	r2, #3
 80025c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80025cc:	484d      	ldr	r0, [pc, #308]	; (8002704 <Wash_Mode_Laundry+0x278>)
 80025ce:	f7fe f89f 	bl	8000710 <Get_Button>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d157      	bne.n	8002688 <Wash_Mode_Laundry+0x1fc>
	{
		wash_mode_start_stop_flag = START;
 80025d8:	4b44      	ldr	r3, [pc, #272]	; (80026ec <Wash_Mode_Laundry+0x260>)
 80025da:	2201      	movs	r2, #1
 80025dc:	701a      	strb	r2, [r3, #0]

		HAL_RTC_GetTime(&hrtc, &wash_complete_time, RTC_FORMAT_BCD);
 80025de:	2201      	movs	r2, #1
 80025e0:	4944      	ldr	r1, [pc, #272]	; (80026f4 <Wash_Mode_Laundry+0x268>)
 80025e2:	4849      	ldr	r0, [pc, #292]	; (8002708 <Wash_Mode_Laundry+0x27c>)
 80025e4:	f003 f8fc 	bl	80057e0 <HAL_RTC_GetTime>
		wash_complete_time.Hours += dec2bcd(wash_remain_time / 3600);
 80025e8:	4b41      	ldr	r3, [pc, #260]	; (80026f0 <Wash_Mode_Laundry+0x264>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a47      	ldr	r2, [pc, #284]	; (800270c <Wash_Mode_Laundry+0x280>)
 80025ee:	fba2 2303 	umull	r2, r3, r2, r3
 80025f2:	0adb      	lsrs	r3, r3, #11
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7fe fa6c 	bl	8000ad4 <dec2bcd>
 80025fc:	4603      	mov	r3, r0
 80025fe:	461a      	mov	r2, r3
 8002600:	4b3c      	ldr	r3, [pc, #240]	; (80026f4 <Wash_Mode_Laundry+0x268>)
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	4413      	add	r3, r2
 8002606:	b2da      	uxtb	r2, r3
 8002608:	4b3a      	ldr	r3, [pc, #232]	; (80026f4 <Wash_Mode_Laundry+0x268>)
 800260a:	701a      	strb	r2, [r3, #0]
		wash_complete_time.Minutes += dec2bcd((wash_remain_time % 3600) / 60);
 800260c:	4b38      	ldr	r3, [pc, #224]	; (80026f0 <Wash_Mode_Laundry+0x264>)
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	4b3e      	ldr	r3, [pc, #248]	; (800270c <Wash_Mode_Laundry+0x280>)
 8002612:	fba3 1302 	umull	r1, r3, r3, r2
 8002616:	0adb      	lsrs	r3, r3, #11
 8002618:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800261c:	fb01 f303 	mul.w	r3, r1, r3
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	4a3b      	ldr	r2, [pc, #236]	; (8002710 <Wash_Mode_Laundry+0x284>)
 8002624:	fba2 2303 	umull	r2, r3, r2, r3
 8002628:	095b      	lsrs	r3, r3, #5
 800262a:	b2db      	uxtb	r3, r3
 800262c:	4618      	mov	r0, r3
 800262e:	f7fe fa51 	bl	8000ad4 <dec2bcd>
 8002632:	4603      	mov	r3, r0
 8002634:	461a      	mov	r2, r3
 8002636:	4b2f      	ldr	r3, [pc, #188]	; (80026f4 <Wash_Mode_Laundry+0x268>)
 8002638:	785b      	ldrb	r3, [r3, #1]
 800263a:	4413      	add	r3, r2
 800263c:	b2da      	uxtb	r2, r3
 800263e:	4b2d      	ldr	r3, [pc, #180]	; (80026f4 <Wash_Mode_Laundry+0x268>)
 8002640:	705a      	strb	r2, [r3, #1]
		wash_complete_time.Seconds += dec2bcd((wash_remain_time % 3600) % 60);
 8002642:	4b2b      	ldr	r3, [pc, #172]	; (80026f0 <Wash_Mode_Laundry+0x264>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a31      	ldr	r2, [pc, #196]	; (800270c <Wash_Mode_Laundry+0x280>)
 8002648:	fba2 1203 	umull	r1, r2, r2, r3
 800264c:	0ad2      	lsrs	r2, r2, #11
 800264e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002652:	fb01 f202 	mul.w	r2, r1, r2
 8002656:	1a9a      	subs	r2, r3, r2
 8002658:	4b2d      	ldr	r3, [pc, #180]	; (8002710 <Wash_Mode_Laundry+0x284>)
 800265a:	fba3 1302 	umull	r1, r3, r3, r2
 800265e:	0959      	lsrs	r1, r3, #5
 8002660:	460b      	mov	r3, r1
 8002662:	011b      	lsls	r3, r3, #4
 8002664:	1a5b      	subs	r3, r3, r1
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	1ad1      	subs	r1, r2, r3
 800266a:	b2cb      	uxtb	r3, r1
 800266c:	4618      	mov	r0, r3
 800266e:	f7fe fa31 	bl	8000ad4 <dec2bcd>
 8002672:	4603      	mov	r3, r0
 8002674:	461a      	mov	r2, r3
 8002676:	4b1f      	ldr	r3, [pc, #124]	; (80026f4 <Wash_Mode_Laundry+0x268>)
 8002678:	789b      	ldrb	r3, [r3, #2]
 800267a:	4413      	add	r3, r2
 800267c:	b2da      	uxtb	r2, r3
 800267e:	4b1d      	ldr	r3, [pc, #116]	; (80026f4 <Wash_Mode_Laundry+0x268>)
 8002680:	709a      	strb	r2, [r3, #2]

		LCD_Command(CLEAR_DISPLAY); // 버튼을 누르는 순간마다 clear display해줘서 쓰레기값 방지
 8002682:	2001      	movs	r0, #1
 8002684:	f7fd ff96 	bl	80005b4 <LCD_Command>

//		Mode_Start_Alarm();
	}

	// 세탁 모드를 즉시 중지하고 세탁모드를 초기화해준다.
	if (Get_Button(BUTTON4_GPIO_Port, BUTTON4_Pin, 4) == BUTTON_PRESS)
 8002688:	2204      	movs	r2, #4
 800268a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800268e:	4821      	ldr	r0, [pc, #132]	; (8002714 <Wash_Mode_Laundry+0x288>)
 8002690:	f7fe f83e 	bl	8000710 <Get_Button>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d123      	bne.n	80026e2 <Wash_Mode_Laundry+0x256>
	{
		WashingMachine_curr_status = IDLE_MODE;
 800269a:	4b17      	ldr	r3, [pc, #92]	; (80026f8 <Wash_Mode_Laundry+0x26c>)
 800269c:	2200      	movs	r2, #0
 800269e:	701a      	strb	r2, [r3, #0]
		wash_mode_start_stop_flag = STOP;
 80026a0:	4b12      	ldr	r3, [pc, #72]	; (80026ec <Wash_Mode_Laundry+0x260>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	701a      	strb	r2, [r3, #0]
		dcmotor_forward_backward_flag = 0;
 80026a6:	4b16      	ldr	r3, [pc, #88]	; (8002700 <Wash_Mode_Laundry+0x274>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	701a      	strb	r2, [r3, #0]
		wash_remain_time = 0;
 80026ac:	4b10      	ldr	r3, [pc, #64]	; (80026f0 <Wash_Mode_Laundry+0x264>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	601a      	str	r2, [r3, #0]
		wash_complete_time.Hours = dec2bcd(0);
 80026b2:	2000      	movs	r0, #0
 80026b4:	f7fe fa0e 	bl	8000ad4 <dec2bcd>
 80026b8:	4603      	mov	r3, r0
 80026ba:	461a      	mov	r2, r3
 80026bc:	4b0d      	ldr	r3, [pc, #52]	; (80026f4 <Wash_Mode_Laundry+0x268>)
 80026be:	701a      	strb	r2, [r3, #0]
		wash_complete_time.Minutes = dec2bcd(0);
 80026c0:	2000      	movs	r0, #0
 80026c2:	f7fe fa07 	bl	8000ad4 <dec2bcd>
 80026c6:	4603      	mov	r3, r0
 80026c8:	461a      	mov	r2, r3
 80026ca:	4b0a      	ldr	r3, [pc, #40]	; (80026f4 <Wash_Mode_Laundry+0x268>)
 80026cc:	705a      	strb	r2, [r3, #1]
		wash_complete_time.Seconds = dec2bcd(0);
 80026ce:	2000      	movs	r0, #0
 80026d0:	f7fe fa00 	bl	8000ad4 <dec2bcd>
 80026d4:	4603      	mov	r3, r0
 80026d6:	461a      	mov	r2, r3
 80026d8:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <Wash_Mode_Laundry+0x268>)
 80026da:	709a      	strb	r2, [r3, #2]

		LCD_Command(CLEAR_DISPLAY); // 버튼을 누르는 순간마다 clear display해줘서 쓰레기값 방지
 80026dc:	2001      	movs	r0, #1
 80026de:	f7fd ff69 	bl	80005b4 <LCD_Command>
	}
	/************************END 버튼 입력 인터럽트 부분************************/
}
 80026e2:	bf00      	nop
 80026e4:	3704      	adds	r7, #4
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026ea:	bf00      	nop
 80026ec:	20000f64 	.word	0x20000f64
 80026f0:	20000f68 	.word	0x20000f68
 80026f4:	20000f6c 	.word	0x20000f6c
 80026f8:	20000f37 	.word	0x20000f37
 80026fc:	20000bc8 	.word	0x20000bc8
 8002700:	20000f80 	.word	0x20000f80
 8002704:	40021000 	.word	0x40021000
 8002708:	20000438 	.word	0x20000438
 800270c:	91a2b3c5 	.word	0x91a2b3c5
 8002710:	88888889 	.word	0x88888889
 8002714:	40020400 	.word	0x40020400

08002718 <Rinse_Mode_Laundry>:

/*
 * desc: "세탁/헹굼/탈수" 중 "헹굼"에 관련된 동작을 실행하는 함수이다.
 */
static void Rinse_Mode_Laundry(void)
{
 8002718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800271a:	b085      	sub	sp, #20
 800271c:	af04      	add	r7, sp, #16
	static uint8_t rinse_mode_start_stop_flag = STOP;
	static uint32_t rinse_remain_time = 0;
	static RTC_TimeTypeDef rinse_complete_time = {0};

	/************************BEGIN 기본 동작 부분************************/
	WashingMachine_3Mode_Display(rinse_mode_start_stop_flag, rinse_remain_time, rinse_complete_time);
 800271e:	4b87      	ldr	r3, [pc, #540]	; (800293c <Rinse_Mode_Laundry+0x224>)
 8002720:	781d      	ldrb	r5, [r3, #0]
 8002722:	4b87      	ldr	r3, [pc, #540]	; (8002940 <Rinse_Mode_Laundry+0x228>)
 8002724:	681e      	ldr	r6, [r3, #0]
 8002726:	4b87      	ldr	r3, [pc, #540]	; (8002944 <Rinse_Mode_Laundry+0x22c>)
 8002728:	466c      	mov	r4, sp
 800272a:	f103 0208 	add.w	r2, r3, #8
 800272e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002730:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002734:	cb0c      	ldmia	r3, {r2, r3}
 8002736:	4631      	mov	r1, r6
 8002738:	4628      	mov	r0, r5
 800273a:	f000 fa83 	bl	8002c44 <WashingMachine_3Mode_Display>
	close_WashingMachine_Lid();
 800273e:	f7fe ffe7 	bl	8001710 <close_WashingMachine_Lid>

	// 뚜껑이 열려있으면 동작을 중지하고 idle 화면으로 이동
	if (Check_Lid_Open())
 8002742:	f000 fa4f 	bl	8002be4 <Check_Lid_Open>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d005      	beq.n	8002758 <Rinse_Mode_Laundry+0x40>
	{
		WashingMachine_curr_status = 0;
 800274c:	4b7e      	ldr	r3, [pc, #504]	; (8002948 <Rinse_Mode_Laundry+0x230>)
 800274e:	2200      	movs	r2, #0
 8002750:	701a      	strb	r2, [r3, #0]
		LCD_Command(CLEAR_DISPLAY);
 8002752:	2001      	movs	r0, #1
 8002754:	f7fd ff2e 	bl	80005b4 <LCD_Command>
	}


	if (rinse_mode_start_stop_flag == STOP)
 8002758:	4b78      	ldr	r3, [pc, #480]	; (800293c <Rinse_Mode_Laundry+0x224>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d102      	bne.n	8002766 <Rinse_Mode_Laundry+0x4e>
	{
		DCmotor_Break();
 8002760:	f7fe f890 	bl	8000884 <DCmotor_Break>
 8002764:	e01f      	b.n	80027a6 <Rinse_Mode_Laundry+0x8e>
	}
	else if (rinse_mode_start_stop_flag == START && rinse_remain_time > 0)
 8002766:	4b75      	ldr	r3, [pc, #468]	; (800293c <Rinse_Mode_Laundry+0x224>)
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d114      	bne.n	8002798 <Rinse_Mode_Laundry+0x80>
 800276e:	4b74      	ldr	r3, [pc, #464]	; (8002940 <Rinse_Mode_Laundry+0x228>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d010      	beq.n	8002798 <Rinse_Mode_Laundry+0x80>
	{
		// 남은시간은 자동으로 1초씩 감소
		if (TIM10_10ms_WM_rinse_timer > 100)
 8002776:	4b75      	ldr	r3, [pc, #468]	; (800294c <Rinse_Mode_Laundry+0x234>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2b64      	cmp	r3, #100	; 0x64
 800277c:	d907      	bls.n	800278e <Rinse_Mode_Laundry+0x76>
		{
			TIM10_10ms_WM_rinse_timer = 0;
 800277e:	4b73      	ldr	r3, [pc, #460]	; (800294c <Rinse_Mode_Laundry+0x234>)
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]
			rinse_remain_time--;
 8002784:	4b6e      	ldr	r3, [pc, #440]	; (8002940 <Rinse_Mode_Laundry+0x228>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	3b01      	subs	r3, #1
 800278a:	4a6d      	ldr	r2, [pc, #436]	; (8002940 <Rinse_Mode_Laundry+0x228>)
 800278c:	6013      	str	r3, [r2, #0]
			if (rinse_remain_time < 0) {rinse_remain_time = 0;}
		}

		DCmotor_Forward_Rotate();
 800278e:	f7fe f855 	bl	800083c <DCmotor_Forward_Rotate>
		LEDbar_On_Up();
 8002792:	f7fe f9cf 	bl	8000b34 <LEDbar_On_Up>
 8002796:	e006      	b.n	80027a6 <Rinse_Mode_Laundry+0x8e>
	}
	else // 플래그는 start이지만 남은시간이 0이하가 된 경우 여기로 빠짐
	{
		DCmotor_Break();
 8002798:	f7fe f874 	bl	8000884 <DCmotor_Break>
		LEDbar_All_Off();
 800279c:	f7fe f9be 	bl	8000b1c <LEDbar_All_Off>
		rinse_mode_start_stop_flag = STOP;
 80027a0:	4b66      	ldr	r3, [pc, #408]	; (800293c <Rinse_Mode_Laundry+0x224>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	701a      	strb	r2, [r3, #0]
	}
	/************************END 기본 동작 부분************************/

	/************************BEGIN 버튼 입력 인터럽트 부분************************/
	if (Get_Button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)
 80027a6:	2200      	movs	r2, #0
 80027a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027ac:	4868      	ldr	r0, [pc, #416]	; (8002950 <Rinse_Mode_Laundry+0x238>)
 80027ae:	f7fd ffaf 	bl	8000710 <Get_Button>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d10f      	bne.n	80027d8 <Rinse_Mode_Laundry+0xc0>
	{
		WashingMachine_curr_status++;
 80027b8:	4b63      	ldr	r3, [pc, #396]	; (8002948 <Rinse_Mode_Laundry+0x230>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	3301      	adds	r3, #1
 80027be:	b2da      	uxtb	r2, r3
 80027c0:	4b61      	ldr	r3, [pc, #388]	; (8002948 <Rinse_Mode_Laundry+0x230>)
 80027c2:	701a      	strb	r2, [r3, #0]
		WashingMachine_curr_status %= 4;
 80027c4:	4b60      	ldr	r3, [pc, #384]	; (8002948 <Rinse_Mode_Laundry+0x230>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	f003 0303 	and.w	r3, r3, #3
 80027cc:	b2da      	uxtb	r2, r3
 80027ce:	4b5e      	ldr	r3, [pc, #376]	; (8002948 <Rinse_Mode_Laundry+0x230>)
 80027d0:	701a      	strb	r2, [r3, #0]
		LCD_Command(CLEAR_DISPLAY); // 버튼을 누르는 순간마다 clear display해줘서 쓰레기값 방지
 80027d2:	2001      	movs	r0, #1
 80027d4:	f7fd feee 	bl	80005b4 <LCD_Command>
	}

	// 헹굼에 소요할 시간을 1분 증가시킨다.
	if (Get_Button(BUTTON1_GPIO_Port, BUTTON1_Pin, 1) == BUTTON_PRESS)
 80027d8:	2201      	movs	r2, #1
 80027da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80027de:	485c      	ldr	r0, [pc, #368]	; (8002950 <Rinse_Mode_Laundry+0x238>)
 80027e0:	f7fd ff96 	bl	8000710 <Get_Button>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d107      	bne.n	80027fa <Rinse_Mode_Laundry+0xe2>
	{
		rinse_remain_time += 60;
 80027ea:	4b55      	ldr	r3, [pc, #340]	; (8002940 <Rinse_Mode_Laundry+0x228>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	333c      	adds	r3, #60	; 0x3c
 80027f0:	4a53      	ldr	r2, [pc, #332]	; (8002940 <Rinse_Mode_Laundry+0x228>)
 80027f2:	6013      	str	r3, [r2, #0]
		LCD_Command(CLEAR_DISPLAY); // 버튼을 누르는 순간마다 clear display해줘서 쓰레기값 방지
 80027f4:	2001      	movs	r0, #1
 80027f6:	f7fd fedd 	bl	80005b4 <LCD_Command>
	}

	// 헹굼에 소요할 시간을 1초 증가시킨다.
	if (Get_Button(BUTTON2_GPIO_Port, BUTTON2_Pin, 2) == BUTTON_PRESS)
 80027fa:	2202      	movs	r2, #2
 80027fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002800:	4853      	ldr	r0, [pc, #332]	; (8002950 <Rinse_Mode_Laundry+0x238>)
 8002802:	f7fd ff85 	bl	8000710 <Get_Button>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d107      	bne.n	800281c <Rinse_Mode_Laundry+0x104>
	{
		rinse_remain_time += 1;
 800280c:	4b4c      	ldr	r3, [pc, #304]	; (8002940 <Rinse_Mode_Laundry+0x228>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	3301      	adds	r3, #1
 8002812:	4a4b      	ldr	r2, [pc, #300]	; (8002940 <Rinse_Mode_Laundry+0x228>)
 8002814:	6013      	str	r3, [r2, #0]
		LCD_Command(CLEAR_DISPLAY); // 버튼을 누르는 순간마다 clear display해줘서 쓰레기값 방지
 8002816:	2001      	movs	r0, #1
 8002818:	f7fd fecc 	bl	80005b4 <LCD_Command>
	}

	// 동작 시간을 설정 완료했다면, 세탁기 구동을 시작한다.
	if (Get_Button(BUTTON3_GPIO_Port, BUTTON3_Pin, 3) == BUTTON_PRESS)
 800281c:	2203      	movs	r2, #3
 800281e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002822:	484b      	ldr	r0, [pc, #300]	; (8002950 <Rinse_Mode_Laundry+0x238>)
 8002824:	f7fd ff74 	bl	8000710 <Get_Button>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d157      	bne.n	80028de <Rinse_Mode_Laundry+0x1c6>
	{
		rinse_mode_start_stop_flag = START;
 800282e:	4b43      	ldr	r3, [pc, #268]	; (800293c <Rinse_Mode_Laundry+0x224>)
 8002830:	2201      	movs	r2, #1
 8002832:	701a      	strb	r2, [r3, #0]

		HAL_RTC_GetTime(&hrtc, &rinse_complete_time, RTC_FORMAT_BCD);
 8002834:	2201      	movs	r2, #1
 8002836:	4943      	ldr	r1, [pc, #268]	; (8002944 <Rinse_Mode_Laundry+0x22c>)
 8002838:	4846      	ldr	r0, [pc, #280]	; (8002954 <Rinse_Mode_Laundry+0x23c>)
 800283a:	f002 ffd1 	bl	80057e0 <HAL_RTC_GetTime>
		rinse_complete_time.Hours += dec2bcd(rinse_remain_time / 3600);
 800283e:	4b40      	ldr	r3, [pc, #256]	; (8002940 <Rinse_Mode_Laundry+0x228>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a45      	ldr	r2, [pc, #276]	; (8002958 <Rinse_Mode_Laundry+0x240>)
 8002844:	fba2 2303 	umull	r2, r3, r2, r3
 8002848:	0adb      	lsrs	r3, r3, #11
 800284a:	b2db      	uxtb	r3, r3
 800284c:	4618      	mov	r0, r3
 800284e:	f7fe f941 	bl	8000ad4 <dec2bcd>
 8002852:	4603      	mov	r3, r0
 8002854:	461a      	mov	r2, r3
 8002856:	4b3b      	ldr	r3, [pc, #236]	; (8002944 <Rinse_Mode_Laundry+0x22c>)
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	4413      	add	r3, r2
 800285c:	b2da      	uxtb	r2, r3
 800285e:	4b39      	ldr	r3, [pc, #228]	; (8002944 <Rinse_Mode_Laundry+0x22c>)
 8002860:	701a      	strb	r2, [r3, #0]
		rinse_complete_time.Minutes += dec2bcd((rinse_remain_time % 3600) / 60);
 8002862:	4b37      	ldr	r3, [pc, #220]	; (8002940 <Rinse_Mode_Laundry+0x228>)
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	4b3c      	ldr	r3, [pc, #240]	; (8002958 <Rinse_Mode_Laundry+0x240>)
 8002868:	fba3 1302 	umull	r1, r3, r3, r2
 800286c:	0adb      	lsrs	r3, r3, #11
 800286e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002872:	fb01 f303 	mul.w	r3, r1, r3
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	4a38      	ldr	r2, [pc, #224]	; (800295c <Rinse_Mode_Laundry+0x244>)
 800287a:	fba2 2303 	umull	r2, r3, r2, r3
 800287e:	095b      	lsrs	r3, r3, #5
 8002880:	b2db      	uxtb	r3, r3
 8002882:	4618      	mov	r0, r3
 8002884:	f7fe f926 	bl	8000ad4 <dec2bcd>
 8002888:	4603      	mov	r3, r0
 800288a:	461a      	mov	r2, r3
 800288c:	4b2d      	ldr	r3, [pc, #180]	; (8002944 <Rinse_Mode_Laundry+0x22c>)
 800288e:	785b      	ldrb	r3, [r3, #1]
 8002890:	4413      	add	r3, r2
 8002892:	b2da      	uxtb	r2, r3
 8002894:	4b2b      	ldr	r3, [pc, #172]	; (8002944 <Rinse_Mode_Laundry+0x22c>)
 8002896:	705a      	strb	r2, [r3, #1]
		rinse_complete_time.Seconds += dec2bcd((rinse_remain_time % 3600) % 60);
 8002898:	4b29      	ldr	r3, [pc, #164]	; (8002940 <Rinse_Mode_Laundry+0x228>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a2e      	ldr	r2, [pc, #184]	; (8002958 <Rinse_Mode_Laundry+0x240>)
 800289e:	fba2 1203 	umull	r1, r2, r2, r3
 80028a2:	0ad2      	lsrs	r2, r2, #11
 80028a4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80028a8:	fb01 f202 	mul.w	r2, r1, r2
 80028ac:	1a9a      	subs	r2, r3, r2
 80028ae:	4b2b      	ldr	r3, [pc, #172]	; (800295c <Rinse_Mode_Laundry+0x244>)
 80028b0:	fba3 1302 	umull	r1, r3, r3, r2
 80028b4:	0959      	lsrs	r1, r3, #5
 80028b6:	460b      	mov	r3, r1
 80028b8:	011b      	lsls	r3, r3, #4
 80028ba:	1a5b      	subs	r3, r3, r1
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	1ad1      	subs	r1, r2, r3
 80028c0:	b2cb      	uxtb	r3, r1
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7fe f906 	bl	8000ad4 <dec2bcd>
 80028c8:	4603      	mov	r3, r0
 80028ca:	461a      	mov	r2, r3
 80028cc:	4b1d      	ldr	r3, [pc, #116]	; (8002944 <Rinse_Mode_Laundry+0x22c>)
 80028ce:	789b      	ldrb	r3, [r3, #2]
 80028d0:	4413      	add	r3, r2
 80028d2:	b2da      	uxtb	r2, r3
 80028d4:	4b1b      	ldr	r3, [pc, #108]	; (8002944 <Rinse_Mode_Laundry+0x22c>)
 80028d6:	709a      	strb	r2, [r3, #2]

		LCD_Command(CLEAR_DISPLAY); // 버튼을 누르는 순간마다 clear display해줘서 쓰레기값 방지
 80028d8:	2001      	movs	r0, #1
 80028da:	f7fd fe6b 	bl	80005b4 <LCD_Command>
	}

	// 세탁 모드를 즉시 중지하고 세탁모드를 초기화해준다.
	if (Get_Button(BUTTON4_GPIO_Port, BUTTON4_Pin, 4) == BUTTON_PRESS)
 80028de:	2204      	movs	r2, #4
 80028e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028e4:	481e      	ldr	r0, [pc, #120]	; (8002960 <Rinse_Mode_Laundry+0x248>)
 80028e6:	f7fd ff13 	bl	8000710 <Get_Button>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d120      	bne.n	8002932 <Rinse_Mode_Laundry+0x21a>
	{
		WashingMachine_curr_status = IDLE_MODE;
 80028f0:	4b15      	ldr	r3, [pc, #84]	; (8002948 <Rinse_Mode_Laundry+0x230>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	701a      	strb	r2, [r3, #0]
		rinse_mode_start_stop_flag = STOP;
 80028f6:	4b11      	ldr	r3, [pc, #68]	; (800293c <Rinse_Mode_Laundry+0x224>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	701a      	strb	r2, [r3, #0]
		rinse_remain_time = 0;
 80028fc:	4b10      	ldr	r3, [pc, #64]	; (8002940 <Rinse_Mode_Laundry+0x228>)
 80028fe:	2200      	movs	r2, #0
 8002900:	601a      	str	r2, [r3, #0]
		rinse_complete_time.Hours = dec2bcd(0);
 8002902:	2000      	movs	r0, #0
 8002904:	f7fe f8e6 	bl	8000ad4 <dec2bcd>
 8002908:	4603      	mov	r3, r0
 800290a:	461a      	mov	r2, r3
 800290c:	4b0d      	ldr	r3, [pc, #52]	; (8002944 <Rinse_Mode_Laundry+0x22c>)
 800290e:	701a      	strb	r2, [r3, #0]
		rinse_complete_time.Minutes = dec2bcd(0);
 8002910:	2000      	movs	r0, #0
 8002912:	f7fe f8df 	bl	8000ad4 <dec2bcd>
 8002916:	4603      	mov	r3, r0
 8002918:	461a      	mov	r2, r3
 800291a:	4b0a      	ldr	r3, [pc, #40]	; (8002944 <Rinse_Mode_Laundry+0x22c>)
 800291c:	705a      	strb	r2, [r3, #1]
		rinse_complete_time.Seconds = dec2bcd(0);
 800291e:	2000      	movs	r0, #0
 8002920:	f7fe f8d8 	bl	8000ad4 <dec2bcd>
 8002924:	4603      	mov	r3, r0
 8002926:	461a      	mov	r2, r3
 8002928:	4b06      	ldr	r3, [pc, #24]	; (8002944 <Rinse_Mode_Laundry+0x22c>)
 800292a:	709a      	strb	r2, [r3, #2]

		LCD_Command(CLEAR_DISPLAY); // 버튼을 누르는 순간마다 clear display해줘서 쓰레기값 방지
 800292c:	2001      	movs	r0, #1
 800292e:	f7fd fe41 	bl	80005b4 <LCD_Command>
	}
	/************************END 버튼 입력 인터럽트 부분************************/
}
 8002932:	bf00      	nop
 8002934:	3704      	adds	r7, #4
 8002936:	46bd      	mov	sp, r7
 8002938:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800293a:	bf00      	nop
 800293c:	20000f81 	.word	0x20000f81
 8002940:	20000f84 	.word	0x20000f84
 8002944:	20000f88 	.word	0x20000f88
 8002948:	20000f37 	.word	0x20000f37
 800294c:	20000bcc 	.word	0x20000bcc
 8002950:	40021000 	.word	0x40021000
 8002954:	20000438 	.word	0x20000438
 8002958:	91a2b3c5 	.word	0x91a2b3c5
 800295c:	88888889 	.word	0x88888889
 8002960:	40020400 	.word	0x40020400

08002964 <Spin_Mode_Laundry>:

/*
 * desc: "세탁/헹굼/탈수" 중 "탈수"에 관련된 동작을 실행하는 함수이다.
 */
static void Spin_Mode_Laundry(void)
{
 8002964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002966:	b085      	sub	sp, #20
 8002968:	af04      	add	r7, sp, #16
	static uint16_t dcmotor_duty_cycle = 30;
	static uint32_t spin_remain_time = 0;
	static RTC_TimeTypeDef spin_complete_time = {0};

	/************************BEGIN 기본 동작 부분************************/
	WashingMachine_3Mode_Display(spin_mode_start_stop_flag, spin_remain_time, spin_complete_time);
 800296a:	4b93      	ldr	r3, [pc, #588]	; (8002bb8 <Spin_Mode_Laundry+0x254>)
 800296c:	781d      	ldrb	r5, [r3, #0]
 800296e:	4b93      	ldr	r3, [pc, #588]	; (8002bbc <Spin_Mode_Laundry+0x258>)
 8002970:	681e      	ldr	r6, [r3, #0]
 8002972:	4b93      	ldr	r3, [pc, #588]	; (8002bc0 <Spin_Mode_Laundry+0x25c>)
 8002974:	466c      	mov	r4, sp
 8002976:	f103 0208 	add.w	r2, r3, #8
 800297a:	ca07      	ldmia	r2, {r0, r1, r2}
 800297c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002980:	cb0c      	ldmia	r3, {r2, r3}
 8002982:	4631      	mov	r1, r6
 8002984:	4628      	mov	r0, r5
 8002986:	f000 f95d 	bl	8002c44 <WashingMachine_3Mode_Display>
	close_WashingMachine_Lid();
 800298a:	f7fe fec1 	bl	8001710 <close_WashingMachine_Lid>

	// 뚜껑이 열려있으면 동작을 중지하고 idle 화면으로 이동
	if (Check_Lid_Open())
 800298e:	f000 f929 	bl	8002be4 <Check_Lid_Open>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d005      	beq.n	80029a4 <Spin_Mode_Laundry+0x40>
	{
		WashingMachine_curr_status = 0;
 8002998:	4b8a      	ldr	r3, [pc, #552]	; (8002bc4 <Spin_Mode_Laundry+0x260>)
 800299a:	2200      	movs	r2, #0
 800299c:	701a      	strb	r2, [r3, #0]
		LCD_Command(CLEAR_DISPLAY);
 800299e:	2001      	movs	r0, #1
 80029a0:	f7fd fe08 	bl	80005b4 <LCD_Command>
	}


	if (spin_mode_start_stop_flag == STOP)
 80029a4:	4b84      	ldr	r3, [pc, #528]	; (8002bb8 <Spin_Mode_Laundry+0x254>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d102      	bne.n	80029b2 <Spin_Mode_Laundry+0x4e>
	{
		DCmotor_Break();
 80029ac:	f7fd ff6a 	bl	8000884 <DCmotor_Break>
 80029b0:	e034      	b.n	8002a1c <Spin_Mode_Laundry+0xb8>
	}
	else if (spin_mode_start_stop_flag == START && spin_remain_time > 0)
 80029b2:	4b81      	ldr	r3, [pc, #516]	; (8002bb8 <Spin_Mode_Laundry+0x254>)
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d126      	bne.n	8002a08 <Spin_Mode_Laundry+0xa4>
 80029ba:	4b80      	ldr	r3, [pc, #512]	; (8002bbc <Spin_Mode_Laundry+0x258>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d022      	beq.n	8002a08 <Spin_Mode_Laundry+0xa4>
	{
		// 남은시간은 자동으로 1초씩 감소
		if (TIM10_10ms_WM_spin_timer > 100)
 80029c2:	4b81      	ldr	r3, [pc, #516]	; (8002bc8 <Spin_Mode_Laundry+0x264>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2b64      	cmp	r3, #100	; 0x64
 80029c8:	d919      	bls.n	80029fe <Spin_Mode_Laundry+0x9a>
		{
			TIM10_10ms_WM_spin_timer = 0;
 80029ca:	4b7f      	ldr	r3, [pc, #508]	; (8002bc8 <Spin_Mode_Laundry+0x264>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]
			spin_remain_time--;
 80029d0:	4b7a      	ldr	r3, [pc, #488]	; (8002bbc <Spin_Mode_Laundry+0x258>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	3b01      	subs	r3, #1
 80029d6:	4a79      	ldr	r2, [pc, #484]	; (8002bbc <Spin_Mode_Laundry+0x258>)
 80029d8:	6013      	str	r3, [r2, #0]
			if (spin_remain_time < 0) {spin_remain_time = 0;}

			dcmotor_duty_cycle += 3;
 80029da:	4b7c      	ldr	r3, [pc, #496]	; (8002bcc <Spin_Mode_Laundry+0x268>)
 80029dc:	881b      	ldrh	r3, [r3, #0]
 80029de:	3303      	adds	r3, #3
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	4b7a      	ldr	r3, [pc, #488]	; (8002bcc <Spin_Mode_Laundry+0x268>)
 80029e4:	801a      	strh	r2, [r3, #0]
			if (dcmotor_duty_cycle > 100)
 80029e6:	4b79      	ldr	r3, [pc, #484]	; (8002bcc <Spin_Mode_Laundry+0x268>)
 80029e8:	881b      	ldrh	r3, [r3, #0]
 80029ea:	2b64      	cmp	r3, #100	; 0x64
 80029ec:	d902      	bls.n	80029f4 <Spin_Mode_Laundry+0x90>
			{
				dcmotor_duty_cycle = 100;
 80029ee:	4b77      	ldr	r3, [pc, #476]	; (8002bcc <Spin_Mode_Laundry+0x268>)
 80029f0:	2264      	movs	r2, #100	; 0x64
 80029f2:	801a      	strh	r2, [r3, #0]
			}

			DCmotor_Set_DutyCycle(dcmotor_duty_cycle);
 80029f4:	4b75      	ldr	r3, [pc, #468]	; (8002bcc <Spin_Mode_Laundry+0x268>)
 80029f6:	881b      	ldrh	r3, [r3, #0]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7fd ff55 	bl	80008a8 <DCmotor_Set_DutyCycle>
		}

		DCmotor_Forward_Rotate();
 80029fe:	f7fd ff1d 	bl	800083c <DCmotor_Forward_Rotate>
		LEDbar_Keepon_Up();
 8002a02:	f7fe f8c1 	bl	8000b88 <LEDbar_Keepon_Up>
 8002a06:	e009      	b.n	8002a1c <Spin_Mode_Laundry+0xb8>
	}
	else // 플래그는 start이지만 남은시간이 0이하가 된 경우 여기로 빠짐
	{
		dcmotor_duty_cycle = 30;
 8002a08:	4b70      	ldr	r3, [pc, #448]	; (8002bcc <Spin_Mode_Laundry+0x268>)
 8002a0a:	221e      	movs	r2, #30
 8002a0c:	801a      	strh	r2, [r3, #0]
		DCmotor_Break();
 8002a0e:	f7fd ff39 	bl	8000884 <DCmotor_Break>
		LEDbar_All_Off();
 8002a12:	f7fe f883 	bl	8000b1c <LEDbar_All_Off>
		spin_mode_start_stop_flag = STOP;
 8002a16:	4b68      	ldr	r3, [pc, #416]	; (8002bb8 <Spin_Mode_Laundry+0x254>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	701a      	strb	r2, [r3, #0]
	}
	/************************END 기본 동작 부분************************/

	/************************BEGIN 버튼 입력 인터럽트 부분************************/
	if (Get_Button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a22:	486b      	ldr	r0, [pc, #428]	; (8002bd0 <Spin_Mode_Laundry+0x26c>)
 8002a24:	f7fd fe74 	bl	8000710 <Get_Button>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10f      	bne.n	8002a4e <Spin_Mode_Laundry+0xea>
	{
		WashingMachine_curr_status++;
 8002a2e:	4b65      	ldr	r3, [pc, #404]	; (8002bc4 <Spin_Mode_Laundry+0x260>)
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	3301      	adds	r3, #1
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	4b63      	ldr	r3, [pc, #396]	; (8002bc4 <Spin_Mode_Laundry+0x260>)
 8002a38:	701a      	strb	r2, [r3, #0]
		WashingMachine_curr_status %= 4;
 8002a3a:	4b62      	ldr	r3, [pc, #392]	; (8002bc4 <Spin_Mode_Laundry+0x260>)
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	f003 0303 	and.w	r3, r3, #3
 8002a42:	b2da      	uxtb	r2, r3
 8002a44:	4b5f      	ldr	r3, [pc, #380]	; (8002bc4 <Spin_Mode_Laundry+0x260>)
 8002a46:	701a      	strb	r2, [r3, #0]
		LCD_Command(CLEAR_DISPLAY); // 버튼을 누르는 순간마다 clear display해줘서 쓰레기값 방지
 8002a48:	2001      	movs	r0, #1
 8002a4a:	f7fd fdb3 	bl	80005b4 <LCD_Command>
	}

	// 탈수에 소요할 시간을 1분 증가시킨다.
	if (Get_Button(BUTTON1_GPIO_Port, BUTTON1_Pin, 1) == BUTTON_PRESS)
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a54:	485e      	ldr	r0, [pc, #376]	; (8002bd0 <Spin_Mode_Laundry+0x26c>)
 8002a56:	f7fd fe5b 	bl	8000710 <Get_Button>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d107      	bne.n	8002a70 <Spin_Mode_Laundry+0x10c>
	{
		spin_remain_time += 60;
 8002a60:	4b56      	ldr	r3, [pc, #344]	; (8002bbc <Spin_Mode_Laundry+0x258>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	333c      	adds	r3, #60	; 0x3c
 8002a66:	4a55      	ldr	r2, [pc, #340]	; (8002bbc <Spin_Mode_Laundry+0x258>)
 8002a68:	6013      	str	r3, [r2, #0]
		LCD_Command(CLEAR_DISPLAY); // 버튼을 누르는 순간마다 clear display해줘서 쓰레기값 방지
 8002a6a:	2001      	movs	r0, #1
 8002a6c:	f7fd fda2 	bl	80005b4 <LCD_Command>
	}

	// 탈수에 소요할 시간을 1초 증가시킨다.
	if (Get_Button(BUTTON2_GPIO_Port, BUTTON2_Pin, 2) == BUTTON_PRESS)
 8002a70:	2202      	movs	r2, #2
 8002a72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a76:	4856      	ldr	r0, [pc, #344]	; (8002bd0 <Spin_Mode_Laundry+0x26c>)
 8002a78:	f7fd fe4a 	bl	8000710 <Get_Button>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d107      	bne.n	8002a92 <Spin_Mode_Laundry+0x12e>
	{
		spin_remain_time += 1;
 8002a82:	4b4e      	ldr	r3, [pc, #312]	; (8002bbc <Spin_Mode_Laundry+0x258>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	3301      	adds	r3, #1
 8002a88:	4a4c      	ldr	r2, [pc, #304]	; (8002bbc <Spin_Mode_Laundry+0x258>)
 8002a8a:	6013      	str	r3, [r2, #0]
		LCD_Command(CLEAR_DISPLAY); // 버튼을 누르는 순간마다 clear display해줘서 쓰레기값 방지
 8002a8c:	2001      	movs	r0, #1
 8002a8e:	f7fd fd91 	bl	80005b4 <LCD_Command>
	}

	// 동작 시간을 설정 완료했다면, 세탁기 구동을 시작한다.
	if (Get_Button(BUTTON3_GPIO_Port, BUTTON3_Pin, 3) == BUTTON_PRESS)
 8002a92:	2203      	movs	r2, #3
 8002a94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a98:	484d      	ldr	r0, [pc, #308]	; (8002bd0 <Spin_Mode_Laundry+0x26c>)
 8002a9a:	f7fd fe39 	bl	8000710 <Get_Button>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d157      	bne.n	8002b54 <Spin_Mode_Laundry+0x1f0>
	{
		spin_mode_start_stop_flag = START;
 8002aa4:	4b44      	ldr	r3, [pc, #272]	; (8002bb8 <Spin_Mode_Laundry+0x254>)
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	701a      	strb	r2, [r3, #0]

		HAL_RTC_GetTime(&hrtc, &spin_complete_time, RTC_FORMAT_BCD);
 8002aaa:	2201      	movs	r2, #1
 8002aac:	4944      	ldr	r1, [pc, #272]	; (8002bc0 <Spin_Mode_Laundry+0x25c>)
 8002aae:	4849      	ldr	r0, [pc, #292]	; (8002bd4 <Spin_Mode_Laundry+0x270>)
 8002ab0:	f002 fe96 	bl	80057e0 <HAL_RTC_GetTime>
		spin_complete_time.Hours += dec2bcd(spin_remain_time / 3600);
 8002ab4:	4b41      	ldr	r3, [pc, #260]	; (8002bbc <Spin_Mode_Laundry+0x258>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a47      	ldr	r2, [pc, #284]	; (8002bd8 <Spin_Mode_Laundry+0x274>)
 8002aba:	fba2 2303 	umull	r2, r3, r2, r3
 8002abe:	0adb      	lsrs	r3, r3, #11
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7fe f806 	bl	8000ad4 <dec2bcd>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	461a      	mov	r2, r3
 8002acc:	4b3c      	ldr	r3, [pc, #240]	; (8002bc0 <Spin_Mode_Laundry+0x25c>)
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	b2da      	uxtb	r2, r3
 8002ad4:	4b3a      	ldr	r3, [pc, #232]	; (8002bc0 <Spin_Mode_Laundry+0x25c>)
 8002ad6:	701a      	strb	r2, [r3, #0]
		spin_complete_time.Minutes += dec2bcd((spin_remain_time % 3600) / 60);
 8002ad8:	4b38      	ldr	r3, [pc, #224]	; (8002bbc <Spin_Mode_Laundry+0x258>)
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	4b3e      	ldr	r3, [pc, #248]	; (8002bd8 <Spin_Mode_Laundry+0x274>)
 8002ade:	fba3 1302 	umull	r1, r3, r3, r2
 8002ae2:	0adb      	lsrs	r3, r3, #11
 8002ae4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002ae8:	fb01 f303 	mul.w	r3, r1, r3
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	4a3b      	ldr	r2, [pc, #236]	; (8002bdc <Spin_Mode_Laundry+0x278>)
 8002af0:	fba2 2303 	umull	r2, r3, r2, r3
 8002af4:	095b      	lsrs	r3, r3, #5
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7fd ffeb 	bl	8000ad4 <dec2bcd>
 8002afe:	4603      	mov	r3, r0
 8002b00:	461a      	mov	r2, r3
 8002b02:	4b2f      	ldr	r3, [pc, #188]	; (8002bc0 <Spin_Mode_Laundry+0x25c>)
 8002b04:	785b      	ldrb	r3, [r3, #1]
 8002b06:	4413      	add	r3, r2
 8002b08:	b2da      	uxtb	r2, r3
 8002b0a:	4b2d      	ldr	r3, [pc, #180]	; (8002bc0 <Spin_Mode_Laundry+0x25c>)
 8002b0c:	705a      	strb	r2, [r3, #1]
		spin_complete_time.Seconds += dec2bcd((spin_remain_time % 3600) % 60);
 8002b0e:	4b2b      	ldr	r3, [pc, #172]	; (8002bbc <Spin_Mode_Laundry+0x258>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a31      	ldr	r2, [pc, #196]	; (8002bd8 <Spin_Mode_Laundry+0x274>)
 8002b14:	fba2 1203 	umull	r1, r2, r2, r3
 8002b18:	0ad2      	lsrs	r2, r2, #11
 8002b1a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002b1e:	fb01 f202 	mul.w	r2, r1, r2
 8002b22:	1a9a      	subs	r2, r3, r2
 8002b24:	4b2d      	ldr	r3, [pc, #180]	; (8002bdc <Spin_Mode_Laundry+0x278>)
 8002b26:	fba3 1302 	umull	r1, r3, r3, r2
 8002b2a:	0959      	lsrs	r1, r3, #5
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	011b      	lsls	r3, r3, #4
 8002b30:	1a5b      	subs	r3, r3, r1
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	1ad1      	subs	r1, r2, r3
 8002b36:	b2cb      	uxtb	r3, r1
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7fd ffcb 	bl	8000ad4 <dec2bcd>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	461a      	mov	r2, r3
 8002b42:	4b1f      	ldr	r3, [pc, #124]	; (8002bc0 <Spin_Mode_Laundry+0x25c>)
 8002b44:	789b      	ldrb	r3, [r3, #2]
 8002b46:	4413      	add	r3, r2
 8002b48:	b2da      	uxtb	r2, r3
 8002b4a:	4b1d      	ldr	r3, [pc, #116]	; (8002bc0 <Spin_Mode_Laundry+0x25c>)
 8002b4c:	709a      	strb	r2, [r3, #2]

		LCD_Command(CLEAR_DISPLAY); // 버튼을 누르는 순간마다 clear display해줘서 쓰레기값 방지
 8002b4e:	2001      	movs	r0, #1
 8002b50:	f7fd fd30 	bl	80005b4 <LCD_Command>
	}

	// 세탁 모드를 즉시 중지하고 세탁모드를 초기화해준다.
	if (Get_Button(BUTTON4_GPIO_Port, BUTTON4_Pin, 4) == BUTTON_PRESS)
 8002b54:	2204      	movs	r2, #4
 8002b56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b5a:	4821      	ldr	r0, [pc, #132]	; (8002be0 <Spin_Mode_Laundry+0x27c>)
 8002b5c:	f7fd fdd8 	bl	8000710 <Get_Button>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d123      	bne.n	8002bae <Spin_Mode_Laundry+0x24a>
	{
		WashingMachine_curr_status = IDLE_MODE;
 8002b66:	4b17      	ldr	r3, [pc, #92]	; (8002bc4 <Spin_Mode_Laundry+0x260>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	701a      	strb	r2, [r3, #0]
		spin_mode_start_stop_flag = STOP;
 8002b6c:	4b12      	ldr	r3, [pc, #72]	; (8002bb8 <Spin_Mode_Laundry+0x254>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	701a      	strb	r2, [r3, #0]
		dcmotor_duty_cycle = 30;
 8002b72:	4b16      	ldr	r3, [pc, #88]	; (8002bcc <Spin_Mode_Laundry+0x268>)
 8002b74:	221e      	movs	r2, #30
 8002b76:	801a      	strh	r2, [r3, #0]
		spin_remain_time = 0;
 8002b78:	4b10      	ldr	r3, [pc, #64]	; (8002bbc <Spin_Mode_Laundry+0x258>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	601a      	str	r2, [r3, #0]
		spin_complete_time.Hours = dec2bcd(0);
 8002b7e:	2000      	movs	r0, #0
 8002b80:	f7fd ffa8 	bl	8000ad4 <dec2bcd>
 8002b84:	4603      	mov	r3, r0
 8002b86:	461a      	mov	r2, r3
 8002b88:	4b0d      	ldr	r3, [pc, #52]	; (8002bc0 <Spin_Mode_Laundry+0x25c>)
 8002b8a:	701a      	strb	r2, [r3, #0]
		spin_complete_time.Minutes = dec2bcd(0);
 8002b8c:	2000      	movs	r0, #0
 8002b8e:	f7fd ffa1 	bl	8000ad4 <dec2bcd>
 8002b92:	4603      	mov	r3, r0
 8002b94:	461a      	mov	r2, r3
 8002b96:	4b0a      	ldr	r3, [pc, #40]	; (8002bc0 <Spin_Mode_Laundry+0x25c>)
 8002b98:	705a      	strb	r2, [r3, #1]
		spin_complete_time.Seconds = dec2bcd(0);
 8002b9a:	2000      	movs	r0, #0
 8002b9c:	f7fd ff9a 	bl	8000ad4 <dec2bcd>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	4b06      	ldr	r3, [pc, #24]	; (8002bc0 <Spin_Mode_Laundry+0x25c>)
 8002ba6:	709a      	strb	r2, [r3, #2]
		LCD_Command(CLEAR_DISPLAY); // 버튼을 누르는 순간마다 clear display해줘서 쓰레기값 방지
 8002ba8:	2001      	movs	r0, #1
 8002baa:	f7fd fd03 	bl	80005b4 <LCD_Command>
	}
	/************************END 버튼 입력 인터럽트 부분************************/
}
 8002bae:	bf00      	nop
 8002bb0:	3704      	adds	r7, #4
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	20000f9c 	.word	0x20000f9c
 8002bbc:	20000fa0 	.word	0x20000fa0
 8002bc0:	20000fa4 	.word	0x20000fa4
 8002bc4:	20000f37 	.word	0x20000f37
 8002bc8:	20000bd0 	.word	0x20000bd0
 8002bcc:	20000114 	.word	0x20000114
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	20000438 	.word	0x20000438
 8002bd8:	91a2b3c5 	.word	0x91a2b3c5
 8002bdc:	88888889 	.word	0x88888889
 8002be0:	40020400 	.word	0x40020400

08002be4 <Check_Lid_Open>:
 * desc: 세탁기의 뚜껑이 열린상태인지 닫힌 상태인지 파악한다. 뚜껑의 개폐 상태는 1초에 한번씩 체크한다.
 *       초음파센서와 뚜껑의 거리가 10cm 이하이면 닫힌 것으로 간주하고, 10cm 초과이면 열린 것으로 간주한다.
 * return: True(뚜껑이 열려있음) False(뚜껑이 닫혀있음)
 */
static bool Check_Lid_Open(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
		return false;
	}

#else

	return false;
 8002be8:	2300      	movs	r3, #0

#endif
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <Idle_Mode_Display>:

/*
 * desc:
 */
static void Idle_Mode_Display(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b08a      	sub	sp, #40	; 0x28
 8002bf8:	af00      	add	r7, sp, #0
	uint8_t lcd_buff_1[20], lcd_buff_2[20];

	sprintf(lcd_buff_1, "[ select MODE  ]");
 8002bfa:	f107 0314 	add.w	r3, r7, #20
 8002bfe:	490f      	ldr	r1, [pc, #60]	; (8002c3c <Idle_Mode_Display+0x48>)
 8002c00:	4618      	mov	r0, r3
 8002c02:	f006 f92d 	bl	8008e60 <siprintf>
	Move_Cursor(0, 0);
 8002c06:	2100      	movs	r1, #0
 8002c08:	2000      	movs	r0, #0
 8002c0a:	f7fd fd69 	bl	80006e0 <Move_Cursor>
	LCD_String(lcd_buff_1);
 8002c0e:	f107 0314 	add.w	r3, r7, #20
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7fd fd4f 	bl	80006b6 <LCD_String>

	sprintf(lcd_buff_2, "WASH/RINSE/SPIN");
 8002c18:	463b      	mov	r3, r7
 8002c1a:	4909      	ldr	r1, [pc, #36]	; (8002c40 <Idle_Mode_Display+0x4c>)
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f006 f91f 	bl	8008e60 <siprintf>
	Move_Cursor(1, 0);
 8002c22:	2100      	movs	r1, #0
 8002c24:	2001      	movs	r0, #1
 8002c26:	f7fd fd5b 	bl	80006e0 <Move_Cursor>
	LCD_String(lcd_buff_2);
 8002c2a:	463b      	mov	r3, r7
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7fd fd42 	bl	80006b6 <LCD_String>
}
 8002c32:	bf00      	nop
 8002c34:	3728      	adds	r7, #40	; 0x28
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	08009f48 	.word	0x08009f48
 8002c40:	08009f5c 	.word	0x08009f5c

08002c44 <WashingMachine_3Mode_Display>:

/*
 * desc:
 */
static void WashingMachine_3Mode_Display(uint8_t mode_start_stop_flag, uint32_t remain_time, RTC_TimeTypeDef complete_time)
{
 8002c44:	b082      	sub	sp, #8
 8002c46:	b5b0      	push	{r4, r5, r7, lr}
 8002c48:	b092      	sub	sp, #72	; 0x48
 8002c4a:	af02      	add	r7, sp, #8
 8002c4c:	6039      	str	r1, [r7, #0]
 8002c4e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002c52:	e881 000c 	stmia.w	r1, {r2, r3}
 8002c56:	4603      	mov	r3, r0
 8002c58:	71fb      	strb	r3, [r7, #7]
	uint8_t lcd_buff_1[20], lcd_buff_2[20];
	uint8_t mode_name[10];
	uint8_t remain_min;
	uint8_t remain_sec;

	switch (WashingMachine_curr_status)
 8002c5a:	4b77      	ldr	r3, [pc, #476]	; (8002e38 <WashingMachine_3Mode_Display+0x1f4>)
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	2b03      	cmp	r3, #3
 8002c60:	d014      	beq.n	8002c8c <WashingMachine_3Mode_Display+0x48>
 8002c62:	2b03      	cmp	r3, #3
 8002c64:	dc19      	bgt.n	8002c9a <WashingMachine_3Mode_Display+0x56>
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d002      	beq.n	8002c70 <WashingMachine_3Mode_Display+0x2c>
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d007      	beq.n	8002c7e <WashingMachine_3Mode_Display+0x3a>
		case SPIN_MODE:
			sprintf(mode_name, "Spin");
			break;

		default:
			break;
 8002c6e:	e014      	b.n	8002c9a <WashingMachine_3Mode_Display+0x56>
			sprintf(mode_name, "Wash");
 8002c70:	f107 0308 	add.w	r3, r7, #8
 8002c74:	4971      	ldr	r1, [pc, #452]	; (8002e3c <WashingMachine_3Mode_Display+0x1f8>)
 8002c76:	4618      	mov	r0, r3
 8002c78:	f006 f8f2 	bl	8008e60 <siprintf>
			break;
 8002c7c:	e00e      	b.n	8002c9c <WashingMachine_3Mode_Display+0x58>
			sprintf(mode_name, "Rinse");
 8002c7e:	f107 0308 	add.w	r3, r7, #8
 8002c82:	496f      	ldr	r1, [pc, #444]	; (8002e40 <WashingMachine_3Mode_Display+0x1fc>)
 8002c84:	4618      	mov	r0, r3
 8002c86:	f006 f8eb 	bl	8008e60 <siprintf>
			break;
 8002c8a:	e007      	b.n	8002c9c <WashingMachine_3Mode_Display+0x58>
			sprintf(mode_name, "Spin");
 8002c8c:	f107 0308 	add.w	r3, r7, #8
 8002c90:	496c      	ldr	r1, [pc, #432]	; (8002e44 <WashingMachine_3Mode_Display+0x200>)
 8002c92:	4618      	mov	r0, r3
 8002c94:	f006 f8e4 	bl	8008e60 <siprintf>
			break;
 8002c98:	e000      	b.n	8002c9c <WashingMachine_3Mode_Display+0x58>
			break;
 8002c9a:	bf00      	nop
	}

	remain_min = remain_time / 60;
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	4a6a      	ldr	r2, [pc, #424]	; (8002e48 <WashingMachine_3Mode_Display+0x204>)
 8002ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca4:	095b      	lsrs	r3, r3, #5
 8002ca6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	remain_sec = remain_time % 60;
 8002caa:	6839      	ldr	r1, [r7, #0]
 8002cac:	4b66      	ldr	r3, [pc, #408]	; (8002e48 <WashingMachine_3Mode_Display+0x204>)
 8002cae:	fba3 2301 	umull	r2, r3, r3, r1
 8002cb2:	095a      	lsrs	r2, r3, #5
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	011b      	lsls	r3, r3, #4
 8002cb8:	1a9b      	subs	r3, r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	1aca      	subs	r2, r1, r3
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	// 반드시 GetTime과 GetDate를 함께 호출해줘야 Consistency 보장할 수 있다.
	// (RTC는 GetTime과 GetDate 과정에서 Consistency 보장을 위해서 Shadow Register를 Lock해주는데,
	// 만일 GetTime과 GetDate를 함께 호출해주지 않을 경우 어느 한쪽에서 Shadow Register를 Lock만 하고 Unlock해주지 않게 되어 RTC 동작에 문제가 발생함)
	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BCD);
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	4961      	ldr	r1, [pc, #388]	; (8002e4c <WashingMachine_3Mode_Display+0x208>)
 8002cc8:	4861      	ldr	r0, [pc, #388]	; (8002e50 <WashingMachine_3Mode_Display+0x20c>)
 8002cca:	f002 fd89 	bl	80057e0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BCD);
 8002cce:	2201      	movs	r2, #1
 8002cd0:	4960      	ldr	r1, [pc, #384]	; (8002e54 <WashingMachine_3Mode_Display+0x210>)
 8002cd2:	485f      	ldr	r0, [pc, #380]	; (8002e50 <WashingMachine_3Mode_Display+0x20c>)
 8002cd4:	f002 fe66 	bl	80059a4 <HAL_RTC_GetDate>

	// << wash_mode_start_stop_flag가 STOP일 때의 화면 출력 >>
	// [wash] set: 00분 00초 (Laundry함수에서 버튼 누를때마다 갱신)
	// Now on: 00시 00분 00초 (무한갱신중)
	if (mode_start_stop_flag == STOP)
 8002cd8:	79fb      	ldrb	r3, [r7, #7]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d145      	bne.n	8002d6a <WashingMachine_3Mode_Display+0x126>
	{
		if (old_time.Seconds != current_time.Seconds)
 8002cde:	4b5e      	ldr	r3, [pc, #376]	; (8002e58 <WashingMachine_3Mode_Display+0x214>)
 8002ce0:	789a      	ldrb	r2, [r3, #2]
 8002ce2:	4b5a      	ldr	r3, [pc, #360]	; (8002e4c <WashingMachine_3Mode_Display+0x208>)
 8002ce4:	789b      	ldrb	r3, [r3, #2]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d024      	beq.n	8002d34 <WashingMachine_3Mode_Display+0xf0>
		{
			sprintf(lcd_buff_1, "Now>> %02d:%02d:%02d", bcd2dec(current_time.Hours), bcd2dec(current_time.Minutes), bcd2dec(current_time.Seconds));
 8002cea:	4b58      	ldr	r3, [pc, #352]	; (8002e4c <WashingMachine_3Mode_Display+0x208>)
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7fd fed4 	bl	8000a9c <bcd2dec>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	461c      	mov	r4, r3
 8002cf8:	4b54      	ldr	r3, [pc, #336]	; (8002e4c <WashingMachine_3Mode_Display+0x208>)
 8002cfa:	785b      	ldrb	r3, [r3, #1]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7fd fecd 	bl	8000a9c <bcd2dec>
 8002d02:	4603      	mov	r3, r0
 8002d04:	461d      	mov	r5, r3
 8002d06:	4b51      	ldr	r3, [pc, #324]	; (8002e4c <WashingMachine_3Mode_Display+0x208>)
 8002d08:	789b      	ldrb	r3, [r3, #2]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7fd fec6 	bl	8000a9c <bcd2dec>
 8002d10:	4603      	mov	r3, r0
 8002d12:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002d16:	9300      	str	r3, [sp, #0]
 8002d18:	462b      	mov	r3, r5
 8002d1a:	4622      	mov	r2, r4
 8002d1c:	494f      	ldr	r1, [pc, #316]	; (8002e5c <WashingMachine_3Mode_Display+0x218>)
 8002d1e:	f006 f89f 	bl	8008e60 <siprintf>
			Move_Cursor(0, 0);
 8002d22:	2100      	movs	r1, #0
 8002d24:	2000      	movs	r0, #0
 8002d26:	f7fd fcdb 	bl	80006e0 <Move_Cursor>
			LCD_String(lcd_buff_1);
 8002d2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fd fcc1 	bl	80006b6 <LCD_String>
		}
		old_time.Seconds = current_time.Seconds;
 8002d34:	4b45      	ldr	r3, [pc, #276]	; (8002e4c <WashingMachine_3Mode_Display+0x208>)
 8002d36:	789a      	ldrb	r2, [r3, #2]
 8002d38:	4b47      	ldr	r3, [pc, #284]	; (8002e58 <WashingMachine_3Mode_Display+0x214>)
 8002d3a:	709a      	strb	r2, [r3, #2]

		sprintf(lcd_buff_2, "[%s?] %02dm %02ds", mode_name, remain_min, remain_sec);
 8002d3c:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8002d40:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002d44:	f107 0208 	add.w	r2, r7, #8
 8002d48:	f107 0014 	add.w	r0, r7, #20
 8002d4c:	9300      	str	r3, [sp, #0]
 8002d4e:	460b      	mov	r3, r1
 8002d50:	4943      	ldr	r1, [pc, #268]	; (8002e60 <WashingMachine_3Mode_Display+0x21c>)
 8002d52:	f006 f885 	bl	8008e60 <siprintf>
		Move_Cursor(1, 0);
 8002d56:	2100      	movs	r1, #0
 8002d58:	2001      	movs	r0, #1
 8002d5a:	f7fd fcc1 	bl	80006e0 <Move_Cursor>
		LCD_String(lcd_buff_2);
 8002d5e:	f107 0314 	add.w	r3, r7, #20
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7fd fca7 	bl	80006b6 <LCD_String>

		sprintf(lcd_buff_2, "error occured!!!");
		Move_Cursor(1, 0);
		LCD_String(lcd_buff_2);
	}
}
 8002d68:	e05e      	b.n	8002e28 <WashingMachine_3Mode_Display+0x1e4>
	else if (mode_start_stop_flag == START)
 8002d6a:	79fb      	ldrb	r3, [r7, #7]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d13b      	bne.n	8002de8 <WashingMachine_3Mode_Display+0x1a4>
		sprintf(lcd_buff_1, "Cplt>> %02d:%02d:%02d", bcd2dec(complete_time.Hours), bcd2dec(complete_time.Minutes), bcd2dec(complete_time.Seconds));
 8002d70:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7fd fe91 	bl	8000a9c <bcd2dec>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	461c      	mov	r4, r3
 8002d7e:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7fd fe8a 	bl	8000a9c <bcd2dec>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	461d      	mov	r5, r3
 8002d8c:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7fd fe83 	bl	8000a9c <bcd2dec>
 8002d96:	4603      	mov	r3, r0
 8002d98:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002d9c:	9300      	str	r3, [sp, #0]
 8002d9e:	462b      	mov	r3, r5
 8002da0:	4622      	mov	r2, r4
 8002da2:	4930      	ldr	r1, [pc, #192]	; (8002e64 <WashingMachine_3Mode_Display+0x220>)
 8002da4:	f006 f85c 	bl	8008e60 <siprintf>
		Move_Cursor(0, 0);
 8002da8:	2100      	movs	r1, #0
 8002daa:	2000      	movs	r0, #0
 8002dac:	f7fd fc98 	bl	80006e0 <Move_Cursor>
		LCD_String(lcd_buff_1);
 8002db0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7fd fc7e 	bl	80006b6 <LCD_String>
		sprintf(lcd_buff_2, "[%s!] %02dm %02ds", mode_name, remain_min, remain_sec);
 8002dba:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8002dbe:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002dc2:	f107 0208 	add.w	r2, r7, #8
 8002dc6:	f107 0014 	add.w	r0, r7, #20
 8002dca:	9300      	str	r3, [sp, #0]
 8002dcc:	460b      	mov	r3, r1
 8002dce:	4926      	ldr	r1, [pc, #152]	; (8002e68 <WashingMachine_3Mode_Display+0x224>)
 8002dd0:	f006 f846 	bl	8008e60 <siprintf>
		Move_Cursor(1, 0);
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	2001      	movs	r0, #1
 8002dd8:	f7fd fc82 	bl	80006e0 <Move_Cursor>
		LCD_String(lcd_buff_2);
 8002ddc:	f107 0314 	add.w	r3, r7, #20
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7fd fc68 	bl	80006b6 <LCD_String>
}
 8002de6:	e01f      	b.n	8002e28 <WashingMachine_3Mode_Display+0x1e4>
		sprintf(lcd_buff_1, "[  %s_MODE ]", mode_name);
 8002de8:	f107 0208 	add.w	r2, r7, #8
 8002dec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002df0:	491e      	ldr	r1, [pc, #120]	; (8002e6c <WashingMachine_3Mode_Display+0x228>)
 8002df2:	4618      	mov	r0, r3
 8002df4:	f006 f834 	bl	8008e60 <siprintf>
		Move_Cursor(0, 0);
 8002df8:	2100      	movs	r1, #0
 8002dfa:	2000      	movs	r0, #0
 8002dfc:	f7fd fc70 	bl	80006e0 <Move_Cursor>
		LCD_String(lcd_buff_1);
 8002e00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7fd fc56 	bl	80006b6 <LCD_String>
		sprintf(lcd_buff_2, "error occured!!!");
 8002e0a:	f107 0314 	add.w	r3, r7, #20
 8002e0e:	4918      	ldr	r1, [pc, #96]	; (8002e70 <WashingMachine_3Mode_Display+0x22c>)
 8002e10:	4618      	mov	r0, r3
 8002e12:	f006 f825 	bl	8008e60 <siprintf>
		Move_Cursor(1, 0);
 8002e16:	2100      	movs	r1, #0
 8002e18:	2001      	movs	r0, #1
 8002e1a:	f7fd fc61 	bl	80006e0 <Move_Cursor>
		LCD_String(lcd_buff_2);
 8002e1e:	f107 0314 	add.w	r3, r7, #20
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7fd fc47 	bl	80006b6 <LCD_String>
}
 8002e28:	bf00      	nop
 8002e2a:	3740      	adds	r7, #64	; 0x40
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002e32:	b002      	add	sp, #8
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	20000f37 	.word	0x20000f37
 8002e3c:	08009f6c 	.word	0x08009f6c
 8002e40:	08009f74 	.word	0x08009f74
 8002e44:	08009f7c 	.word	0x08009f7c
 8002e48:	88888889 	.word	0x88888889
 8002e4c:	20000f4c 	.word	0x20000f4c
 8002e50:	20000438 	.word	0x20000438
 8002e54:	20000f60 	.word	0x20000f60
 8002e58:	20000f38 	.word	0x20000f38
 8002e5c:	08009f84 	.word	0x08009f84
 8002e60:	08009f9c 	.word	0x08009f9c
 8002e64:	08009fb0 	.word	0x08009fb0
 8002e68:	08009fc8 	.word	0x08009fc8
 8002e6c:	08009fdc 	.word	0x08009fdc
 8002e70:	08009fec 	.word	0x08009fec

08002e74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002e74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002eac <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e78:	480d      	ldr	r0, [pc, #52]	; (8002eb0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e7a:	490e      	ldr	r1, [pc, #56]	; (8002eb4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e7c:	4a0e      	ldr	r2, [pc, #56]	; (8002eb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e80:	e002      	b.n	8002e88 <LoopCopyDataInit>

08002e82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e86:	3304      	adds	r3, #4

08002e88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e8c:	d3f9      	bcc.n	8002e82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e8e:	4a0b      	ldr	r2, [pc, #44]	; (8002ebc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e90:	4c0b      	ldr	r4, [pc, #44]	; (8002ec0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e94:	e001      	b.n	8002e9a <LoopFillZerobss>

08002e96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e98:	3204      	adds	r2, #4

08002e9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e9c:	d3fb      	bcc.n	8002e96 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e9e:	f7ff f919 	bl	80020d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ea2:	f005 ff3b 	bl	8008d1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ea6:	f7fd feed 	bl	8000c84 <main>
  bx  lr    
 8002eaa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002eac:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002eb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002eb4:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8002eb8:	0800a0c0 	.word	0x0800a0c0
  ldr r2, =_sbss
 8002ebc:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8002ec0:	20000fcc 	.word	0x20000fcc

08002ec4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ec4:	e7fe      	b.n	8002ec4 <ADC_IRQHandler>
	...

08002ec8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ecc:	4b0e      	ldr	r3, [pc, #56]	; (8002f08 <HAL_Init+0x40>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a0d      	ldr	r2, [pc, #52]	; (8002f08 <HAL_Init+0x40>)
 8002ed2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ed6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ed8:	4b0b      	ldr	r3, [pc, #44]	; (8002f08 <HAL_Init+0x40>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a0a      	ldr	r2, [pc, #40]	; (8002f08 <HAL_Init+0x40>)
 8002ede:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ee2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ee4:	4b08      	ldr	r3, [pc, #32]	; (8002f08 <HAL_Init+0x40>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a07      	ldr	r2, [pc, #28]	; (8002f08 <HAL_Init+0x40>)
 8002eea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ef0:	2003      	movs	r0, #3
 8002ef2:	f000 f94f 	bl	8003194 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ef6:	2000      	movs	r0, #0
 8002ef8:	f000 f808 	bl	8002f0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002efc:	f7fe fc16 	bl	800172c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	40023c00 	.word	0x40023c00

08002f0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f14:	4b12      	ldr	r3, [pc, #72]	; (8002f60 <HAL_InitTick+0x54>)
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	4b12      	ldr	r3, [pc, #72]	; (8002f64 <HAL_InitTick+0x58>)
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f22:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f000 f967 	bl	80031fe <HAL_SYSTICK_Config>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e00e      	b.n	8002f58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2b0f      	cmp	r3, #15
 8002f3e:	d80a      	bhi.n	8002f56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f40:	2200      	movs	r2, #0
 8002f42:	6879      	ldr	r1, [r7, #4]
 8002f44:	f04f 30ff 	mov.w	r0, #4294967295
 8002f48:	f000 f92f 	bl	80031aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f4c:	4a06      	ldr	r2, [pc, #24]	; (8002f68 <HAL_InitTick+0x5c>)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f52:	2300      	movs	r3, #0
 8002f54:	e000      	b.n	8002f58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3708      	adds	r7, #8
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	20000110 	.word	0x20000110
 8002f64:	2000011c 	.word	0x2000011c
 8002f68:	20000118 	.word	0x20000118

08002f6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f70:	4b06      	ldr	r3, [pc, #24]	; (8002f8c <HAL_IncTick+0x20>)
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	461a      	mov	r2, r3
 8002f76:	4b06      	ldr	r3, [pc, #24]	; (8002f90 <HAL_IncTick+0x24>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	4a04      	ldr	r2, [pc, #16]	; (8002f90 <HAL_IncTick+0x24>)
 8002f7e:	6013      	str	r3, [r2, #0]
}
 8002f80:	bf00      	nop
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	2000011c 	.word	0x2000011c
 8002f90:	20000fb8 	.word	0x20000fb8

08002f94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  return uwTick;
 8002f98:	4b03      	ldr	r3, [pc, #12]	; (8002fa8 <HAL_GetTick+0x14>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	20000fb8 	.word	0x20000fb8

08002fac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fb4:	f7ff ffee 	bl	8002f94 <HAL_GetTick>
 8002fb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc4:	d005      	beq.n	8002fd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fc6:	4b0a      	ldr	r3, [pc, #40]	; (8002ff0 <HAL_Delay+0x44>)
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	4413      	add	r3, r2
 8002fd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002fd2:	bf00      	nop
 8002fd4:	f7ff ffde 	bl	8002f94 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d8f7      	bhi.n	8002fd4 <HAL_Delay+0x28>
  {
  }
}
 8002fe4:	bf00      	nop
 8002fe6:	bf00      	nop
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	2000011c 	.word	0x2000011c

08002ff4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f003 0307 	and.w	r3, r3, #7
 8003002:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003004:	4b0c      	ldr	r3, [pc, #48]	; (8003038 <__NVIC_SetPriorityGrouping+0x44>)
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800300a:	68ba      	ldr	r2, [r7, #8]
 800300c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003010:	4013      	ands	r3, r2
 8003012:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800301c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003024:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003026:	4a04      	ldr	r2, [pc, #16]	; (8003038 <__NVIC_SetPriorityGrouping+0x44>)
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	60d3      	str	r3, [r2, #12]
}
 800302c:	bf00      	nop
 800302e:	3714      	adds	r7, #20
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	e000ed00 	.word	0xe000ed00

0800303c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003040:	4b04      	ldr	r3, [pc, #16]	; (8003054 <__NVIC_GetPriorityGrouping+0x18>)
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	0a1b      	lsrs	r3, r3, #8
 8003046:	f003 0307 	and.w	r3, r3, #7
}
 800304a:	4618      	mov	r0, r3
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr
 8003054:	e000ed00 	.word	0xe000ed00

08003058 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	4603      	mov	r3, r0
 8003060:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003066:	2b00      	cmp	r3, #0
 8003068:	db0b      	blt.n	8003082 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800306a:	79fb      	ldrb	r3, [r7, #7]
 800306c:	f003 021f 	and.w	r2, r3, #31
 8003070:	4907      	ldr	r1, [pc, #28]	; (8003090 <__NVIC_EnableIRQ+0x38>)
 8003072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003076:	095b      	lsrs	r3, r3, #5
 8003078:	2001      	movs	r0, #1
 800307a:	fa00 f202 	lsl.w	r2, r0, r2
 800307e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	e000e100 	.word	0xe000e100

08003094 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	4603      	mov	r3, r0
 800309c:	6039      	str	r1, [r7, #0]
 800309e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	db0a      	blt.n	80030be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	b2da      	uxtb	r2, r3
 80030ac:	490c      	ldr	r1, [pc, #48]	; (80030e0 <__NVIC_SetPriority+0x4c>)
 80030ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b2:	0112      	lsls	r2, r2, #4
 80030b4:	b2d2      	uxtb	r2, r2
 80030b6:	440b      	add	r3, r1
 80030b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030bc:	e00a      	b.n	80030d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	b2da      	uxtb	r2, r3
 80030c2:	4908      	ldr	r1, [pc, #32]	; (80030e4 <__NVIC_SetPriority+0x50>)
 80030c4:	79fb      	ldrb	r3, [r7, #7]
 80030c6:	f003 030f 	and.w	r3, r3, #15
 80030ca:	3b04      	subs	r3, #4
 80030cc:	0112      	lsls	r2, r2, #4
 80030ce:	b2d2      	uxtb	r2, r2
 80030d0:	440b      	add	r3, r1
 80030d2:	761a      	strb	r2, [r3, #24]
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr
 80030e0:	e000e100 	.word	0xe000e100
 80030e4:	e000ed00 	.word	0xe000ed00

080030e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b089      	sub	sp, #36	; 0x24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f003 0307 	and.w	r3, r3, #7
 80030fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	f1c3 0307 	rsb	r3, r3, #7
 8003102:	2b04      	cmp	r3, #4
 8003104:	bf28      	it	cs
 8003106:	2304      	movcs	r3, #4
 8003108:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	3304      	adds	r3, #4
 800310e:	2b06      	cmp	r3, #6
 8003110:	d902      	bls.n	8003118 <NVIC_EncodePriority+0x30>
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	3b03      	subs	r3, #3
 8003116:	e000      	b.n	800311a <NVIC_EncodePriority+0x32>
 8003118:	2300      	movs	r3, #0
 800311a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800311c:	f04f 32ff 	mov.w	r2, #4294967295
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	fa02 f303 	lsl.w	r3, r2, r3
 8003126:	43da      	mvns	r2, r3
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	401a      	ands	r2, r3
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003130:	f04f 31ff 	mov.w	r1, #4294967295
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	fa01 f303 	lsl.w	r3, r1, r3
 800313a:	43d9      	mvns	r1, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003140:	4313      	orrs	r3, r2
         );
}
 8003142:	4618      	mov	r0, r3
 8003144:	3724      	adds	r7, #36	; 0x24
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
	...

08003150 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	3b01      	subs	r3, #1
 800315c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003160:	d301      	bcc.n	8003166 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003162:	2301      	movs	r3, #1
 8003164:	e00f      	b.n	8003186 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003166:	4a0a      	ldr	r2, [pc, #40]	; (8003190 <SysTick_Config+0x40>)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	3b01      	subs	r3, #1
 800316c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800316e:	210f      	movs	r1, #15
 8003170:	f04f 30ff 	mov.w	r0, #4294967295
 8003174:	f7ff ff8e 	bl	8003094 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003178:	4b05      	ldr	r3, [pc, #20]	; (8003190 <SysTick_Config+0x40>)
 800317a:	2200      	movs	r2, #0
 800317c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800317e:	4b04      	ldr	r3, [pc, #16]	; (8003190 <SysTick_Config+0x40>)
 8003180:	2207      	movs	r2, #7
 8003182:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	e000e010 	.word	0xe000e010

08003194 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f7ff ff29 	bl	8002ff4 <__NVIC_SetPriorityGrouping>
}
 80031a2:	bf00      	nop
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b086      	sub	sp, #24
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	4603      	mov	r3, r0
 80031b2:	60b9      	str	r1, [r7, #8]
 80031b4:	607a      	str	r2, [r7, #4]
 80031b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031b8:	2300      	movs	r3, #0
 80031ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031bc:	f7ff ff3e 	bl	800303c <__NVIC_GetPriorityGrouping>
 80031c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	68b9      	ldr	r1, [r7, #8]
 80031c6:	6978      	ldr	r0, [r7, #20]
 80031c8:	f7ff ff8e 	bl	80030e8 <NVIC_EncodePriority>
 80031cc:	4602      	mov	r2, r0
 80031ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031d2:	4611      	mov	r1, r2
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff ff5d 	bl	8003094 <__NVIC_SetPriority>
}
 80031da:	bf00      	nop
 80031dc:	3718      	adds	r7, #24
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b082      	sub	sp, #8
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	4603      	mov	r3, r0
 80031ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7ff ff31 	bl	8003058 <__NVIC_EnableIRQ>
}
 80031f6:	bf00      	nop
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b082      	sub	sp, #8
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f7ff ffa2 	bl	8003150 <SysTick_Config>
 800320c:	4603      	mov	r3, r0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003216:	b580      	push	{r7, lr}
 8003218:	b084      	sub	sp, #16
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003222:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003224:	f7ff feb6 	bl	8002f94 <HAL_GetTick>
 8003228:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b02      	cmp	r3, #2
 8003234:	d008      	beq.n	8003248 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2280      	movs	r2, #128	; 0x80
 800323a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e052      	b.n	80032ee <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f022 0216 	bic.w	r2, r2, #22
 8003256:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	695a      	ldr	r2, [r3, #20]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003266:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326c:	2b00      	cmp	r3, #0
 800326e:	d103      	bne.n	8003278 <HAL_DMA_Abort+0x62>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003274:	2b00      	cmp	r3, #0
 8003276:	d007      	beq.n	8003288 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f022 0208 	bic.w	r2, r2, #8
 8003286:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 0201 	bic.w	r2, r2, #1
 8003296:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003298:	e013      	b.n	80032c2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800329a:	f7ff fe7b 	bl	8002f94 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	2b05      	cmp	r3, #5
 80032a6:	d90c      	bls.n	80032c2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2220      	movs	r2, #32
 80032ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2203      	movs	r2, #3
 80032b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e015      	b.n	80032ee <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1e4      	bne.n	800329a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d4:	223f      	movs	r2, #63	; 0x3f
 80032d6:	409a      	lsls	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3710      	adds	r7, #16
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032f6:	b480      	push	{r7}
 80032f8:	b083      	sub	sp, #12
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d004      	beq.n	8003314 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2280      	movs	r2, #128	; 0x80
 800330e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e00c      	b.n	800332e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2205      	movs	r2, #5
 8003318:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f022 0201 	bic.w	r2, r2, #1
 800332a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
	...

0800333c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e06c      	b.n	8003428 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003354:	2b00      	cmp	r3, #0
 8003356:	d106      	bne.n	8003366 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2223      	movs	r2, #35	; 0x23
 800335c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f7fe fa0b 	bl	800177c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003366:	2300      	movs	r3, #0
 8003368:	60bb      	str	r3, [r7, #8]
 800336a:	4b31      	ldr	r3, [pc, #196]	; (8003430 <HAL_ETH_Init+0xf4>)
 800336c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336e:	4a30      	ldr	r2, [pc, #192]	; (8003430 <HAL_ETH_Init+0xf4>)
 8003370:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003374:	6453      	str	r3, [r2, #68]	; 0x44
 8003376:	4b2e      	ldr	r3, [pc, #184]	; (8003430 <HAL_ETH_Init+0xf4>)
 8003378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800337e:	60bb      	str	r3, [r7, #8]
 8003380:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003382:	4b2c      	ldr	r3, [pc, #176]	; (8003434 <HAL_ETH_Init+0xf8>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	4a2b      	ldr	r2, [pc, #172]	; (8003434 <HAL_ETH_Init+0xf8>)
 8003388:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800338c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800338e:	4b29      	ldr	r3, [pc, #164]	; (8003434 <HAL_ETH_Init+0xf8>)
 8003390:	685a      	ldr	r2, [r3, #4]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	4927      	ldr	r1, [pc, #156]	; (8003434 <HAL_ETH_Init+0xf8>)
 8003398:	4313      	orrs	r3, r2
 800339a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800339c:	4b25      	ldr	r3, [pc, #148]	; (8003434 <HAL_ETH_Init+0xf8>)
 800339e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	6812      	ldr	r2, [r2, #0]
 80033ae:	f043 0301 	orr.w	r3, r3, #1
 80033b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80033b6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033b8:	f7ff fdec 	bl	8002f94 <HAL_GetTick>
 80033bc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80033be:	e011      	b.n	80033e4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80033c0:	f7ff fde8 	bl	8002f94 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80033ce:	d909      	bls.n	80033e4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2204      	movs	r2, #4
 80033d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	22e0      	movs	r2, #224	; 0xe0
 80033dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e021      	b.n	8003428 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1e4      	bne.n	80033c0 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 f958 	bl	80036ac <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 f9ff 	bl	8003800 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 fa55 	bl	80038b2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	461a      	mov	r2, r3
 800340e:	2100      	movs	r1, #0
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 f9bd 	bl	8003790 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2210      	movs	r2, #16
 8003422:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3710      	adds	r7, #16
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	40023800 	.word	0x40023800
 8003434:	40013800 	.word	0x40013800

08003438 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	4b51      	ldr	r3, [pc, #324]	; (8003594 <ETH_SetMACConfig+0x15c>)
 800344e:	4013      	ands	r3, r2
 8003450:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	7c1b      	ldrb	r3, [r3, #16]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d102      	bne.n	8003460 <ETH_SetMACConfig+0x28>
 800345a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800345e:	e000      	b.n	8003462 <ETH_SetMACConfig+0x2a>
 8003460:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	7c5b      	ldrb	r3, [r3, #17]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d102      	bne.n	8003470 <ETH_SetMACConfig+0x38>
 800346a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800346e:	e000      	b.n	8003472 <ETH_SetMACConfig+0x3a>
 8003470:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003472:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003478:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	7fdb      	ldrb	r3, [r3, #31]
 800347e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003480:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003486:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	7f92      	ldrb	r2, [r2, #30]
 800348c:	2a00      	cmp	r2, #0
 800348e:	d102      	bne.n	8003496 <ETH_SetMACConfig+0x5e>
 8003490:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003494:	e000      	b.n	8003498 <ETH_SetMACConfig+0x60>
 8003496:	2200      	movs	r2, #0
                        macconf->Speed |
 8003498:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	7f1b      	ldrb	r3, [r3, #28]
 800349e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80034a0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80034a6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	791b      	ldrb	r3, [r3, #4]
 80034ac:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80034ae:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80034b0:	683a      	ldr	r2, [r7, #0]
 80034b2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80034b6:	2a00      	cmp	r2, #0
 80034b8:	d102      	bne.n	80034c0 <ETH_SetMACConfig+0x88>
 80034ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034be:	e000      	b.n	80034c2 <ETH_SetMACConfig+0x8a>
 80034c0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80034c2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	7bdb      	ldrb	r3, [r3, #15]
 80034c8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80034ca:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80034d0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80034d8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80034da:	4313      	orrs	r3, r2
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	4313      	orrs	r3, r2
 80034e0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80034f2:	2001      	movs	r0, #1
 80034f4:	f7ff fd5a 	bl	8002fac <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003508:	68fa      	ldr	r2, [r7, #12]
 800350a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800350e:	4013      	ands	r3, r2
 8003510:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003516:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800351e:	2a00      	cmp	r2, #0
 8003520:	d101      	bne.n	8003526 <ETH_SetMACConfig+0xee>
 8003522:	2280      	movs	r2, #128	; 0x80
 8003524:	e000      	b.n	8003528 <ETH_SetMACConfig+0xf0>
 8003526:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003528:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800352e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8003536:	2a01      	cmp	r2, #1
 8003538:	d101      	bne.n	800353e <ETH_SetMACConfig+0x106>
 800353a:	2208      	movs	r2, #8
 800353c:	e000      	b.n	8003540 <ETH_SetMACConfig+0x108>
 800353e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003540:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003548:	2a01      	cmp	r2, #1
 800354a:	d101      	bne.n	8003550 <ETH_SetMACConfig+0x118>
 800354c:	2204      	movs	r2, #4
 800354e:	e000      	b.n	8003552 <ETH_SetMACConfig+0x11a>
 8003550:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003552:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800355a:	2a01      	cmp	r2, #1
 800355c:	d101      	bne.n	8003562 <ETH_SetMACConfig+0x12a>
 800355e:	2202      	movs	r2, #2
 8003560:	e000      	b.n	8003564 <ETH_SetMACConfig+0x12c>
 8003562:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003564:	4313      	orrs	r3, r2
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	4313      	orrs	r3, r2
 800356a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800357c:	2001      	movs	r0, #1
 800357e:	f7ff fd15 	bl	8002fac <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	619a      	str	r2, [r3, #24]
}
 800358a:	bf00      	nop
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	ff20810f 	.word	0xff20810f

08003598 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	4b3d      	ldr	r3, [pc, #244]	; (80036a8 <ETH_SetDMAConfig+0x110>)
 80035b2:	4013      	ands	r3, r2
 80035b4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	7b1b      	ldrb	r3, [r3, #12]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d102      	bne.n	80035c4 <ETH_SetDMAConfig+0x2c>
 80035be:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80035c2:	e000      	b.n	80035c6 <ETH_SetDMAConfig+0x2e>
 80035c4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	7b5b      	ldrb	r3, [r3, #13]
 80035ca:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80035cc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80035ce:	683a      	ldr	r2, [r7, #0]
 80035d0:	7f52      	ldrb	r2, [r2, #29]
 80035d2:	2a00      	cmp	r2, #0
 80035d4:	d102      	bne.n	80035dc <ETH_SetDMAConfig+0x44>
 80035d6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80035da:	e000      	b.n	80035de <ETH_SetDMAConfig+0x46>
 80035dc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80035de:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	7b9b      	ldrb	r3, [r3, #14]
 80035e4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80035e6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80035ec:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	7f1b      	ldrb	r3, [r3, #28]
 80035f2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80035f4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	7f9b      	ldrb	r3, [r3, #30]
 80035fa:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80035fc:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003602:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800360a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800360c:	4313      	orrs	r3, r2
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	4313      	orrs	r3, r2
 8003612:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800361c:	461a      	mov	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800362e:	2001      	movs	r0, #1
 8003630:	f7ff fcbc 	bl	8002fac <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800363c:	461a      	mov	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	791b      	ldrb	r3, [r3, #4]
 8003646:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800364c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003652:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003658:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003660:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003662:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003668:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800366a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003670:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	6812      	ldr	r2, [r2, #0]
 8003676:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800367a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800367e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800368c:	2001      	movs	r0, #1
 800368e:	f7ff fc8d 	bl	8002fac <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800369a:	461a      	mov	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6013      	str	r3, [r2, #0]
}
 80036a0:	bf00      	nop
 80036a2:	3710      	adds	r7, #16
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	f8de3f23 	.word	0xf8de3f23

080036ac <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b0a6      	sub	sp, #152	; 0x98
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80036b4:	2301      	movs	r3, #1
 80036b6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80036ba:	2301      	movs	r3, #1
 80036bc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80036c0:	2300      	movs	r3, #0
 80036c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80036c4:	2300      	movs	r3, #0
 80036c6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80036ca:	2301      	movs	r3, #1
 80036cc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80036d0:	2300      	movs	r3, #0
 80036d2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80036d6:	2301      	movs	r3, #1
 80036d8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80036dc:	2300      	movs	r3, #0
 80036de:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80036e2:	2300      	movs	r3, #0
 80036e4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80036e8:	2300      	movs	r3, #0
 80036ea:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80036ec:	2300      	movs	r3, #0
 80036ee:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80036f2:	2300      	movs	r3, #0
 80036f4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80036f6:	2300      	movs	r3, #0
 80036f8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80036fc:	2300      	movs	r3, #0
 80036fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003702:	2300      	movs	r3, #0
 8003704:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003708:	2300      	movs	r3, #0
 800370a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800370e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003712:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003714:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003718:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800371a:	2300      	movs	r3, #0
 800371c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003720:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003724:	4619      	mov	r1, r3
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f7ff fe86 	bl	8003438 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800372c:	2301      	movs	r3, #1
 800372e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003730:	2301      	movs	r3, #1
 8003732:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003734:	2301      	movs	r3, #1
 8003736:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800373a:	2301      	movs	r3, #1
 800373c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800373e:	2300      	movs	r3, #0
 8003740:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003742:	2300      	movs	r3, #0
 8003744:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003748:	2300      	movs	r3, #0
 800374a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800374e:	2300      	movs	r3, #0
 8003750:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003752:	2301      	movs	r3, #1
 8003754:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003758:	2301      	movs	r3, #1
 800375a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800375c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003760:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003762:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003766:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003768:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800376c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800376e:	2301      	movs	r3, #1
 8003770:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003774:	2300      	movs	r3, #0
 8003776:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003778:	2300      	movs	r3, #0
 800377a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800377c:	f107 0308 	add.w	r3, r7, #8
 8003780:	4619      	mov	r1, r3
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7ff ff08 	bl	8003598 <ETH_SetDMAConfig>
}
 8003788:	bf00      	nop
 800378a:	3798      	adds	r7, #152	; 0x98
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003790:	b480      	push	{r7}
 8003792:	b087      	sub	sp, #28
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	3305      	adds	r3, #5
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	021b      	lsls	r3, r3, #8
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	3204      	adds	r2, #4
 80037a8:	7812      	ldrb	r2, [r2, #0]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80037ae:	68ba      	ldr	r2, [r7, #8]
 80037b0:	4b11      	ldr	r3, [pc, #68]	; (80037f8 <ETH_MACAddressConfig+0x68>)
 80037b2:	4413      	add	r3, r2
 80037b4:	461a      	mov	r2, r3
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	3303      	adds	r3, #3
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	061a      	lsls	r2, r3, #24
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	3302      	adds	r3, #2
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	041b      	lsls	r3, r3, #16
 80037ca:	431a      	orrs	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	3301      	adds	r3, #1
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	021b      	lsls	r3, r3, #8
 80037d4:	4313      	orrs	r3, r2
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	7812      	ldrb	r2, [r2, #0]
 80037da:	4313      	orrs	r3, r2
 80037dc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80037de:	68ba      	ldr	r2, [r7, #8]
 80037e0:	4b06      	ldr	r3, [pc, #24]	; (80037fc <ETH_MACAddressConfig+0x6c>)
 80037e2:	4413      	add	r3, r2
 80037e4:	461a      	mov	r2, r3
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	6013      	str	r3, [r2, #0]
}
 80037ea:	bf00      	nop
 80037ec:	371c      	adds	r7, #28
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	40028040 	.word	0x40028040
 80037fc:	40028044 	.word	0x40028044

08003800 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003800:	b480      	push	{r7}
 8003802:	b085      	sub	sp, #20
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003808:	2300      	movs	r3, #0
 800380a:	60fb      	str	r3, [r7, #12]
 800380c:	e03e      	b.n	800388c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	68d9      	ldr	r1, [r3, #12]
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	4613      	mov	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	4413      	add	r3, r2
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	440b      	add	r3, r1
 800381e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	2200      	movs	r2, #0
 8003824:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	2200      	movs	r2, #0
 800382a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	2200      	movs	r2, #0
 8003830:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	2200      	movs	r2, #0
 8003836:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003838:	68b9      	ldr	r1, [r7, #8]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	3206      	adds	r2, #6
 8003840:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2b02      	cmp	r3, #2
 8003854:	d80c      	bhi.n	8003870 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	68d9      	ldr	r1, [r3, #12]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	1c5a      	adds	r2, r3, #1
 800385e:	4613      	mov	r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	4413      	add	r3, r2
 8003864:	00db      	lsls	r3, r3, #3
 8003866:	440b      	add	r3, r1
 8003868:	461a      	mov	r2, r3
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	60da      	str	r2, [r3, #12]
 800386e:	e004      	b.n	800387a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	461a      	mov	r2, r3
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	3301      	adds	r3, #1
 800388a:	60fb      	str	r3, [r7, #12]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2b03      	cmp	r3, #3
 8003890:	d9bd      	bls.n	800380e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	68da      	ldr	r2, [r3, #12]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038a4:	611a      	str	r2, [r3, #16]
}
 80038a6:	bf00      	nop
 80038a8:	3714      	adds	r7, #20
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr

080038b2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80038b2:	b480      	push	{r7}
 80038b4:	b085      	sub	sp, #20
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80038ba:	2300      	movs	r3, #0
 80038bc:	60fb      	str	r3, [r7, #12]
 80038be:	e046      	b.n	800394e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6919      	ldr	r1, [r3, #16]
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	4613      	mov	r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	4413      	add	r3, r2
 80038cc:	00db      	lsls	r3, r3, #3
 80038ce:	440b      	add	r3, r1
 80038d0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	2200      	movs	r2, #0
 80038d6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	2200      	movs	r2, #0
 80038dc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	2200      	movs	r2, #0
 80038e2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	2200      	movs	r2, #0
 80038e8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	2200      	movs	r2, #0
 80038ee:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	2200      	movs	r2, #0
 80038f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80038fc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003904:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003912:	68b9      	ldr	r1, [r7, #8]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	3212      	adds	r2, #18
 800391a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2b02      	cmp	r3, #2
 8003922:	d80c      	bhi.n	800393e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6919      	ldr	r1, [r3, #16]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	1c5a      	adds	r2, r3, #1
 800392c:	4613      	mov	r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	4413      	add	r3, r2
 8003932:	00db      	lsls	r3, r3, #3
 8003934:	440b      	add	r3, r1
 8003936:	461a      	mov	r2, r3
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	60da      	str	r2, [r3, #12]
 800393c:	e004      	b.n	8003948 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	461a      	mov	r2, r3
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	3301      	adds	r3, #1
 800394c:	60fb      	str	r3, [r7, #12]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2b03      	cmp	r3, #3
 8003952:	d9b5      	bls.n	80038c0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	691a      	ldr	r2, [r3, #16]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800397e:	60da      	str	r2, [r3, #12]
}
 8003980:	bf00      	nop
 8003982:	3714      	adds	r7, #20
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800398c:	b480      	push	{r7}
 800398e:	b089      	sub	sp, #36	; 0x24
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003996:	2300      	movs	r3, #0
 8003998:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800399a:	2300      	movs	r3, #0
 800399c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800399e:	2300      	movs	r3, #0
 80039a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039a2:	2300      	movs	r3, #0
 80039a4:	61fb      	str	r3, [r7, #28]
 80039a6:	e177      	b.n	8003c98 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039a8:	2201      	movs	r2, #1
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	fa02 f303 	lsl.w	r3, r2, r3
 80039b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	4013      	ands	r3, r2
 80039ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039bc:	693a      	ldr	r2, [r7, #16]
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	f040 8166 	bne.w	8003c92 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f003 0303 	and.w	r3, r3, #3
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d005      	beq.n	80039de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d130      	bne.n	8003a40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	005b      	lsls	r3, r3, #1
 80039e8:	2203      	movs	r2, #3
 80039ea:	fa02 f303 	lsl.w	r3, r2, r3
 80039ee:	43db      	mvns	r3, r3
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	4013      	ands	r3, r2
 80039f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	68da      	ldr	r2, [r3, #12]
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	005b      	lsls	r3, r3, #1
 80039fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	69ba      	ldr	r2, [r7, #24]
 8003a0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a14:	2201      	movs	r2, #1
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1c:	43db      	mvns	r3, r3
 8003a1e:	69ba      	ldr	r2, [r7, #24]
 8003a20:	4013      	ands	r3, r2
 8003a22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	091b      	lsrs	r3, r3, #4
 8003a2a:	f003 0201 	and.w	r2, r3, #1
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	fa02 f303 	lsl.w	r3, r2, r3
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f003 0303 	and.w	r3, r3, #3
 8003a48:	2b03      	cmp	r3, #3
 8003a4a:	d017      	beq.n	8003a7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	2203      	movs	r2, #3
 8003a58:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5c:	43db      	mvns	r3, r3
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	4013      	ands	r3, r2
 8003a62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	689a      	ldr	r2, [r3, #8]
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f003 0303 	and.w	r3, r3, #3
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d123      	bne.n	8003ad0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	08da      	lsrs	r2, r3, #3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	3208      	adds	r2, #8
 8003a90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	f003 0307 	and.w	r3, r3, #7
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	220f      	movs	r2, #15
 8003aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa4:	43db      	mvns	r3, r3
 8003aa6:	69ba      	ldr	r2, [r7, #24]
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	691a      	ldr	r2, [r3, #16]
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	f003 0307 	and.w	r3, r3, #7
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	08da      	lsrs	r2, r3, #3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	3208      	adds	r2, #8
 8003aca:	69b9      	ldr	r1, [r7, #24]
 8003acc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	005b      	lsls	r3, r3, #1
 8003ada:	2203      	movs	r2, #3
 8003adc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae0:	43db      	mvns	r3, r3
 8003ae2:	69ba      	ldr	r2, [r7, #24]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f003 0203 	and.w	r2, r3, #3
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	005b      	lsls	r3, r3, #1
 8003af4:	fa02 f303 	lsl.w	r3, r2, r3
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f000 80c0 	beq.w	8003c92 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b12:	2300      	movs	r3, #0
 8003b14:	60fb      	str	r3, [r7, #12]
 8003b16:	4b66      	ldr	r3, [pc, #408]	; (8003cb0 <HAL_GPIO_Init+0x324>)
 8003b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b1a:	4a65      	ldr	r2, [pc, #404]	; (8003cb0 <HAL_GPIO_Init+0x324>)
 8003b1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b20:	6453      	str	r3, [r2, #68]	; 0x44
 8003b22:	4b63      	ldr	r3, [pc, #396]	; (8003cb0 <HAL_GPIO_Init+0x324>)
 8003b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b2a:	60fb      	str	r3, [r7, #12]
 8003b2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b2e:	4a61      	ldr	r2, [pc, #388]	; (8003cb4 <HAL_GPIO_Init+0x328>)
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	089b      	lsrs	r3, r3, #2
 8003b34:	3302      	adds	r3, #2
 8003b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	f003 0303 	and.w	r3, r3, #3
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	220f      	movs	r2, #15
 8003b46:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4a:	43db      	mvns	r3, r3
 8003b4c:	69ba      	ldr	r2, [r7, #24]
 8003b4e:	4013      	ands	r3, r2
 8003b50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a58      	ldr	r2, [pc, #352]	; (8003cb8 <HAL_GPIO_Init+0x32c>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d037      	beq.n	8003bca <HAL_GPIO_Init+0x23e>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a57      	ldr	r2, [pc, #348]	; (8003cbc <HAL_GPIO_Init+0x330>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d031      	beq.n	8003bc6 <HAL_GPIO_Init+0x23a>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a56      	ldr	r2, [pc, #344]	; (8003cc0 <HAL_GPIO_Init+0x334>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d02b      	beq.n	8003bc2 <HAL_GPIO_Init+0x236>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a55      	ldr	r2, [pc, #340]	; (8003cc4 <HAL_GPIO_Init+0x338>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d025      	beq.n	8003bbe <HAL_GPIO_Init+0x232>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a54      	ldr	r2, [pc, #336]	; (8003cc8 <HAL_GPIO_Init+0x33c>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d01f      	beq.n	8003bba <HAL_GPIO_Init+0x22e>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a53      	ldr	r2, [pc, #332]	; (8003ccc <HAL_GPIO_Init+0x340>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d019      	beq.n	8003bb6 <HAL_GPIO_Init+0x22a>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a52      	ldr	r2, [pc, #328]	; (8003cd0 <HAL_GPIO_Init+0x344>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d013      	beq.n	8003bb2 <HAL_GPIO_Init+0x226>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a51      	ldr	r2, [pc, #324]	; (8003cd4 <HAL_GPIO_Init+0x348>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d00d      	beq.n	8003bae <HAL_GPIO_Init+0x222>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a50      	ldr	r2, [pc, #320]	; (8003cd8 <HAL_GPIO_Init+0x34c>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d007      	beq.n	8003baa <HAL_GPIO_Init+0x21e>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a4f      	ldr	r2, [pc, #316]	; (8003cdc <HAL_GPIO_Init+0x350>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d101      	bne.n	8003ba6 <HAL_GPIO_Init+0x21a>
 8003ba2:	2309      	movs	r3, #9
 8003ba4:	e012      	b.n	8003bcc <HAL_GPIO_Init+0x240>
 8003ba6:	230a      	movs	r3, #10
 8003ba8:	e010      	b.n	8003bcc <HAL_GPIO_Init+0x240>
 8003baa:	2308      	movs	r3, #8
 8003bac:	e00e      	b.n	8003bcc <HAL_GPIO_Init+0x240>
 8003bae:	2307      	movs	r3, #7
 8003bb0:	e00c      	b.n	8003bcc <HAL_GPIO_Init+0x240>
 8003bb2:	2306      	movs	r3, #6
 8003bb4:	e00a      	b.n	8003bcc <HAL_GPIO_Init+0x240>
 8003bb6:	2305      	movs	r3, #5
 8003bb8:	e008      	b.n	8003bcc <HAL_GPIO_Init+0x240>
 8003bba:	2304      	movs	r3, #4
 8003bbc:	e006      	b.n	8003bcc <HAL_GPIO_Init+0x240>
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e004      	b.n	8003bcc <HAL_GPIO_Init+0x240>
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	e002      	b.n	8003bcc <HAL_GPIO_Init+0x240>
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e000      	b.n	8003bcc <HAL_GPIO_Init+0x240>
 8003bca:	2300      	movs	r3, #0
 8003bcc:	69fa      	ldr	r2, [r7, #28]
 8003bce:	f002 0203 	and.w	r2, r2, #3
 8003bd2:	0092      	lsls	r2, r2, #2
 8003bd4:	4093      	lsls	r3, r2
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bdc:	4935      	ldr	r1, [pc, #212]	; (8003cb4 <HAL_GPIO_Init+0x328>)
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	089b      	lsrs	r3, r3, #2
 8003be2:	3302      	adds	r3, #2
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bea:	4b3d      	ldr	r3, [pc, #244]	; (8003ce0 <HAL_GPIO_Init+0x354>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	43db      	mvns	r3, r3
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d003      	beq.n	8003c0e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003c06:	69ba      	ldr	r2, [r7, #24]
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c0e:	4a34      	ldr	r2, [pc, #208]	; (8003ce0 <HAL_GPIO_Init+0x354>)
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c14:	4b32      	ldr	r3, [pc, #200]	; (8003ce0 <HAL_GPIO_Init+0x354>)
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	43db      	mvns	r3, r3
 8003c1e:	69ba      	ldr	r2, [r7, #24]
 8003c20:	4013      	ands	r3, r2
 8003c22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d003      	beq.n	8003c38 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c38:	4a29      	ldr	r2, [pc, #164]	; (8003ce0 <HAL_GPIO_Init+0x354>)
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c3e:	4b28      	ldr	r3, [pc, #160]	; (8003ce0 <HAL_GPIO_Init+0x354>)
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	43db      	mvns	r3, r3
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d003      	beq.n	8003c62 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003c5a:	69ba      	ldr	r2, [r7, #24]
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c62:	4a1f      	ldr	r2, [pc, #124]	; (8003ce0 <HAL_GPIO_Init+0x354>)
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c68:	4b1d      	ldr	r3, [pc, #116]	; (8003ce0 <HAL_GPIO_Init+0x354>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	43db      	mvns	r3, r3
 8003c72:	69ba      	ldr	r2, [r7, #24]
 8003c74:	4013      	ands	r3, r2
 8003c76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d003      	beq.n	8003c8c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c8c:	4a14      	ldr	r2, [pc, #80]	; (8003ce0 <HAL_GPIO_Init+0x354>)
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	3301      	adds	r3, #1
 8003c96:	61fb      	str	r3, [r7, #28]
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	2b0f      	cmp	r3, #15
 8003c9c:	f67f ae84 	bls.w	80039a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ca0:	bf00      	nop
 8003ca2:	bf00      	nop
 8003ca4:	3724      	adds	r7, #36	; 0x24
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	40023800 	.word	0x40023800
 8003cb4:	40013800 	.word	0x40013800
 8003cb8:	40020000 	.word	0x40020000
 8003cbc:	40020400 	.word	0x40020400
 8003cc0:	40020800 	.word	0x40020800
 8003cc4:	40020c00 	.word	0x40020c00
 8003cc8:	40021000 	.word	0x40021000
 8003ccc:	40021400 	.word	0x40021400
 8003cd0:	40021800 	.word	0x40021800
 8003cd4:	40021c00 	.word	0x40021c00
 8003cd8:	40022000 	.word	0x40022000
 8003cdc:	40022400 	.word	0x40022400
 8003ce0:	40013c00 	.word	0x40013c00

08003ce4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b085      	sub	sp, #20
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	460b      	mov	r3, r1
 8003cee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	691a      	ldr	r2, [r3, #16]
 8003cf4:	887b      	ldrh	r3, [r7, #2]
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d002      	beq.n	8003d02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	73fb      	strb	r3, [r7, #15]
 8003d00:	e001      	b.n	8003d06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d02:	2300      	movs	r3, #0
 8003d04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3714      	adds	r7, #20
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	807b      	strh	r3, [r7, #2]
 8003d20:	4613      	mov	r3, r2
 8003d22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d24:	787b      	ldrb	r3, [r7, #1]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d003      	beq.n	8003d32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d2a:	887a      	ldrh	r2, [r7, #2]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d30:	e003      	b.n	8003d3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d32:	887b      	ldrh	r3, [r7, #2]
 8003d34:	041a      	lsls	r2, r3, #16
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	619a      	str	r2, [r3, #24]
}
 8003d3a:	bf00      	nop
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
	...

08003d48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e12b      	b.n	8003fb2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d106      	bne.n	8003d74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7fd fdca 	bl	8001908 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2224      	movs	r2, #36	; 0x24
 8003d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 0201 	bic.w	r2, r2, #1
 8003d8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003daa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003dac:	f001 fa20 	bl	80051f0 <HAL_RCC_GetPCLK1Freq>
 8003db0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	4a81      	ldr	r2, [pc, #516]	; (8003fbc <HAL_I2C_Init+0x274>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d807      	bhi.n	8003dcc <HAL_I2C_Init+0x84>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	4a80      	ldr	r2, [pc, #512]	; (8003fc0 <HAL_I2C_Init+0x278>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	bf94      	ite	ls
 8003dc4:	2301      	movls	r3, #1
 8003dc6:	2300      	movhi	r3, #0
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	e006      	b.n	8003dda <HAL_I2C_Init+0x92>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	4a7d      	ldr	r2, [pc, #500]	; (8003fc4 <HAL_I2C_Init+0x27c>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	bf94      	ite	ls
 8003dd4:	2301      	movls	r3, #1
 8003dd6:	2300      	movhi	r3, #0
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d001      	beq.n	8003de2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e0e7      	b.n	8003fb2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	4a78      	ldr	r2, [pc, #480]	; (8003fc8 <HAL_I2C_Init+0x280>)
 8003de6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dea:	0c9b      	lsrs	r3, r3, #18
 8003dec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68ba      	ldr	r2, [r7, #8]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	6a1b      	ldr	r3, [r3, #32]
 8003e08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	4a6a      	ldr	r2, [pc, #424]	; (8003fbc <HAL_I2C_Init+0x274>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d802      	bhi.n	8003e1c <HAL_I2C_Init+0xd4>
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	3301      	adds	r3, #1
 8003e1a:	e009      	b.n	8003e30 <HAL_I2C_Init+0xe8>
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e22:	fb02 f303 	mul.w	r3, r2, r3
 8003e26:	4a69      	ldr	r2, [pc, #420]	; (8003fcc <HAL_I2C_Init+0x284>)
 8003e28:	fba2 2303 	umull	r2, r3, r2, r3
 8003e2c:	099b      	lsrs	r3, r3, #6
 8003e2e:	3301      	adds	r3, #1
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	6812      	ldr	r2, [r2, #0]
 8003e34:	430b      	orrs	r3, r1
 8003e36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	69db      	ldr	r3, [r3, #28]
 8003e3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003e42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	495c      	ldr	r1, [pc, #368]	; (8003fbc <HAL_I2C_Init+0x274>)
 8003e4c:	428b      	cmp	r3, r1
 8003e4e:	d819      	bhi.n	8003e84 <HAL_I2C_Init+0x13c>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	1e59      	subs	r1, r3, #1
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	005b      	lsls	r3, r3, #1
 8003e5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e5e:	1c59      	adds	r1, r3, #1
 8003e60:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003e64:	400b      	ands	r3, r1
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00a      	beq.n	8003e80 <HAL_I2C_Init+0x138>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	1e59      	subs	r1, r3, #1
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	005b      	lsls	r3, r3, #1
 8003e74:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e78:	3301      	adds	r3, #1
 8003e7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e7e:	e051      	b.n	8003f24 <HAL_I2C_Init+0x1dc>
 8003e80:	2304      	movs	r3, #4
 8003e82:	e04f      	b.n	8003f24 <HAL_I2C_Init+0x1dc>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d111      	bne.n	8003eb0 <HAL_I2C_Init+0x168>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	1e58      	subs	r0, r3, #1
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6859      	ldr	r1, [r3, #4]
 8003e94:	460b      	mov	r3, r1
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	440b      	add	r3, r1
 8003e9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	bf0c      	ite	eq
 8003ea8:	2301      	moveq	r3, #1
 8003eaa:	2300      	movne	r3, #0
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	e012      	b.n	8003ed6 <HAL_I2C_Init+0x18e>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	1e58      	subs	r0, r3, #1
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6859      	ldr	r1, [r3, #4]
 8003eb8:	460b      	mov	r3, r1
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	440b      	add	r3, r1
 8003ebe:	0099      	lsls	r1, r3, #2
 8003ec0:	440b      	add	r3, r1
 8003ec2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	bf0c      	ite	eq
 8003ed0:	2301      	moveq	r3, #1
 8003ed2:	2300      	movne	r3, #0
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <HAL_I2C_Init+0x196>
 8003eda:	2301      	movs	r3, #1
 8003edc:	e022      	b.n	8003f24 <HAL_I2C_Init+0x1dc>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d10e      	bne.n	8003f04 <HAL_I2C_Init+0x1bc>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	1e58      	subs	r0, r3, #1
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6859      	ldr	r1, [r3, #4]
 8003eee:	460b      	mov	r3, r1
 8003ef0:	005b      	lsls	r3, r3, #1
 8003ef2:	440b      	add	r3, r1
 8003ef4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ef8:	3301      	adds	r3, #1
 8003efa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003efe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f02:	e00f      	b.n	8003f24 <HAL_I2C_Init+0x1dc>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	1e58      	subs	r0, r3, #1
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6859      	ldr	r1, [r3, #4]
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	440b      	add	r3, r1
 8003f12:	0099      	lsls	r1, r3, #2
 8003f14:	440b      	add	r3, r1
 8003f16:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f24:	6879      	ldr	r1, [r7, #4]
 8003f26:	6809      	ldr	r1, [r1, #0]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	69da      	ldr	r2, [r3, #28]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	430a      	orrs	r2, r1
 8003f46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	6911      	ldr	r1, [r2, #16]
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	68d2      	ldr	r2, [r2, #12]
 8003f5e:	4311      	orrs	r1, r2
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	6812      	ldr	r2, [r2, #0]
 8003f64:	430b      	orrs	r3, r1
 8003f66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	695a      	ldr	r2, [r3, #20]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	430a      	orrs	r2, r1
 8003f82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f042 0201 	orr.w	r2, r2, #1
 8003f92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2220      	movs	r2, #32
 8003f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	000186a0 	.word	0x000186a0
 8003fc0:	001e847f 	.word	0x001e847f
 8003fc4:	003d08ff 	.word	0x003d08ff
 8003fc8:	431bde83 	.word	0x431bde83
 8003fcc:	10624dd3 	.word	0x10624dd3

08003fd0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b088      	sub	sp, #32
 8003fd4:	af02      	add	r7, sp, #8
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	607a      	str	r2, [r7, #4]
 8003fda:	461a      	mov	r2, r3
 8003fdc:	460b      	mov	r3, r1
 8003fde:	817b      	strh	r3, [r7, #10]
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fe4:	f7fe ffd6 	bl	8002f94 <HAL_GetTick>
 8003fe8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b20      	cmp	r3, #32
 8003ff4:	f040 80e0 	bne.w	80041b8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	9300      	str	r3, [sp, #0]
 8003ffc:	2319      	movs	r3, #25
 8003ffe:	2201      	movs	r2, #1
 8004000:	4970      	ldr	r1, [pc, #448]	; (80041c4 <HAL_I2C_Master_Transmit+0x1f4>)
 8004002:	68f8      	ldr	r0, [r7, #12]
 8004004:	f000 f964 	bl	80042d0 <I2C_WaitOnFlagUntilTimeout>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800400e:	2302      	movs	r3, #2
 8004010:	e0d3      	b.n	80041ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004018:	2b01      	cmp	r3, #1
 800401a:	d101      	bne.n	8004020 <HAL_I2C_Master_Transmit+0x50>
 800401c:	2302      	movs	r3, #2
 800401e:	e0cc      	b.n	80041ba <HAL_I2C_Master_Transmit+0x1ea>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	2b01      	cmp	r3, #1
 8004034:	d007      	beq.n	8004046 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f042 0201 	orr.w	r2, r2, #1
 8004044:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004054:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2221      	movs	r2, #33	; 0x21
 800405a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2210      	movs	r2, #16
 8004062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	893a      	ldrh	r2, [r7, #8]
 8004076:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800407c:	b29a      	uxth	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	4a50      	ldr	r2, [pc, #320]	; (80041c8 <HAL_I2C_Master_Transmit+0x1f8>)
 8004086:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004088:	8979      	ldrh	r1, [r7, #10]
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	6a3a      	ldr	r2, [r7, #32]
 800408e:	68f8      	ldr	r0, [r7, #12]
 8004090:	f000 f89c 	bl	80041cc <I2C_MasterRequestWrite>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e08d      	b.n	80041ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800409e:	2300      	movs	r3, #0
 80040a0:	613b      	str	r3, [r7, #16]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	695b      	ldr	r3, [r3, #20]
 80040a8:	613b      	str	r3, [r7, #16]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	613b      	str	r3, [r7, #16]
 80040b2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80040b4:	e066      	b.n	8004184 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	6a39      	ldr	r1, [r7, #32]
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f000 f9de 	bl	800447c <I2C_WaitOnTXEFlagUntilTimeout>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00d      	beq.n	80040e2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	2b04      	cmp	r3, #4
 80040cc:	d107      	bne.n	80040de <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e06b      	b.n	80041ba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e6:	781a      	ldrb	r2, [r3, #0]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f2:	1c5a      	adds	r2, r3, #1
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	3b01      	subs	r3, #1
 8004100:	b29a      	uxth	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800410a:	3b01      	subs	r3, #1
 800410c:	b29a      	uxth	r2, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	f003 0304 	and.w	r3, r3, #4
 800411c:	2b04      	cmp	r3, #4
 800411e:	d11b      	bne.n	8004158 <HAL_I2C_Master_Transmit+0x188>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004124:	2b00      	cmp	r3, #0
 8004126:	d017      	beq.n	8004158 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412c:	781a      	ldrb	r2, [r3, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004138:	1c5a      	adds	r2, r3, #1
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004142:	b29b      	uxth	r3, r3
 8004144:	3b01      	subs	r3, #1
 8004146:	b29a      	uxth	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004150:	3b01      	subs	r3, #1
 8004152:	b29a      	uxth	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004158:	697a      	ldr	r2, [r7, #20]
 800415a:	6a39      	ldr	r1, [r7, #32]
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f000 f9ce 	bl	80044fe <I2C_WaitOnBTFFlagUntilTimeout>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00d      	beq.n	8004184 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416c:	2b04      	cmp	r3, #4
 800416e:	d107      	bne.n	8004180 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800417e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e01a      	b.n	80041ba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004188:	2b00      	cmp	r3, #0
 800418a:	d194      	bne.n	80040b6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800419a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2220      	movs	r2, #32
 80041a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80041b4:	2300      	movs	r3, #0
 80041b6:	e000      	b.n	80041ba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80041b8:	2302      	movs	r3, #2
  }
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3718      	adds	r7, #24
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	00100002 	.word	0x00100002
 80041c8:	ffff0000 	.word	0xffff0000

080041cc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b088      	sub	sp, #32
 80041d0:	af02      	add	r7, sp, #8
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	607a      	str	r2, [r7, #4]
 80041d6:	603b      	str	r3, [r7, #0]
 80041d8:	460b      	mov	r3, r1
 80041da:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	2b08      	cmp	r3, #8
 80041e6:	d006      	beq.n	80041f6 <I2C_MasterRequestWrite+0x2a>
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d003      	beq.n	80041f6 <I2C_MasterRequestWrite+0x2a>
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041f4:	d108      	bne.n	8004208 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004204:	601a      	str	r2, [r3, #0]
 8004206:	e00b      	b.n	8004220 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420c:	2b12      	cmp	r3, #18
 800420e:	d107      	bne.n	8004220 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800421e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	9300      	str	r3, [sp, #0]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800422c:	68f8      	ldr	r0, [r7, #12]
 800422e:	f000 f84f 	bl	80042d0 <I2C_WaitOnFlagUntilTimeout>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00d      	beq.n	8004254 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004242:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004246:	d103      	bne.n	8004250 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800424e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	e035      	b.n	80042c0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800425c:	d108      	bne.n	8004270 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800425e:	897b      	ldrh	r3, [r7, #10]
 8004260:	b2db      	uxtb	r3, r3
 8004262:	461a      	mov	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800426c:	611a      	str	r2, [r3, #16]
 800426e:	e01b      	b.n	80042a8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004270:	897b      	ldrh	r3, [r7, #10]
 8004272:	11db      	asrs	r3, r3, #7
 8004274:	b2db      	uxtb	r3, r3
 8004276:	f003 0306 	and.w	r3, r3, #6
 800427a:	b2db      	uxtb	r3, r3
 800427c:	f063 030f 	orn	r3, r3, #15
 8004280:	b2da      	uxtb	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	490e      	ldr	r1, [pc, #56]	; (80042c8 <I2C_MasterRequestWrite+0xfc>)
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f000 f875 	bl	800437e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d001      	beq.n	800429e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e010      	b.n	80042c0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800429e:	897b      	ldrh	r3, [r7, #10]
 80042a0:	b2da      	uxtb	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	4907      	ldr	r1, [pc, #28]	; (80042cc <I2C_MasterRequestWrite+0x100>)
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	f000 f865 	bl	800437e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d001      	beq.n	80042be <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e000      	b.n	80042c0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80042be:	2300      	movs	r3, #0
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3718      	adds	r7, #24
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	00010008 	.word	0x00010008
 80042cc:	00010002 	.word	0x00010002

080042d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	603b      	str	r3, [r7, #0]
 80042dc:	4613      	mov	r3, r2
 80042de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042e0:	e025      	b.n	800432e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e8:	d021      	beq.n	800432e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ea:	f7fe fe53 	bl	8002f94 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d302      	bcc.n	8004300 <I2C_WaitOnFlagUntilTimeout+0x30>
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d116      	bne.n	800432e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2220      	movs	r2, #32
 800430a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431a:	f043 0220 	orr.w	r2, r3, #32
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e023      	b.n	8004376 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	0c1b      	lsrs	r3, r3, #16
 8004332:	b2db      	uxtb	r3, r3
 8004334:	2b01      	cmp	r3, #1
 8004336:	d10d      	bne.n	8004354 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	43da      	mvns	r2, r3
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	4013      	ands	r3, r2
 8004344:	b29b      	uxth	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	bf0c      	ite	eq
 800434a:	2301      	moveq	r3, #1
 800434c:	2300      	movne	r3, #0
 800434e:	b2db      	uxtb	r3, r3
 8004350:	461a      	mov	r2, r3
 8004352:	e00c      	b.n	800436e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	43da      	mvns	r2, r3
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	4013      	ands	r3, r2
 8004360:	b29b      	uxth	r3, r3
 8004362:	2b00      	cmp	r3, #0
 8004364:	bf0c      	ite	eq
 8004366:	2301      	moveq	r3, #1
 8004368:	2300      	movne	r3, #0
 800436a:	b2db      	uxtb	r3, r3
 800436c:	461a      	mov	r2, r3
 800436e:	79fb      	ldrb	r3, [r7, #7]
 8004370:	429a      	cmp	r2, r3
 8004372:	d0b6      	beq.n	80042e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3710      	adds	r7, #16
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800437e:	b580      	push	{r7, lr}
 8004380:	b084      	sub	sp, #16
 8004382:	af00      	add	r7, sp, #0
 8004384:	60f8      	str	r0, [r7, #12]
 8004386:	60b9      	str	r1, [r7, #8]
 8004388:	607a      	str	r2, [r7, #4]
 800438a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800438c:	e051      	b.n	8004432 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	695b      	ldr	r3, [r3, #20]
 8004394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004398:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800439c:	d123      	bne.n	80043e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043ac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043b6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2220      	movs	r2, #32
 80043c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d2:	f043 0204 	orr.w	r2, r3, #4
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e046      	b.n	8004474 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ec:	d021      	beq.n	8004432 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ee:	f7fe fdd1 	bl	8002f94 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d302      	bcc.n	8004404 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d116      	bne.n	8004432 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2220      	movs	r2, #32
 800440e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441e:	f043 0220 	orr.w	r2, r3, #32
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e020      	b.n	8004474 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	0c1b      	lsrs	r3, r3, #16
 8004436:	b2db      	uxtb	r3, r3
 8004438:	2b01      	cmp	r3, #1
 800443a:	d10c      	bne.n	8004456 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	43da      	mvns	r2, r3
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	4013      	ands	r3, r2
 8004448:	b29b      	uxth	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	bf14      	ite	ne
 800444e:	2301      	movne	r3, #1
 8004450:	2300      	moveq	r3, #0
 8004452:	b2db      	uxtb	r3, r3
 8004454:	e00b      	b.n	800446e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	43da      	mvns	r2, r3
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	4013      	ands	r3, r2
 8004462:	b29b      	uxth	r3, r3
 8004464:	2b00      	cmp	r3, #0
 8004466:	bf14      	ite	ne
 8004468:	2301      	movne	r3, #1
 800446a:	2300      	moveq	r3, #0
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d18d      	bne.n	800438e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3710      	adds	r7, #16
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004488:	e02d      	b.n	80044e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800448a:	68f8      	ldr	r0, [r7, #12]
 800448c:	f000 f878 	bl	8004580 <I2C_IsAcknowledgeFailed>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d001      	beq.n	800449a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e02d      	b.n	80044f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a0:	d021      	beq.n	80044e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044a2:	f7fe fd77 	bl	8002f94 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	68ba      	ldr	r2, [r7, #8]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d302      	bcc.n	80044b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d116      	bne.n	80044e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2200      	movs	r2, #0
 80044bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2220      	movs	r2, #32
 80044c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d2:	f043 0220 	orr.w	r2, r3, #32
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e007      	b.n	80044f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	695b      	ldr	r3, [r3, #20]
 80044ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044f0:	2b80      	cmp	r3, #128	; 0x80
 80044f2:	d1ca      	bne.n	800448a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3710      	adds	r7, #16
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044fe:	b580      	push	{r7, lr}
 8004500:	b084      	sub	sp, #16
 8004502:	af00      	add	r7, sp, #0
 8004504:	60f8      	str	r0, [r7, #12]
 8004506:	60b9      	str	r1, [r7, #8]
 8004508:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800450a:	e02d      	b.n	8004568 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800450c:	68f8      	ldr	r0, [r7, #12]
 800450e:	f000 f837 	bl	8004580 <I2C_IsAcknowledgeFailed>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d001      	beq.n	800451c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e02d      	b.n	8004578 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004522:	d021      	beq.n	8004568 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004524:	f7fe fd36 	bl	8002f94 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	68ba      	ldr	r2, [r7, #8]
 8004530:	429a      	cmp	r2, r3
 8004532:	d302      	bcc.n	800453a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d116      	bne.n	8004568 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2220      	movs	r2, #32
 8004544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004554:	f043 0220 	orr.w	r2, r3, #32
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e007      	b.n	8004578 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	f003 0304 	and.w	r3, r3, #4
 8004572:	2b04      	cmp	r3, #4
 8004574:	d1ca      	bne.n	800450c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3710      	adds	r7, #16
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	695b      	ldr	r3, [r3, #20]
 800458e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004592:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004596:	d11b      	bne.n	80045d0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045a0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2220      	movs	r2, #32
 80045ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045bc:	f043 0204 	orr.w	r2, r3, #4
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e000      	b.n	80045d2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	370c      	adds	r7, #12
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80045de:	b480      	push	{r7}
 80045e0:	b083      	sub	sp, #12
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
 80045e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	2b20      	cmp	r3, #32
 80045f2:	d129      	bne.n	8004648 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2224      	movs	r2, #36	; 0x24
 80045f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f022 0201 	bic.w	r2, r2, #1
 800460a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f022 0210 	bic.w	r2, r2, #16
 800461a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	683a      	ldr	r2, [r7, #0]
 8004628:	430a      	orrs	r2, r1
 800462a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f042 0201 	orr.w	r2, r2, #1
 800463a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2220      	movs	r2, #32
 8004640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004644:	2300      	movs	r3, #0
 8004646:	e000      	b.n	800464a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004648:	2302      	movs	r3, #2
  }
}
 800464a:	4618      	mov	r0, r3
 800464c:	370c      	adds	r7, #12
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr

08004656 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004656:	b480      	push	{r7}
 8004658:	b085      	sub	sp, #20
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
 800465e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004660:	2300      	movs	r3, #0
 8004662:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800466a:	b2db      	uxtb	r3, r3
 800466c:	2b20      	cmp	r3, #32
 800466e:	d12a      	bne.n	80046c6 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2224      	movs	r2, #36	; 0x24
 8004674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f022 0201 	bic.w	r2, r2, #1
 8004686:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004690:	89fb      	ldrh	r3, [r7, #14]
 8004692:	f023 030f 	bic.w	r3, r3, #15
 8004696:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	b29a      	uxth	r2, r3
 800469c:	89fb      	ldrh	r3, [r7, #14]
 800469e:	4313      	orrs	r3, r2
 80046a0:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	89fa      	ldrh	r2, [r7, #14]
 80046a8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f042 0201 	orr.w	r2, r2, #1
 80046b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2220      	movs	r2, #32
 80046be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80046c2:	2300      	movs	r3, #0
 80046c4:	e000      	b.n	80046c8 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80046c6:	2302      	movs	r3, #2
  }
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3714      	adds	r7, #20
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80046d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046d6:	b08f      	sub	sp, #60	; 0x3c
 80046d8:	af0a      	add	r7, sp, #40	; 0x28
 80046da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e10f      	b.n	8004906 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d106      	bne.n	8004706 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f7fd fb77 	bl	8001df4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2203      	movs	r2, #3
 800470a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004716:	2b00      	cmp	r3, #0
 8004718:	d102      	bne.n	8004720 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4618      	mov	r0, r3
 8004726:	f004 f852 	bl	80087ce <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	603b      	str	r3, [r7, #0]
 8004730:	687e      	ldr	r6, [r7, #4]
 8004732:	466d      	mov	r5, sp
 8004734:	f106 0410 	add.w	r4, r6, #16
 8004738:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800473a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800473c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800473e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004740:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004744:	e885 0003 	stmia.w	r5, {r0, r1}
 8004748:	1d33      	adds	r3, r6, #4
 800474a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800474c:	6838      	ldr	r0, [r7, #0]
 800474e:	f003 ffdd 	bl	800870c <USB_CoreInit>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d005      	beq.n	8004764 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2202      	movs	r2, #2
 800475c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e0d0      	b.n	8004906 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2100      	movs	r1, #0
 800476a:	4618      	mov	r0, r3
 800476c:	f004 f840 	bl	80087f0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004770:	2300      	movs	r3, #0
 8004772:	73fb      	strb	r3, [r7, #15]
 8004774:	e04a      	b.n	800480c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004776:	7bfa      	ldrb	r2, [r7, #15]
 8004778:	6879      	ldr	r1, [r7, #4]
 800477a:	4613      	mov	r3, r2
 800477c:	00db      	lsls	r3, r3, #3
 800477e:	4413      	add	r3, r2
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	440b      	add	r3, r1
 8004784:	333d      	adds	r3, #61	; 0x3d
 8004786:	2201      	movs	r2, #1
 8004788:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800478a:	7bfa      	ldrb	r2, [r7, #15]
 800478c:	6879      	ldr	r1, [r7, #4]
 800478e:	4613      	mov	r3, r2
 8004790:	00db      	lsls	r3, r3, #3
 8004792:	4413      	add	r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	440b      	add	r3, r1
 8004798:	333c      	adds	r3, #60	; 0x3c
 800479a:	7bfa      	ldrb	r2, [r7, #15]
 800479c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800479e:	7bfa      	ldrb	r2, [r7, #15]
 80047a0:	7bfb      	ldrb	r3, [r7, #15]
 80047a2:	b298      	uxth	r0, r3
 80047a4:	6879      	ldr	r1, [r7, #4]
 80047a6:	4613      	mov	r3, r2
 80047a8:	00db      	lsls	r3, r3, #3
 80047aa:	4413      	add	r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	440b      	add	r3, r1
 80047b0:	3344      	adds	r3, #68	; 0x44
 80047b2:	4602      	mov	r2, r0
 80047b4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80047b6:	7bfa      	ldrb	r2, [r7, #15]
 80047b8:	6879      	ldr	r1, [r7, #4]
 80047ba:	4613      	mov	r3, r2
 80047bc:	00db      	lsls	r3, r3, #3
 80047be:	4413      	add	r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	440b      	add	r3, r1
 80047c4:	3340      	adds	r3, #64	; 0x40
 80047c6:	2200      	movs	r2, #0
 80047c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80047ca:	7bfa      	ldrb	r2, [r7, #15]
 80047cc:	6879      	ldr	r1, [r7, #4]
 80047ce:	4613      	mov	r3, r2
 80047d0:	00db      	lsls	r3, r3, #3
 80047d2:	4413      	add	r3, r2
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	440b      	add	r3, r1
 80047d8:	3348      	adds	r3, #72	; 0x48
 80047da:	2200      	movs	r2, #0
 80047dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80047de:	7bfa      	ldrb	r2, [r7, #15]
 80047e0:	6879      	ldr	r1, [r7, #4]
 80047e2:	4613      	mov	r3, r2
 80047e4:	00db      	lsls	r3, r3, #3
 80047e6:	4413      	add	r3, r2
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	440b      	add	r3, r1
 80047ec:	334c      	adds	r3, #76	; 0x4c
 80047ee:	2200      	movs	r2, #0
 80047f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80047f2:	7bfa      	ldrb	r2, [r7, #15]
 80047f4:	6879      	ldr	r1, [r7, #4]
 80047f6:	4613      	mov	r3, r2
 80047f8:	00db      	lsls	r3, r3, #3
 80047fa:	4413      	add	r3, r2
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	440b      	add	r3, r1
 8004800:	3354      	adds	r3, #84	; 0x54
 8004802:	2200      	movs	r2, #0
 8004804:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004806:	7bfb      	ldrb	r3, [r7, #15]
 8004808:	3301      	adds	r3, #1
 800480a:	73fb      	strb	r3, [r7, #15]
 800480c:	7bfa      	ldrb	r2, [r7, #15]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	429a      	cmp	r2, r3
 8004814:	d3af      	bcc.n	8004776 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004816:	2300      	movs	r3, #0
 8004818:	73fb      	strb	r3, [r7, #15]
 800481a:	e044      	b.n	80048a6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800481c:	7bfa      	ldrb	r2, [r7, #15]
 800481e:	6879      	ldr	r1, [r7, #4]
 8004820:	4613      	mov	r3, r2
 8004822:	00db      	lsls	r3, r3, #3
 8004824:	4413      	add	r3, r2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	440b      	add	r3, r1
 800482a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800482e:	2200      	movs	r2, #0
 8004830:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004832:	7bfa      	ldrb	r2, [r7, #15]
 8004834:	6879      	ldr	r1, [r7, #4]
 8004836:	4613      	mov	r3, r2
 8004838:	00db      	lsls	r3, r3, #3
 800483a:	4413      	add	r3, r2
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	440b      	add	r3, r1
 8004840:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004844:	7bfa      	ldrb	r2, [r7, #15]
 8004846:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004848:	7bfa      	ldrb	r2, [r7, #15]
 800484a:	6879      	ldr	r1, [r7, #4]
 800484c:	4613      	mov	r3, r2
 800484e:	00db      	lsls	r3, r3, #3
 8004850:	4413      	add	r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	440b      	add	r3, r1
 8004856:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800485a:	2200      	movs	r2, #0
 800485c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800485e:	7bfa      	ldrb	r2, [r7, #15]
 8004860:	6879      	ldr	r1, [r7, #4]
 8004862:	4613      	mov	r3, r2
 8004864:	00db      	lsls	r3, r3, #3
 8004866:	4413      	add	r3, r2
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	440b      	add	r3, r1
 800486c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004870:	2200      	movs	r2, #0
 8004872:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004874:	7bfa      	ldrb	r2, [r7, #15]
 8004876:	6879      	ldr	r1, [r7, #4]
 8004878:	4613      	mov	r3, r2
 800487a:	00db      	lsls	r3, r3, #3
 800487c:	4413      	add	r3, r2
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	440b      	add	r3, r1
 8004882:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004886:	2200      	movs	r2, #0
 8004888:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800488a:	7bfa      	ldrb	r2, [r7, #15]
 800488c:	6879      	ldr	r1, [r7, #4]
 800488e:	4613      	mov	r3, r2
 8004890:	00db      	lsls	r3, r3, #3
 8004892:	4413      	add	r3, r2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	440b      	add	r3, r1
 8004898:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800489c:	2200      	movs	r2, #0
 800489e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048a0:	7bfb      	ldrb	r3, [r7, #15]
 80048a2:	3301      	adds	r3, #1
 80048a4:	73fb      	strb	r3, [r7, #15]
 80048a6:	7bfa      	ldrb	r2, [r7, #15]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d3b5      	bcc.n	800481c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	603b      	str	r3, [r7, #0]
 80048b6:	687e      	ldr	r6, [r7, #4]
 80048b8:	466d      	mov	r5, sp
 80048ba:	f106 0410 	add.w	r4, r6, #16
 80048be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80048ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80048ce:	1d33      	adds	r3, r6, #4
 80048d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80048d2:	6838      	ldr	r0, [r7, #0]
 80048d4:	f003 ffd8 	bl	8008888 <USB_DevInit>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d005      	beq.n	80048ea <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2202      	movs	r2, #2
 80048e2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e00d      	b.n	8004906 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2201      	movs	r2, #1
 80048f6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4618      	mov	r0, r3
 8004900:	f004 f9a3 	bl	8008c4a <USB_DevDisconnect>

  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3714      	adds	r7, #20
 800490a:	46bd      	mov	sp, r7
 800490c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004910 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b086      	sub	sp, #24
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d101      	bne.n	8004922 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e267      	b.n	8004df2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b00      	cmp	r3, #0
 800492c:	d075      	beq.n	8004a1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800492e:	4b88      	ldr	r3, [pc, #544]	; (8004b50 <HAL_RCC_OscConfig+0x240>)
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f003 030c 	and.w	r3, r3, #12
 8004936:	2b04      	cmp	r3, #4
 8004938:	d00c      	beq.n	8004954 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800493a:	4b85      	ldr	r3, [pc, #532]	; (8004b50 <HAL_RCC_OscConfig+0x240>)
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004942:	2b08      	cmp	r3, #8
 8004944:	d112      	bne.n	800496c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004946:	4b82      	ldr	r3, [pc, #520]	; (8004b50 <HAL_RCC_OscConfig+0x240>)
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800494e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004952:	d10b      	bne.n	800496c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004954:	4b7e      	ldr	r3, [pc, #504]	; (8004b50 <HAL_RCC_OscConfig+0x240>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d05b      	beq.n	8004a18 <HAL_RCC_OscConfig+0x108>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d157      	bne.n	8004a18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e242      	b.n	8004df2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004974:	d106      	bne.n	8004984 <HAL_RCC_OscConfig+0x74>
 8004976:	4b76      	ldr	r3, [pc, #472]	; (8004b50 <HAL_RCC_OscConfig+0x240>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a75      	ldr	r2, [pc, #468]	; (8004b50 <HAL_RCC_OscConfig+0x240>)
 800497c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004980:	6013      	str	r3, [r2, #0]
 8004982:	e01d      	b.n	80049c0 <HAL_RCC_OscConfig+0xb0>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800498c:	d10c      	bne.n	80049a8 <HAL_RCC_OscConfig+0x98>
 800498e:	4b70      	ldr	r3, [pc, #448]	; (8004b50 <HAL_RCC_OscConfig+0x240>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a6f      	ldr	r2, [pc, #444]	; (8004b50 <HAL_RCC_OscConfig+0x240>)
 8004994:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004998:	6013      	str	r3, [r2, #0]
 800499a:	4b6d      	ldr	r3, [pc, #436]	; (8004b50 <HAL_RCC_OscConfig+0x240>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a6c      	ldr	r2, [pc, #432]	; (8004b50 <HAL_RCC_OscConfig+0x240>)
 80049a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049a4:	6013      	str	r3, [r2, #0]
 80049a6:	e00b      	b.n	80049c0 <HAL_RCC_OscConfig+0xb0>
 80049a8:	4b69      	ldr	r3, [pc, #420]	; (8004b50 <HAL_RCC_OscConfig+0x240>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a68      	ldr	r2, [pc, #416]	; (8004b50 <HAL_RCC_OscConfig+0x240>)
 80049ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049b2:	6013      	str	r3, [r2, #0]
 80049b4:	4b66      	ldr	r3, [pc, #408]	; (8004b50 <HAL_RCC_OscConfig+0x240>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a65      	ldr	r2, [pc, #404]	; (8004b50 <HAL_RCC_OscConfig+0x240>)
 80049ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d013      	beq.n	80049f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049c8:	f7fe fae4 	bl	8002f94 <HAL_GetTick>
 80049cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ce:	e008      	b.n	80049e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049d0:	f7fe fae0 	bl	8002f94 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b64      	cmp	r3, #100	; 0x64
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e207      	b.n	8004df2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049e2:	4b5b      	ldr	r3, [pc, #364]	; (8004b50 <HAL_RCC_OscConfig+0x240>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d0f0      	beq.n	80049d0 <HAL_RCC_OscConfig+0xc0>
 80049ee:	e014      	b.n	8004a1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049f0:	f7fe fad0 	bl	8002f94 <HAL_GetTick>
 80049f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049f6:	e008      	b.n	8004a0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049f8:	f7fe facc 	bl	8002f94 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	2b64      	cmp	r3, #100	; 0x64
 8004a04:	d901      	bls.n	8004a0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e1f3      	b.n	8004df2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a0a:	4b51      	ldr	r3, [pc, #324]	; (8004b50 <HAL_RCC_OscConfig+0x240>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1f0      	bne.n	80049f8 <HAL_RCC_OscConfig+0xe8>
 8004a16:	e000      	b.n	8004a1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d063      	beq.n	8004aee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a26:	4b4a      	ldr	r3, [pc, #296]	; (8004b50 <HAL_RCC_OscConfig+0x240>)
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f003 030c 	and.w	r3, r3, #12
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00b      	beq.n	8004a4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a32:	4b47      	ldr	r3, [pc, #284]	; (8004b50 <HAL_RCC_OscConfig+0x240>)
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a3a:	2b08      	cmp	r3, #8
 8004a3c:	d11c      	bne.n	8004a78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a3e:	4b44      	ldr	r3, [pc, #272]	; (8004b50 <HAL_RCC_OscConfig+0x240>)
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d116      	bne.n	8004a78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a4a:	4b41      	ldr	r3, [pc, #260]	; (8004b50 <HAL_RCC_OscConfig+0x240>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d005      	beq.n	8004a62 <HAL_RCC_OscConfig+0x152>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d001      	beq.n	8004a62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e1c7      	b.n	8004df2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a62:	4b3b      	ldr	r3, [pc, #236]	; (8004b50 <HAL_RCC_OscConfig+0x240>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	00db      	lsls	r3, r3, #3
 8004a70:	4937      	ldr	r1, [pc, #220]	; (8004b50 <HAL_RCC_OscConfig+0x240>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a76:	e03a      	b.n	8004aee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d020      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a80:	4b34      	ldr	r3, [pc, #208]	; (8004b54 <HAL_RCC_OscConfig+0x244>)
 8004a82:	2201      	movs	r2, #1
 8004a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a86:	f7fe fa85 	bl	8002f94 <HAL_GetTick>
 8004a8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a8c:	e008      	b.n	8004aa0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a8e:	f7fe fa81 	bl	8002f94 <HAL_GetTick>
 8004a92:	4602      	mov	r2, r0
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d901      	bls.n	8004aa0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e1a8      	b.n	8004df2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aa0:	4b2b      	ldr	r3, [pc, #172]	; (8004b50 <HAL_RCC_OscConfig+0x240>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0302 	and.w	r3, r3, #2
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d0f0      	beq.n	8004a8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aac:	4b28      	ldr	r3, [pc, #160]	; (8004b50 <HAL_RCC_OscConfig+0x240>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	00db      	lsls	r3, r3, #3
 8004aba:	4925      	ldr	r1, [pc, #148]	; (8004b50 <HAL_RCC_OscConfig+0x240>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	600b      	str	r3, [r1, #0]
 8004ac0:	e015      	b.n	8004aee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ac2:	4b24      	ldr	r3, [pc, #144]	; (8004b54 <HAL_RCC_OscConfig+0x244>)
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac8:	f7fe fa64 	bl	8002f94 <HAL_GetTick>
 8004acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ace:	e008      	b.n	8004ae2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ad0:	f7fe fa60 	bl	8002f94 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d901      	bls.n	8004ae2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e187      	b.n	8004df2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ae2:	4b1b      	ldr	r3, [pc, #108]	; (8004b50 <HAL_RCC_OscConfig+0x240>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0302 	and.w	r3, r3, #2
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1f0      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0308 	and.w	r3, r3, #8
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d036      	beq.n	8004b68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d016      	beq.n	8004b30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b02:	4b15      	ldr	r3, [pc, #84]	; (8004b58 <HAL_RCC_OscConfig+0x248>)
 8004b04:	2201      	movs	r2, #1
 8004b06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b08:	f7fe fa44 	bl	8002f94 <HAL_GetTick>
 8004b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b0e:	e008      	b.n	8004b22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b10:	f7fe fa40 	bl	8002f94 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e167      	b.n	8004df2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b22:	4b0b      	ldr	r3, [pc, #44]	; (8004b50 <HAL_RCC_OscConfig+0x240>)
 8004b24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b26:	f003 0302 	and.w	r3, r3, #2
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d0f0      	beq.n	8004b10 <HAL_RCC_OscConfig+0x200>
 8004b2e:	e01b      	b.n	8004b68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b30:	4b09      	ldr	r3, [pc, #36]	; (8004b58 <HAL_RCC_OscConfig+0x248>)
 8004b32:	2200      	movs	r2, #0
 8004b34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b36:	f7fe fa2d 	bl	8002f94 <HAL_GetTick>
 8004b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b3c:	e00e      	b.n	8004b5c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b3e:	f7fe fa29 	bl	8002f94 <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d907      	bls.n	8004b5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e150      	b.n	8004df2 <HAL_RCC_OscConfig+0x4e2>
 8004b50:	40023800 	.word	0x40023800
 8004b54:	42470000 	.word	0x42470000
 8004b58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b5c:	4b88      	ldr	r3, [pc, #544]	; (8004d80 <HAL_RCC_OscConfig+0x470>)
 8004b5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b60:	f003 0302 	and.w	r3, r3, #2
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d1ea      	bne.n	8004b3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0304 	and.w	r3, r3, #4
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f000 8097 	beq.w	8004ca4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b76:	2300      	movs	r3, #0
 8004b78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b7a:	4b81      	ldr	r3, [pc, #516]	; (8004d80 <HAL_RCC_OscConfig+0x470>)
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d10f      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b86:	2300      	movs	r3, #0
 8004b88:	60bb      	str	r3, [r7, #8]
 8004b8a:	4b7d      	ldr	r3, [pc, #500]	; (8004d80 <HAL_RCC_OscConfig+0x470>)
 8004b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8e:	4a7c      	ldr	r2, [pc, #496]	; (8004d80 <HAL_RCC_OscConfig+0x470>)
 8004b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b94:	6413      	str	r3, [r2, #64]	; 0x40
 8004b96:	4b7a      	ldr	r3, [pc, #488]	; (8004d80 <HAL_RCC_OscConfig+0x470>)
 8004b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b9e:	60bb      	str	r3, [r7, #8]
 8004ba0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ba6:	4b77      	ldr	r3, [pc, #476]	; (8004d84 <HAL_RCC_OscConfig+0x474>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d118      	bne.n	8004be4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bb2:	4b74      	ldr	r3, [pc, #464]	; (8004d84 <HAL_RCC_OscConfig+0x474>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a73      	ldr	r2, [pc, #460]	; (8004d84 <HAL_RCC_OscConfig+0x474>)
 8004bb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bbe:	f7fe f9e9 	bl	8002f94 <HAL_GetTick>
 8004bc2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bc4:	e008      	b.n	8004bd8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bc6:	f7fe f9e5 	bl	8002f94 <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d901      	bls.n	8004bd8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e10c      	b.n	8004df2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bd8:	4b6a      	ldr	r3, [pc, #424]	; (8004d84 <HAL_RCC_OscConfig+0x474>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d0f0      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d106      	bne.n	8004bfa <HAL_RCC_OscConfig+0x2ea>
 8004bec:	4b64      	ldr	r3, [pc, #400]	; (8004d80 <HAL_RCC_OscConfig+0x470>)
 8004bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf0:	4a63      	ldr	r2, [pc, #396]	; (8004d80 <HAL_RCC_OscConfig+0x470>)
 8004bf2:	f043 0301 	orr.w	r3, r3, #1
 8004bf6:	6713      	str	r3, [r2, #112]	; 0x70
 8004bf8:	e01c      	b.n	8004c34 <HAL_RCC_OscConfig+0x324>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	2b05      	cmp	r3, #5
 8004c00:	d10c      	bne.n	8004c1c <HAL_RCC_OscConfig+0x30c>
 8004c02:	4b5f      	ldr	r3, [pc, #380]	; (8004d80 <HAL_RCC_OscConfig+0x470>)
 8004c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c06:	4a5e      	ldr	r2, [pc, #376]	; (8004d80 <HAL_RCC_OscConfig+0x470>)
 8004c08:	f043 0304 	orr.w	r3, r3, #4
 8004c0c:	6713      	str	r3, [r2, #112]	; 0x70
 8004c0e:	4b5c      	ldr	r3, [pc, #368]	; (8004d80 <HAL_RCC_OscConfig+0x470>)
 8004c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c12:	4a5b      	ldr	r2, [pc, #364]	; (8004d80 <HAL_RCC_OscConfig+0x470>)
 8004c14:	f043 0301 	orr.w	r3, r3, #1
 8004c18:	6713      	str	r3, [r2, #112]	; 0x70
 8004c1a:	e00b      	b.n	8004c34 <HAL_RCC_OscConfig+0x324>
 8004c1c:	4b58      	ldr	r3, [pc, #352]	; (8004d80 <HAL_RCC_OscConfig+0x470>)
 8004c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c20:	4a57      	ldr	r2, [pc, #348]	; (8004d80 <HAL_RCC_OscConfig+0x470>)
 8004c22:	f023 0301 	bic.w	r3, r3, #1
 8004c26:	6713      	str	r3, [r2, #112]	; 0x70
 8004c28:	4b55      	ldr	r3, [pc, #340]	; (8004d80 <HAL_RCC_OscConfig+0x470>)
 8004c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c2c:	4a54      	ldr	r2, [pc, #336]	; (8004d80 <HAL_RCC_OscConfig+0x470>)
 8004c2e:	f023 0304 	bic.w	r3, r3, #4
 8004c32:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d015      	beq.n	8004c68 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c3c:	f7fe f9aa 	bl	8002f94 <HAL_GetTick>
 8004c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c42:	e00a      	b.n	8004c5a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c44:	f7fe f9a6 	bl	8002f94 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d901      	bls.n	8004c5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e0cb      	b.n	8004df2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c5a:	4b49      	ldr	r3, [pc, #292]	; (8004d80 <HAL_RCC_OscConfig+0x470>)
 8004c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d0ee      	beq.n	8004c44 <HAL_RCC_OscConfig+0x334>
 8004c66:	e014      	b.n	8004c92 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c68:	f7fe f994 	bl	8002f94 <HAL_GetTick>
 8004c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c6e:	e00a      	b.n	8004c86 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c70:	f7fe f990 	bl	8002f94 <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d901      	bls.n	8004c86 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e0b5      	b.n	8004df2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c86:	4b3e      	ldr	r3, [pc, #248]	; (8004d80 <HAL_RCC_OscConfig+0x470>)
 8004c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c8a:	f003 0302 	and.w	r3, r3, #2
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1ee      	bne.n	8004c70 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c92:	7dfb      	ldrb	r3, [r7, #23]
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d105      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c98:	4b39      	ldr	r3, [pc, #228]	; (8004d80 <HAL_RCC_OscConfig+0x470>)
 8004c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9c:	4a38      	ldr	r2, [pc, #224]	; (8004d80 <HAL_RCC_OscConfig+0x470>)
 8004c9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ca2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	699b      	ldr	r3, [r3, #24]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	f000 80a1 	beq.w	8004df0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004cae:	4b34      	ldr	r3, [pc, #208]	; (8004d80 <HAL_RCC_OscConfig+0x470>)
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f003 030c 	and.w	r3, r3, #12
 8004cb6:	2b08      	cmp	r3, #8
 8004cb8:	d05c      	beq.n	8004d74 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d141      	bne.n	8004d46 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cc2:	4b31      	ldr	r3, [pc, #196]	; (8004d88 <HAL_RCC_OscConfig+0x478>)
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cc8:	f7fe f964 	bl	8002f94 <HAL_GetTick>
 8004ccc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cce:	e008      	b.n	8004ce2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cd0:	f7fe f960 	bl	8002f94 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e087      	b.n	8004df2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ce2:	4b27      	ldr	r3, [pc, #156]	; (8004d80 <HAL_RCC_OscConfig+0x470>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1f0      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	69da      	ldr	r2, [r3, #28]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
 8004cf6:	431a      	orrs	r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfc:	019b      	lsls	r3, r3, #6
 8004cfe:	431a      	orrs	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d04:	085b      	lsrs	r3, r3, #1
 8004d06:	3b01      	subs	r3, #1
 8004d08:	041b      	lsls	r3, r3, #16
 8004d0a:	431a      	orrs	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d10:	061b      	lsls	r3, r3, #24
 8004d12:	491b      	ldr	r1, [pc, #108]	; (8004d80 <HAL_RCC_OscConfig+0x470>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d18:	4b1b      	ldr	r3, [pc, #108]	; (8004d88 <HAL_RCC_OscConfig+0x478>)
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d1e:	f7fe f939 	bl	8002f94 <HAL_GetTick>
 8004d22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d24:	e008      	b.n	8004d38 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d26:	f7fe f935 	bl	8002f94 <HAL_GetTick>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d901      	bls.n	8004d38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004d34:	2303      	movs	r3, #3
 8004d36:	e05c      	b.n	8004df2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d38:	4b11      	ldr	r3, [pc, #68]	; (8004d80 <HAL_RCC_OscConfig+0x470>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d0f0      	beq.n	8004d26 <HAL_RCC_OscConfig+0x416>
 8004d44:	e054      	b.n	8004df0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d46:	4b10      	ldr	r3, [pc, #64]	; (8004d88 <HAL_RCC_OscConfig+0x478>)
 8004d48:	2200      	movs	r2, #0
 8004d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d4c:	f7fe f922 	bl	8002f94 <HAL_GetTick>
 8004d50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d52:	e008      	b.n	8004d66 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d54:	f7fe f91e 	bl	8002f94 <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d901      	bls.n	8004d66 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e045      	b.n	8004df2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d66:	4b06      	ldr	r3, [pc, #24]	; (8004d80 <HAL_RCC_OscConfig+0x470>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1f0      	bne.n	8004d54 <HAL_RCC_OscConfig+0x444>
 8004d72:	e03d      	b.n	8004df0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	699b      	ldr	r3, [r3, #24]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d107      	bne.n	8004d8c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e038      	b.n	8004df2 <HAL_RCC_OscConfig+0x4e2>
 8004d80:	40023800 	.word	0x40023800
 8004d84:	40007000 	.word	0x40007000
 8004d88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d8c:	4b1b      	ldr	r3, [pc, #108]	; (8004dfc <HAL_RCC_OscConfig+0x4ec>)
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d028      	beq.n	8004dec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d121      	bne.n	8004dec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d11a      	bne.n	8004dec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004dc2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d111      	bne.n	8004dec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd2:	085b      	lsrs	r3, r3, #1
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d107      	bne.n	8004dec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d001      	beq.n	8004df0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e000      	b.n	8004df2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3718      	adds	r7, #24
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	40023800 	.word	0x40023800

08004e00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d101      	bne.n	8004e14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e0cc      	b.n	8004fae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e14:	4b68      	ldr	r3, [pc, #416]	; (8004fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 030f 	and.w	r3, r3, #15
 8004e1c:	683a      	ldr	r2, [r7, #0]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d90c      	bls.n	8004e3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e22:	4b65      	ldr	r3, [pc, #404]	; (8004fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e24:	683a      	ldr	r2, [r7, #0]
 8004e26:	b2d2      	uxtb	r2, r2
 8004e28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e2a:	4b63      	ldr	r3, [pc, #396]	; (8004fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 030f 	and.w	r3, r3, #15
 8004e32:	683a      	ldr	r2, [r7, #0]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d001      	beq.n	8004e3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e0b8      	b.n	8004fae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0302 	and.w	r3, r3, #2
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d020      	beq.n	8004e8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0304 	and.w	r3, r3, #4
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d005      	beq.n	8004e60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e54:	4b59      	ldr	r3, [pc, #356]	; (8004fbc <HAL_RCC_ClockConfig+0x1bc>)
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	4a58      	ldr	r2, [pc, #352]	; (8004fbc <HAL_RCC_ClockConfig+0x1bc>)
 8004e5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0308 	and.w	r3, r3, #8
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d005      	beq.n	8004e78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e6c:	4b53      	ldr	r3, [pc, #332]	; (8004fbc <HAL_RCC_ClockConfig+0x1bc>)
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	4a52      	ldr	r2, [pc, #328]	; (8004fbc <HAL_RCC_ClockConfig+0x1bc>)
 8004e72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e78:	4b50      	ldr	r3, [pc, #320]	; (8004fbc <HAL_RCC_ClockConfig+0x1bc>)
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	494d      	ldr	r1, [pc, #308]	; (8004fbc <HAL_RCC_ClockConfig+0x1bc>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d044      	beq.n	8004f20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d107      	bne.n	8004eae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e9e:	4b47      	ldr	r3, [pc, #284]	; (8004fbc <HAL_RCC_ClockConfig+0x1bc>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d119      	bne.n	8004ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e07f      	b.n	8004fae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d003      	beq.n	8004ebe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004eba:	2b03      	cmp	r3, #3
 8004ebc:	d107      	bne.n	8004ece <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ebe:	4b3f      	ldr	r3, [pc, #252]	; (8004fbc <HAL_RCC_ClockConfig+0x1bc>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d109      	bne.n	8004ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e06f      	b.n	8004fae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ece:	4b3b      	ldr	r3, [pc, #236]	; (8004fbc <HAL_RCC_ClockConfig+0x1bc>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d101      	bne.n	8004ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e067      	b.n	8004fae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ede:	4b37      	ldr	r3, [pc, #220]	; (8004fbc <HAL_RCC_ClockConfig+0x1bc>)
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f023 0203 	bic.w	r2, r3, #3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	4934      	ldr	r1, [pc, #208]	; (8004fbc <HAL_RCC_ClockConfig+0x1bc>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ef0:	f7fe f850 	bl	8002f94 <HAL_GetTick>
 8004ef4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ef6:	e00a      	b.n	8004f0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ef8:	f7fe f84c 	bl	8002f94 <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d901      	bls.n	8004f0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e04f      	b.n	8004fae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f0e:	4b2b      	ldr	r3, [pc, #172]	; (8004fbc <HAL_RCC_ClockConfig+0x1bc>)
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f003 020c 	and.w	r2, r3, #12
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d1eb      	bne.n	8004ef8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f20:	4b25      	ldr	r3, [pc, #148]	; (8004fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 030f 	and.w	r3, r3, #15
 8004f28:	683a      	ldr	r2, [r7, #0]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d20c      	bcs.n	8004f48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f2e:	4b22      	ldr	r3, [pc, #136]	; (8004fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f30:	683a      	ldr	r2, [r7, #0]
 8004f32:	b2d2      	uxtb	r2, r2
 8004f34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f36:	4b20      	ldr	r3, [pc, #128]	; (8004fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 030f 	and.w	r3, r3, #15
 8004f3e:	683a      	ldr	r2, [r7, #0]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d001      	beq.n	8004f48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e032      	b.n	8004fae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0304 	and.w	r3, r3, #4
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d008      	beq.n	8004f66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f54:	4b19      	ldr	r3, [pc, #100]	; (8004fbc <HAL_RCC_ClockConfig+0x1bc>)
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	4916      	ldr	r1, [pc, #88]	; (8004fbc <HAL_RCC_ClockConfig+0x1bc>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0308 	and.w	r3, r3, #8
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d009      	beq.n	8004f86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f72:	4b12      	ldr	r3, [pc, #72]	; (8004fbc <HAL_RCC_ClockConfig+0x1bc>)
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	00db      	lsls	r3, r3, #3
 8004f80:	490e      	ldr	r1, [pc, #56]	; (8004fbc <HAL_RCC_ClockConfig+0x1bc>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f86:	f000 f821 	bl	8004fcc <HAL_RCC_GetSysClockFreq>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	4b0b      	ldr	r3, [pc, #44]	; (8004fbc <HAL_RCC_ClockConfig+0x1bc>)
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	091b      	lsrs	r3, r3, #4
 8004f92:	f003 030f 	and.w	r3, r3, #15
 8004f96:	490a      	ldr	r1, [pc, #40]	; (8004fc0 <HAL_RCC_ClockConfig+0x1c0>)
 8004f98:	5ccb      	ldrb	r3, [r1, r3]
 8004f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f9e:	4a09      	ldr	r2, [pc, #36]	; (8004fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004fa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004fa2:	4b09      	ldr	r3, [pc, #36]	; (8004fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f7fd ffb0 	bl	8002f0c <HAL_InitTick>

  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	40023c00 	.word	0x40023c00
 8004fbc:	40023800 	.word	0x40023800
 8004fc0:	0800a000 	.word	0x0800a000
 8004fc4:	20000110 	.word	0x20000110
 8004fc8:	20000118 	.word	0x20000118

08004fcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fd0:	b094      	sub	sp, #80	; 0x50
 8004fd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	647b      	str	r3, [r7, #68]	; 0x44
 8004fd8:	2300      	movs	r3, #0
 8004fda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fdc:	2300      	movs	r3, #0
 8004fde:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fe4:	4b79      	ldr	r3, [pc, #484]	; (80051cc <HAL_RCC_GetSysClockFreq+0x200>)
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f003 030c 	and.w	r3, r3, #12
 8004fec:	2b08      	cmp	r3, #8
 8004fee:	d00d      	beq.n	800500c <HAL_RCC_GetSysClockFreq+0x40>
 8004ff0:	2b08      	cmp	r3, #8
 8004ff2:	f200 80e1 	bhi.w	80051b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d002      	beq.n	8005000 <HAL_RCC_GetSysClockFreq+0x34>
 8004ffa:	2b04      	cmp	r3, #4
 8004ffc:	d003      	beq.n	8005006 <HAL_RCC_GetSysClockFreq+0x3a>
 8004ffe:	e0db      	b.n	80051b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005000:	4b73      	ldr	r3, [pc, #460]	; (80051d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005002:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005004:	e0db      	b.n	80051be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005006:	4b73      	ldr	r3, [pc, #460]	; (80051d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005008:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800500a:	e0d8      	b.n	80051be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800500c:	4b6f      	ldr	r3, [pc, #444]	; (80051cc <HAL_RCC_GetSysClockFreq+0x200>)
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005014:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005016:	4b6d      	ldr	r3, [pc, #436]	; (80051cc <HAL_RCC_GetSysClockFreq+0x200>)
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d063      	beq.n	80050ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005022:	4b6a      	ldr	r3, [pc, #424]	; (80051cc <HAL_RCC_GetSysClockFreq+0x200>)
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	099b      	lsrs	r3, r3, #6
 8005028:	2200      	movs	r2, #0
 800502a:	63bb      	str	r3, [r7, #56]	; 0x38
 800502c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800502e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005030:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005034:	633b      	str	r3, [r7, #48]	; 0x30
 8005036:	2300      	movs	r3, #0
 8005038:	637b      	str	r3, [r7, #52]	; 0x34
 800503a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800503e:	4622      	mov	r2, r4
 8005040:	462b      	mov	r3, r5
 8005042:	f04f 0000 	mov.w	r0, #0
 8005046:	f04f 0100 	mov.w	r1, #0
 800504a:	0159      	lsls	r1, r3, #5
 800504c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005050:	0150      	lsls	r0, r2, #5
 8005052:	4602      	mov	r2, r0
 8005054:	460b      	mov	r3, r1
 8005056:	4621      	mov	r1, r4
 8005058:	1a51      	subs	r1, r2, r1
 800505a:	6139      	str	r1, [r7, #16]
 800505c:	4629      	mov	r1, r5
 800505e:	eb63 0301 	sbc.w	r3, r3, r1
 8005062:	617b      	str	r3, [r7, #20]
 8005064:	f04f 0200 	mov.w	r2, #0
 8005068:	f04f 0300 	mov.w	r3, #0
 800506c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005070:	4659      	mov	r1, fp
 8005072:	018b      	lsls	r3, r1, #6
 8005074:	4651      	mov	r1, sl
 8005076:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800507a:	4651      	mov	r1, sl
 800507c:	018a      	lsls	r2, r1, #6
 800507e:	4651      	mov	r1, sl
 8005080:	ebb2 0801 	subs.w	r8, r2, r1
 8005084:	4659      	mov	r1, fp
 8005086:	eb63 0901 	sbc.w	r9, r3, r1
 800508a:	f04f 0200 	mov.w	r2, #0
 800508e:	f04f 0300 	mov.w	r3, #0
 8005092:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005096:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800509a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800509e:	4690      	mov	r8, r2
 80050a0:	4699      	mov	r9, r3
 80050a2:	4623      	mov	r3, r4
 80050a4:	eb18 0303 	adds.w	r3, r8, r3
 80050a8:	60bb      	str	r3, [r7, #8]
 80050aa:	462b      	mov	r3, r5
 80050ac:	eb49 0303 	adc.w	r3, r9, r3
 80050b0:	60fb      	str	r3, [r7, #12]
 80050b2:	f04f 0200 	mov.w	r2, #0
 80050b6:	f04f 0300 	mov.w	r3, #0
 80050ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80050be:	4629      	mov	r1, r5
 80050c0:	024b      	lsls	r3, r1, #9
 80050c2:	4621      	mov	r1, r4
 80050c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80050c8:	4621      	mov	r1, r4
 80050ca:	024a      	lsls	r2, r1, #9
 80050cc:	4610      	mov	r0, r2
 80050ce:	4619      	mov	r1, r3
 80050d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050d2:	2200      	movs	r2, #0
 80050d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80050d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80050dc:	f7fb f8d8 	bl	8000290 <__aeabi_uldivmod>
 80050e0:	4602      	mov	r2, r0
 80050e2:	460b      	mov	r3, r1
 80050e4:	4613      	mov	r3, r2
 80050e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050e8:	e058      	b.n	800519c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050ea:	4b38      	ldr	r3, [pc, #224]	; (80051cc <HAL_RCC_GetSysClockFreq+0x200>)
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	099b      	lsrs	r3, r3, #6
 80050f0:	2200      	movs	r2, #0
 80050f2:	4618      	mov	r0, r3
 80050f4:	4611      	mov	r1, r2
 80050f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80050fa:	623b      	str	r3, [r7, #32]
 80050fc:	2300      	movs	r3, #0
 80050fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005100:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005104:	4642      	mov	r2, r8
 8005106:	464b      	mov	r3, r9
 8005108:	f04f 0000 	mov.w	r0, #0
 800510c:	f04f 0100 	mov.w	r1, #0
 8005110:	0159      	lsls	r1, r3, #5
 8005112:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005116:	0150      	lsls	r0, r2, #5
 8005118:	4602      	mov	r2, r0
 800511a:	460b      	mov	r3, r1
 800511c:	4641      	mov	r1, r8
 800511e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005122:	4649      	mov	r1, r9
 8005124:	eb63 0b01 	sbc.w	fp, r3, r1
 8005128:	f04f 0200 	mov.w	r2, #0
 800512c:	f04f 0300 	mov.w	r3, #0
 8005130:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005134:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005138:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800513c:	ebb2 040a 	subs.w	r4, r2, sl
 8005140:	eb63 050b 	sbc.w	r5, r3, fp
 8005144:	f04f 0200 	mov.w	r2, #0
 8005148:	f04f 0300 	mov.w	r3, #0
 800514c:	00eb      	lsls	r3, r5, #3
 800514e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005152:	00e2      	lsls	r2, r4, #3
 8005154:	4614      	mov	r4, r2
 8005156:	461d      	mov	r5, r3
 8005158:	4643      	mov	r3, r8
 800515a:	18e3      	adds	r3, r4, r3
 800515c:	603b      	str	r3, [r7, #0]
 800515e:	464b      	mov	r3, r9
 8005160:	eb45 0303 	adc.w	r3, r5, r3
 8005164:	607b      	str	r3, [r7, #4]
 8005166:	f04f 0200 	mov.w	r2, #0
 800516a:	f04f 0300 	mov.w	r3, #0
 800516e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005172:	4629      	mov	r1, r5
 8005174:	028b      	lsls	r3, r1, #10
 8005176:	4621      	mov	r1, r4
 8005178:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800517c:	4621      	mov	r1, r4
 800517e:	028a      	lsls	r2, r1, #10
 8005180:	4610      	mov	r0, r2
 8005182:	4619      	mov	r1, r3
 8005184:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005186:	2200      	movs	r2, #0
 8005188:	61bb      	str	r3, [r7, #24]
 800518a:	61fa      	str	r2, [r7, #28]
 800518c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005190:	f7fb f87e 	bl	8000290 <__aeabi_uldivmod>
 8005194:	4602      	mov	r2, r0
 8005196:	460b      	mov	r3, r1
 8005198:	4613      	mov	r3, r2
 800519a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800519c:	4b0b      	ldr	r3, [pc, #44]	; (80051cc <HAL_RCC_GetSysClockFreq+0x200>)
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	0c1b      	lsrs	r3, r3, #16
 80051a2:	f003 0303 	and.w	r3, r3, #3
 80051a6:	3301      	adds	r3, #1
 80051a8:	005b      	lsls	r3, r3, #1
 80051aa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80051ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80051ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051b6:	e002      	b.n	80051be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80051b8:	4b05      	ldr	r3, [pc, #20]	; (80051d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80051ba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3750      	adds	r7, #80	; 0x50
 80051c4:	46bd      	mov	sp, r7
 80051c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051ca:	bf00      	nop
 80051cc:	40023800 	.word	0x40023800
 80051d0:	00f42400 	.word	0x00f42400
 80051d4:	007a1200 	.word	0x007a1200

080051d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051d8:	b480      	push	{r7}
 80051da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051dc:	4b03      	ldr	r3, [pc, #12]	; (80051ec <HAL_RCC_GetHCLKFreq+0x14>)
 80051de:	681b      	ldr	r3, [r3, #0]
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop
 80051ec:	20000110 	.word	0x20000110

080051f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80051f4:	f7ff fff0 	bl	80051d8 <HAL_RCC_GetHCLKFreq>
 80051f8:	4602      	mov	r2, r0
 80051fa:	4b05      	ldr	r3, [pc, #20]	; (8005210 <HAL_RCC_GetPCLK1Freq+0x20>)
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	0a9b      	lsrs	r3, r3, #10
 8005200:	f003 0307 	and.w	r3, r3, #7
 8005204:	4903      	ldr	r1, [pc, #12]	; (8005214 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005206:	5ccb      	ldrb	r3, [r1, r3]
 8005208:	fa22 f303 	lsr.w	r3, r2, r3
}
 800520c:	4618      	mov	r0, r3
 800520e:	bd80      	pop	{r7, pc}
 8005210:	40023800 	.word	0x40023800
 8005214:	0800a010 	.word	0x0800a010

08005218 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800521c:	f7ff ffdc 	bl	80051d8 <HAL_RCC_GetHCLKFreq>
 8005220:	4602      	mov	r2, r0
 8005222:	4b05      	ldr	r3, [pc, #20]	; (8005238 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	0b5b      	lsrs	r3, r3, #13
 8005228:	f003 0307 	and.w	r3, r3, #7
 800522c:	4903      	ldr	r1, [pc, #12]	; (800523c <HAL_RCC_GetPCLK2Freq+0x24>)
 800522e:	5ccb      	ldrb	r3, [r1, r3]
 8005230:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005234:	4618      	mov	r0, r3
 8005236:	bd80      	pop	{r7, pc}
 8005238:	40023800 	.word	0x40023800
 800523c:	0800a010 	.word	0x0800a010

08005240 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b086      	sub	sp, #24
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005248:	2300      	movs	r3, #0
 800524a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800524c:	2300      	movs	r3, #0
 800524e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0301 	and.w	r3, r3, #1
 8005258:	2b00      	cmp	r3, #0
 800525a:	d10b      	bne.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005264:	2b00      	cmp	r3, #0
 8005266:	d105      	bne.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005270:	2b00      	cmp	r3, #0
 8005272:	d075      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005274:	4b91      	ldr	r3, [pc, #580]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005276:	2200      	movs	r2, #0
 8005278:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800527a:	f7fd fe8b 	bl	8002f94 <HAL_GetTick>
 800527e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005280:	e008      	b.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005282:	f7fd fe87 	bl	8002f94 <HAL_GetTick>
 8005286:	4602      	mov	r2, r0
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	2b02      	cmp	r3, #2
 800528e:	d901      	bls.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e189      	b.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005294:	4b8a      	ldr	r3, [pc, #552]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1f0      	bne.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0301 	and.w	r3, r3, #1
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d009      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	019a      	lsls	r2, r3, #6
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	071b      	lsls	r3, r3, #28
 80052b8:	4981      	ldr	r1, [pc, #516]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0302 	and.w	r3, r3, #2
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d01f      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80052cc:	4b7c      	ldr	r3, [pc, #496]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052d2:	0f1b      	lsrs	r3, r3, #28
 80052d4:	f003 0307 	and.w	r3, r3, #7
 80052d8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	019a      	lsls	r2, r3, #6
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	061b      	lsls	r3, r3, #24
 80052e6:	431a      	orrs	r2, r3
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	071b      	lsls	r3, r3, #28
 80052ec:	4974      	ldr	r1, [pc, #464]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052ee:	4313      	orrs	r3, r2
 80052f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80052f4:	4b72      	ldr	r3, [pc, #456]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052fa:	f023 021f 	bic.w	r2, r3, #31
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	69db      	ldr	r3, [r3, #28]
 8005302:	3b01      	subs	r3, #1
 8005304:	496e      	ldr	r1, [pc, #440]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005306:	4313      	orrs	r3, r2
 8005308:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005314:	2b00      	cmp	r3, #0
 8005316:	d00d      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	019a      	lsls	r2, r3, #6
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	061b      	lsls	r3, r3, #24
 8005324:	431a      	orrs	r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	071b      	lsls	r3, r3, #28
 800532c:	4964      	ldr	r1, [pc, #400]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800532e:	4313      	orrs	r3, r2
 8005330:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005334:	4b61      	ldr	r3, [pc, #388]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005336:	2201      	movs	r2, #1
 8005338:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800533a:	f7fd fe2b 	bl	8002f94 <HAL_GetTick>
 800533e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005340:	e008      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005342:	f7fd fe27 	bl	8002f94 <HAL_GetTick>
 8005346:	4602      	mov	r2, r0
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	2b02      	cmp	r3, #2
 800534e:	d901      	bls.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005350:	2303      	movs	r3, #3
 8005352:	e129      	b.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005354:	4b5a      	ldr	r3, [pc, #360]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d0f0      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0304 	and.w	r3, r3, #4
 8005368:	2b00      	cmp	r3, #0
 800536a:	d105      	bne.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005374:	2b00      	cmp	r3, #0
 8005376:	d079      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005378:	4b52      	ldr	r3, [pc, #328]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800537a:	2200      	movs	r2, #0
 800537c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800537e:	f7fd fe09 	bl	8002f94 <HAL_GetTick>
 8005382:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005384:	e008      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005386:	f7fd fe05 	bl	8002f94 <HAL_GetTick>
 800538a:	4602      	mov	r2, r0
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	2b02      	cmp	r3, #2
 8005392:	d901      	bls.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	e107      	b.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005398:	4b49      	ldr	r3, [pc, #292]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053a4:	d0ef      	beq.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0304 	and.w	r3, r3, #4
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d020      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80053b2:	4b43      	ldr	r3, [pc, #268]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b8:	0f1b      	lsrs	r3, r3, #28
 80053ba:	f003 0307 	and.w	r3, r3, #7
 80053be:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	019a      	lsls	r2, r3, #6
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	061b      	lsls	r3, r3, #24
 80053cc:	431a      	orrs	r2, r3
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	071b      	lsls	r3, r3, #28
 80053d2:	493b      	ldr	r1, [pc, #236]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053d4:	4313      	orrs	r3, r2
 80053d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80053da:	4b39      	ldr	r3, [pc, #228]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053e0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a1b      	ldr	r3, [r3, #32]
 80053e8:	3b01      	subs	r3, #1
 80053ea:	021b      	lsls	r3, r3, #8
 80053ec:	4934      	ldr	r1, [pc, #208]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053ee:	4313      	orrs	r3, r2
 80053f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0308 	and.w	r3, r3, #8
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d01e      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005400:	4b2f      	ldr	r3, [pc, #188]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005406:	0e1b      	lsrs	r3, r3, #24
 8005408:	f003 030f 	and.w	r3, r3, #15
 800540c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	019a      	lsls	r2, r3, #6
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	061b      	lsls	r3, r3, #24
 8005418:	431a      	orrs	r2, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	071b      	lsls	r3, r3, #28
 8005420:	4927      	ldr	r1, [pc, #156]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005422:	4313      	orrs	r3, r2
 8005424:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005428:	4b25      	ldr	r3, [pc, #148]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800542a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800542e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005436:	4922      	ldr	r1, [pc, #136]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005438:	4313      	orrs	r3, r2
 800543a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800543e:	4b21      	ldr	r3, [pc, #132]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005440:	2201      	movs	r2, #1
 8005442:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005444:	f7fd fda6 	bl	8002f94 <HAL_GetTick>
 8005448:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800544a:	e008      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800544c:	f7fd fda2 	bl	8002f94 <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	2b02      	cmp	r3, #2
 8005458:	d901      	bls.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e0a4      	b.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800545e:	4b18      	ldr	r3, [pc, #96]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005466:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800546a:	d1ef      	bne.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0320 	and.w	r3, r3, #32
 8005474:	2b00      	cmp	r3, #0
 8005476:	f000 808b 	beq.w	8005590 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800547a:	2300      	movs	r3, #0
 800547c:	60fb      	str	r3, [r7, #12]
 800547e:	4b10      	ldr	r3, [pc, #64]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005482:	4a0f      	ldr	r2, [pc, #60]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005488:	6413      	str	r3, [r2, #64]	; 0x40
 800548a:	4b0d      	ldr	r3, [pc, #52]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800548c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005492:	60fb      	str	r3, [r7, #12]
 8005494:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005496:	4b0c      	ldr	r3, [pc, #48]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a0b      	ldr	r2, [pc, #44]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800549c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054a0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80054a2:	f7fd fd77 	bl	8002f94 <HAL_GetTick>
 80054a6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80054a8:	e010      	b.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80054aa:	f7fd fd73 	bl	8002f94 <HAL_GetTick>
 80054ae:	4602      	mov	r2, r0
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d909      	bls.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80054b8:	2303      	movs	r3, #3
 80054ba:	e075      	b.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80054bc:	42470068 	.word	0x42470068
 80054c0:	40023800 	.word	0x40023800
 80054c4:	42470070 	.word	0x42470070
 80054c8:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80054cc:	4b38      	ldr	r3, [pc, #224]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d0e8      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80054d8:	4b36      	ldr	r3, [pc, #216]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054e0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d02f      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054f0:	693a      	ldr	r2, [r7, #16]
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d028      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80054f6:	4b2f      	ldr	r3, [pc, #188]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054fe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005500:	4b2d      	ldr	r3, [pc, #180]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005502:	2201      	movs	r2, #1
 8005504:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005506:	4b2c      	ldr	r3, [pc, #176]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005508:	2200      	movs	r2, #0
 800550a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800550c:	4a29      	ldr	r2, [pc, #164]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005512:	4b28      	ldr	r3, [pc, #160]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005516:	f003 0301 	and.w	r3, r3, #1
 800551a:	2b01      	cmp	r3, #1
 800551c:	d114      	bne.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800551e:	f7fd fd39 	bl	8002f94 <HAL_GetTick>
 8005522:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005524:	e00a      	b.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005526:	f7fd fd35 	bl	8002f94 <HAL_GetTick>
 800552a:	4602      	mov	r2, r0
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	f241 3288 	movw	r2, #5000	; 0x1388
 8005534:	4293      	cmp	r3, r2
 8005536:	d901      	bls.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e035      	b.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800553c:	4b1d      	ldr	r3, [pc, #116]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800553e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005540:	f003 0302 	and.w	r3, r3, #2
 8005544:	2b00      	cmp	r3, #0
 8005546:	d0ee      	beq.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800554c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005550:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005554:	d10d      	bne.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005556:	4b17      	ldr	r3, [pc, #92]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005562:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005566:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800556a:	4912      	ldr	r1, [pc, #72]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800556c:	4313      	orrs	r3, r2
 800556e:	608b      	str	r3, [r1, #8]
 8005570:	e005      	b.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005572:	4b10      	ldr	r3, [pc, #64]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	4a0f      	ldr	r2, [pc, #60]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005578:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800557c:	6093      	str	r3, [r2, #8]
 800557e:	4b0d      	ldr	r3, [pc, #52]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005580:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005586:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800558a:	490a      	ldr	r1, [pc, #40]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800558c:	4313      	orrs	r3, r2
 800558e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0310 	and.w	r3, r3, #16
 8005598:	2b00      	cmp	r3, #0
 800559a:	d004      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80055a2:	4b06      	ldr	r3, [pc, #24]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80055a4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3718      	adds	r7, #24
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	40007000 	.word	0x40007000
 80055b4:	40023800 	.word	0x40023800
 80055b8:	42470e40 	.word	0x42470e40
 80055bc:	424711e0 	.word	0x424711e0

080055c0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d101      	bne.n	80055d6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e066      	b.n	80056a4 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	7f5b      	ldrb	r3, [r3, #29]
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d105      	bne.n	80055ec <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f7fc f9d6 	bl	8001998 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2202      	movs	r2, #2
 80055f0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	22ca      	movs	r2, #202	; 0xca
 80055f8:	625a      	str	r2, [r3, #36]	; 0x24
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2253      	movs	r2, #83	; 0x53
 8005600:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 fa45 	bl	8005a92 <RTC_EnterInitMode>
 8005608:	4603      	mov	r3, r0
 800560a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800560c:	7bfb      	ldrb	r3, [r7, #15]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d12c      	bne.n	800566c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	6812      	ldr	r2, [r2, #0]
 800561c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005620:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005624:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	6899      	ldr	r1, [r3, #8]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	431a      	orrs	r2, r3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	695b      	ldr	r3, [r3, #20]
 800563a:	431a      	orrs	r2, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	430a      	orrs	r2, r1
 8005642:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	68d2      	ldr	r2, [r2, #12]
 800564c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	6919      	ldr	r1, [r3, #16]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	041a      	lsls	r2, r3, #16
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	430a      	orrs	r2, r1
 8005660:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 fa4c 	bl	8005b00 <RTC_ExitInitMode>
 8005668:	4603      	mov	r3, r0
 800566a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800566c:	7bfb      	ldrb	r3, [r7, #15]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d113      	bne.n	800569a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005680:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	699a      	ldr	r2, [r3, #24]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	430a      	orrs	r2, r1
 8005692:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	22ff      	movs	r2, #255	; 0xff
 80056a0:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80056a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3710      	adds	r7, #16
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80056ac:	b590      	push	{r4, r7, lr}
 80056ae:	b087      	sub	sp, #28
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80056b8:	2300      	movs	r3, #0
 80056ba:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	7f1b      	ldrb	r3, [r3, #28]
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d101      	bne.n	80056c8 <HAL_RTC_SetTime+0x1c>
 80056c4:	2302      	movs	r3, #2
 80056c6:	e087      	b.n	80057d8 <HAL_RTC_SetTime+0x12c>
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2201      	movs	r2, #1
 80056cc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2202      	movs	r2, #2
 80056d2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d126      	bne.n	8005728 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d102      	bne.n	80056ee <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	2200      	movs	r2, #0
 80056ec:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	4618      	mov	r0, r3
 80056f4:	f000 fa29 	bl	8005b4a <RTC_ByteToBcd2>
 80056f8:	4603      	mov	r3, r0
 80056fa:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	785b      	ldrb	r3, [r3, #1]
 8005700:	4618      	mov	r0, r3
 8005702:	f000 fa22 	bl	8005b4a <RTC_ByteToBcd2>
 8005706:	4603      	mov	r3, r0
 8005708:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800570a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	789b      	ldrb	r3, [r3, #2]
 8005710:	4618      	mov	r0, r3
 8005712:	f000 fa1a 	bl	8005b4a <RTC_ByteToBcd2>
 8005716:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005718:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	78db      	ldrb	r3, [r3, #3]
 8005720:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005722:	4313      	orrs	r3, r2
 8005724:	617b      	str	r3, [r7, #20]
 8005726:	e018      	b.n	800575a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005732:	2b00      	cmp	r3, #0
 8005734:	d102      	bne.n	800573c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	2200      	movs	r2, #0
 800573a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	785b      	ldrb	r3, [r3, #1]
 8005746:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005748:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800574a:	68ba      	ldr	r2, [r7, #8]
 800574c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800574e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	78db      	ldrb	r3, [r3, #3]
 8005754:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005756:	4313      	orrs	r3, r2
 8005758:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	22ca      	movs	r2, #202	; 0xca
 8005760:	625a      	str	r2, [r3, #36]	; 0x24
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	2253      	movs	r2, #83	; 0x53
 8005768:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800576a:	68f8      	ldr	r0, [r7, #12]
 800576c:	f000 f991 	bl	8005a92 <RTC_EnterInitMode>
 8005770:	4603      	mov	r3, r0
 8005772:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005774:	7cfb      	ldrb	r3, [r7, #19]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d120      	bne.n	80057bc <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005784:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005788:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	689a      	ldr	r2, [r3, #8]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005798:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	6899      	ldr	r1, [r3, #8]
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	68da      	ldr	r2, [r3, #12]
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	431a      	orrs	r2, r3
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	430a      	orrs	r2, r1
 80057b0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80057b2:	68f8      	ldr	r0, [r7, #12]
 80057b4:	f000 f9a4 	bl	8005b00 <RTC_ExitInitMode>
 80057b8:	4603      	mov	r3, r0
 80057ba:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80057bc:	7cfb      	ldrb	r3, [r7, #19]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d102      	bne.n	80057c8 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2201      	movs	r2, #1
 80057c6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	22ff      	movs	r2, #255	; 0xff
 80057ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2200      	movs	r2, #0
 80057d4:	771a      	strb	r2, [r3, #28]

  return status;
 80057d6:	7cfb      	ldrb	r3, [r7, #19]
}
 80057d8:	4618      	mov	r0, r3
 80057da:	371c      	adds	r7, #28
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd90      	pop	{r4, r7, pc}

080057e0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b086      	sub	sp, #24
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80057ec:	2300      	movs	r3, #0
 80057ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005812:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005816:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	0c1b      	lsrs	r3, r3, #16
 800581c:	b2db      	uxtb	r3, r3
 800581e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005822:	b2da      	uxtb	r2, r3
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	0a1b      	lsrs	r3, r3, #8
 800582c:	b2db      	uxtb	r3, r3
 800582e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005832:	b2da      	uxtb	r2, r3
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	b2db      	uxtb	r3, r3
 800583c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005840:	b2da      	uxtb	r2, r3
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	0d9b      	lsrs	r3, r3, #22
 800584a:	b2db      	uxtb	r3, r3
 800584c:	f003 0301 	and.w	r3, r3, #1
 8005850:	b2da      	uxtb	r2, r3
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d11a      	bne.n	8005892 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	4618      	mov	r0, r3
 8005862:	f000 f98f 	bl	8005b84 <RTC_Bcd2ToByte>
 8005866:	4603      	mov	r3, r0
 8005868:	461a      	mov	r2, r3
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	785b      	ldrb	r3, [r3, #1]
 8005872:	4618      	mov	r0, r3
 8005874:	f000 f986 	bl	8005b84 <RTC_Bcd2ToByte>
 8005878:	4603      	mov	r3, r0
 800587a:	461a      	mov	r2, r3
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	789b      	ldrb	r3, [r3, #2]
 8005884:	4618      	mov	r0, r3
 8005886:	f000 f97d 	bl	8005b84 <RTC_Bcd2ToByte>
 800588a:	4603      	mov	r3, r0
 800588c:	461a      	mov	r2, r3
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005892:	2300      	movs	r3, #0
}
 8005894:	4618      	mov	r0, r3
 8005896:	3718      	adds	r7, #24
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800589c:	b590      	push	{r4, r7, lr}
 800589e:	b087      	sub	sp, #28
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80058a8:	2300      	movs	r3, #0
 80058aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	7f1b      	ldrb	r3, [r3, #28]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d101      	bne.n	80058b8 <HAL_RTC_SetDate+0x1c>
 80058b4:	2302      	movs	r3, #2
 80058b6:	e071      	b.n	800599c <HAL_RTC_SetDate+0x100>
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2201      	movs	r2, #1
 80058bc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2202      	movs	r2, #2
 80058c2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d10e      	bne.n	80058e8 <HAL_RTC_SetDate+0x4c>
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	785b      	ldrb	r3, [r3, #1]
 80058ce:	f003 0310 	and.w	r3, r3, #16
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d008      	beq.n	80058e8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	785b      	ldrb	r3, [r3, #1]
 80058da:	f023 0310 	bic.w	r3, r3, #16
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	330a      	adds	r3, #10
 80058e2:	b2da      	uxtb	r2, r3
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d11c      	bne.n	8005928 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	78db      	ldrb	r3, [r3, #3]
 80058f2:	4618      	mov	r0, r3
 80058f4:	f000 f929 	bl	8005b4a <RTC_ByteToBcd2>
 80058f8:	4603      	mov	r3, r0
 80058fa:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	785b      	ldrb	r3, [r3, #1]
 8005900:	4618      	mov	r0, r3
 8005902:	f000 f922 	bl	8005b4a <RTC_ByteToBcd2>
 8005906:	4603      	mov	r3, r0
 8005908:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800590a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	789b      	ldrb	r3, [r3, #2]
 8005910:	4618      	mov	r0, r3
 8005912:	f000 f91a 	bl	8005b4a <RTC_ByteToBcd2>
 8005916:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005918:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005922:	4313      	orrs	r3, r2
 8005924:	617b      	str	r3, [r7, #20]
 8005926:	e00e      	b.n	8005946 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	78db      	ldrb	r3, [r3, #3]
 800592c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	785b      	ldrb	r3, [r3, #1]
 8005932:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005934:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005936:	68ba      	ldr	r2, [r7, #8]
 8005938:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800593a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005942:	4313      	orrs	r3, r2
 8005944:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	22ca      	movs	r2, #202	; 0xca
 800594c:	625a      	str	r2, [r3, #36]	; 0x24
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2253      	movs	r2, #83	; 0x53
 8005954:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005956:	68f8      	ldr	r0, [r7, #12]
 8005958:	f000 f89b 	bl	8005a92 <RTC_EnterInitMode>
 800595c:	4603      	mov	r3, r0
 800595e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005960:	7cfb      	ldrb	r3, [r7, #19]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10c      	bne.n	8005980 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005970:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005974:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005976:	68f8      	ldr	r0, [r7, #12]
 8005978:	f000 f8c2 	bl	8005b00 <RTC_ExitInitMode>
 800597c:	4603      	mov	r3, r0
 800597e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005980:	7cfb      	ldrb	r3, [r7, #19]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d102      	bne.n	800598c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2201      	movs	r2, #1
 800598a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	22ff      	movs	r2, #255	; 0xff
 8005992:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2200      	movs	r2, #0
 8005998:	771a      	strb	r2, [r3, #28]

  return status;
 800599a:	7cfb      	ldrb	r3, [r7, #19]
}
 800599c:	4618      	mov	r0, r3
 800599e:	371c      	adds	r7, #28
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd90      	pop	{r4, r7, pc}

080059a4 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b086      	sub	sp, #24
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80059b0:	2300      	movs	r3, #0
 80059b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80059be:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80059c2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	0c1b      	lsrs	r3, r3, #16
 80059c8:	b2da      	uxtb	r2, r3
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	0a1b      	lsrs	r3, r3, #8
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	f003 031f 	and.w	r3, r3, #31
 80059d8:	b2da      	uxtb	r2, r3
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059e6:	b2da      	uxtb	r2, r3
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	0b5b      	lsrs	r3, r3, #13
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	f003 0307 	and.w	r3, r3, #7
 80059f6:	b2da      	uxtb	r2, r3
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d11a      	bne.n	8005a38 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	78db      	ldrb	r3, [r3, #3]
 8005a06:	4618      	mov	r0, r3
 8005a08:	f000 f8bc 	bl	8005b84 <RTC_Bcd2ToByte>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	461a      	mov	r2, r3
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	785b      	ldrb	r3, [r3, #1]
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f000 f8b3 	bl	8005b84 <RTC_Bcd2ToByte>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	461a      	mov	r2, r3
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	789b      	ldrb	r3, [r3, #2]
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f000 f8aa 	bl	8005b84 <RTC_Bcd2ToByte>
 8005a30:	4603      	mov	r3, r0
 8005a32:	461a      	mov	r2, r3
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3718      	adds	r7, #24
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}

08005a42 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005a42:	b580      	push	{r7, lr}
 8005a44:	b084      	sub	sp, #16
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68da      	ldr	r2, [r3, #12]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005a5c:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a5e:	f7fd fa99 	bl	8002f94 <HAL_GetTick>
 8005a62:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005a64:	e009      	b.n	8005a7a <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005a66:	f7fd fa95 	bl	8002f94 <HAL_GetTick>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a74:	d901      	bls.n	8005a7a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005a76:	2303      	movs	r3, #3
 8005a78:	e007      	b.n	8005a8a <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	f003 0320 	and.w	r3, r3, #32
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d0ee      	beq.n	8005a66 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3710      	adds	r7, #16
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}

08005a92 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005a92:	b580      	push	{r7, lr}
 8005a94:	b084      	sub	sp, #16
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d122      	bne.n	8005af6 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68da      	ldr	r2, [r3, #12]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005abe:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005ac0:	f7fd fa68 	bl	8002f94 <HAL_GetTick>
 8005ac4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005ac6:	e00c      	b.n	8005ae2 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005ac8:	f7fd fa64 	bl	8002f94 <HAL_GetTick>
 8005acc:	4602      	mov	r2, r0
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ad6:	d904      	bls.n	8005ae2 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2204      	movs	r2, #4
 8005adc:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d102      	bne.n	8005af6 <RTC_EnterInitMode+0x64>
 8005af0:	7bfb      	ldrb	r3, [r7, #15]
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d1e8      	bne.n	8005ac8 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3710      	adds	r7, #16
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68da      	ldr	r2, [r3, #12]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b1a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	f003 0320 	and.w	r3, r3, #32
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d10a      	bne.n	8005b40 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f7ff ff89 	bl	8005a42 <HAL_RTC_WaitForSynchro>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d004      	beq.n	8005b40 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2204      	movs	r2, #4
 8005b3a:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3710      	adds	r7, #16
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}

08005b4a <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005b4a:	b480      	push	{r7}
 8005b4c:	b085      	sub	sp, #20
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	4603      	mov	r3, r0
 8005b52:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8005b54:	2300      	movs	r3, #0
 8005b56:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8005b58:	e005      	b.n	8005b66 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005b5a:	7bfb      	ldrb	r3, [r7, #15]
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8005b60:	79fb      	ldrb	r3, [r7, #7]
 8005b62:	3b0a      	subs	r3, #10
 8005b64:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005b66:	79fb      	ldrb	r3, [r7, #7]
 8005b68:	2b09      	cmp	r3, #9
 8005b6a:	d8f6      	bhi.n	8005b5a <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005b6c:	7bfb      	ldrb	r3, [r7, #15]
 8005b6e:	011b      	lsls	r3, r3, #4
 8005b70:	b2da      	uxtb	r2, r3
 8005b72:	79fb      	ldrb	r3, [r7, #7]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	b2db      	uxtb	r3, r3
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3714      	adds	r7, #20
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b085      	sub	sp, #20
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005b92:	79fb      	ldrb	r3, [r7, #7]
 8005b94:	091b      	lsrs	r3, r3, #4
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	461a      	mov	r2, r3
 8005b9a:	0092      	lsls	r2, r2, #2
 8005b9c:	4413      	add	r3, r2
 8005b9e:	005b      	lsls	r3, r3, #1
 8005ba0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8005ba2:	79fb      	ldrb	r3, [r7, #7]
 8005ba4:	f003 030f 	and.w	r3, r3, #15
 8005ba8:	b2da      	uxtb	r2, r3
 8005baa:	7bfb      	ldrb	r3, [r7, #15]
 8005bac:	4413      	add	r3, r2
 8005bae:	b2db      	uxtb	r3, r3
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3714      	adds	r7, #20
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b082      	sub	sp, #8
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d101      	bne.n	8005bce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e041      	b.n	8005c52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d106      	bne.n	8005be8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f7fb ff78 	bl	8001ad8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2202      	movs	r2, #2
 8005bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	3304      	adds	r3, #4
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	4610      	mov	r0, r2
 8005bfc:	f001 f844 	bl	8006c88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3708      	adds	r7, #8
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
	...

08005c5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d001      	beq.n	8005c74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e04e      	b.n	8005d12 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2202      	movs	r2, #2
 8005c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68da      	ldr	r2, [r3, #12]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f042 0201 	orr.w	r2, r2, #1
 8005c8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a23      	ldr	r2, [pc, #140]	; (8005d20 <HAL_TIM_Base_Start_IT+0xc4>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d022      	beq.n	8005cdc <HAL_TIM_Base_Start_IT+0x80>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c9e:	d01d      	beq.n	8005cdc <HAL_TIM_Base_Start_IT+0x80>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a1f      	ldr	r2, [pc, #124]	; (8005d24 <HAL_TIM_Base_Start_IT+0xc8>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d018      	beq.n	8005cdc <HAL_TIM_Base_Start_IT+0x80>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a1e      	ldr	r2, [pc, #120]	; (8005d28 <HAL_TIM_Base_Start_IT+0xcc>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d013      	beq.n	8005cdc <HAL_TIM_Base_Start_IT+0x80>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a1c      	ldr	r2, [pc, #112]	; (8005d2c <HAL_TIM_Base_Start_IT+0xd0>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d00e      	beq.n	8005cdc <HAL_TIM_Base_Start_IT+0x80>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a1b      	ldr	r2, [pc, #108]	; (8005d30 <HAL_TIM_Base_Start_IT+0xd4>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d009      	beq.n	8005cdc <HAL_TIM_Base_Start_IT+0x80>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a19      	ldr	r2, [pc, #100]	; (8005d34 <HAL_TIM_Base_Start_IT+0xd8>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d004      	beq.n	8005cdc <HAL_TIM_Base_Start_IT+0x80>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a18      	ldr	r2, [pc, #96]	; (8005d38 <HAL_TIM_Base_Start_IT+0xdc>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d111      	bne.n	8005d00 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	f003 0307 	and.w	r3, r3, #7
 8005ce6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2b06      	cmp	r3, #6
 8005cec:	d010      	beq.n	8005d10 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f042 0201 	orr.w	r2, r2, #1
 8005cfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cfe:	e007      	b.n	8005d10 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f042 0201 	orr.w	r2, r2, #1
 8005d0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3714      	adds	r7, #20
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr
 8005d1e:	bf00      	nop
 8005d20:	40010000 	.word	0x40010000
 8005d24:	40000400 	.word	0x40000400
 8005d28:	40000800 	.word	0x40000800
 8005d2c:	40000c00 	.word	0x40000c00
 8005d30:	40010400 	.word	0x40010400
 8005d34:	40014000 	.word	0x40014000
 8005d38:	40001800 	.word	0x40001800

08005d3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b082      	sub	sp, #8
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d101      	bne.n	8005d4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e041      	b.n	8005dd2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d106      	bne.n	8005d68 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f7fb fe42 	bl	80019ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2202      	movs	r2, #2
 8005d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	3304      	adds	r3, #4
 8005d78:	4619      	mov	r1, r3
 8005d7a:	4610      	mov	r0, r2
 8005d7c:	f000 ff84 	bl	8006c88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3708      	adds	r7, #8
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
	...

08005ddc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d109      	bne.n	8005e00 <HAL_TIM_PWM_Start+0x24>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	bf14      	ite	ne
 8005df8:	2301      	movne	r3, #1
 8005dfa:	2300      	moveq	r3, #0
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	e022      	b.n	8005e46 <HAL_TIM_PWM_Start+0x6a>
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	2b04      	cmp	r3, #4
 8005e04:	d109      	bne.n	8005e1a <HAL_TIM_PWM_Start+0x3e>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	bf14      	ite	ne
 8005e12:	2301      	movne	r3, #1
 8005e14:	2300      	moveq	r3, #0
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	e015      	b.n	8005e46 <HAL_TIM_PWM_Start+0x6a>
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	2b08      	cmp	r3, #8
 8005e1e:	d109      	bne.n	8005e34 <HAL_TIM_PWM_Start+0x58>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	bf14      	ite	ne
 8005e2c:	2301      	movne	r3, #1
 8005e2e:	2300      	moveq	r3, #0
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	e008      	b.n	8005e46 <HAL_TIM_PWM_Start+0x6a>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	bf14      	ite	ne
 8005e40:	2301      	movne	r3, #1
 8005e42:	2300      	moveq	r3, #0
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d001      	beq.n	8005e4e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e07c      	b.n	8005f48 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d104      	bne.n	8005e5e <HAL_TIM_PWM_Start+0x82>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2202      	movs	r2, #2
 8005e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e5c:	e013      	b.n	8005e86 <HAL_TIM_PWM_Start+0xaa>
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	2b04      	cmp	r3, #4
 8005e62:	d104      	bne.n	8005e6e <HAL_TIM_PWM_Start+0x92>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2202      	movs	r2, #2
 8005e68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e6c:	e00b      	b.n	8005e86 <HAL_TIM_PWM_Start+0xaa>
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	2b08      	cmp	r3, #8
 8005e72:	d104      	bne.n	8005e7e <HAL_TIM_PWM_Start+0xa2>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2202      	movs	r2, #2
 8005e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e7c:	e003      	b.n	8005e86 <HAL_TIM_PWM_Start+0xaa>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2202      	movs	r2, #2
 8005e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	6839      	ldr	r1, [r7, #0]
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f001 fb0e 	bl	80074b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a2d      	ldr	r2, [pc, #180]	; (8005f50 <HAL_TIM_PWM_Start+0x174>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d004      	beq.n	8005ea8 <HAL_TIM_PWM_Start+0xcc>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a2c      	ldr	r2, [pc, #176]	; (8005f54 <HAL_TIM_PWM_Start+0x178>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d101      	bne.n	8005eac <HAL_TIM_PWM_Start+0xd0>
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e000      	b.n	8005eae <HAL_TIM_PWM_Start+0xd2>
 8005eac:	2300      	movs	r3, #0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d007      	beq.n	8005ec2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ec0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a22      	ldr	r2, [pc, #136]	; (8005f50 <HAL_TIM_PWM_Start+0x174>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d022      	beq.n	8005f12 <HAL_TIM_PWM_Start+0x136>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ed4:	d01d      	beq.n	8005f12 <HAL_TIM_PWM_Start+0x136>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a1f      	ldr	r2, [pc, #124]	; (8005f58 <HAL_TIM_PWM_Start+0x17c>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d018      	beq.n	8005f12 <HAL_TIM_PWM_Start+0x136>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a1d      	ldr	r2, [pc, #116]	; (8005f5c <HAL_TIM_PWM_Start+0x180>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d013      	beq.n	8005f12 <HAL_TIM_PWM_Start+0x136>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a1c      	ldr	r2, [pc, #112]	; (8005f60 <HAL_TIM_PWM_Start+0x184>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d00e      	beq.n	8005f12 <HAL_TIM_PWM_Start+0x136>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a16      	ldr	r2, [pc, #88]	; (8005f54 <HAL_TIM_PWM_Start+0x178>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d009      	beq.n	8005f12 <HAL_TIM_PWM_Start+0x136>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a18      	ldr	r2, [pc, #96]	; (8005f64 <HAL_TIM_PWM_Start+0x188>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d004      	beq.n	8005f12 <HAL_TIM_PWM_Start+0x136>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a16      	ldr	r2, [pc, #88]	; (8005f68 <HAL_TIM_PWM_Start+0x18c>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d111      	bne.n	8005f36 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	f003 0307 	and.w	r3, r3, #7
 8005f1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2b06      	cmp	r3, #6
 8005f22:	d010      	beq.n	8005f46 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f042 0201 	orr.w	r2, r2, #1
 8005f32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f34:	e007      	b.n	8005f46 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f042 0201 	orr.w	r2, r2, #1
 8005f44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3710      	adds	r7, #16
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	40010000 	.word	0x40010000
 8005f54:	40010400 	.word	0x40010400
 8005f58:	40000400 	.word	0x40000400
 8005f5c:	40000800 	.word	0x40000800
 8005f60:	40000c00 	.word	0x40000c00
 8005f64:	40014000 	.word	0x40014000
 8005f68:	40001800 	.word	0x40001800

08005f6c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	6839      	ldr	r1, [r7, #0]
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f001 fa96 	bl	80074b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a2e      	ldr	r2, [pc, #184]	; (8006044 <HAL_TIM_PWM_Stop+0xd8>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d004      	beq.n	8005f98 <HAL_TIM_PWM_Stop+0x2c>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a2d      	ldr	r2, [pc, #180]	; (8006048 <HAL_TIM_PWM_Stop+0xdc>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d101      	bne.n	8005f9c <HAL_TIM_PWM_Stop+0x30>
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e000      	b.n	8005f9e <HAL_TIM_PWM_Stop+0x32>
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d017      	beq.n	8005fd2 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	6a1a      	ldr	r2, [r3, #32]
 8005fa8:	f241 1311 	movw	r3, #4369	; 0x1111
 8005fac:	4013      	ands	r3, r2
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d10f      	bne.n	8005fd2 <HAL_TIM_PWM_Stop+0x66>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	6a1a      	ldr	r2, [r3, #32]
 8005fb8:	f240 4344 	movw	r3, #1092	; 0x444
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d107      	bne.n	8005fd2 <HAL_TIM_PWM_Stop+0x66>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005fd0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	6a1a      	ldr	r2, [r3, #32]
 8005fd8:	f241 1311 	movw	r3, #4369	; 0x1111
 8005fdc:	4013      	ands	r3, r2
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d10f      	bne.n	8006002 <HAL_TIM_PWM_Stop+0x96>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	6a1a      	ldr	r2, [r3, #32]
 8005fe8:	f240 4344 	movw	r3, #1092	; 0x444
 8005fec:	4013      	ands	r3, r2
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d107      	bne.n	8006002 <HAL_TIM_PWM_Stop+0x96>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f022 0201 	bic.w	r2, r2, #1
 8006000:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d104      	bne.n	8006012 <HAL_TIM_PWM_Stop+0xa6>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006010:	e013      	b.n	800603a <HAL_TIM_PWM_Stop+0xce>
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	2b04      	cmp	r3, #4
 8006016:	d104      	bne.n	8006022 <HAL_TIM_PWM_Stop+0xb6>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006020:	e00b      	b.n	800603a <HAL_TIM_PWM_Stop+0xce>
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	2b08      	cmp	r3, #8
 8006026:	d104      	bne.n	8006032 <HAL_TIM_PWM_Stop+0xc6>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006030:	e003      	b.n	800603a <HAL_TIM_PWM_Stop+0xce>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2201      	movs	r2, #1
 8006036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800603a:	2300      	movs	r3, #0
}
 800603c:	4618      	mov	r0, r3
 800603e:	3708      	adds	r7, #8
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}
 8006044:	40010000 	.word	0x40010000
 8006048:	40010400 	.word	0x40010400

0800604c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006056:	2300      	movs	r3, #0
 8006058:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d109      	bne.n	8006074 <HAL_TIM_PWM_Start_IT+0x28>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006066:	b2db      	uxtb	r3, r3
 8006068:	2b01      	cmp	r3, #1
 800606a:	bf14      	ite	ne
 800606c:	2301      	movne	r3, #1
 800606e:	2300      	moveq	r3, #0
 8006070:	b2db      	uxtb	r3, r3
 8006072:	e022      	b.n	80060ba <HAL_TIM_PWM_Start_IT+0x6e>
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	2b04      	cmp	r3, #4
 8006078:	d109      	bne.n	800608e <HAL_TIM_PWM_Start_IT+0x42>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006080:	b2db      	uxtb	r3, r3
 8006082:	2b01      	cmp	r3, #1
 8006084:	bf14      	ite	ne
 8006086:	2301      	movne	r3, #1
 8006088:	2300      	moveq	r3, #0
 800608a:	b2db      	uxtb	r3, r3
 800608c:	e015      	b.n	80060ba <HAL_TIM_PWM_Start_IT+0x6e>
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	2b08      	cmp	r3, #8
 8006092:	d109      	bne.n	80060a8 <HAL_TIM_PWM_Start_IT+0x5c>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800609a:	b2db      	uxtb	r3, r3
 800609c:	2b01      	cmp	r3, #1
 800609e:	bf14      	ite	ne
 80060a0:	2301      	movne	r3, #1
 80060a2:	2300      	moveq	r3, #0
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	e008      	b.n	80060ba <HAL_TIM_PWM_Start_IT+0x6e>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	bf14      	ite	ne
 80060b4:	2301      	movne	r3, #1
 80060b6:	2300      	moveq	r3, #0
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d001      	beq.n	80060c2 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e0c7      	b.n	8006252 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d104      	bne.n	80060d2 <HAL_TIM_PWM_Start_IT+0x86>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2202      	movs	r2, #2
 80060cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060d0:	e013      	b.n	80060fa <HAL_TIM_PWM_Start_IT+0xae>
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	2b04      	cmp	r3, #4
 80060d6:	d104      	bne.n	80060e2 <HAL_TIM_PWM_Start_IT+0x96>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2202      	movs	r2, #2
 80060dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060e0:	e00b      	b.n	80060fa <HAL_TIM_PWM_Start_IT+0xae>
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	2b08      	cmp	r3, #8
 80060e6:	d104      	bne.n	80060f2 <HAL_TIM_PWM_Start_IT+0xa6>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2202      	movs	r2, #2
 80060ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060f0:	e003      	b.n	80060fa <HAL_TIM_PWM_Start_IT+0xae>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2202      	movs	r2, #2
 80060f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	2b0c      	cmp	r3, #12
 80060fe:	d841      	bhi.n	8006184 <HAL_TIM_PWM_Start_IT+0x138>
 8006100:	a201      	add	r2, pc, #4	; (adr r2, 8006108 <HAL_TIM_PWM_Start_IT+0xbc>)
 8006102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006106:	bf00      	nop
 8006108:	0800613d 	.word	0x0800613d
 800610c:	08006185 	.word	0x08006185
 8006110:	08006185 	.word	0x08006185
 8006114:	08006185 	.word	0x08006185
 8006118:	0800614f 	.word	0x0800614f
 800611c:	08006185 	.word	0x08006185
 8006120:	08006185 	.word	0x08006185
 8006124:	08006185 	.word	0x08006185
 8006128:	08006161 	.word	0x08006161
 800612c:	08006185 	.word	0x08006185
 8006130:	08006185 	.word	0x08006185
 8006134:	08006185 	.word	0x08006185
 8006138:	08006173 	.word	0x08006173
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68da      	ldr	r2, [r3, #12]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f042 0202 	orr.w	r2, r2, #2
 800614a:	60da      	str	r2, [r3, #12]
      break;
 800614c:	e01d      	b.n	800618a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68da      	ldr	r2, [r3, #12]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f042 0204 	orr.w	r2, r2, #4
 800615c:	60da      	str	r2, [r3, #12]
      break;
 800615e:	e014      	b.n	800618a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68da      	ldr	r2, [r3, #12]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f042 0208 	orr.w	r2, r2, #8
 800616e:	60da      	str	r2, [r3, #12]
      break;
 8006170:	e00b      	b.n	800618a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	68da      	ldr	r2, [r3, #12]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f042 0210 	orr.w	r2, r2, #16
 8006180:	60da      	str	r2, [r3, #12]
      break;
 8006182:	e002      	b.n	800618a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	73fb      	strb	r3, [r7, #15]
      break;
 8006188:	bf00      	nop
  }

  if (status == HAL_OK)
 800618a:	7bfb      	ldrb	r3, [r7, #15]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d15f      	bne.n	8006250 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2201      	movs	r2, #1
 8006196:	6839      	ldr	r1, [r7, #0]
 8006198:	4618      	mov	r0, r3
 800619a:	f001 f989 	bl	80074b0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a2e      	ldr	r2, [pc, #184]	; (800625c <HAL_TIM_PWM_Start_IT+0x210>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d004      	beq.n	80061b2 <HAL_TIM_PWM_Start_IT+0x166>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a2c      	ldr	r2, [pc, #176]	; (8006260 <HAL_TIM_PWM_Start_IT+0x214>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d101      	bne.n	80061b6 <HAL_TIM_PWM_Start_IT+0x16a>
 80061b2:	2301      	movs	r3, #1
 80061b4:	e000      	b.n	80061b8 <HAL_TIM_PWM_Start_IT+0x16c>
 80061b6:	2300      	movs	r3, #0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d007      	beq.n	80061cc <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80061ca:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a22      	ldr	r2, [pc, #136]	; (800625c <HAL_TIM_PWM_Start_IT+0x210>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d022      	beq.n	800621c <HAL_TIM_PWM_Start_IT+0x1d0>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061de:	d01d      	beq.n	800621c <HAL_TIM_PWM_Start_IT+0x1d0>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a1f      	ldr	r2, [pc, #124]	; (8006264 <HAL_TIM_PWM_Start_IT+0x218>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d018      	beq.n	800621c <HAL_TIM_PWM_Start_IT+0x1d0>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a1e      	ldr	r2, [pc, #120]	; (8006268 <HAL_TIM_PWM_Start_IT+0x21c>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d013      	beq.n	800621c <HAL_TIM_PWM_Start_IT+0x1d0>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a1c      	ldr	r2, [pc, #112]	; (800626c <HAL_TIM_PWM_Start_IT+0x220>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d00e      	beq.n	800621c <HAL_TIM_PWM_Start_IT+0x1d0>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a17      	ldr	r2, [pc, #92]	; (8006260 <HAL_TIM_PWM_Start_IT+0x214>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d009      	beq.n	800621c <HAL_TIM_PWM_Start_IT+0x1d0>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a18      	ldr	r2, [pc, #96]	; (8006270 <HAL_TIM_PWM_Start_IT+0x224>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d004      	beq.n	800621c <HAL_TIM_PWM_Start_IT+0x1d0>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a17      	ldr	r2, [pc, #92]	; (8006274 <HAL_TIM_PWM_Start_IT+0x228>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d111      	bne.n	8006240 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	f003 0307 	and.w	r3, r3, #7
 8006226:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	2b06      	cmp	r3, #6
 800622c:	d010      	beq.n	8006250 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f042 0201 	orr.w	r2, r2, #1
 800623c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800623e:	e007      	b.n	8006250 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f042 0201 	orr.w	r2, r2, #1
 800624e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006250:	7bfb      	ldrb	r3, [r7, #15]
}
 8006252:	4618      	mov	r0, r3
 8006254:	3710      	adds	r7, #16
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop
 800625c:	40010000 	.word	0x40010000
 8006260:	40010400 	.word	0x40010400
 8006264:	40000400 	.word	0x40000400
 8006268:	40000800 	.word	0x40000800
 800626c:	40000c00 	.word	0x40000c00
 8006270:	40014000 	.word	0x40014000
 8006274:	40001800 	.word	0x40001800

08006278 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d101      	bne.n	800628a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	e041      	b.n	800630e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006290:	b2db      	uxtb	r3, r3
 8006292:	2b00      	cmp	r3, #0
 8006294:	d106      	bne.n	80062a4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f7fb fbca 	bl	8001a38 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2202      	movs	r2, #2
 80062a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	3304      	adds	r3, #4
 80062b4:	4619      	mov	r1, r3
 80062b6:	4610      	mov	r0, r2
 80062b8:	f000 fce6 	bl	8006c88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3708      	adds	r7, #8
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
	...

08006318 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006322:	2300      	movs	r3, #0
 8006324:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d104      	bne.n	8006336 <HAL_TIM_IC_Start_IT+0x1e>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006332:	b2db      	uxtb	r3, r3
 8006334:	e013      	b.n	800635e <HAL_TIM_IC_Start_IT+0x46>
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	2b04      	cmp	r3, #4
 800633a:	d104      	bne.n	8006346 <HAL_TIM_IC_Start_IT+0x2e>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006342:	b2db      	uxtb	r3, r3
 8006344:	e00b      	b.n	800635e <HAL_TIM_IC_Start_IT+0x46>
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	2b08      	cmp	r3, #8
 800634a:	d104      	bne.n	8006356 <HAL_TIM_IC_Start_IT+0x3e>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006352:	b2db      	uxtb	r3, r3
 8006354:	e003      	b.n	800635e <HAL_TIM_IC_Start_IT+0x46>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800635c:	b2db      	uxtb	r3, r3
 800635e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d104      	bne.n	8006370 <HAL_TIM_IC_Start_IT+0x58>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800636c:	b2db      	uxtb	r3, r3
 800636e:	e013      	b.n	8006398 <HAL_TIM_IC_Start_IT+0x80>
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	2b04      	cmp	r3, #4
 8006374:	d104      	bne.n	8006380 <HAL_TIM_IC_Start_IT+0x68>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800637c:	b2db      	uxtb	r3, r3
 800637e:	e00b      	b.n	8006398 <HAL_TIM_IC_Start_IT+0x80>
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	2b08      	cmp	r3, #8
 8006384:	d104      	bne.n	8006390 <HAL_TIM_IC_Start_IT+0x78>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800638c:	b2db      	uxtb	r3, r3
 800638e:	e003      	b.n	8006398 <HAL_TIM_IC_Start_IT+0x80>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006396:	b2db      	uxtb	r3, r3
 8006398:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800639a:	7bbb      	ldrb	r3, [r7, #14]
 800639c:	2b01      	cmp	r3, #1
 800639e:	d102      	bne.n	80063a6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80063a0:	7b7b      	ldrb	r3, [r7, #13]
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d001      	beq.n	80063aa <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	e0cc      	b.n	8006544 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d104      	bne.n	80063ba <HAL_TIM_IC_Start_IT+0xa2>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2202      	movs	r2, #2
 80063b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063b8:	e013      	b.n	80063e2 <HAL_TIM_IC_Start_IT+0xca>
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	2b04      	cmp	r3, #4
 80063be:	d104      	bne.n	80063ca <HAL_TIM_IC_Start_IT+0xb2>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2202      	movs	r2, #2
 80063c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063c8:	e00b      	b.n	80063e2 <HAL_TIM_IC_Start_IT+0xca>
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	2b08      	cmp	r3, #8
 80063ce:	d104      	bne.n	80063da <HAL_TIM_IC_Start_IT+0xc2>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2202      	movs	r2, #2
 80063d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063d8:	e003      	b.n	80063e2 <HAL_TIM_IC_Start_IT+0xca>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2202      	movs	r2, #2
 80063de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d104      	bne.n	80063f2 <HAL_TIM_IC_Start_IT+0xda>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2202      	movs	r2, #2
 80063ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063f0:	e013      	b.n	800641a <HAL_TIM_IC_Start_IT+0x102>
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	2b04      	cmp	r3, #4
 80063f6:	d104      	bne.n	8006402 <HAL_TIM_IC_Start_IT+0xea>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2202      	movs	r2, #2
 80063fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006400:	e00b      	b.n	800641a <HAL_TIM_IC_Start_IT+0x102>
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	2b08      	cmp	r3, #8
 8006406:	d104      	bne.n	8006412 <HAL_TIM_IC_Start_IT+0xfa>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2202      	movs	r2, #2
 800640c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006410:	e003      	b.n	800641a <HAL_TIM_IC_Start_IT+0x102>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2202      	movs	r2, #2
 8006416:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	2b0c      	cmp	r3, #12
 800641e:	d841      	bhi.n	80064a4 <HAL_TIM_IC_Start_IT+0x18c>
 8006420:	a201      	add	r2, pc, #4	; (adr r2, 8006428 <HAL_TIM_IC_Start_IT+0x110>)
 8006422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006426:	bf00      	nop
 8006428:	0800645d 	.word	0x0800645d
 800642c:	080064a5 	.word	0x080064a5
 8006430:	080064a5 	.word	0x080064a5
 8006434:	080064a5 	.word	0x080064a5
 8006438:	0800646f 	.word	0x0800646f
 800643c:	080064a5 	.word	0x080064a5
 8006440:	080064a5 	.word	0x080064a5
 8006444:	080064a5 	.word	0x080064a5
 8006448:	08006481 	.word	0x08006481
 800644c:	080064a5 	.word	0x080064a5
 8006450:	080064a5 	.word	0x080064a5
 8006454:	080064a5 	.word	0x080064a5
 8006458:	08006493 	.word	0x08006493
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	68da      	ldr	r2, [r3, #12]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f042 0202 	orr.w	r2, r2, #2
 800646a:	60da      	str	r2, [r3, #12]
      break;
 800646c:	e01d      	b.n	80064aa <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68da      	ldr	r2, [r3, #12]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f042 0204 	orr.w	r2, r2, #4
 800647c:	60da      	str	r2, [r3, #12]
      break;
 800647e:	e014      	b.n	80064aa <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	68da      	ldr	r2, [r3, #12]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f042 0208 	orr.w	r2, r2, #8
 800648e:	60da      	str	r2, [r3, #12]
      break;
 8006490:	e00b      	b.n	80064aa <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	68da      	ldr	r2, [r3, #12]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f042 0210 	orr.w	r2, r2, #16
 80064a0:	60da      	str	r2, [r3, #12]
      break;
 80064a2:	e002      	b.n	80064aa <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	73fb      	strb	r3, [r7, #15]
      break;
 80064a8:	bf00      	nop
  }

  if (status == HAL_OK)
 80064aa:	7bfb      	ldrb	r3, [r7, #15]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d148      	bne.n	8006542 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2201      	movs	r2, #1
 80064b6:	6839      	ldr	r1, [r7, #0]
 80064b8:	4618      	mov	r0, r3
 80064ba:	f000 fff9 	bl	80074b0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a22      	ldr	r2, [pc, #136]	; (800654c <HAL_TIM_IC_Start_IT+0x234>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d022      	beq.n	800650e <HAL_TIM_IC_Start_IT+0x1f6>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064d0:	d01d      	beq.n	800650e <HAL_TIM_IC_Start_IT+0x1f6>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a1e      	ldr	r2, [pc, #120]	; (8006550 <HAL_TIM_IC_Start_IT+0x238>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d018      	beq.n	800650e <HAL_TIM_IC_Start_IT+0x1f6>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a1c      	ldr	r2, [pc, #112]	; (8006554 <HAL_TIM_IC_Start_IT+0x23c>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d013      	beq.n	800650e <HAL_TIM_IC_Start_IT+0x1f6>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a1b      	ldr	r2, [pc, #108]	; (8006558 <HAL_TIM_IC_Start_IT+0x240>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d00e      	beq.n	800650e <HAL_TIM_IC_Start_IT+0x1f6>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a19      	ldr	r2, [pc, #100]	; (800655c <HAL_TIM_IC_Start_IT+0x244>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d009      	beq.n	800650e <HAL_TIM_IC_Start_IT+0x1f6>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a18      	ldr	r2, [pc, #96]	; (8006560 <HAL_TIM_IC_Start_IT+0x248>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d004      	beq.n	800650e <HAL_TIM_IC_Start_IT+0x1f6>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a16      	ldr	r2, [pc, #88]	; (8006564 <HAL_TIM_IC_Start_IT+0x24c>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d111      	bne.n	8006532 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	f003 0307 	and.w	r3, r3, #7
 8006518:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	2b06      	cmp	r3, #6
 800651e:	d010      	beq.n	8006542 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f042 0201 	orr.w	r2, r2, #1
 800652e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006530:	e007      	b.n	8006542 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f042 0201 	orr.w	r2, r2, #1
 8006540:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006542:	7bfb      	ldrb	r3, [r7, #15]
}
 8006544:	4618      	mov	r0, r3
 8006546:	3710      	adds	r7, #16
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}
 800654c:	40010000 	.word	0x40010000
 8006550:	40000400 	.word	0x40000400
 8006554:	40000800 	.word	0x40000800
 8006558:	40000c00 	.word	0x40000c00
 800655c:	40010400 	.word	0x40010400
 8006560:	40014000 	.word	0x40014000
 8006564:	40001800 	.word	0x40001800

08006568 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b082      	sub	sp, #8
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	f003 0302 	and.w	r3, r3, #2
 800657a:	2b02      	cmp	r3, #2
 800657c:	d122      	bne.n	80065c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	f003 0302 	and.w	r3, r3, #2
 8006588:	2b02      	cmp	r3, #2
 800658a:	d11b      	bne.n	80065c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f06f 0202 	mvn.w	r2, #2
 8006594:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2201      	movs	r2, #1
 800659a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	699b      	ldr	r3, [r3, #24]
 80065a2:	f003 0303 	and.w	r3, r3, #3
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d003      	beq.n	80065b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f7fb fdfc 	bl	80021a8 <HAL_TIM_IC_CaptureCallback>
 80065b0:	e005      	b.n	80065be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 fb4a 	bl	8006c4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 fb51 	bl	8006c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	f003 0304 	and.w	r3, r3, #4
 80065ce:	2b04      	cmp	r3, #4
 80065d0:	d122      	bne.n	8006618 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	f003 0304 	and.w	r3, r3, #4
 80065dc:	2b04      	cmp	r3, #4
 80065de:	d11b      	bne.n	8006618 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f06f 0204 	mvn.w	r2, #4
 80065e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2202      	movs	r2, #2
 80065ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	699b      	ldr	r3, [r3, #24]
 80065f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d003      	beq.n	8006606 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f7fb fdd2 	bl	80021a8 <HAL_TIM_IC_CaptureCallback>
 8006604:	e005      	b.n	8006612 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 fb20 	bl	8006c4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 fb27 	bl	8006c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	f003 0308 	and.w	r3, r3, #8
 8006622:	2b08      	cmp	r3, #8
 8006624:	d122      	bne.n	800666c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	f003 0308 	and.w	r3, r3, #8
 8006630:	2b08      	cmp	r3, #8
 8006632:	d11b      	bne.n	800666c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f06f 0208 	mvn.w	r2, #8
 800663c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2204      	movs	r2, #4
 8006642:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	69db      	ldr	r3, [r3, #28]
 800664a:	f003 0303 	and.w	r3, r3, #3
 800664e:	2b00      	cmp	r3, #0
 8006650:	d003      	beq.n	800665a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f7fb fda8 	bl	80021a8 <HAL_TIM_IC_CaptureCallback>
 8006658:	e005      	b.n	8006666 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 faf6 	bl	8006c4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f000 fafd 	bl	8006c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	f003 0310 	and.w	r3, r3, #16
 8006676:	2b10      	cmp	r3, #16
 8006678:	d122      	bne.n	80066c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	f003 0310 	and.w	r3, r3, #16
 8006684:	2b10      	cmp	r3, #16
 8006686:	d11b      	bne.n	80066c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f06f 0210 	mvn.w	r2, #16
 8006690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2208      	movs	r2, #8
 8006696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	69db      	ldr	r3, [r3, #28]
 800669e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d003      	beq.n	80066ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f7fb fd7e 	bl	80021a8 <HAL_TIM_IC_CaptureCallback>
 80066ac:	e005      	b.n	80066ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 facc 	bl	8006c4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 fad3 	bl	8006c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	f003 0301 	and.w	r3, r3, #1
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d10e      	bne.n	80066ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	f003 0301 	and.w	r3, r3, #1
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d107      	bne.n	80066ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f06f 0201 	mvn.w	r2, #1
 80066e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f7fb fd06 	bl	80020f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066f6:	2b80      	cmp	r3, #128	; 0x80
 80066f8:	d10e      	bne.n	8006718 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006704:	2b80      	cmp	r3, #128	; 0x80
 8006706:	d107      	bne.n	8006718 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 ff78 	bl	8007608 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	691b      	ldr	r3, [r3, #16]
 800671e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006722:	2b40      	cmp	r3, #64	; 0x40
 8006724:	d10e      	bne.n	8006744 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006730:	2b40      	cmp	r3, #64	; 0x40
 8006732:	d107      	bne.n	8006744 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800673c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 fa98 	bl	8006c74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	f003 0320 	and.w	r3, r3, #32
 800674e:	2b20      	cmp	r3, #32
 8006750:	d10e      	bne.n	8006770 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	f003 0320 	and.w	r3, r3, #32
 800675c:	2b20      	cmp	r3, #32
 800675e:	d107      	bne.n	8006770 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f06f 0220 	mvn.w	r2, #32
 8006768:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 ff42 	bl	80075f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006770:	bf00      	nop
 8006772:	3708      	adds	r7, #8
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b086      	sub	sp, #24
 800677c:	af00      	add	r7, sp, #0
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006784:	2300      	movs	r3, #0
 8006786:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800678e:	2b01      	cmp	r3, #1
 8006790:	d101      	bne.n	8006796 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006792:	2302      	movs	r3, #2
 8006794:	e088      	b.n	80068a8 <HAL_TIM_IC_ConfigChannel+0x130>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2201      	movs	r2, #1
 800679a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d11b      	bne.n	80067dc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6818      	ldr	r0, [r3, #0]
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	6819      	ldr	r1, [r3, #0]
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	685a      	ldr	r2, [r3, #4]
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	f000 fcb8 	bl	8007128 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	699a      	ldr	r2, [r3, #24]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f022 020c 	bic.w	r2, r2, #12
 80067c6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	6999      	ldr	r1, [r3, #24]
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	689a      	ldr	r2, [r3, #8]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	430a      	orrs	r2, r1
 80067d8:	619a      	str	r2, [r3, #24]
 80067da:	e060      	b.n	800689e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2b04      	cmp	r3, #4
 80067e0:	d11c      	bne.n	800681c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6818      	ldr	r0, [r3, #0]
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	6819      	ldr	r1, [r3, #0]
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	685a      	ldr	r2, [r3, #4]
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	f000 fd3c 	bl	800726e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	699a      	ldr	r2, [r3, #24]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006804:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	6999      	ldr	r1, [r3, #24]
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	021a      	lsls	r2, r3, #8
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	430a      	orrs	r2, r1
 8006818:	619a      	str	r2, [r3, #24]
 800681a:	e040      	b.n	800689e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2b08      	cmp	r3, #8
 8006820:	d11b      	bne.n	800685a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	6818      	ldr	r0, [r3, #0]
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	6819      	ldr	r1, [r3, #0]
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	685a      	ldr	r2, [r3, #4]
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	f000 fd89 	bl	8007348 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	69da      	ldr	r2, [r3, #28]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f022 020c 	bic.w	r2, r2, #12
 8006844:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	69d9      	ldr	r1, [r3, #28]
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	689a      	ldr	r2, [r3, #8]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	430a      	orrs	r2, r1
 8006856:	61da      	str	r2, [r3, #28]
 8006858:	e021      	b.n	800689e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2b0c      	cmp	r3, #12
 800685e:	d11c      	bne.n	800689a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6818      	ldr	r0, [r3, #0]
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	6819      	ldr	r1, [r3, #0]
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	685a      	ldr	r2, [r3, #4]
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	f000 fda6 	bl	80073c0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	69da      	ldr	r2, [r3, #28]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006882:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	69d9      	ldr	r1, [r3, #28]
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	021a      	lsls	r2, r3, #8
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	430a      	orrs	r2, r1
 8006896:	61da      	str	r2, [r3, #28]
 8006898:	e001      	b.n	800689e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80068a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3718      	adds	r7, #24
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b086      	sub	sp, #24
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068bc:	2300      	movs	r3, #0
 80068be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d101      	bne.n	80068ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80068ca:	2302      	movs	r3, #2
 80068cc:	e0ae      	b.n	8006a2c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2201      	movs	r2, #1
 80068d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2b0c      	cmp	r3, #12
 80068da:	f200 809f 	bhi.w	8006a1c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80068de:	a201      	add	r2, pc, #4	; (adr r2, 80068e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80068e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e4:	08006919 	.word	0x08006919
 80068e8:	08006a1d 	.word	0x08006a1d
 80068ec:	08006a1d 	.word	0x08006a1d
 80068f0:	08006a1d 	.word	0x08006a1d
 80068f4:	08006959 	.word	0x08006959
 80068f8:	08006a1d 	.word	0x08006a1d
 80068fc:	08006a1d 	.word	0x08006a1d
 8006900:	08006a1d 	.word	0x08006a1d
 8006904:	0800699b 	.word	0x0800699b
 8006908:	08006a1d 	.word	0x08006a1d
 800690c:	08006a1d 	.word	0x08006a1d
 8006910:	08006a1d 	.word	0x08006a1d
 8006914:	080069db 	.word	0x080069db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68b9      	ldr	r1, [r7, #8]
 800691e:	4618      	mov	r0, r3
 8006920:	f000 fa52 	bl	8006dc8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	699a      	ldr	r2, [r3, #24]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f042 0208 	orr.w	r2, r2, #8
 8006932:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	699a      	ldr	r2, [r3, #24]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f022 0204 	bic.w	r2, r2, #4
 8006942:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	6999      	ldr	r1, [r3, #24]
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	691a      	ldr	r2, [r3, #16]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	430a      	orrs	r2, r1
 8006954:	619a      	str	r2, [r3, #24]
      break;
 8006956:	e064      	b.n	8006a22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	68b9      	ldr	r1, [r7, #8]
 800695e:	4618      	mov	r0, r3
 8006960:	f000 faa2 	bl	8006ea8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	699a      	ldr	r2, [r3, #24]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006972:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	699a      	ldr	r2, [r3, #24]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006982:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	6999      	ldr	r1, [r3, #24]
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	021a      	lsls	r2, r3, #8
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	430a      	orrs	r2, r1
 8006996:	619a      	str	r2, [r3, #24]
      break;
 8006998:	e043      	b.n	8006a22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	68b9      	ldr	r1, [r7, #8]
 80069a0:	4618      	mov	r0, r3
 80069a2:	f000 faf7 	bl	8006f94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	69da      	ldr	r2, [r3, #28]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f042 0208 	orr.w	r2, r2, #8
 80069b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	69da      	ldr	r2, [r3, #28]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f022 0204 	bic.w	r2, r2, #4
 80069c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	69d9      	ldr	r1, [r3, #28]
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	691a      	ldr	r2, [r3, #16]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	430a      	orrs	r2, r1
 80069d6:	61da      	str	r2, [r3, #28]
      break;
 80069d8:	e023      	b.n	8006a22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	68b9      	ldr	r1, [r7, #8]
 80069e0:	4618      	mov	r0, r3
 80069e2:	f000 fb4b 	bl	800707c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	69da      	ldr	r2, [r3, #28]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	69da      	ldr	r2, [r3, #28]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	69d9      	ldr	r1, [r3, #28]
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	691b      	ldr	r3, [r3, #16]
 8006a10:	021a      	lsls	r2, r3, #8
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	430a      	orrs	r2, r1
 8006a18:	61da      	str	r2, [r3, #28]
      break;
 8006a1a:	e002      	b.n	8006a22 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	75fb      	strb	r3, [r7, #23]
      break;
 8006a20:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2200      	movs	r2, #0
 8006a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3718      	adds	r7, #24
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d101      	bne.n	8006a50 <HAL_TIM_ConfigClockSource+0x1c>
 8006a4c:	2302      	movs	r3, #2
 8006a4e:	e0b4      	b.n	8006bba <HAL_TIM_ConfigClockSource+0x186>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2202      	movs	r2, #2
 8006a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006a6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	68ba      	ldr	r2, [r7, #8]
 8006a7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a88:	d03e      	beq.n	8006b08 <HAL_TIM_ConfigClockSource+0xd4>
 8006a8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a8e:	f200 8087 	bhi.w	8006ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8006a92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a96:	f000 8086 	beq.w	8006ba6 <HAL_TIM_ConfigClockSource+0x172>
 8006a9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a9e:	d87f      	bhi.n	8006ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8006aa0:	2b70      	cmp	r3, #112	; 0x70
 8006aa2:	d01a      	beq.n	8006ada <HAL_TIM_ConfigClockSource+0xa6>
 8006aa4:	2b70      	cmp	r3, #112	; 0x70
 8006aa6:	d87b      	bhi.n	8006ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8006aa8:	2b60      	cmp	r3, #96	; 0x60
 8006aaa:	d050      	beq.n	8006b4e <HAL_TIM_ConfigClockSource+0x11a>
 8006aac:	2b60      	cmp	r3, #96	; 0x60
 8006aae:	d877      	bhi.n	8006ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ab0:	2b50      	cmp	r3, #80	; 0x50
 8006ab2:	d03c      	beq.n	8006b2e <HAL_TIM_ConfigClockSource+0xfa>
 8006ab4:	2b50      	cmp	r3, #80	; 0x50
 8006ab6:	d873      	bhi.n	8006ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ab8:	2b40      	cmp	r3, #64	; 0x40
 8006aba:	d058      	beq.n	8006b6e <HAL_TIM_ConfigClockSource+0x13a>
 8006abc:	2b40      	cmp	r3, #64	; 0x40
 8006abe:	d86f      	bhi.n	8006ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ac0:	2b30      	cmp	r3, #48	; 0x30
 8006ac2:	d064      	beq.n	8006b8e <HAL_TIM_ConfigClockSource+0x15a>
 8006ac4:	2b30      	cmp	r3, #48	; 0x30
 8006ac6:	d86b      	bhi.n	8006ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ac8:	2b20      	cmp	r3, #32
 8006aca:	d060      	beq.n	8006b8e <HAL_TIM_ConfigClockSource+0x15a>
 8006acc:	2b20      	cmp	r3, #32
 8006ace:	d867      	bhi.n	8006ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d05c      	beq.n	8006b8e <HAL_TIM_ConfigClockSource+0x15a>
 8006ad4:	2b10      	cmp	r3, #16
 8006ad6:	d05a      	beq.n	8006b8e <HAL_TIM_ConfigClockSource+0x15a>
 8006ad8:	e062      	b.n	8006ba0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6818      	ldr	r0, [r3, #0]
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	6899      	ldr	r1, [r3, #8]
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	685a      	ldr	r2, [r3, #4]
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	f000 fcc1 	bl	8007470 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006afc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	68ba      	ldr	r2, [r7, #8]
 8006b04:	609a      	str	r2, [r3, #8]
      break;
 8006b06:	e04f      	b.n	8006ba8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6818      	ldr	r0, [r3, #0]
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	6899      	ldr	r1, [r3, #8]
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	685a      	ldr	r2, [r3, #4]
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	f000 fcaa 	bl	8007470 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	689a      	ldr	r2, [r3, #8]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b2a:	609a      	str	r2, [r3, #8]
      break;
 8006b2c:	e03c      	b.n	8006ba8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6818      	ldr	r0, [r3, #0]
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	6859      	ldr	r1, [r3, #4]
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	68db      	ldr	r3, [r3, #12]
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	f000 fb68 	bl	8007210 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	2150      	movs	r1, #80	; 0x50
 8006b46:	4618      	mov	r0, r3
 8006b48:	f000 fc77 	bl	800743a <TIM_ITRx_SetConfig>
      break;
 8006b4c:	e02c      	b.n	8006ba8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6818      	ldr	r0, [r3, #0]
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	6859      	ldr	r1, [r3, #4]
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	f000 fbc4 	bl	80072e8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	2160      	movs	r1, #96	; 0x60
 8006b66:	4618      	mov	r0, r3
 8006b68:	f000 fc67 	bl	800743a <TIM_ITRx_SetConfig>
      break;
 8006b6c:	e01c      	b.n	8006ba8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6818      	ldr	r0, [r3, #0]
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	6859      	ldr	r1, [r3, #4]
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	f000 fb48 	bl	8007210 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	2140      	movs	r1, #64	; 0x40
 8006b86:	4618      	mov	r0, r3
 8006b88:	f000 fc57 	bl	800743a <TIM_ITRx_SetConfig>
      break;
 8006b8c:	e00c      	b.n	8006ba8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4619      	mov	r1, r3
 8006b98:	4610      	mov	r0, r2
 8006b9a:	f000 fc4e 	bl	800743a <TIM_ITRx_SetConfig>
      break;
 8006b9e:	e003      	b.n	8006ba8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	73fb      	strb	r3, [r7, #15]
      break;
 8006ba4:	e000      	b.n	8006ba8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006ba6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2201      	movs	r2, #1
 8006bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3710      	adds	r7, #16
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
	...

08006bc4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b085      	sub	sp, #20
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	2b0c      	cmp	r3, #12
 8006bd6:	d831      	bhi.n	8006c3c <HAL_TIM_ReadCapturedValue+0x78>
 8006bd8:	a201      	add	r2, pc, #4	; (adr r2, 8006be0 <HAL_TIM_ReadCapturedValue+0x1c>)
 8006bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bde:	bf00      	nop
 8006be0:	08006c15 	.word	0x08006c15
 8006be4:	08006c3d 	.word	0x08006c3d
 8006be8:	08006c3d 	.word	0x08006c3d
 8006bec:	08006c3d 	.word	0x08006c3d
 8006bf0:	08006c1f 	.word	0x08006c1f
 8006bf4:	08006c3d 	.word	0x08006c3d
 8006bf8:	08006c3d 	.word	0x08006c3d
 8006bfc:	08006c3d 	.word	0x08006c3d
 8006c00:	08006c29 	.word	0x08006c29
 8006c04:	08006c3d 	.word	0x08006c3d
 8006c08:	08006c3d 	.word	0x08006c3d
 8006c0c:	08006c3d 	.word	0x08006c3d
 8006c10:	08006c33 	.word	0x08006c33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c1a:	60fb      	str	r3, [r7, #12]

      break;
 8006c1c:	e00f      	b.n	8006c3e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c24:	60fb      	str	r3, [r7, #12]

      break;
 8006c26:	e00a      	b.n	8006c3e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c2e:	60fb      	str	r3, [r7, #12]

      break;
 8006c30:	e005      	b.n	8006c3e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c38:	60fb      	str	r3, [r7, #12]

      break;
 8006c3a:	e000      	b.n	8006c3e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006c3c:	bf00      	nop
  }

  return tmpreg;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3714      	adds	r7, #20
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c54:	bf00      	nop
 8006c56:	370c      	adds	r7, #12
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b083      	sub	sp, #12
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c68:	bf00      	nop
 8006c6a:	370c      	adds	r7, #12
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c7c:	bf00      	nop
 8006c7e:	370c      	adds	r7, #12
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b085      	sub	sp, #20
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a40      	ldr	r2, [pc, #256]	; (8006d9c <TIM_Base_SetConfig+0x114>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d013      	beq.n	8006cc8 <TIM_Base_SetConfig+0x40>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ca6:	d00f      	beq.n	8006cc8 <TIM_Base_SetConfig+0x40>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4a3d      	ldr	r2, [pc, #244]	; (8006da0 <TIM_Base_SetConfig+0x118>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d00b      	beq.n	8006cc8 <TIM_Base_SetConfig+0x40>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a3c      	ldr	r2, [pc, #240]	; (8006da4 <TIM_Base_SetConfig+0x11c>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d007      	beq.n	8006cc8 <TIM_Base_SetConfig+0x40>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4a3b      	ldr	r2, [pc, #236]	; (8006da8 <TIM_Base_SetConfig+0x120>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d003      	beq.n	8006cc8 <TIM_Base_SetConfig+0x40>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4a3a      	ldr	r2, [pc, #232]	; (8006dac <TIM_Base_SetConfig+0x124>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d108      	bne.n	8006cda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4a2f      	ldr	r2, [pc, #188]	; (8006d9c <TIM_Base_SetConfig+0x114>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d02b      	beq.n	8006d3a <TIM_Base_SetConfig+0xb2>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ce8:	d027      	beq.n	8006d3a <TIM_Base_SetConfig+0xb2>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a2c      	ldr	r2, [pc, #176]	; (8006da0 <TIM_Base_SetConfig+0x118>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d023      	beq.n	8006d3a <TIM_Base_SetConfig+0xb2>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a2b      	ldr	r2, [pc, #172]	; (8006da4 <TIM_Base_SetConfig+0x11c>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d01f      	beq.n	8006d3a <TIM_Base_SetConfig+0xb2>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a2a      	ldr	r2, [pc, #168]	; (8006da8 <TIM_Base_SetConfig+0x120>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d01b      	beq.n	8006d3a <TIM_Base_SetConfig+0xb2>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a29      	ldr	r2, [pc, #164]	; (8006dac <TIM_Base_SetConfig+0x124>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d017      	beq.n	8006d3a <TIM_Base_SetConfig+0xb2>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a28      	ldr	r2, [pc, #160]	; (8006db0 <TIM_Base_SetConfig+0x128>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d013      	beq.n	8006d3a <TIM_Base_SetConfig+0xb2>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a27      	ldr	r2, [pc, #156]	; (8006db4 <TIM_Base_SetConfig+0x12c>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d00f      	beq.n	8006d3a <TIM_Base_SetConfig+0xb2>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a26      	ldr	r2, [pc, #152]	; (8006db8 <TIM_Base_SetConfig+0x130>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d00b      	beq.n	8006d3a <TIM_Base_SetConfig+0xb2>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4a25      	ldr	r2, [pc, #148]	; (8006dbc <TIM_Base_SetConfig+0x134>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d007      	beq.n	8006d3a <TIM_Base_SetConfig+0xb2>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4a24      	ldr	r2, [pc, #144]	; (8006dc0 <TIM_Base_SetConfig+0x138>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d003      	beq.n	8006d3a <TIM_Base_SetConfig+0xb2>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4a23      	ldr	r2, [pc, #140]	; (8006dc4 <TIM_Base_SetConfig+0x13c>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d108      	bne.n	8006d4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	68db      	ldr	r3, [r3, #12]
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	695b      	ldr	r3, [r3, #20]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	68fa      	ldr	r2, [r7, #12]
 8006d5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	689a      	ldr	r2, [r3, #8]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a0a      	ldr	r2, [pc, #40]	; (8006d9c <TIM_Base_SetConfig+0x114>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d003      	beq.n	8006d80 <TIM_Base_SetConfig+0xf8>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4a0c      	ldr	r2, [pc, #48]	; (8006dac <TIM_Base_SetConfig+0x124>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d103      	bne.n	8006d88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	691a      	ldr	r2, [r3, #16]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	615a      	str	r2, [r3, #20]
}
 8006d8e:	bf00      	nop
 8006d90:	3714      	adds	r7, #20
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop
 8006d9c:	40010000 	.word	0x40010000
 8006da0:	40000400 	.word	0x40000400
 8006da4:	40000800 	.word	0x40000800
 8006da8:	40000c00 	.word	0x40000c00
 8006dac:	40010400 	.word	0x40010400
 8006db0:	40014000 	.word	0x40014000
 8006db4:	40014400 	.word	0x40014400
 8006db8:	40014800 	.word	0x40014800
 8006dbc:	40001800 	.word	0x40001800
 8006dc0:	40001c00 	.word	0x40001c00
 8006dc4:	40002000 	.word	0x40002000

08006dc8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b087      	sub	sp, #28
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a1b      	ldr	r3, [r3, #32]
 8006dd6:	f023 0201 	bic.w	r2, r3, #1
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6a1b      	ldr	r3, [r3, #32]
 8006de2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	699b      	ldr	r3, [r3, #24]
 8006dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006df6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f023 0303 	bic.w	r3, r3, #3
 8006dfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	68fa      	ldr	r2, [r7, #12]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	f023 0302 	bic.w	r3, r3, #2
 8006e10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	697a      	ldr	r2, [r7, #20]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	4a20      	ldr	r2, [pc, #128]	; (8006ea0 <TIM_OC1_SetConfig+0xd8>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d003      	beq.n	8006e2c <TIM_OC1_SetConfig+0x64>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	4a1f      	ldr	r2, [pc, #124]	; (8006ea4 <TIM_OC1_SetConfig+0xdc>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d10c      	bne.n	8006e46 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	f023 0308 	bic.w	r3, r3, #8
 8006e32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	68db      	ldr	r3, [r3, #12]
 8006e38:	697a      	ldr	r2, [r7, #20]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	f023 0304 	bic.w	r3, r3, #4
 8006e44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	4a15      	ldr	r2, [pc, #84]	; (8006ea0 <TIM_OC1_SetConfig+0xd8>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d003      	beq.n	8006e56 <TIM_OC1_SetConfig+0x8e>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	4a14      	ldr	r2, [pc, #80]	; (8006ea4 <TIM_OC1_SetConfig+0xdc>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d111      	bne.n	8006e7a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	695b      	ldr	r3, [r3, #20]
 8006e6a:	693a      	ldr	r2, [r7, #16]
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	699b      	ldr	r3, [r3, #24]
 8006e74:	693a      	ldr	r2, [r7, #16]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	693a      	ldr	r2, [r7, #16]
 8006e7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	68fa      	ldr	r2, [r7, #12]
 8006e84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	685a      	ldr	r2, [r3, #4]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	697a      	ldr	r2, [r7, #20]
 8006e92:	621a      	str	r2, [r3, #32]
}
 8006e94:	bf00      	nop
 8006e96:	371c      	adds	r7, #28
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr
 8006ea0:	40010000 	.word	0x40010000
 8006ea4:	40010400 	.word	0x40010400

08006ea8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b087      	sub	sp, #28
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a1b      	ldr	r3, [r3, #32]
 8006eb6:	f023 0210 	bic.w	r2, r3, #16
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a1b      	ldr	r3, [r3, #32]
 8006ec2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	699b      	ldr	r3, [r3, #24]
 8006ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ede:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	021b      	lsls	r3, r3, #8
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	f023 0320 	bic.w	r3, r3, #32
 8006ef2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	011b      	lsls	r3, r3, #4
 8006efa:	697a      	ldr	r2, [r7, #20]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	4a22      	ldr	r2, [pc, #136]	; (8006f8c <TIM_OC2_SetConfig+0xe4>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d003      	beq.n	8006f10 <TIM_OC2_SetConfig+0x68>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	4a21      	ldr	r2, [pc, #132]	; (8006f90 <TIM_OC2_SetConfig+0xe8>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d10d      	bne.n	8006f2c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	011b      	lsls	r3, r3, #4
 8006f1e:	697a      	ldr	r2, [r7, #20]
 8006f20:	4313      	orrs	r3, r2
 8006f22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	4a17      	ldr	r2, [pc, #92]	; (8006f8c <TIM_OC2_SetConfig+0xe4>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d003      	beq.n	8006f3c <TIM_OC2_SetConfig+0x94>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4a16      	ldr	r2, [pc, #88]	; (8006f90 <TIM_OC2_SetConfig+0xe8>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d113      	bne.n	8006f64 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	695b      	ldr	r3, [r3, #20]
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	693a      	ldr	r2, [r7, #16]
 8006f54:	4313      	orrs	r3, r2
 8006f56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	699b      	ldr	r3, [r3, #24]
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	693a      	ldr	r2, [r7, #16]
 8006f60:	4313      	orrs	r3, r2
 8006f62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	693a      	ldr	r2, [r7, #16]
 8006f68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	68fa      	ldr	r2, [r7, #12]
 8006f6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	685a      	ldr	r2, [r3, #4]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	697a      	ldr	r2, [r7, #20]
 8006f7c:	621a      	str	r2, [r3, #32]
}
 8006f7e:	bf00      	nop
 8006f80:	371c      	adds	r7, #28
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr
 8006f8a:	bf00      	nop
 8006f8c:	40010000 	.word	0x40010000
 8006f90:	40010400 	.word	0x40010400

08006f94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b087      	sub	sp, #28
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6a1b      	ldr	r3, [r3, #32]
 8006fa2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6a1b      	ldr	r3, [r3, #32]
 8006fae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	69db      	ldr	r3, [r3, #28]
 8006fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f023 0303 	bic.w	r3, r3, #3
 8006fca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	68fa      	ldr	r2, [r7, #12]
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006fdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	021b      	lsls	r3, r3, #8
 8006fe4:	697a      	ldr	r2, [r7, #20]
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a21      	ldr	r2, [pc, #132]	; (8007074 <TIM_OC3_SetConfig+0xe0>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d003      	beq.n	8006ffa <TIM_OC3_SetConfig+0x66>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a20      	ldr	r2, [pc, #128]	; (8007078 <TIM_OC3_SetConfig+0xe4>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d10d      	bne.n	8007016 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007000:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	68db      	ldr	r3, [r3, #12]
 8007006:	021b      	lsls	r3, r3, #8
 8007008:	697a      	ldr	r2, [r7, #20]
 800700a:	4313      	orrs	r3, r2
 800700c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007014:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	4a16      	ldr	r2, [pc, #88]	; (8007074 <TIM_OC3_SetConfig+0xe0>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d003      	beq.n	8007026 <TIM_OC3_SetConfig+0x92>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	4a15      	ldr	r2, [pc, #84]	; (8007078 <TIM_OC3_SetConfig+0xe4>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d113      	bne.n	800704e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800702c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007034:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	695b      	ldr	r3, [r3, #20]
 800703a:	011b      	lsls	r3, r3, #4
 800703c:	693a      	ldr	r2, [r7, #16]
 800703e:	4313      	orrs	r3, r2
 8007040:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	699b      	ldr	r3, [r3, #24]
 8007046:	011b      	lsls	r3, r3, #4
 8007048:	693a      	ldr	r2, [r7, #16]
 800704a:	4313      	orrs	r3, r2
 800704c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	693a      	ldr	r2, [r7, #16]
 8007052:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	68fa      	ldr	r2, [r7, #12]
 8007058:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	685a      	ldr	r2, [r3, #4]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	697a      	ldr	r2, [r7, #20]
 8007066:	621a      	str	r2, [r3, #32]
}
 8007068:	bf00      	nop
 800706a:	371c      	adds	r7, #28
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr
 8007074:	40010000 	.word	0x40010000
 8007078:	40010400 	.word	0x40010400

0800707c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800707c:	b480      	push	{r7}
 800707e:	b087      	sub	sp, #28
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6a1b      	ldr	r3, [r3, #32]
 800708a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6a1b      	ldr	r3, [r3, #32]
 8007096:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	69db      	ldr	r3, [r3, #28]
 80070a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	021b      	lsls	r3, r3, #8
 80070ba:	68fa      	ldr	r2, [r7, #12]
 80070bc:	4313      	orrs	r3, r2
 80070be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	031b      	lsls	r3, r3, #12
 80070ce:	693a      	ldr	r2, [r7, #16]
 80070d0:	4313      	orrs	r3, r2
 80070d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	4a12      	ldr	r2, [pc, #72]	; (8007120 <TIM_OC4_SetConfig+0xa4>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d003      	beq.n	80070e4 <TIM_OC4_SetConfig+0x68>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	4a11      	ldr	r2, [pc, #68]	; (8007124 <TIM_OC4_SetConfig+0xa8>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d109      	bne.n	80070f8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	695b      	ldr	r3, [r3, #20]
 80070f0:	019b      	lsls	r3, r3, #6
 80070f2:	697a      	ldr	r2, [r7, #20]
 80070f4:	4313      	orrs	r3, r2
 80070f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	697a      	ldr	r2, [r7, #20]
 80070fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	68fa      	ldr	r2, [r7, #12]
 8007102:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	685a      	ldr	r2, [r3, #4]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	693a      	ldr	r2, [r7, #16]
 8007110:	621a      	str	r2, [r3, #32]
}
 8007112:	bf00      	nop
 8007114:	371c      	adds	r7, #28
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr
 800711e:	bf00      	nop
 8007120:	40010000 	.word	0x40010000
 8007124:	40010400 	.word	0x40010400

08007128 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007128:	b480      	push	{r7}
 800712a:	b087      	sub	sp, #28
 800712c:	af00      	add	r7, sp, #0
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	60b9      	str	r1, [r7, #8]
 8007132:	607a      	str	r2, [r7, #4]
 8007134:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	6a1b      	ldr	r3, [r3, #32]
 800713a:	f023 0201 	bic.w	r2, r3, #1
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	699b      	ldr	r3, [r3, #24]
 8007146:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6a1b      	ldr	r3, [r3, #32]
 800714c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	4a28      	ldr	r2, [pc, #160]	; (80071f4 <TIM_TI1_SetConfig+0xcc>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d01b      	beq.n	800718e <TIM_TI1_SetConfig+0x66>
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800715c:	d017      	beq.n	800718e <TIM_TI1_SetConfig+0x66>
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	4a25      	ldr	r2, [pc, #148]	; (80071f8 <TIM_TI1_SetConfig+0xd0>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d013      	beq.n	800718e <TIM_TI1_SetConfig+0x66>
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	4a24      	ldr	r2, [pc, #144]	; (80071fc <TIM_TI1_SetConfig+0xd4>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d00f      	beq.n	800718e <TIM_TI1_SetConfig+0x66>
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	4a23      	ldr	r2, [pc, #140]	; (8007200 <TIM_TI1_SetConfig+0xd8>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d00b      	beq.n	800718e <TIM_TI1_SetConfig+0x66>
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	4a22      	ldr	r2, [pc, #136]	; (8007204 <TIM_TI1_SetConfig+0xdc>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d007      	beq.n	800718e <TIM_TI1_SetConfig+0x66>
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	4a21      	ldr	r2, [pc, #132]	; (8007208 <TIM_TI1_SetConfig+0xe0>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d003      	beq.n	800718e <TIM_TI1_SetConfig+0x66>
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	4a20      	ldr	r2, [pc, #128]	; (800720c <TIM_TI1_SetConfig+0xe4>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d101      	bne.n	8007192 <TIM_TI1_SetConfig+0x6a>
 800718e:	2301      	movs	r3, #1
 8007190:	e000      	b.n	8007194 <TIM_TI1_SetConfig+0x6c>
 8007192:	2300      	movs	r3, #0
 8007194:	2b00      	cmp	r3, #0
 8007196:	d008      	beq.n	80071aa <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	f023 0303 	bic.w	r3, r3, #3
 800719e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80071a0:	697a      	ldr	r2, [r7, #20]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	4313      	orrs	r3, r2
 80071a6:	617b      	str	r3, [r7, #20]
 80071a8:	e003      	b.n	80071b2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	f043 0301 	orr.w	r3, r3, #1
 80071b0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	011b      	lsls	r3, r3, #4
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	697a      	ldr	r2, [r7, #20]
 80071c2:	4313      	orrs	r3, r2
 80071c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	f023 030a 	bic.w	r3, r3, #10
 80071cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	f003 030a 	and.w	r3, r3, #10
 80071d4:	693a      	ldr	r2, [r7, #16]
 80071d6:	4313      	orrs	r3, r2
 80071d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	697a      	ldr	r2, [r7, #20]
 80071de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	693a      	ldr	r2, [r7, #16]
 80071e4:	621a      	str	r2, [r3, #32]
}
 80071e6:	bf00      	nop
 80071e8:	371c      	adds	r7, #28
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop
 80071f4:	40010000 	.word	0x40010000
 80071f8:	40000400 	.word	0x40000400
 80071fc:	40000800 	.word	0x40000800
 8007200:	40000c00 	.word	0x40000c00
 8007204:	40010400 	.word	0x40010400
 8007208:	40014000 	.word	0x40014000
 800720c:	40001800 	.word	0x40001800

08007210 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007210:	b480      	push	{r7}
 8007212:	b087      	sub	sp, #28
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6a1b      	ldr	r3, [r3, #32]
 8007220:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	6a1b      	ldr	r3, [r3, #32]
 8007226:	f023 0201 	bic.w	r2, r3, #1
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	699b      	ldr	r3, [r3, #24]
 8007232:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800723a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	011b      	lsls	r3, r3, #4
 8007240:	693a      	ldr	r2, [r7, #16]
 8007242:	4313      	orrs	r3, r2
 8007244:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	f023 030a 	bic.w	r3, r3, #10
 800724c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800724e:	697a      	ldr	r2, [r7, #20]
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	4313      	orrs	r3, r2
 8007254:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	693a      	ldr	r2, [r7, #16]
 800725a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	697a      	ldr	r2, [r7, #20]
 8007260:	621a      	str	r2, [r3, #32]
}
 8007262:	bf00      	nop
 8007264:	371c      	adds	r7, #28
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr

0800726e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800726e:	b480      	push	{r7}
 8007270:	b087      	sub	sp, #28
 8007272:	af00      	add	r7, sp, #0
 8007274:	60f8      	str	r0, [r7, #12]
 8007276:	60b9      	str	r1, [r7, #8]
 8007278:	607a      	str	r2, [r7, #4]
 800727a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6a1b      	ldr	r3, [r3, #32]
 8007280:	f023 0210 	bic.w	r2, r3, #16
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	699b      	ldr	r3, [r3, #24]
 800728c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	6a1b      	ldr	r3, [r3, #32]
 8007292:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800729a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	021b      	lsls	r3, r3, #8
 80072a0:	697a      	ldr	r2, [r7, #20]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80072ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	031b      	lsls	r3, r3, #12
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	697a      	ldr	r2, [r7, #20]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80072c0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	011b      	lsls	r3, r3, #4
 80072c6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80072ca:	693a      	ldr	r2, [r7, #16]
 80072cc:	4313      	orrs	r3, r2
 80072ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	697a      	ldr	r2, [r7, #20]
 80072d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	693a      	ldr	r2, [r7, #16]
 80072da:	621a      	str	r2, [r3, #32]
}
 80072dc:	bf00      	nop
 80072de:	371c      	adds	r7, #28
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b087      	sub	sp, #28
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	60b9      	str	r1, [r7, #8]
 80072f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6a1b      	ldr	r3, [r3, #32]
 80072f8:	f023 0210 	bic.w	r2, r3, #16
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	699b      	ldr	r3, [r3, #24]
 8007304:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	6a1b      	ldr	r3, [r3, #32]
 800730a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007312:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	031b      	lsls	r3, r3, #12
 8007318:	697a      	ldr	r2, [r7, #20]
 800731a:	4313      	orrs	r3, r2
 800731c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007324:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	011b      	lsls	r3, r3, #4
 800732a:	693a      	ldr	r2, [r7, #16]
 800732c:	4313      	orrs	r3, r2
 800732e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	697a      	ldr	r2, [r7, #20]
 8007334:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	693a      	ldr	r2, [r7, #16]
 800733a:	621a      	str	r2, [r3, #32]
}
 800733c:	bf00      	nop
 800733e:	371c      	adds	r7, #28
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr

08007348 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007348:	b480      	push	{r7}
 800734a:	b087      	sub	sp, #28
 800734c:	af00      	add	r7, sp, #0
 800734e:	60f8      	str	r0, [r7, #12]
 8007350:	60b9      	str	r1, [r7, #8]
 8007352:	607a      	str	r2, [r7, #4]
 8007354:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	6a1b      	ldr	r3, [r3, #32]
 800735a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	69db      	ldr	r3, [r3, #28]
 8007366:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	6a1b      	ldr	r3, [r3, #32]
 800736c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	f023 0303 	bic.w	r3, r3, #3
 8007374:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007376:	697a      	ldr	r2, [r7, #20]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	4313      	orrs	r3, r2
 800737c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007384:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	011b      	lsls	r3, r3, #4
 800738a:	b2db      	uxtb	r3, r3
 800738c:	697a      	ldr	r2, [r7, #20]
 800738e:	4313      	orrs	r3, r2
 8007390:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007398:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	021b      	lsls	r3, r3, #8
 800739e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80073a2:	693a      	ldr	r2, [r7, #16]
 80073a4:	4313      	orrs	r3, r2
 80073a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	697a      	ldr	r2, [r7, #20]
 80073ac:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	693a      	ldr	r2, [r7, #16]
 80073b2:	621a      	str	r2, [r3, #32]
}
 80073b4:	bf00      	nop
 80073b6:	371c      	adds	r7, #28
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b087      	sub	sp, #28
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	607a      	str	r2, [r7, #4]
 80073cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	6a1b      	ldr	r3, [r3, #32]
 80073d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	69db      	ldr	r3, [r3, #28]
 80073de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	6a1b      	ldr	r3, [r3, #32]
 80073e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073ec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	021b      	lsls	r3, r3, #8
 80073f2:	697a      	ldr	r2, [r7, #20]
 80073f4:	4313      	orrs	r3, r2
 80073f6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80073fe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	031b      	lsls	r3, r3, #12
 8007404:	b29b      	uxth	r3, r3
 8007406:	697a      	ldr	r2, [r7, #20]
 8007408:	4313      	orrs	r3, r2
 800740a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007412:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	031b      	lsls	r3, r3, #12
 8007418:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800741c:	693a      	ldr	r2, [r7, #16]
 800741e:	4313      	orrs	r3, r2
 8007420:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	697a      	ldr	r2, [r7, #20]
 8007426:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	693a      	ldr	r2, [r7, #16]
 800742c:	621a      	str	r2, [r3, #32]
}
 800742e:	bf00      	nop
 8007430:	371c      	adds	r7, #28
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr

0800743a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800743a:	b480      	push	{r7}
 800743c:	b085      	sub	sp, #20
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
 8007442:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007450:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007452:	683a      	ldr	r2, [r7, #0]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	4313      	orrs	r3, r2
 8007458:	f043 0307 	orr.w	r3, r3, #7
 800745c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	68fa      	ldr	r2, [r7, #12]
 8007462:	609a      	str	r2, [r3, #8]
}
 8007464:	bf00      	nop
 8007466:	3714      	adds	r7, #20
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr

08007470 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007470:	b480      	push	{r7}
 8007472:	b087      	sub	sp, #28
 8007474:	af00      	add	r7, sp, #0
 8007476:	60f8      	str	r0, [r7, #12]
 8007478:	60b9      	str	r1, [r7, #8]
 800747a:	607a      	str	r2, [r7, #4]
 800747c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800748a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	021a      	lsls	r2, r3, #8
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	431a      	orrs	r2, r3
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	4313      	orrs	r3, r2
 8007498:	697a      	ldr	r2, [r7, #20]
 800749a:	4313      	orrs	r3, r2
 800749c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	697a      	ldr	r2, [r7, #20]
 80074a2:	609a      	str	r2, [r3, #8]
}
 80074a4:	bf00      	nop
 80074a6:	371c      	adds	r7, #28
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr

080074b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b087      	sub	sp, #28
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	60b9      	str	r1, [r7, #8]
 80074ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	f003 031f 	and.w	r3, r3, #31
 80074c2:	2201      	movs	r2, #1
 80074c4:	fa02 f303 	lsl.w	r3, r2, r3
 80074c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	6a1a      	ldr	r2, [r3, #32]
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	43db      	mvns	r3, r3
 80074d2:	401a      	ands	r2, r3
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	6a1a      	ldr	r2, [r3, #32]
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	f003 031f 	and.w	r3, r3, #31
 80074e2:	6879      	ldr	r1, [r7, #4]
 80074e4:	fa01 f303 	lsl.w	r3, r1, r3
 80074e8:	431a      	orrs	r2, r3
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	621a      	str	r2, [r3, #32]
}
 80074ee:	bf00      	nop
 80074f0:	371c      	adds	r7, #28
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr
	...

080074fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b085      	sub	sp, #20
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800750c:	2b01      	cmp	r3, #1
 800750e:	d101      	bne.n	8007514 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007510:	2302      	movs	r3, #2
 8007512:	e05a      	b.n	80075ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2201      	movs	r2, #1
 8007518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2202      	movs	r2, #2
 8007520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800753a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	68fa      	ldr	r2, [r7, #12]
 8007542:	4313      	orrs	r3, r2
 8007544:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	68fa      	ldr	r2, [r7, #12]
 800754c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a21      	ldr	r2, [pc, #132]	; (80075d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d022      	beq.n	800759e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007560:	d01d      	beq.n	800759e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a1d      	ldr	r2, [pc, #116]	; (80075dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d018      	beq.n	800759e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a1b      	ldr	r2, [pc, #108]	; (80075e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d013      	beq.n	800759e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a1a      	ldr	r2, [pc, #104]	; (80075e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d00e      	beq.n	800759e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a18      	ldr	r2, [pc, #96]	; (80075e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d009      	beq.n	800759e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a17      	ldr	r2, [pc, #92]	; (80075ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d004      	beq.n	800759e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a15      	ldr	r2, [pc, #84]	; (80075f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d10c      	bne.n	80075b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	68ba      	ldr	r2, [r7, #8]
 80075ac:	4313      	orrs	r3, r2
 80075ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	68ba      	ldr	r2, [r7, #8]
 80075b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2201      	movs	r2, #1
 80075bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2200      	movs	r2, #0
 80075c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075c8:	2300      	movs	r3, #0
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3714      	adds	r7, #20
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr
 80075d6:	bf00      	nop
 80075d8:	40010000 	.word	0x40010000
 80075dc:	40000400 	.word	0x40000400
 80075e0:	40000800 	.word	0x40000800
 80075e4:	40000c00 	.word	0x40000c00
 80075e8:	40010400 	.word	0x40010400
 80075ec:	40014000 	.word	0x40014000
 80075f0:	40001800 	.word	0x40001800

080075f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075fc:	bf00      	nop
 80075fe:	370c      	adds	r7, #12
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr

08007608 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007608:	b480      	push	{r7}
 800760a:	b083      	sub	sp, #12
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007610:	bf00      	nop
 8007612:	370c      	adds	r7, #12
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr

0800761c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b082      	sub	sp, #8
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d101      	bne.n	800762e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	e03f      	b.n	80076ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007634:	b2db      	uxtb	r3, r3
 8007636:	2b00      	cmp	r3, #0
 8007638:	d106      	bne.n	8007648 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f7fa fb48 	bl	8001cd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2224      	movs	r2, #36	; 0x24
 800764c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	68da      	ldr	r2, [r3, #12]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800765e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f000 fddf 	bl	8008224 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	691a      	ldr	r2, [r3, #16]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007674:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	695a      	ldr	r2, [r3, #20]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007684:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	68da      	ldr	r2, [r3, #12]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007694:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2220      	movs	r2, #32
 80076a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2220      	movs	r2, #32
 80076a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80076ac:	2300      	movs	r3, #0
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3708      	adds	r7, #8
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}

080076b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b08a      	sub	sp, #40	; 0x28
 80076ba:	af02      	add	r7, sp, #8
 80076bc:	60f8      	str	r0, [r7, #12]
 80076be:	60b9      	str	r1, [r7, #8]
 80076c0:	603b      	str	r3, [r7, #0]
 80076c2:	4613      	mov	r3, r2
 80076c4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80076c6:	2300      	movs	r3, #0
 80076c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	2b20      	cmp	r3, #32
 80076d4:	d17c      	bne.n	80077d0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d002      	beq.n	80076e2 <HAL_UART_Transmit+0x2c>
 80076dc:	88fb      	ldrh	r3, [r7, #6]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d101      	bne.n	80076e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	e075      	b.n	80077d2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d101      	bne.n	80076f4 <HAL_UART_Transmit+0x3e>
 80076f0:	2302      	movs	r3, #2
 80076f2:	e06e      	b.n	80077d2 <HAL_UART_Transmit+0x11c>
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2200      	movs	r2, #0
 8007700:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2221      	movs	r2, #33	; 0x21
 8007706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800770a:	f7fb fc43 	bl	8002f94 <HAL_GetTick>
 800770e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	88fa      	ldrh	r2, [r7, #6]
 8007714:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	88fa      	ldrh	r2, [r7, #6]
 800771a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007724:	d108      	bne.n	8007738 <HAL_UART_Transmit+0x82>
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	691b      	ldr	r3, [r3, #16]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d104      	bne.n	8007738 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800772e:	2300      	movs	r3, #0
 8007730:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	61bb      	str	r3, [r7, #24]
 8007736:	e003      	b.n	8007740 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800773c:	2300      	movs	r3, #0
 800773e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2200      	movs	r2, #0
 8007744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007748:	e02a      	b.n	80077a0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	9300      	str	r3, [sp, #0]
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	2200      	movs	r2, #0
 8007752:	2180      	movs	r1, #128	; 0x80
 8007754:	68f8      	ldr	r0, [r7, #12]
 8007756:	f000 fb1f 	bl	8007d98 <UART_WaitOnFlagUntilTimeout>
 800775a:	4603      	mov	r3, r0
 800775c:	2b00      	cmp	r3, #0
 800775e:	d001      	beq.n	8007764 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007760:	2303      	movs	r3, #3
 8007762:	e036      	b.n	80077d2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007764:	69fb      	ldr	r3, [r7, #28]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d10b      	bne.n	8007782 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800776a:	69bb      	ldr	r3, [r7, #24]
 800776c:	881b      	ldrh	r3, [r3, #0]
 800776e:	461a      	mov	r2, r3
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007778:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800777a:	69bb      	ldr	r3, [r7, #24]
 800777c:	3302      	adds	r3, #2
 800777e:	61bb      	str	r3, [r7, #24]
 8007780:	e007      	b.n	8007792 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	781a      	ldrb	r2, [r3, #0]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800778c:	69fb      	ldr	r3, [r7, #28]
 800778e:	3301      	adds	r3, #1
 8007790:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007796:	b29b      	uxth	r3, r3
 8007798:	3b01      	subs	r3, #1
 800779a:	b29a      	uxth	r2, r3
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d1cf      	bne.n	800774a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	9300      	str	r3, [sp, #0]
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	2200      	movs	r2, #0
 80077b2:	2140      	movs	r1, #64	; 0x40
 80077b4:	68f8      	ldr	r0, [r7, #12]
 80077b6:	f000 faef 	bl	8007d98 <UART_WaitOnFlagUntilTimeout>
 80077ba:	4603      	mov	r3, r0
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d001      	beq.n	80077c4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80077c0:	2303      	movs	r3, #3
 80077c2:	e006      	b.n	80077d2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2220      	movs	r2, #32
 80077c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80077cc:	2300      	movs	r3, #0
 80077ce:	e000      	b.n	80077d2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80077d0:	2302      	movs	r3, #2
  }
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3720      	adds	r7, #32
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}

080077da <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077da:	b580      	push	{r7, lr}
 80077dc:	b084      	sub	sp, #16
 80077de:	af00      	add	r7, sp, #0
 80077e0:	60f8      	str	r0, [r7, #12]
 80077e2:	60b9      	str	r1, [r7, #8]
 80077e4:	4613      	mov	r3, r2
 80077e6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	2b20      	cmp	r3, #32
 80077f2:	d11d      	bne.n	8007830 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d002      	beq.n	8007800 <HAL_UART_Receive_IT+0x26>
 80077fa:	88fb      	ldrh	r3, [r7, #6]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d101      	bne.n	8007804 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007800:	2301      	movs	r3, #1
 8007802:	e016      	b.n	8007832 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800780a:	2b01      	cmp	r3, #1
 800780c:	d101      	bne.n	8007812 <HAL_UART_Receive_IT+0x38>
 800780e:	2302      	movs	r3, #2
 8007810:	e00f      	b.n	8007832 <HAL_UART_Receive_IT+0x58>
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2201      	movs	r2, #1
 8007816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2200      	movs	r2, #0
 800781e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007820:	88fb      	ldrh	r3, [r7, #6]
 8007822:	461a      	mov	r2, r3
 8007824:	68b9      	ldr	r1, [r7, #8]
 8007826:	68f8      	ldr	r0, [r7, #12]
 8007828:	f000 fb24 	bl	8007e74 <UART_Start_Receive_IT>
 800782c:	4603      	mov	r3, r0
 800782e:	e000      	b.n	8007832 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007830:	2302      	movs	r3, #2
  }
}
 8007832:	4618      	mov	r0, r3
 8007834:	3710      	adds	r7, #16
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
	...

0800783c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b0ba      	sub	sp, #232	; 0xe8
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	68db      	ldr	r3, [r3, #12]
 8007854:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	695b      	ldr	r3, [r3, #20]
 800785e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007862:	2300      	movs	r3, #0
 8007864:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007868:	2300      	movs	r3, #0
 800786a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800786e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007872:	f003 030f 	and.w	r3, r3, #15
 8007876:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800787a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800787e:	2b00      	cmp	r3, #0
 8007880:	d10f      	bne.n	80078a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007886:	f003 0320 	and.w	r3, r3, #32
 800788a:	2b00      	cmp	r3, #0
 800788c:	d009      	beq.n	80078a2 <HAL_UART_IRQHandler+0x66>
 800788e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007892:	f003 0320 	and.w	r3, r3, #32
 8007896:	2b00      	cmp	r3, #0
 8007898:	d003      	beq.n	80078a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 fc07 	bl	80080ae <UART_Receive_IT>
      return;
 80078a0:	e256      	b.n	8007d50 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80078a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	f000 80de 	beq.w	8007a68 <HAL_UART_IRQHandler+0x22c>
 80078ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078b0:	f003 0301 	and.w	r3, r3, #1
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d106      	bne.n	80078c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80078b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078bc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	f000 80d1 	beq.w	8007a68 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80078c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078ca:	f003 0301 	and.w	r3, r3, #1
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d00b      	beq.n	80078ea <HAL_UART_IRQHandler+0xae>
 80078d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d005      	beq.n	80078ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e2:	f043 0201 	orr.w	r2, r3, #1
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80078ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078ee:	f003 0304 	and.w	r3, r3, #4
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d00b      	beq.n	800790e <HAL_UART_IRQHandler+0xd2>
 80078f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078fa:	f003 0301 	and.w	r3, r3, #1
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d005      	beq.n	800790e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007906:	f043 0202 	orr.w	r2, r3, #2
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800790e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007912:	f003 0302 	and.w	r3, r3, #2
 8007916:	2b00      	cmp	r3, #0
 8007918:	d00b      	beq.n	8007932 <HAL_UART_IRQHandler+0xf6>
 800791a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800791e:	f003 0301 	and.w	r3, r3, #1
 8007922:	2b00      	cmp	r3, #0
 8007924:	d005      	beq.n	8007932 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800792a:	f043 0204 	orr.w	r2, r3, #4
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007936:	f003 0308 	and.w	r3, r3, #8
 800793a:	2b00      	cmp	r3, #0
 800793c:	d011      	beq.n	8007962 <HAL_UART_IRQHandler+0x126>
 800793e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007942:	f003 0320 	and.w	r3, r3, #32
 8007946:	2b00      	cmp	r3, #0
 8007948:	d105      	bne.n	8007956 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800794a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800794e:	f003 0301 	and.w	r3, r3, #1
 8007952:	2b00      	cmp	r3, #0
 8007954:	d005      	beq.n	8007962 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800795a:	f043 0208 	orr.w	r2, r3, #8
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007966:	2b00      	cmp	r3, #0
 8007968:	f000 81ed 	beq.w	8007d46 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800796c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007970:	f003 0320 	and.w	r3, r3, #32
 8007974:	2b00      	cmp	r3, #0
 8007976:	d008      	beq.n	800798a <HAL_UART_IRQHandler+0x14e>
 8007978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800797c:	f003 0320 	and.w	r3, r3, #32
 8007980:	2b00      	cmp	r3, #0
 8007982:	d002      	beq.n	800798a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 fb92 	bl	80080ae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	695b      	ldr	r3, [r3, #20]
 8007990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007994:	2b40      	cmp	r3, #64	; 0x40
 8007996:	bf0c      	ite	eq
 8007998:	2301      	moveq	r3, #1
 800799a:	2300      	movne	r3, #0
 800799c:	b2db      	uxtb	r3, r3
 800799e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a6:	f003 0308 	and.w	r3, r3, #8
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d103      	bne.n	80079b6 <HAL_UART_IRQHandler+0x17a>
 80079ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d04f      	beq.n	8007a56 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f000 fa9a 	bl	8007ef0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	695b      	ldr	r3, [r3, #20]
 80079c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079c6:	2b40      	cmp	r3, #64	; 0x40
 80079c8:	d141      	bne.n	8007a4e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	3314      	adds	r3, #20
 80079d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80079d8:	e853 3f00 	ldrex	r3, [r3]
 80079dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80079e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80079e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	3314      	adds	r3, #20
 80079f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80079f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80079fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007a02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007a06:	e841 2300 	strex	r3, r2, [r1]
 8007a0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007a0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d1d9      	bne.n	80079ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d013      	beq.n	8007a46 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a22:	4a7d      	ldr	r2, [pc, #500]	; (8007c18 <HAL_UART_IRQHandler+0x3dc>)
 8007a24:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f7fb fc63 	bl	80032f6 <HAL_DMA_Abort_IT>
 8007a30:	4603      	mov	r3, r0
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d016      	beq.n	8007a64 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007a40:	4610      	mov	r0, r2
 8007a42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a44:	e00e      	b.n	8007a64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 f990 	bl	8007d6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a4c:	e00a      	b.n	8007a64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 f98c 	bl	8007d6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a54:	e006      	b.n	8007a64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 f988 	bl	8007d6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007a62:	e170      	b.n	8007d46 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a64:	bf00      	nop
    return;
 8007a66:	e16e      	b.n	8007d46 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	f040 814a 	bne.w	8007d06 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a76:	f003 0310 	and.w	r3, r3, #16
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	f000 8143 	beq.w	8007d06 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a84:	f003 0310 	and.w	r3, r3, #16
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	f000 813c 	beq.w	8007d06 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a8e:	2300      	movs	r3, #0
 8007a90:	60bb      	str	r3, [r7, #8]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	60bb      	str	r3, [r7, #8]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	60bb      	str	r3, [r7, #8]
 8007aa2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	695b      	ldr	r3, [r3, #20]
 8007aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aae:	2b40      	cmp	r3, #64	; 0x40
 8007ab0:	f040 80b4 	bne.w	8007c1c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007ac0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	f000 8140 	beq.w	8007d4a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007ace:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	f080 8139 	bcs.w	8007d4a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007ade:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae4:	69db      	ldr	r3, [r3, #28]
 8007ae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007aea:	f000 8088 	beq.w	8007bfe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	330c      	adds	r3, #12
 8007af4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007afc:	e853 3f00 	ldrex	r3, [r3]
 8007b00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007b04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007b08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	330c      	adds	r3, #12
 8007b16:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007b1a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007b1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b22:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007b26:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007b2a:	e841 2300 	strex	r3, r2, [r1]
 8007b2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007b32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d1d9      	bne.n	8007aee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	3314      	adds	r3, #20
 8007b40:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b44:	e853 3f00 	ldrex	r3, [r3]
 8007b48:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007b4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b4c:	f023 0301 	bic.w	r3, r3, #1
 8007b50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	3314      	adds	r3, #20
 8007b5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007b5e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007b62:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b64:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007b66:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007b6a:	e841 2300 	strex	r3, r2, [r1]
 8007b6e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007b70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d1e1      	bne.n	8007b3a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	3314      	adds	r3, #20
 8007b7c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b80:	e853 3f00 	ldrex	r3, [r3]
 8007b84:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007b86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	3314      	adds	r3, #20
 8007b96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007b9a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007b9c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007ba0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007ba2:	e841 2300 	strex	r3, r2, [r1]
 8007ba6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007ba8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d1e3      	bne.n	8007b76 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2220      	movs	r2, #32
 8007bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	330c      	adds	r3, #12
 8007bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bc6:	e853 3f00 	ldrex	r3, [r3]
 8007bca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007bcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bce:	f023 0310 	bic.w	r3, r3, #16
 8007bd2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	330c      	adds	r3, #12
 8007bdc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007be0:	65ba      	str	r2, [r7, #88]	; 0x58
 8007be2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007be6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007be8:	e841 2300 	strex	r3, r2, [r1]
 8007bec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007bee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d1e3      	bne.n	8007bbc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f7fb fb0c 	bl	8003216 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	1ad3      	subs	r3, r2, r3
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 f8b6 	bl	8007d80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007c14:	e099      	b.n	8007d4a <HAL_UART_IRQHandler+0x50e>
 8007c16:	bf00      	nop
 8007c18:	08007fb7 	.word	0x08007fb7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	1ad3      	subs	r3, r2, r3
 8007c28:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	f000 808b 	beq.w	8007d4e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007c38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	f000 8086 	beq.w	8007d4e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	330c      	adds	r3, #12
 8007c48:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c4c:	e853 3f00 	ldrex	r3, [r3]
 8007c50:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	330c      	adds	r3, #12
 8007c62:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007c66:	647a      	str	r2, [r7, #68]	; 0x44
 8007c68:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c6a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c6e:	e841 2300 	strex	r3, r2, [r1]
 8007c72:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d1e3      	bne.n	8007c42 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	3314      	adds	r3, #20
 8007c80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c84:	e853 3f00 	ldrex	r3, [r3]
 8007c88:	623b      	str	r3, [r7, #32]
   return(result);
 8007c8a:	6a3b      	ldr	r3, [r7, #32]
 8007c8c:	f023 0301 	bic.w	r3, r3, #1
 8007c90:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	3314      	adds	r3, #20
 8007c9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007c9e:	633a      	str	r2, [r7, #48]	; 0x30
 8007ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ca2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ca4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ca6:	e841 2300 	strex	r3, r2, [r1]
 8007caa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d1e3      	bne.n	8007c7a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2220      	movs	r2, #32
 8007cb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	330c      	adds	r3, #12
 8007cc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	e853 3f00 	ldrex	r3, [r3]
 8007cce:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f023 0310 	bic.w	r3, r3, #16
 8007cd6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	330c      	adds	r3, #12
 8007ce0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007ce4:	61fa      	str	r2, [r7, #28]
 8007ce6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce8:	69b9      	ldr	r1, [r7, #24]
 8007cea:	69fa      	ldr	r2, [r7, #28]
 8007cec:	e841 2300 	strex	r3, r2, [r1]
 8007cf0:	617b      	str	r3, [r7, #20]
   return(result);
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d1e3      	bne.n	8007cc0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007cf8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007cfc:	4619      	mov	r1, r3
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f000 f83e 	bl	8007d80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007d04:	e023      	b.n	8007d4e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d009      	beq.n	8007d26 <HAL_UART_IRQHandler+0x4ea>
 8007d12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d003      	beq.n	8007d26 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 f95d 	bl	8007fde <UART_Transmit_IT>
    return;
 8007d24:	e014      	b.n	8007d50 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d00e      	beq.n	8007d50 <HAL_UART_IRQHandler+0x514>
 8007d32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d008      	beq.n	8007d50 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 f99d 	bl	800807e <UART_EndTransmit_IT>
    return;
 8007d44:	e004      	b.n	8007d50 <HAL_UART_IRQHandler+0x514>
    return;
 8007d46:	bf00      	nop
 8007d48:	e002      	b.n	8007d50 <HAL_UART_IRQHandler+0x514>
      return;
 8007d4a:	bf00      	nop
 8007d4c:	e000      	b.n	8007d50 <HAL_UART_IRQHandler+0x514>
      return;
 8007d4e:	bf00      	nop
  }
}
 8007d50:	37e8      	adds	r7, #232	; 0xe8
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}
 8007d56:	bf00      	nop

08007d58 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b083      	sub	sp, #12
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007d60:	bf00      	nop
 8007d62:	370c      	adds	r7, #12
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr

08007d6c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b083      	sub	sp, #12
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007d74:	bf00      	nop
 8007d76:	370c      	adds	r7, #12
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	460b      	mov	r3, r1
 8007d8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007d8c:	bf00      	nop
 8007d8e:	370c      	adds	r7, #12
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr

08007d98 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b090      	sub	sp, #64	; 0x40
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	60f8      	str	r0, [r7, #12]
 8007da0:	60b9      	str	r1, [r7, #8]
 8007da2:	603b      	str	r3, [r7, #0]
 8007da4:	4613      	mov	r3, r2
 8007da6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007da8:	e050      	b.n	8007e4c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007daa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007db0:	d04c      	beq.n	8007e4c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007db2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d007      	beq.n	8007dc8 <UART_WaitOnFlagUntilTimeout+0x30>
 8007db8:	f7fb f8ec 	bl	8002f94 <HAL_GetTick>
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	1ad3      	subs	r3, r2, r3
 8007dc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d241      	bcs.n	8007e4c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	330c      	adds	r3, #12
 8007dce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd2:	e853 3f00 	ldrex	r3, [r3]
 8007dd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dda:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007dde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	330c      	adds	r3, #12
 8007de6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007de8:	637a      	str	r2, [r7, #52]	; 0x34
 8007dea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007dee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007df0:	e841 2300 	strex	r3, r2, [r1]
 8007df4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d1e5      	bne.n	8007dc8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	3314      	adds	r3, #20
 8007e02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	e853 3f00 	ldrex	r3, [r3]
 8007e0a:	613b      	str	r3, [r7, #16]
   return(result);
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	f023 0301 	bic.w	r3, r3, #1
 8007e12:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	3314      	adds	r3, #20
 8007e1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e1c:	623a      	str	r2, [r7, #32]
 8007e1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e20:	69f9      	ldr	r1, [r7, #28]
 8007e22:	6a3a      	ldr	r2, [r7, #32]
 8007e24:	e841 2300 	strex	r3, r2, [r1]
 8007e28:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e2a:	69bb      	ldr	r3, [r7, #24]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d1e5      	bne.n	8007dfc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2220      	movs	r2, #32
 8007e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2220      	movs	r2, #32
 8007e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2200      	movs	r2, #0
 8007e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007e48:	2303      	movs	r3, #3
 8007e4a:	e00f      	b.n	8007e6c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	4013      	ands	r3, r2
 8007e56:	68ba      	ldr	r2, [r7, #8]
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	bf0c      	ite	eq
 8007e5c:	2301      	moveq	r3, #1
 8007e5e:	2300      	movne	r3, #0
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	461a      	mov	r2, r3
 8007e64:	79fb      	ldrb	r3, [r7, #7]
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d09f      	beq.n	8007daa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007e6a:	2300      	movs	r3, #0
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3740      	adds	r7, #64	; 0x40
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b085      	sub	sp, #20
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	60f8      	str	r0, [r7, #12]
 8007e7c:	60b9      	str	r1, [r7, #8]
 8007e7e:	4613      	mov	r3, r2
 8007e80:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	68ba      	ldr	r2, [r7, #8]
 8007e86:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	88fa      	ldrh	r2, [r7, #6]
 8007e8c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	88fa      	ldrh	r2, [r7, #6]
 8007e92:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2200      	movs	r2, #0
 8007e98:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2222      	movs	r2, #34	; 0x22
 8007e9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	691b      	ldr	r3, [r3, #16]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d007      	beq.n	8007ec2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	68da      	ldr	r2, [r3, #12]
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ec0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	695a      	ldr	r2, [r3, #20]
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f042 0201 	orr.w	r2, r2, #1
 8007ed0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	68da      	ldr	r2, [r3, #12]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f042 0220 	orr.w	r2, r2, #32
 8007ee0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007ee2:	2300      	movs	r3, #0
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3714      	adds	r7, #20
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b095      	sub	sp, #84	; 0x54
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	330c      	adds	r3, #12
 8007efe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f02:	e853 3f00 	ldrex	r3, [r3]
 8007f06:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f0a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	330c      	adds	r3, #12
 8007f16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f18:	643a      	str	r2, [r7, #64]	; 0x40
 8007f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f20:	e841 2300 	strex	r3, r2, [r1]
 8007f24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d1e5      	bne.n	8007ef8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	3314      	adds	r3, #20
 8007f32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f34:	6a3b      	ldr	r3, [r7, #32]
 8007f36:	e853 3f00 	ldrex	r3, [r3]
 8007f3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f3c:	69fb      	ldr	r3, [r7, #28]
 8007f3e:	f023 0301 	bic.w	r3, r3, #1
 8007f42:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	3314      	adds	r3, #20
 8007f4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f54:	e841 2300 	strex	r3, r2, [r1]
 8007f58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d1e5      	bne.n	8007f2c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d119      	bne.n	8007f9c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	330c      	adds	r3, #12
 8007f6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	e853 3f00 	ldrex	r3, [r3]
 8007f76:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	f023 0310 	bic.w	r3, r3, #16
 8007f7e:	647b      	str	r3, [r7, #68]	; 0x44
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	330c      	adds	r3, #12
 8007f86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f88:	61ba      	str	r2, [r7, #24]
 8007f8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8c:	6979      	ldr	r1, [r7, #20]
 8007f8e:	69ba      	ldr	r2, [r7, #24]
 8007f90:	e841 2300 	strex	r3, r2, [r1]
 8007f94:	613b      	str	r3, [r7, #16]
   return(result);
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d1e5      	bne.n	8007f68 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2220      	movs	r2, #32
 8007fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007faa:	bf00      	nop
 8007fac:	3754      	adds	r7, #84	; 0x54
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr

08007fb6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007fb6:	b580      	push	{r7, lr}
 8007fb8:	b084      	sub	sp, #16
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007fd0:	68f8      	ldr	r0, [r7, #12]
 8007fd2:	f7ff fecb 	bl	8007d6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fd6:	bf00      	nop
 8007fd8:	3710      	adds	r7, #16
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}

08007fde <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007fde:	b480      	push	{r7}
 8007fe0:	b085      	sub	sp, #20
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	2b21      	cmp	r3, #33	; 0x21
 8007ff0:	d13e      	bne.n	8008070 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ffa:	d114      	bne.n	8008026 <UART_Transmit_IT+0x48>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	691b      	ldr	r3, [r3, #16]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d110      	bne.n	8008026 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6a1b      	ldr	r3, [r3, #32]
 8008008:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	881b      	ldrh	r3, [r3, #0]
 800800e:	461a      	mov	r2, r3
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008018:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6a1b      	ldr	r3, [r3, #32]
 800801e:	1c9a      	adds	r2, r3, #2
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	621a      	str	r2, [r3, #32]
 8008024:	e008      	b.n	8008038 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6a1b      	ldr	r3, [r3, #32]
 800802a:	1c59      	adds	r1, r3, #1
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	6211      	str	r1, [r2, #32]
 8008030:	781a      	ldrb	r2, [r3, #0]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800803c:	b29b      	uxth	r3, r3
 800803e:	3b01      	subs	r3, #1
 8008040:	b29b      	uxth	r3, r3
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	4619      	mov	r1, r3
 8008046:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008048:	2b00      	cmp	r3, #0
 800804a:	d10f      	bne.n	800806c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	68da      	ldr	r2, [r3, #12]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800805a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	68da      	ldr	r2, [r3, #12]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800806a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800806c:	2300      	movs	r3, #0
 800806e:	e000      	b.n	8008072 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008070:	2302      	movs	r3, #2
  }
}
 8008072:	4618      	mov	r0, r3
 8008074:	3714      	adds	r7, #20
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr

0800807e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800807e:	b580      	push	{r7, lr}
 8008080:	b082      	sub	sp, #8
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	68da      	ldr	r2, [r3, #12]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008094:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2220      	movs	r2, #32
 800809a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f7ff fe5a 	bl	8007d58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80080a4:	2300      	movs	r3, #0
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3708      	adds	r7, #8
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}

080080ae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80080ae:	b580      	push	{r7, lr}
 80080b0:	b08c      	sub	sp, #48	; 0x30
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	2b22      	cmp	r3, #34	; 0x22
 80080c0:	f040 80ab 	bne.w	800821a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080cc:	d117      	bne.n	80080fe <UART_Receive_IT+0x50>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	691b      	ldr	r3, [r3, #16]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d113      	bne.n	80080fe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80080d6:	2300      	movs	r3, #0
 80080d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080de:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080ec:	b29a      	uxth	r2, r3
 80080ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080f6:	1c9a      	adds	r2, r3, #2
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	629a      	str	r2, [r3, #40]	; 0x28
 80080fc:	e026      	b.n	800814c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008102:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008104:	2300      	movs	r3, #0
 8008106:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	689b      	ldr	r3, [r3, #8]
 800810c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008110:	d007      	beq.n	8008122 <UART_Receive_IT+0x74>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	689b      	ldr	r3, [r3, #8]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d10a      	bne.n	8008130 <UART_Receive_IT+0x82>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	691b      	ldr	r3, [r3, #16]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d106      	bne.n	8008130 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	b2da      	uxtb	r2, r3
 800812a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800812c:	701a      	strb	r2, [r3, #0]
 800812e:	e008      	b.n	8008142 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	b2db      	uxtb	r3, r3
 8008138:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800813c:	b2da      	uxtb	r2, r3
 800813e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008140:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008146:	1c5a      	adds	r2, r3, #1
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008150:	b29b      	uxth	r3, r3
 8008152:	3b01      	subs	r3, #1
 8008154:	b29b      	uxth	r3, r3
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	4619      	mov	r1, r3
 800815a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800815c:	2b00      	cmp	r3, #0
 800815e:	d15a      	bne.n	8008216 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	68da      	ldr	r2, [r3, #12]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f022 0220 	bic.w	r2, r2, #32
 800816e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	68da      	ldr	r2, [r3, #12]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800817e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	695a      	ldr	r2, [r3, #20]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f022 0201 	bic.w	r2, r2, #1
 800818e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2220      	movs	r2, #32
 8008194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800819c:	2b01      	cmp	r3, #1
 800819e:	d135      	bne.n	800820c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2200      	movs	r2, #0
 80081a4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	330c      	adds	r3, #12
 80081ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	e853 3f00 	ldrex	r3, [r3]
 80081b4:	613b      	str	r3, [r7, #16]
   return(result);
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	f023 0310 	bic.w	r3, r3, #16
 80081bc:	627b      	str	r3, [r7, #36]	; 0x24
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	330c      	adds	r3, #12
 80081c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081c6:	623a      	str	r2, [r7, #32]
 80081c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ca:	69f9      	ldr	r1, [r7, #28]
 80081cc:	6a3a      	ldr	r2, [r7, #32]
 80081ce:	e841 2300 	strex	r3, r2, [r1]
 80081d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80081d4:	69bb      	ldr	r3, [r7, #24]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d1e5      	bne.n	80081a6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f003 0310 	and.w	r3, r3, #16
 80081e4:	2b10      	cmp	r3, #16
 80081e6:	d10a      	bne.n	80081fe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80081e8:	2300      	movs	r3, #0
 80081ea:	60fb      	str	r3, [r7, #12]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	60fb      	str	r3, [r7, #12]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	60fb      	str	r3, [r7, #12]
 80081fc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008202:	4619      	mov	r1, r3
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f7ff fdbb 	bl	8007d80 <HAL_UARTEx_RxEventCallback>
 800820a:	e002      	b.n	8008212 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f7fa f801 	bl	8002214 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008212:	2300      	movs	r3, #0
 8008214:	e002      	b.n	800821c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008216:	2300      	movs	r3, #0
 8008218:	e000      	b.n	800821c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800821a:	2302      	movs	r3, #2
  }
}
 800821c:	4618      	mov	r0, r3
 800821e:	3730      	adds	r7, #48	; 0x30
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008224:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008228:	b0c0      	sub	sp, #256	; 0x100
 800822a:	af00      	add	r7, sp, #0
 800822c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	691b      	ldr	r3, [r3, #16]
 8008238:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800823c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008240:	68d9      	ldr	r1, [r3, #12]
 8008242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008246:	681a      	ldr	r2, [r3, #0]
 8008248:	ea40 0301 	orr.w	r3, r0, r1
 800824c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800824e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008252:	689a      	ldr	r2, [r3, #8]
 8008254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008258:	691b      	ldr	r3, [r3, #16]
 800825a:	431a      	orrs	r2, r3
 800825c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008260:	695b      	ldr	r3, [r3, #20]
 8008262:	431a      	orrs	r2, r3
 8008264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008268:	69db      	ldr	r3, [r3, #28]
 800826a:	4313      	orrs	r3, r2
 800826c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	68db      	ldr	r3, [r3, #12]
 8008278:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800827c:	f021 010c 	bic.w	r1, r1, #12
 8008280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800828a:	430b      	orrs	r3, r1
 800828c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800828e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	695b      	ldr	r3, [r3, #20]
 8008296:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800829a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800829e:	6999      	ldr	r1, [r3, #24]
 80082a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	ea40 0301 	orr.w	r3, r0, r1
 80082aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80082ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082b0:	681a      	ldr	r2, [r3, #0]
 80082b2:	4b8f      	ldr	r3, [pc, #572]	; (80084f0 <UART_SetConfig+0x2cc>)
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d005      	beq.n	80082c4 <UART_SetConfig+0xa0>
 80082b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082bc:	681a      	ldr	r2, [r3, #0]
 80082be:	4b8d      	ldr	r3, [pc, #564]	; (80084f4 <UART_SetConfig+0x2d0>)
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d104      	bne.n	80082ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80082c4:	f7fc ffa8 	bl	8005218 <HAL_RCC_GetPCLK2Freq>
 80082c8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80082cc:	e003      	b.n	80082d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80082ce:	f7fc ff8f 	bl	80051f0 <HAL_RCC_GetPCLK1Freq>
 80082d2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082da:	69db      	ldr	r3, [r3, #28]
 80082dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082e0:	f040 810c 	bne.w	80084fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80082e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082e8:	2200      	movs	r2, #0
 80082ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80082ee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80082f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80082f6:	4622      	mov	r2, r4
 80082f8:	462b      	mov	r3, r5
 80082fa:	1891      	adds	r1, r2, r2
 80082fc:	65b9      	str	r1, [r7, #88]	; 0x58
 80082fe:	415b      	adcs	r3, r3
 8008300:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008302:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008306:	4621      	mov	r1, r4
 8008308:	eb12 0801 	adds.w	r8, r2, r1
 800830c:	4629      	mov	r1, r5
 800830e:	eb43 0901 	adc.w	r9, r3, r1
 8008312:	f04f 0200 	mov.w	r2, #0
 8008316:	f04f 0300 	mov.w	r3, #0
 800831a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800831e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008322:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008326:	4690      	mov	r8, r2
 8008328:	4699      	mov	r9, r3
 800832a:	4623      	mov	r3, r4
 800832c:	eb18 0303 	adds.w	r3, r8, r3
 8008330:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008334:	462b      	mov	r3, r5
 8008336:	eb49 0303 	adc.w	r3, r9, r3
 800833a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800833e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	2200      	movs	r2, #0
 8008346:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800834a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800834e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008352:	460b      	mov	r3, r1
 8008354:	18db      	adds	r3, r3, r3
 8008356:	653b      	str	r3, [r7, #80]	; 0x50
 8008358:	4613      	mov	r3, r2
 800835a:	eb42 0303 	adc.w	r3, r2, r3
 800835e:	657b      	str	r3, [r7, #84]	; 0x54
 8008360:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008364:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008368:	f7f7 ff92 	bl	8000290 <__aeabi_uldivmod>
 800836c:	4602      	mov	r2, r0
 800836e:	460b      	mov	r3, r1
 8008370:	4b61      	ldr	r3, [pc, #388]	; (80084f8 <UART_SetConfig+0x2d4>)
 8008372:	fba3 2302 	umull	r2, r3, r3, r2
 8008376:	095b      	lsrs	r3, r3, #5
 8008378:	011c      	lsls	r4, r3, #4
 800837a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800837e:	2200      	movs	r2, #0
 8008380:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008384:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008388:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800838c:	4642      	mov	r2, r8
 800838e:	464b      	mov	r3, r9
 8008390:	1891      	adds	r1, r2, r2
 8008392:	64b9      	str	r1, [r7, #72]	; 0x48
 8008394:	415b      	adcs	r3, r3
 8008396:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008398:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800839c:	4641      	mov	r1, r8
 800839e:	eb12 0a01 	adds.w	sl, r2, r1
 80083a2:	4649      	mov	r1, r9
 80083a4:	eb43 0b01 	adc.w	fp, r3, r1
 80083a8:	f04f 0200 	mov.w	r2, #0
 80083ac:	f04f 0300 	mov.w	r3, #0
 80083b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80083b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80083b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80083bc:	4692      	mov	sl, r2
 80083be:	469b      	mov	fp, r3
 80083c0:	4643      	mov	r3, r8
 80083c2:	eb1a 0303 	adds.w	r3, sl, r3
 80083c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80083ca:	464b      	mov	r3, r9
 80083cc:	eb4b 0303 	adc.w	r3, fp, r3
 80083d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80083d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	2200      	movs	r2, #0
 80083dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80083e0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80083e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80083e8:	460b      	mov	r3, r1
 80083ea:	18db      	adds	r3, r3, r3
 80083ec:	643b      	str	r3, [r7, #64]	; 0x40
 80083ee:	4613      	mov	r3, r2
 80083f0:	eb42 0303 	adc.w	r3, r2, r3
 80083f4:	647b      	str	r3, [r7, #68]	; 0x44
 80083f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80083fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80083fe:	f7f7 ff47 	bl	8000290 <__aeabi_uldivmod>
 8008402:	4602      	mov	r2, r0
 8008404:	460b      	mov	r3, r1
 8008406:	4611      	mov	r1, r2
 8008408:	4b3b      	ldr	r3, [pc, #236]	; (80084f8 <UART_SetConfig+0x2d4>)
 800840a:	fba3 2301 	umull	r2, r3, r3, r1
 800840e:	095b      	lsrs	r3, r3, #5
 8008410:	2264      	movs	r2, #100	; 0x64
 8008412:	fb02 f303 	mul.w	r3, r2, r3
 8008416:	1acb      	subs	r3, r1, r3
 8008418:	00db      	lsls	r3, r3, #3
 800841a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800841e:	4b36      	ldr	r3, [pc, #216]	; (80084f8 <UART_SetConfig+0x2d4>)
 8008420:	fba3 2302 	umull	r2, r3, r3, r2
 8008424:	095b      	lsrs	r3, r3, #5
 8008426:	005b      	lsls	r3, r3, #1
 8008428:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800842c:	441c      	add	r4, r3
 800842e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008432:	2200      	movs	r2, #0
 8008434:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008438:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800843c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008440:	4642      	mov	r2, r8
 8008442:	464b      	mov	r3, r9
 8008444:	1891      	adds	r1, r2, r2
 8008446:	63b9      	str	r1, [r7, #56]	; 0x38
 8008448:	415b      	adcs	r3, r3
 800844a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800844c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008450:	4641      	mov	r1, r8
 8008452:	1851      	adds	r1, r2, r1
 8008454:	6339      	str	r1, [r7, #48]	; 0x30
 8008456:	4649      	mov	r1, r9
 8008458:	414b      	adcs	r3, r1
 800845a:	637b      	str	r3, [r7, #52]	; 0x34
 800845c:	f04f 0200 	mov.w	r2, #0
 8008460:	f04f 0300 	mov.w	r3, #0
 8008464:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008468:	4659      	mov	r1, fp
 800846a:	00cb      	lsls	r3, r1, #3
 800846c:	4651      	mov	r1, sl
 800846e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008472:	4651      	mov	r1, sl
 8008474:	00ca      	lsls	r2, r1, #3
 8008476:	4610      	mov	r0, r2
 8008478:	4619      	mov	r1, r3
 800847a:	4603      	mov	r3, r0
 800847c:	4642      	mov	r2, r8
 800847e:	189b      	adds	r3, r3, r2
 8008480:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008484:	464b      	mov	r3, r9
 8008486:	460a      	mov	r2, r1
 8008488:	eb42 0303 	adc.w	r3, r2, r3
 800848c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	2200      	movs	r2, #0
 8008498:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800849c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80084a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80084a4:	460b      	mov	r3, r1
 80084a6:	18db      	adds	r3, r3, r3
 80084a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80084aa:	4613      	mov	r3, r2
 80084ac:	eb42 0303 	adc.w	r3, r2, r3
 80084b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80084b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80084ba:	f7f7 fee9 	bl	8000290 <__aeabi_uldivmod>
 80084be:	4602      	mov	r2, r0
 80084c0:	460b      	mov	r3, r1
 80084c2:	4b0d      	ldr	r3, [pc, #52]	; (80084f8 <UART_SetConfig+0x2d4>)
 80084c4:	fba3 1302 	umull	r1, r3, r3, r2
 80084c8:	095b      	lsrs	r3, r3, #5
 80084ca:	2164      	movs	r1, #100	; 0x64
 80084cc:	fb01 f303 	mul.w	r3, r1, r3
 80084d0:	1ad3      	subs	r3, r2, r3
 80084d2:	00db      	lsls	r3, r3, #3
 80084d4:	3332      	adds	r3, #50	; 0x32
 80084d6:	4a08      	ldr	r2, [pc, #32]	; (80084f8 <UART_SetConfig+0x2d4>)
 80084d8:	fba2 2303 	umull	r2, r3, r2, r3
 80084dc:	095b      	lsrs	r3, r3, #5
 80084de:	f003 0207 	and.w	r2, r3, #7
 80084e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4422      	add	r2, r4
 80084ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80084ec:	e105      	b.n	80086fa <UART_SetConfig+0x4d6>
 80084ee:	bf00      	nop
 80084f0:	40011000 	.word	0x40011000
 80084f4:	40011400 	.word	0x40011400
 80084f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80084fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008500:	2200      	movs	r2, #0
 8008502:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008506:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800850a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800850e:	4642      	mov	r2, r8
 8008510:	464b      	mov	r3, r9
 8008512:	1891      	adds	r1, r2, r2
 8008514:	6239      	str	r1, [r7, #32]
 8008516:	415b      	adcs	r3, r3
 8008518:	627b      	str	r3, [r7, #36]	; 0x24
 800851a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800851e:	4641      	mov	r1, r8
 8008520:	1854      	adds	r4, r2, r1
 8008522:	4649      	mov	r1, r9
 8008524:	eb43 0501 	adc.w	r5, r3, r1
 8008528:	f04f 0200 	mov.w	r2, #0
 800852c:	f04f 0300 	mov.w	r3, #0
 8008530:	00eb      	lsls	r3, r5, #3
 8008532:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008536:	00e2      	lsls	r2, r4, #3
 8008538:	4614      	mov	r4, r2
 800853a:	461d      	mov	r5, r3
 800853c:	4643      	mov	r3, r8
 800853e:	18e3      	adds	r3, r4, r3
 8008540:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008544:	464b      	mov	r3, r9
 8008546:	eb45 0303 	adc.w	r3, r5, r3
 800854a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800854e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	2200      	movs	r2, #0
 8008556:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800855a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800855e:	f04f 0200 	mov.w	r2, #0
 8008562:	f04f 0300 	mov.w	r3, #0
 8008566:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800856a:	4629      	mov	r1, r5
 800856c:	008b      	lsls	r3, r1, #2
 800856e:	4621      	mov	r1, r4
 8008570:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008574:	4621      	mov	r1, r4
 8008576:	008a      	lsls	r2, r1, #2
 8008578:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800857c:	f7f7 fe88 	bl	8000290 <__aeabi_uldivmod>
 8008580:	4602      	mov	r2, r0
 8008582:	460b      	mov	r3, r1
 8008584:	4b60      	ldr	r3, [pc, #384]	; (8008708 <UART_SetConfig+0x4e4>)
 8008586:	fba3 2302 	umull	r2, r3, r3, r2
 800858a:	095b      	lsrs	r3, r3, #5
 800858c:	011c      	lsls	r4, r3, #4
 800858e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008592:	2200      	movs	r2, #0
 8008594:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008598:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800859c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80085a0:	4642      	mov	r2, r8
 80085a2:	464b      	mov	r3, r9
 80085a4:	1891      	adds	r1, r2, r2
 80085a6:	61b9      	str	r1, [r7, #24]
 80085a8:	415b      	adcs	r3, r3
 80085aa:	61fb      	str	r3, [r7, #28]
 80085ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80085b0:	4641      	mov	r1, r8
 80085b2:	1851      	adds	r1, r2, r1
 80085b4:	6139      	str	r1, [r7, #16]
 80085b6:	4649      	mov	r1, r9
 80085b8:	414b      	adcs	r3, r1
 80085ba:	617b      	str	r3, [r7, #20]
 80085bc:	f04f 0200 	mov.w	r2, #0
 80085c0:	f04f 0300 	mov.w	r3, #0
 80085c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80085c8:	4659      	mov	r1, fp
 80085ca:	00cb      	lsls	r3, r1, #3
 80085cc:	4651      	mov	r1, sl
 80085ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80085d2:	4651      	mov	r1, sl
 80085d4:	00ca      	lsls	r2, r1, #3
 80085d6:	4610      	mov	r0, r2
 80085d8:	4619      	mov	r1, r3
 80085da:	4603      	mov	r3, r0
 80085dc:	4642      	mov	r2, r8
 80085de:	189b      	adds	r3, r3, r2
 80085e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80085e4:	464b      	mov	r3, r9
 80085e6:	460a      	mov	r2, r1
 80085e8:	eb42 0303 	adc.w	r3, r2, r3
 80085ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80085f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	2200      	movs	r2, #0
 80085f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80085fa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80085fc:	f04f 0200 	mov.w	r2, #0
 8008600:	f04f 0300 	mov.w	r3, #0
 8008604:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008608:	4649      	mov	r1, r9
 800860a:	008b      	lsls	r3, r1, #2
 800860c:	4641      	mov	r1, r8
 800860e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008612:	4641      	mov	r1, r8
 8008614:	008a      	lsls	r2, r1, #2
 8008616:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800861a:	f7f7 fe39 	bl	8000290 <__aeabi_uldivmod>
 800861e:	4602      	mov	r2, r0
 8008620:	460b      	mov	r3, r1
 8008622:	4b39      	ldr	r3, [pc, #228]	; (8008708 <UART_SetConfig+0x4e4>)
 8008624:	fba3 1302 	umull	r1, r3, r3, r2
 8008628:	095b      	lsrs	r3, r3, #5
 800862a:	2164      	movs	r1, #100	; 0x64
 800862c:	fb01 f303 	mul.w	r3, r1, r3
 8008630:	1ad3      	subs	r3, r2, r3
 8008632:	011b      	lsls	r3, r3, #4
 8008634:	3332      	adds	r3, #50	; 0x32
 8008636:	4a34      	ldr	r2, [pc, #208]	; (8008708 <UART_SetConfig+0x4e4>)
 8008638:	fba2 2303 	umull	r2, r3, r2, r3
 800863c:	095b      	lsrs	r3, r3, #5
 800863e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008642:	441c      	add	r4, r3
 8008644:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008648:	2200      	movs	r2, #0
 800864a:	673b      	str	r3, [r7, #112]	; 0x70
 800864c:	677a      	str	r2, [r7, #116]	; 0x74
 800864e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008652:	4642      	mov	r2, r8
 8008654:	464b      	mov	r3, r9
 8008656:	1891      	adds	r1, r2, r2
 8008658:	60b9      	str	r1, [r7, #8]
 800865a:	415b      	adcs	r3, r3
 800865c:	60fb      	str	r3, [r7, #12]
 800865e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008662:	4641      	mov	r1, r8
 8008664:	1851      	adds	r1, r2, r1
 8008666:	6039      	str	r1, [r7, #0]
 8008668:	4649      	mov	r1, r9
 800866a:	414b      	adcs	r3, r1
 800866c:	607b      	str	r3, [r7, #4]
 800866e:	f04f 0200 	mov.w	r2, #0
 8008672:	f04f 0300 	mov.w	r3, #0
 8008676:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800867a:	4659      	mov	r1, fp
 800867c:	00cb      	lsls	r3, r1, #3
 800867e:	4651      	mov	r1, sl
 8008680:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008684:	4651      	mov	r1, sl
 8008686:	00ca      	lsls	r2, r1, #3
 8008688:	4610      	mov	r0, r2
 800868a:	4619      	mov	r1, r3
 800868c:	4603      	mov	r3, r0
 800868e:	4642      	mov	r2, r8
 8008690:	189b      	adds	r3, r3, r2
 8008692:	66bb      	str	r3, [r7, #104]	; 0x68
 8008694:	464b      	mov	r3, r9
 8008696:	460a      	mov	r2, r1
 8008698:	eb42 0303 	adc.w	r3, r2, r3
 800869c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800869e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	2200      	movs	r2, #0
 80086a6:	663b      	str	r3, [r7, #96]	; 0x60
 80086a8:	667a      	str	r2, [r7, #100]	; 0x64
 80086aa:	f04f 0200 	mov.w	r2, #0
 80086ae:	f04f 0300 	mov.w	r3, #0
 80086b2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80086b6:	4649      	mov	r1, r9
 80086b8:	008b      	lsls	r3, r1, #2
 80086ba:	4641      	mov	r1, r8
 80086bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80086c0:	4641      	mov	r1, r8
 80086c2:	008a      	lsls	r2, r1, #2
 80086c4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80086c8:	f7f7 fde2 	bl	8000290 <__aeabi_uldivmod>
 80086cc:	4602      	mov	r2, r0
 80086ce:	460b      	mov	r3, r1
 80086d0:	4b0d      	ldr	r3, [pc, #52]	; (8008708 <UART_SetConfig+0x4e4>)
 80086d2:	fba3 1302 	umull	r1, r3, r3, r2
 80086d6:	095b      	lsrs	r3, r3, #5
 80086d8:	2164      	movs	r1, #100	; 0x64
 80086da:	fb01 f303 	mul.w	r3, r1, r3
 80086de:	1ad3      	subs	r3, r2, r3
 80086e0:	011b      	lsls	r3, r3, #4
 80086e2:	3332      	adds	r3, #50	; 0x32
 80086e4:	4a08      	ldr	r2, [pc, #32]	; (8008708 <UART_SetConfig+0x4e4>)
 80086e6:	fba2 2303 	umull	r2, r3, r2, r3
 80086ea:	095b      	lsrs	r3, r3, #5
 80086ec:	f003 020f 	and.w	r2, r3, #15
 80086f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4422      	add	r2, r4
 80086f8:	609a      	str	r2, [r3, #8]
}
 80086fa:	bf00      	nop
 80086fc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008700:	46bd      	mov	sp, r7
 8008702:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008706:	bf00      	nop
 8008708:	51eb851f 	.word	0x51eb851f

0800870c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800870c:	b084      	sub	sp, #16
 800870e:	b580      	push	{r7, lr}
 8008710:	b084      	sub	sp, #16
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
 8008716:	f107 001c 	add.w	r0, r7, #28
 800871a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800871e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008720:	2b01      	cmp	r3, #1
 8008722:	d122      	bne.n	800876a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008728:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	68db      	ldr	r3, [r3, #12]
 8008734:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008738:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	68db      	ldr	r3, [r3, #12]
 8008744:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800874c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800874e:	2b01      	cmp	r3, #1
 8008750:	d105      	bne.n	800875e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	68db      	ldr	r3, [r3, #12]
 8008756:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f000 faa2 	bl	8008ca8 <USB_CoreReset>
 8008764:	4603      	mov	r3, r0
 8008766:	73fb      	strb	r3, [r7, #15]
 8008768:	e01a      	b.n	80087a0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	68db      	ldr	r3, [r3, #12]
 800876e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 fa96 	bl	8008ca8 <USB_CoreReset>
 800877c:	4603      	mov	r3, r0
 800877e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008780:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008782:	2b00      	cmp	r3, #0
 8008784:	d106      	bne.n	8008794 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800878a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	639a      	str	r2, [r3, #56]	; 0x38
 8008792:	e005      	b.n	80087a0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008798:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80087a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a2:	2b01      	cmp	r3, #1
 80087a4:	d10b      	bne.n	80087be <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	689b      	ldr	r3, [r3, #8]
 80087aa:	f043 0206 	orr.w	r2, r3, #6
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	689b      	ldr	r3, [r3, #8]
 80087b6:	f043 0220 	orr.w	r2, r3, #32
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80087be:	7bfb      	ldrb	r3, [r7, #15]
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3710      	adds	r7, #16
 80087c4:	46bd      	mov	sp, r7
 80087c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80087ca:	b004      	add	sp, #16
 80087cc:	4770      	bx	lr

080087ce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80087ce:	b480      	push	{r7}
 80087d0:	b083      	sub	sp, #12
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	689b      	ldr	r3, [r3, #8]
 80087da:	f023 0201 	bic.w	r2, r3, #1
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80087e2:	2300      	movs	r3, #0
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	370c      	adds	r7, #12
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr

080087f0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b084      	sub	sp, #16
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	460b      	mov	r3, r1
 80087fa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80087fc:	2300      	movs	r3, #0
 80087fe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	68db      	ldr	r3, [r3, #12]
 8008804:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800880c:	78fb      	ldrb	r3, [r7, #3]
 800880e:	2b01      	cmp	r3, #1
 8008810:	d115      	bne.n	800883e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	68db      	ldr	r3, [r3, #12]
 8008816:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800881e:	2001      	movs	r0, #1
 8008820:	f7fa fbc4 	bl	8002fac <HAL_Delay>
      ms++;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	3301      	adds	r3, #1
 8008828:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 fa2e 	bl	8008c8c <USB_GetMode>
 8008830:	4603      	mov	r3, r0
 8008832:	2b01      	cmp	r3, #1
 8008834:	d01e      	beq.n	8008874 <USB_SetCurrentMode+0x84>
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2b31      	cmp	r3, #49	; 0x31
 800883a:	d9f0      	bls.n	800881e <USB_SetCurrentMode+0x2e>
 800883c:	e01a      	b.n	8008874 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800883e:	78fb      	ldrb	r3, [r7, #3]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d115      	bne.n	8008870 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	68db      	ldr	r3, [r3, #12]
 8008848:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008850:	2001      	movs	r0, #1
 8008852:	f7fa fbab 	bl	8002fac <HAL_Delay>
      ms++;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	3301      	adds	r3, #1
 800885a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f000 fa15 	bl	8008c8c <USB_GetMode>
 8008862:	4603      	mov	r3, r0
 8008864:	2b00      	cmp	r3, #0
 8008866:	d005      	beq.n	8008874 <USB_SetCurrentMode+0x84>
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2b31      	cmp	r3, #49	; 0x31
 800886c:	d9f0      	bls.n	8008850 <USB_SetCurrentMode+0x60>
 800886e:	e001      	b.n	8008874 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008870:	2301      	movs	r3, #1
 8008872:	e005      	b.n	8008880 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2b32      	cmp	r3, #50	; 0x32
 8008878:	d101      	bne.n	800887e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800887a:	2301      	movs	r3, #1
 800887c:	e000      	b.n	8008880 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800887e:	2300      	movs	r3, #0
}
 8008880:	4618      	mov	r0, r3
 8008882:	3710      	adds	r7, #16
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008888:	b084      	sub	sp, #16
 800888a:	b580      	push	{r7, lr}
 800888c:	b086      	sub	sp, #24
 800888e:	af00      	add	r7, sp, #0
 8008890:	6078      	str	r0, [r7, #4]
 8008892:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008896:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800889a:	2300      	movs	r3, #0
 800889c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80088a2:	2300      	movs	r3, #0
 80088a4:	613b      	str	r3, [r7, #16]
 80088a6:	e009      	b.n	80088bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80088a8:	687a      	ldr	r2, [r7, #4]
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	3340      	adds	r3, #64	; 0x40
 80088ae:	009b      	lsls	r3, r3, #2
 80088b0:	4413      	add	r3, r2
 80088b2:	2200      	movs	r2, #0
 80088b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	3301      	adds	r3, #1
 80088ba:	613b      	str	r3, [r7, #16]
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	2b0e      	cmp	r3, #14
 80088c0:	d9f2      	bls.n	80088a8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80088c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d11c      	bne.n	8008902 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	68fa      	ldr	r2, [r7, #12]
 80088d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80088d6:	f043 0302 	orr.w	r3, r3, #2
 80088da:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ec:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088f8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	639a      	str	r2, [r3, #56]	; 0x38
 8008900:	e00b      	b.n	800891a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008906:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008912:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008920:	461a      	mov	r2, r3
 8008922:	2300      	movs	r3, #0
 8008924:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800892c:	4619      	mov	r1, r3
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008934:	461a      	mov	r2, r3
 8008936:	680b      	ldr	r3, [r1, #0]
 8008938:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800893a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800893c:	2b01      	cmp	r3, #1
 800893e:	d10c      	bne.n	800895a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008942:	2b00      	cmp	r3, #0
 8008944:	d104      	bne.n	8008950 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008946:	2100      	movs	r1, #0
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f000 f965 	bl	8008c18 <USB_SetDevSpeed>
 800894e:	e008      	b.n	8008962 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008950:	2101      	movs	r1, #1
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f000 f960 	bl	8008c18 <USB_SetDevSpeed>
 8008958:	e003      	b.n	8008962 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800895a:	2103      	movs	r1, #3
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f000 f95b 	bl	8008c18 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008962:	2110      	movs	r1, #16
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 f8f3 	bl	8008b50 <USB_FlushTxFifo>
 800896a:	4603      	mov	r3, r0
 800896c:	2b00      	cmp	r3, #0
 800896e:	d001      	beq.n	8008974 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008970:	2301      	movs	r3, #1
 8008972:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f000 f91f 	bl	8008bb8 <USB_FlushRxFifo>
 800897a:	4603      	mov	r3, r0
 800897c:	2b00      	cmp	r3, #0
 800897e:	d001      	beq.n	8008984 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008980:	2301      	movs	r3, #1
 8008982:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800898a:	461a      	mov	r2, r3
 800898c:	2300      	movs	r3, #0
 800898e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008996:	461a      	mov	r2, r3
 8008998:	2300      	movs	r3, #0
 800899a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089a2:	461a      	mov	r2, r3
 80089a4:	2300      	movs	r3, #0
 80089a6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80089a8:	2300      	movs	r3, #0
 80089aa:	613b      	str	r3, [r7, #16]
 80089ac:	e043      	b.n	8008a36 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	015a      	lsls	r2, r3, #5
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	4413      	add	r3, r2
 80089b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80089c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80089c4:	d118      	bne.n	80089f8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d10a      	bne.n	80089e2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	015a      	lsls	r2, r3, #5
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	4413      	add	r3, r2
 80089d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089d8:	461a      	mov	r2, r3
 80089da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80089de:	6013      	str	r3, [r2, #0]
 80089e0:	e013      	b.n	8008a0a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	015a      	lsls	r2, r3, #5
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	4413      	add	r3, r2
 80089ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089ee:	461a      	mov	r2, r3
 80089f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80089f4:	6013      	str	r3, [r2, #0]
 80089f6:	e008      	b.n	8008a0a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	015a      	lsls	r2, r3, #5
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	4413      	add	r3, r2
 8008a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a04:	461a      	mov	r2, r3
 8008a06:	2300      	movs	r3, #0
 8008a08:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	015a      	lsls	r2, r3, #5
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	4413      	add	r3, r2
 8008a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a16:	461a      	mov	r2, r3
 8008a18:	2300      	movs	r3, #0
 8008a1a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	015a      	lsls	r2, r3, #5
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	4413      	add	r3, r2
 8008a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a28:	461a      	mov	r2, r3
 8008a2a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008a2e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	3301      	adds	r3, #1
 8008a34:	613b      	str	r3, [r7, #16]
 8008a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a38:	693a      	ldr	r2, [r7, #16]
 8008a3a:	429a      	cmp	r2, r3
 8008a3c:	d3b7      	bcc.n	80089ae <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008a3e:	2300      	movs	r3, #0
 8008a40:	613b      	str	r3, [r7, #16]
 8008a42:	e043      	b.n	8008acc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008a44:	693b      	ldr	r3, [r7, #16]
 8008a46:	015a      	lsls	r2, r3, #5
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	4413      	add	r3, r2
 8008a4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a5a:	d118      	bne.n	8008a8e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d10a      	bne.n	8008a78 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	015a      	lsls	r2, r3, #5
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	4413      	add	r3, r2
 8008a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a6e:	461a      	mov	r2, r3
 8008a70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008a74:	6013      	str	r3, [r2, #0]
 8008a76:	e013      	b.n	8008aa0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	015a      	lsls	r2, r3, #5
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	4413      	add	r3, r2
 8008a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a84:	461a      	mov	r2, r3
 8008a86:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008a8a:	6013      	str	r3, [r2, #0]
 8008a8c:	e008      	b.n	8008aa0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	015a      	lsls	r2, r3, #5
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	4413      	add	r3, r2
 8008a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	015a      	lsls	r2, r3, #5
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	4413      	add	r3, r2
 8008aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aac:	461a      	mov	r2, r3
 8008aae:	2300      	movs	r3, #0
 8008ab0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	015a      	lsls	r2, r3, #5
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	4413      	add	r3, r2
 8008aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008abe:	461a      	mov	r2, r3
 8008ac0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008ac4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	3301      	adds	r3, #1
 8008aca:	613b      	str	r3, [r7, #16]
 8008acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ace:	693a      	ldr	r2, [r7, #16]
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	d3b7      	bcc.n	8008a44 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ada:	691b      	ldr	r3, [r3, #16]
 8008adc:	68fa      	ldr	r2, [r7, #12]
 8008ade:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ae2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ae6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2200      	movs	r2, #0
 8008aec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008af4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d105      	bne.n	8008b08 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	699b      	ldr	r3, [r3, #24]
 8008b00:	f043 0210 	orr.w	r2, r3, #16
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	699a      	ldr	r2, [r3, #24]
 8008b0c:	4b0f      	ldr	r3, [pc, #60]	; (8008b4c <USB_DevInit+0x2c4>)
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	687a      	ldr	r2, [r7, #4]
 8008b12:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d005      	beq.n	8008b26 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	699b      	ldr	r3, [r3, #24]
 8008b1e:	f043 0208 	orr.w	r2, r3, #8
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008b26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b28:	2b01      	cmp	r3, #1
 8008b2a:	d107      	bne.n	8008b3c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	699b      	ldr	r3, [r3, #24]
 8008b30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b34:	f043 0304 	orr.w	r3, r3, #4
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008b3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3718      	adds	r7, #24
 8008b42:	46bd      	mov	sp, r7
 8008b44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008b48:	b004      	add	sp, #16
 8008b4a:	4770      	bx	lr
 8008b4c:	803c3800 	.word	0x803c3800

08008b50 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b085      	sub	sp, #20
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	3301      	adds	r3, #1
 8008b62:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	4a13      	ldr	r2, [pc, #76]	; (8008bb4 <USB_FlushTxFifo+0x64>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d901      	bls.n	8008b70 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008b6c:	2303      	movs	r3, #3
 8008b6e:	e01b      	b.n	8008ba8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	691b      	ldr	r3, [r3, #16]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	daf2      	bge.n	8008b5e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	019b      	lsls	r3, r3, #6
 8008b80:	f043 0220 	orr.w	r2, r3, #32
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	4a08      	ldr	r2, [pc, #32]	; (8008bb4 <USB_FlushTxFifo+0x64>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d901      	bls.n	8008b9a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008b96:	2303      	movs	r3, #3
 8008b98:	e006      	b.n	8008ba8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	691b      	ldr	r3, [r3, #16]
 8008b9e:	f003 0320 	and.w	r3, r3, #32
 8008ba2:	2b20      	cmp	r3, #32
 8008ba4:	d0f0      	beq.n	8008b88 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008ba6:	2300      	movs	r3, #0
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3714      	adds	r7, #20
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr
 8008bb4:	00030d40 	.word	0x00030d40

08008bb8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b085      	sub	sp, #20
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	4a11      	ldr	r2, [pc, #68]	; (8008c14 <USB_FlushRxFifo+0x5c>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d901      	bls.n	8008bd6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008bd2:	2303      	movs	r3, #3
 8008bd4:	e018      	b.n	8008c08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	691b      	ldr	r3, [r3, #16]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	daf2      	bge.n	8008bc4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008bde:	2300      	movs	r3, #0
 8008be0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2210      	movs	r2, #16
 8008be6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	3301      	adds	r3, #1
 8008bec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	4a08      	ldr	r2, [pc, #32]	; (8008c14 <USB_FlushRxFifo+0x5c>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d901      	bls.n	8008bfa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008bf6:	2303      	movs	r3, #3
 8008bf8:	e006      	b.n	8008c08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	691b      	ldr	r3, [r3, #16]
 8008bfe:	f003 0310 	and.w	r3, r3, #16
 8008c02:	2b10      	cmp	r3, #16
 8008c04:	d0f0      	beq.n	8008be8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008c06:	2300      	movs	r3, #0
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3714      	adds	r7, #20
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c12:	4770      	bx	lr
 8008c14:	00030d40 	.word	0x00030d40

08008c18 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b085      	sub	sp, #20
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	460b      	mov	r3, r1
 8008c22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c2e:	681a      	ldr	r2, [r3, #0]
 8008c30:	78fb      	ldrb	r3, [r7, #3]
 8008c32:	68f9      	ldr	r1, [r7, #12]
 8008c34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008c3c:	2300      	movs	r3, #0
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3714      	adds	r7, #20
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr

08008c4a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008c4a:	b480      	push	{r7}
 8008c4c:	b085      	sub	sp, #20
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	68fa      	ldr	r2, [r7, #12]
 8008c60:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008c64:	f023 0303 	bic.w	r3, r3, #3
 8008c68:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c70:	685b      	ldr	r3, [r3, #4]
 8008c72:	68fa      	ldr	r2, [r7, #12]
 8008c74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c78:	f043 0302 	orr.w	r3, r3, #2
 8008c7c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008c7e:	2300      	movs	r3, #0
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3714      	adds	r7, #20
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr

08008c8c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b083      	sub	sp, #12
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	695b      	ldr	r3, [r3, #20]
 8008c98:	f003 0301 	and.w	r3, r3, #1
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	370c      	adds	r7, #12
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr

08008ca8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b085      	sub	sp, #20
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	4a13      	ldr	r2, [pc, #76]	; (8008d0c <USB_CoreReset+0x64>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d901      	bls.n	8008cc6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008cc2:	2303      	movs	r3, #3
 8008cc4:	e01b      	b.n	8008cfe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	691b      	ldr	r3, [r3, #16]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	daf2      	bge.n	8008cb4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	691b      	ldr	r3, [r3, #16]
 8008cd6:	f043 0201 	orr.w	r2, r3, #1
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	3301      	adds	r3, #1
 8008ce2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	4a09      	ldr	r2, [pc, #36]	; (8008d0c <USB_CoreReset+0x64>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d901      	bls.n	8008cf0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008cec:	2303      	movs	r3, #3
 8008cee:	e006      	b.n	8008cfe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	691b      	ldr	r3, [r3, #16]
 8008cf4:	f003 0301 	and.w	r3, r3, #1
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	d0f0      	beq.n	8008cde <USB_CoreReset+0x36>

  return HAL_OK;
 8008cfc:	2300      	movs	r3, #0
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3714      	adds	r7, #20
 8008d02:	46bd      	mov	sp, r7
 8008d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d08:	4770      	bx	lr
 8008d0a:	bf00      	nop
 8008d0c:	00030d40 	.word	0x00030d40

08008d10 <__errno>:
 8008d10:	4b01      	ldr	r3, [pc, #4]	; (8008d18 <__errno+0x8>)
 8008d12:	6818      	ldr	r0, [r3, #0]
 8008d14:	4770      	bx	lr
 8008d16:	bf00      	nop
 8008d18:	20000120 	.word	0x20000120

08008d1c <__libc_init_array>:
 8008d1c:	b570      	push	{r4, r5, r6, lr}
 8008d1e:	4d0d      	ldr	r5, [pc, #52]	; (8008d54 <__libc_init_array+0x38>)
 8008d20:	4c0d      	ldr	r4, [pc, #52]	; (8008d58 <__libc_init_array+0x3c>)
 8008d22:	1b64      	subs	r4, r4, r5
 8008d24:	10a4      	asrs	r4, r4, #2
 8008d26:	2600      	movs	r6, #0
 8008d28:	42a6      	cmp	r6, r4
 8008d2a:	d109      	bne.n	8008d40 <__libc_init_array+0x24>
 8008d2c:	4d0b      	ldr	r5, [pc, #44]	; (8008d5c <__libc_init_array+0x40>)
 8008d2e:	4c0c      	ldr	r4, [pc, #48]	; (8008d60 <__libc_init_array+0x44>)
 8008d30:	f001 f88e 	bl	8009e50 <_init>
 8008d34:	1b64      	subs	r4, r4, r5
 8008d36:	10a4      	asrs	r4, r4, #2
 8008d38:	2600      	movs	r6, #0
 8008d3a:	42a6      	cmp	r6, r4
 8008d3c:	d105      	bne.n	8008d4a <__libc_init_array+0x2e>
 8008d3e:	bd70      	pop	{r4, r5, r6, pc}
 8008d40:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d44:	4798      	blx	r3
 8008d46:	3601      	adds	r6, #1
 8008d48:	e7ee      	b.n	8008d28 <__libc_init_array+0xc>
 8008d4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d4e:	4798      	blx	r3
 8008d50:	3601      	adds	r6, #1
 8008d52:	e7f2      	b.n	8008d3a <__libc_init_array+0x1e>
 8008d54:	0800a0b8 	.word	0x0800a0b8
 8008d58:	0800a0b8 	.word	0x0800a0b8
 8008d5c:	0800a0b8 	.word	0x0800a0b8
 8008d60:	0800a0bc 	.word	0x0800a0bc

08008d64 <memset>:
 8008d64:	4402      	add	r2, r0
 8008d66:	4603      	mov	r3, r0
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d100      	bne.n	8008d6e <memset+0xa>
 8008d6c:	4770      	bx	lr
 8008d6e:	f803 1b01 	strb.w	r1, [r3], #1
 8008d72:	e7f9      	b.n	8008d68 <memset+0x4>

08008d74 <_puts_r>:
 8008d74:	b570      	push	{r4, r5, r6, lr}
 8008d76:	460e      	mov	r6, r1
 8008d78:	4605      	mov	r5, r0
 8008d7a:	b118      	cbz	r0, 8008d84 <_puts_r+0x10>
 8008d7c:	6983      	ldr	r3, [r0, #24]
 8008d7e:	b90b      	cbnz	r3, 8008d84 <_puts_r+0x10>
 8008d80:	f000 fa68 	bl	8009254 <__sinit>
 8008d84:	69ab      	ldr	r3, [r5, #24]
 8008d86:	68ac      	ldr	r4, [r5, #8]
 8008d88:	b913      	cbnz	r3, 8008d90 <_puts_r+0x1c>
 8008d8a:	4628      	mov	r0, r5
 8008d8c:	f000 fa62 	bl	8009254 <__sinit>
 8008d90:	4b2c      	ldr	r3, [pc, #176]	; (8008e44 <_puts_r+0xd0>)
 8008d92:	429c      	cmp	r4, r3
 8008d94:	d120      	bne.n	8008dd8 <_puts_r+0x64>
 8008d96:	686c      	ldr	r4, [r5, #4]
 8008d98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d9a:	07db      	lsls	r3, r3, #31
 8008d9c:	d405      	bmi.n	8008daa <_puts_r+0x36>
 8008d9e:	89a3      	ldrh	r3, [r4, #12]
 8008da0:	0598      	lsls	r0, r3, #22
 8008da2:	d402      	bmi.n	8008daa <_puts_r+0x36>
 8008da4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008da6:	f000 faf3 	bl	8009390 <__retarget_lock_acquire_recursive>
 8008daa:	89a3      	ldrh	r3, [r4, #12]
 8008dac:	0719      	lsls	r1, r3, #28
 8008dae:	d51d      	bpl.n	8008dec <_puts_r+0x78>
 8008db0:	6923      	ldr	r3, [r4, #16]
 8008db2:	b1db      	cbz	r3, 8008dec <_puts_r+0x78>
 8008db4:	3e01      	subs	r6, #1
 8008db6:	68a3      	ldr	r3, [r4, #8]
 8008db8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008dbc:	3b01      	subs	r3, #1
 8008dbe:	60a3      	str	r3, [r4, #8]
 8008dc0:	bb39      	cbnz	r1, 8008e12 <_puts_r+0x9e>
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	da38      	bge.n	8008e38 <_puts_r+0xc4>
 8008dc6:	4622      	mov	r2, r4
 8008dc8:	210a      	movs	r1, #10
 8008dca:	4628      	mov	r0, r5
 8008dcc:	f000 f868 	bl	8008ea0 <__swbuf_r>
 8008dd0:	3001      	adds	r0, #1
 8008dd2:	d011      	beq.n	8008df8 <_puts_r+0x84>
 8008dd4:	250a      	movs	r5, #10
 8008dd6:	e011      	b.n	8008dfc <_puts_r+0x88>
 8008dd8:	4b1b      	ldr	r3, [pc, #108]	; (8008e48 <_puts_r+0xd4>)
 8008dda:	429c      	cmp	r4, r3
 8008ddc:	d101      	bne.n	8008de2 <_puts_r+0x6e>
 8008dde:	68ac      	ldr	r4, [r5, #8]
 8008de0:	e7da      	b.n	8008d98 <_puts_r+0x24>
 8008de2:	4b1a      	ldr	r3, [pc, #104]	; (8008e4c <_puts_r+0xd8>)
 8008de4:	429c      	cmp	r4, r3
 8008de6:	bf08      	it	eq
 8008de8:	68ec      	ldreq	r4, [r5, #12]
 8008dea:	e7d5      	b.n	8008d98 <_puts_r+0x24>
 8008dec:	4621      	mov	r1, r4
 8008dee:	4628      	mov	r0, r5
 8008df0:	f000 f8a8 	bl	8008f44 <__swsetup_r>
 8008df4:	2800      	cmp	r0, #0
 8008df6:	d0dd      	beq.n	8008db4 <_puts_r+0x40>
 8008df8:	f04f 35ff 	mov.w	r5, #4294967295
 8008dfc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008dfe:	07da      	lsls	r2, r3, #31
 8008e00:	d405      	bmi.n	8008e0e <_puts_r+0x9a>
 8008e02:	89a3      	ldrh	r3, [r4, #12]
 8008e04:	059b      	lsls	r3, r3, #22
 8008e06:	d402      	bmi.n	8008e0e <_puts_r+0x9a>
 8008e08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e0a:	f000 fac2 	bl	8009392 <__retarget_lock_release_recursive>
 8008e0e:	4628      	mov	r0, r5
 8008e10:	bd70      	pop	{r4, r5, r6, pc}
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	da04      	bge.n	8008e20 <_puts_r+0xac>
 8008e16:	69a2      	ldr	r2, [r4, #24]
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	dc06      	bgt.n	8008e2a <_puts_r+0xb6>
 8008e1c:	290a      	cmp	r1, #10
 8008e1e:	d004      	beq.n	8008e2a <_puts_r+0xb6>
 8008e20:	6823      	ldr	r3, [r4, #0]
 8008e22:	1c5a      	adds	r2, r3, #1
 8008e24:	6022      	str	r2, [r4, #0]
 8008e26:	7019      	strb	r1, [r3, #0]
 8008e28:	e7c5      	b.n	8008db6 <_puts_r+0x42>
 8008e2a:	4622      	mov	r2, r4
 8008e2c:	4628      	mov	r0, r5
 8008e2e:	f000 f837 	bl	8008ea0 <__swbuf_r>
 8008e32:	3001      	adds	r0, #1
 8008e34:	d1bf      	bne.n	8008db6 <_puts_r+0x42>
 8008e36:	e7df      	b.n	8008df8 <_puts_r+0x84>
 8008e38:	6823      	ldr	r3, [r4, #0]
 8008e3a:	250a      	movs	r5, #10
 8008e3c:	1c5a      	adds	r2, r3, #1
 8008e3e:	6022      	str	r2, [r4, #0]
 8008e40:	701d      	strb	r5, [r3, #0]
 8008e42:	e7db      	b.n	8008dfc <_puts_r+0x88>
 8008e44:	0800a03c 	.word	0x0800a03c
 8008e48:	0800a05c 	.word	0x0800a05c
 8008e4c:	0800a01c 	.word	0x0800a01c

08008e50 <puts>:
 8008e50:	4b02      	ldr	r3, [pc, #8]	; (8008e5c <puts+0xc>)
 8008e52:	4601      	mov	r1, r0
 8008e54:	6818      	ldr	r0, [r3, #0]
 8008e56:	f7ff bf8d 	b.w	8008d74 <_puts_r>
 8008e5a:	bf00      	nop
 8008e5c:	20000120 	.word	0x20000120

08008e60 <siprintf>:
 8008e60:	b40e      	push	{r1, r2, r3}
 8008e62:	b500      	push	{lr}
 8008e64:	b09c      	sub	sp, #112	; 0x70
 8008e66:	ab1d      	add	r3, sp, #116	; 0x74
 8008e68:	9002      	str	r0, [sp, #8]
 8008e6a:	9006      	str	r0, [sp, #24]
 8008e6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008e70:	4809      	ldr	r0, [pc, #36]	; (8008e98 <siprintf+0x38>)
 8008e72:	9107      	str	r1, [sp, #28]
 8008e74:	9104      	str	r1, [sp, #16]
 8008e76:	4909      	ldr	r1, [pc, #36]	; (8008e9c <siprintf+0x3c>)
 8008e78:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e7c:	9105      	str	r1, [sp, #20]
 8008e7e:	6800      	ldr	r0, [r0, #0]
 8008e80:	9301      	str	r3, [sp, #4]
 8008e82:	a902      	add	r1, sp, #8
 8008e84:	f000 fc28 	bl	80096d8 <_svfiprintf_r>
 8008e88:	9b02      	ldr	r3, [sp, #8]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	701a      	strb	r2, [r3, #0]
 8008e8e:	b01c      	add	sp, #112	; 0x70
 8008e90:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e94:	b003      	add	sp, #12
 8008e96:	4770      	bx	lr
 8008e98:	20000120 	.word	0x20000120
 8008e9c:	ffff0208 	.word	0xffff0208

08008ea0 <__swbuf_r>:
 8008ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ea2:	460e      	mov	r6, r1
 8008ea4:	4614      	mov	r4, r2
 8008ea6:	4605      	mov	r5, r0
 8008ea8:	b118      	cbz	r0, 8008eb2 <__swbuf_r+0x12>
 8008eaa:	6983      	ldr	r3, [r0, #24]
 8008eac:	b90b      	cbnz	r3, 8008eb2 <__swbuf_r+0x12>
 8008eae:	f000 f9d1 	bl	8009254 <__sinit>
 8008eb2:	4b21      	ldr	r3, [pc, #132]	; (8008f38 <__swbuf_r+0x98>)
 8008eb4:	429c      	cmp	r4, r3
 8008eb6:	d12b      	bne.n	8008f10 <__swbuf_r+0x70>
 8008eb8:	686c      	ldr	r4, [r5, #4]
 8008eba:	69a3      	ldr	r3, [r4, #24]
 8008ebc:	60a3      	str	r3, [r4, #8]
 8008ebe:	89a3      	ldrh	r3, [r4, #12]
 8008ec0:	071a      	lsls	r2, r3, #28
 8008ec2:	d52f      	bpl.n	8008f24 <__swbuf_r+0x84>
 8008ec4:	6923      	ldr	r3, [r4, #16]
 8008ec6:	b36b      	cbz	r3, 8008f24 <__swbuf_r+0x84>
 8008ec8:	6923      	ldr	r3, [r4, #16]
 8008eca:	6820      	ldr	r0, [r4, #0]
 8008ecc:	1ac0      	subs	r0, r0, r3
 8008ece:	6963      	ldr	r3, [r4, #20]
 8008ed0:	b2f6      	uxtb	r6, r6
 8008ed2:	4283      	cmp	r3, r0
 8008ed4:	4637      	mov	r7, r6
 8008ed6:	dc04      	bgt.n	8008ee2 <__swbuf_r+0x42>
 8008ed8:	4621      	mov	r1, r4
 8008eda:	4628      	mov	r0, r5
 8008edc:	f000 f926 	bl	800912c <_fflush_r>
 8008ee0:	bb30      	cbnz	r0, 8008f30 <__swbuf_r+0x90>
 8008ee2:	68a3      	ldr	r3, [r4, #8]
 8008ee4:	3b01      	subs	r3, #1
 8008ee6:	60a3      	str	r3, [r4, #8]
 8008ee8:	6823      	ldr	r3, [r4, #0]
 8008eea:	1c5a      	adds	r2, r3, #1
 8008eec:	6022      	str	r2, [r4, #0]
 8008eee:	701e      	strb	r6, [r3, #0]
 8008ef0:	6963      	ldr	r3, [r4, #20]
 8008ef2:	3001      	adds	r0, #1
 8008ef4:	4283      	cmp	r3, r0
 8008ef6:	d004      	beq.n	8008f02 <__swbuf_r+0x62>
 8008ef8:	89a3      	ldrh	r3, [r4, #12]
 8008efa:	07db      	lsls	r3, r3, #31
 8008efc:	d506      	bpl.n	8008f0c <__swbuf_r+0x6c>
 8008efe:	2e0a      	cmp	r6, #10
 8008f00:	d104      	bne.n	8008f0c <__swbuf_r+0x6c>
 8008f02:	4621      	mov	r1, r4
 8008f04:	4628      	mov	r0, r5
 8008f06:	f000 f911 	bl	800912c <_fflush_r>
 8008f0a:	b988      	cbnz	r0, 8008f30 <__swbuf_r+0x90>
 8008f0c:	4638      	mov	r0, r7
 8008f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f10:	4b0a      	ldr	r3, [pc, #40]	; (8008f3c <__swbuf_r+0x9c>)
 8008f12:	429c      	cmp	r4, r3
 8008f14:	d101      	bne.n	8008f1a <__swbuf_r+0x7a>
 8008f16:	68ac      	ldr	r4, [r5, #8]
 8008f18:	e7cf      	b.n	8008eba <__swbuf_r+0x1a>
 8008f1a:	4b09      	ldr	r3, [pc, #36]	; (8008f40 <__swbuf_r+0xa0>)
 8008f1c:	429c      	cmp	r4, r3
 8008f1e:	bf08      	it	eq
 8008f20:	68ec      	ldreq	r4, [r5, #12]
 8008f22:	e7ca      	b.n	8008eba <__swbuf_r+0x1a>
 8008f24:	4621      	mov	r1, r4
 8008f26:	4628      	mov	r0, r5
 8008f28:	f000 f80c 	bl	8008f44 <__swsetup_r>
 8008f2c:	2800      	cmp	r0, #0
 8008f2e:	d0cb      	beq.n	8008ec8 <__swbuf_r+0x28>
 8008f30:	f04f 37ff 	mov.w	r7, #4294967295
 8008f34:	e7ea      	b.n	8008f0c <__swbuf_r+0x6c>
 8008f36:	bf00      	nop
 8008f38:	0800a03c 	.word	0x0800a03c
 8008f3c:	0800a05c 	.word	0x0800a05c
 8008f40:	0800a01c 	.word	0x0800a01c

08008f44 <__swsetup_r>:
 8008f44:	4b32      	ldr	r3, [pc, #200]	; (8009010 <__swsetup_r+0xcc>)
 8008f46:	b570      	push	{r4, r5, r6, lr}
 8008f48:	681d      	ldr	r5, [r3, #0]
 8008f4a:	4606      	mov	r6, r0
 8008f4c:	460c      	mov	r4, r1
 8008f4e:	b125      	cbz	r5, 8008f5a <__swsetup_r+0x16>
 8008f50:	69ab      	ldr	r3, [r5, #24]
 8008f52:	b913      	cbnz	r3, 8008f5a <__swsetup_r+0x16>
 8008f54:	4628      	mov	r0, r5
 8008f56:	f000 f97d 	bl	8009254 <__sinit>
 8008f5a:	4b2e      	ldr	r3, [pc, #184]	; (8009014 <__swsetup_r+0xd0>)
 8008f5c:	429c      	cmp	r4, r3
 8008f5e:	d10f      	bne.n	8008f80 <__swsetup_r+0x3c>
 8008f60:	686c      	ldr	r4, [r5, #4]
 8008f62:	89a3      	ldrh	r3, [r4, #12]
 8008f64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f68:	0719      	lsls	r1, r3, #28
 8008f6a:	d42c      	bmi.n	8008fc6 <__swsetup_r+0x82>
 8008f6c:	06dd      	lsls	r5, r3, #27
 8008f6e:	d411      	bmi.n	8008f94 <__swsetup_r+0x50>
 8008f70:	2309      	movs	r3, #9
 8008f72:	6033      	str	r3, [r6, #0]
 8008f74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008f78:	81a3      	strh	r3, [r4, #12]
 8008f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8008f7e:	e03e      	b.n	8008ffe <__swsetup_r+0xba>
 8008f80:	4b25      	ldr	r3, [pc, #148]	; (8009018 <__swsetup_r+0xd4>)
 8008f82:	429c      	cmp	r4, r3
 8008f84:	d101      	bne.n	8008f8a <__swsetup_r+0x46>
 8008f86:	68ac      	ldr	r4, [r5, #8]
 8008f88:	e7eb      	b.n	8008f62 <__swsetup_r+0x1e>
 8008f8a:	4b24      	ldr	r3, [pc, #144]	; (800901c <__swsetup_r+0xd8>)
 8008f8c:	429c      	cmp	r4, r3
 8008f8e:	bf08      	it	eq
 8008f90:	68ec      	ldreq	r4, [r5, #12]
 8008f92:	e7e6      	b.n	8008f62 <__swsetup_r+0x1e>
 8008f94:	0758      	lsls	r0, r3, #29
 8008f96:	d512      	bpl.n	8008fbe <__swsetup_r+0x7a>
 8008f98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f9a:	b141      	cbz	r1, 8008fae <__swsetup_r+0x6a>
 8008f9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fa0:	4299      	cmp	r1, r3
 8008fa2:	d002      	beq.n	8008faa <__swsetup_r+0x66>
 8008fa4:	4630      	mov	r0, r6
 8008fa6:	f000 fa5b 	bl	8009460 <_free_r>
 8008faa:	2300      	movs	r3, #0
 8008fac:	6363      	str	r3, [r4, #52]	; 0x34
 8008fae:	89a3      	ldrh	r3, [r4, #12]
 8008fb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008fb4:	81a3      	strh	r3, [r4, #12]
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	6063      	str	r3, [r4, #4]
 8008fba:	6923      	ldr	r3, [r4, #16]
 8008fbc:	6023      	str	r3, [r4, #0]
 8008fbe:	89a3      	ldrh	r3, [r4, #12]
 8008fc0:	f043 0308 	orr.w	r3, r3, #8
 8008fc4:	81a3      	strh	r3, [r4, #12]
 8008fc6:	6923      	ldr	r3, [r4, #16]
 8008fc8:	b94b      	cbnz	r3, 8008fde <__swsetup_r+0x9a>
 8008fca:	89a3      	ldrh	r3, [r4, #12]
 8008fcc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008fd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fd4:	d003      	beq.n	8008fde <__swsetup_r+0x9a>
 8008fd6:	4621      	mov	r1, r4
 8008fd8:	4630      	mov	r0, r6
 8008fda:	f000 fa01 	bl	80093e0 <__smakebuf_r>
 8008fde:	89a0      	ldrh	r0, [r4, #12]
 8008fe0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008fe4:	f010 0301 	ands.w	r3, r0, #1
 8008fe8:	d00a      	beq.n	8009000 <__swsetup_r+0xbc>
 8008fea:	2300      	movs	r3, #0
 8008fec:	60a3      	str	r3, [r4, #8]
 8008fee:	6963      	ldr	r3, [r4, #20]
 8008ff0:	425b      	negs	r3, r3
 8008ff2:	61a3      	str	r3, [r4, #24]
 8008ff4:	6923      	ldr	r3, [r4, #16]
 8008ff6:	b943      	cbnz	r3, 800900a <__swsetup_r+0xc6>
 8008ff8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008ffc:	d1ba      	bne.n	8008f74 <__swsetup_r+0x30>
 8008ffe:	bd70      	pop	{r4, r5, r6, pc}
 8009000:	0781      	lsls	r1, r0, #30
 8009002:	bf58      	it	pl
 8009004:	6963      	ldrpl	r3, [r4, #20]
 8009006:	60a3      	str	r3, [r4, #8]
 8009008:	e7f4      	b.n	8008ff4 <__swsetup_r+0xb0>
 800900a:	2000      	movs	r0, #0
 800900c:	e7f7      	b.n	8008ffe <__swsetup_r+0xba>
 800900e:	bf00      	nop
 8009010:	20000120 	.word	0x20000120
 8009014:	0800a03c 	.word	0x0800a03c
 8009018:	0800a05c 	.word	0x0800a05c
 800901c:	0800a01c 	.word	0x0800a01c

08009020 <__sflush_r>:
 8009020:	898a      	ldrh	r2, [r1, #12]
 8009022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009026:	4605      	mov	r5, r0
 8009028:	0710      	lsls	r0, r2, #28
 800902a:	460c      	mov	r4, r1
 800902c:	d458      	bmi.n	80090e0 <__sflush_r+0xc0>
 800902e:	684b      	ldr	r3, [r1, #4]
 8009030:	2b00      	cmp	r3, #0
 8009032:	dc05      	bgt.n	8009040 <__sflush_r+0x20>
 8009034:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009036:	2b00      	cmp	r3, #0
 8009038:	dc02      	bgt.n	8009040 <__sflush_r+0x20>
 800903a:	2000      	movs	r0, #0
 800903c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009040:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009042:	2e00      	cmp	r6, #0
 8009044:	d0f9      	beq.n	800903a <__sflush_r+0x1a>
 8009046:	2300      	movs	r3, #0
 8009048:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800904c:	682f      	ldr	r7, [r5, #0]
 800904e:	602b      	str	r3, [r5, #0]
 8009050:	d032      	beq.n	80090b8 <__sflush_r+0x98>
 8009052:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009054:	89a3      	ldrh	r3, [r4, #12]
 8009056:	075a      	lsls	r2, r3, #29
 8009058:	d505      	bpl.n	8009066 <__sflush_r+0x46>
 800905a:	6863      	ldr	r3, [r4, #4]
 800905c:	1ac0      	subs	r0, r0, r3
 800905e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009060:	b10b      	cbz	r3, 8009066 <__sflush_r+0x46>
 8009062:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009064:	1ac0      	subs	r0, r0, r3
 8009066:	2300      	movs	r3, #0
 8009068:	4602      	mov	r2, r0
 800906a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800906c:	6a21      	ldr	r1, [r4, #32]
 800906e:	4628      	mov	r0, r5
 8009070:	47b0      	blx	r6
 8009072:	1c43      	adds	r3, r0, #1
 8009074:	89a3      	ldrh	r3, [r4, #12]
 8009076:	d106      	bne.n	8009086 <__sflush_r+0x66>
 8009078:	6829      	ldr	r1, [r5, #0]
 800907a:	291d      	cmp	r1, #29
 800907c:	d82c      	bhi.n	80090d8 <__sflush_r+0xb8>
 800907e:	4a2a      	ldr	r2, [pc, #168]	; (8009128 <__sflush_r+0x108>)
 8009080:	40ca      	lsrs	r2, r1
 8009082:	07d6      	lsls	r6, r2, #31
 8009084:	d528      	bpl.n	80090d8 <__sflush_r+0xb8>
 8009086:	2200      	movs	r2, #0
 8009088:	6062      	str	r2, [r4, #4]
 800908a:	04d9      	lsls	r1, r3, #19
 800908c:	6922      	ldr	r2, [r4, #16]
 800908e:	6022      	str	r2, [r4, #0]
 8009090:	d504      	bpl.n	800909c <__sflush_r+0x7c>
 8009092:	1c42      	adds	r2, r0, #1
 8009094:	d101      	bne.n	800909a <__sflush_r+0x7a>
 8009096:	682b      	ldr	r3, [r5, #0]
 8009098:	b903      	cbnz	r3, 800909c <__sflush_r+0x7c>
 800909a:	6560      	str	r0, [r4, #84]	; 0x54
 800909c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800909e:	602f      	str	r7, [r5, #0]
 80090a0:	2900      	cmp	r1, #0
 80090a2:	d0ca      	beq.n	800903a <__sflush_r+0x1a>
 80090a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090a8:	4299      	cmp	r1, r3
 80090aa:	d002      	beq.n	80090b2 <__sflush_r+0x92>
 80090ac:	4628      	mov	r0, r5
 80090ae:	f000 f9d7 	bl	8009460 <_free_r>
 80090b2:	2000      	movs	r0, #0
 80090b4:	6360      	str	r0, [r4, #52]	; 0x34
 80090b6:	e7c1      	b.n	800903c <__sflush_r+0x1c>
 80090b8:	6a21      	ldr	r1, [r4, #32]
 80090ba:	2301      	movs	r3, #1
 80090bc:	4628      	mov	r0, r5
 80090be:	47b0      	blx	r6
 80090c0:	1c41      	adds	r1, r0, #1
 80090c2:	d1c7      	bne.n	8009054 <__sflush_r+0x34>
 80090c4:	682b      	ldr	r3, [r5, #0]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d0c4      	beq.n	8009054 <__sflush_r+0x34>
 80090ca:	2b1d      	cmp	r3, #29
 80090cc:	d001      	beq.n	80090d2 <__sflush_r+0xb2>
 80090ce:	2b16      	cmp	r3, #22
 80090d0:	d101      	bne.n	80090d6 <__sflush_r+0xb6>
 80090d2:	602f      	str	r7, [r5, #0]
 80090d4:	e7b1      	b.n	800903a <__sflush_r+0x1a>
 80090d6:	89a3      	ldrh	r3, [r4, #12]
 80090d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090dc:	81a3      	strh	r3, [r4, #12]
 80090de:	e7ad      	b.n	800903c <__sflush_r+0x1c>
 80090e0:	690f      	ldr	r7, [r1, #16]
 80090e2:	2f00      	cmp	r7, #0
 80090e4:	d0a9      	beq.n	800903a <__sflush_r+0x1a>
 80090e6:	0793      	lsls	r3, r2, #30
 80090e8:	680e      	ldr	r6, [r1, #0]
 80090ea:	bf08      	it	eq
 80090ec:	694b      	ldreq	r3, [r1, #20]
 80090ee:	600f      	str	r7, [r1, #0]
 80090f0:	bf18      	it	ne
 80090f2:	2300      	movne	r3, #0
 80090f4:	eba6 0807 	sub.w	r8, r6, r7
 80090f8:	608b      	str	r3, [r1, #8]
 80090fa:	f1b8 0f00 	cmp.w	r8, #0
 80090fe:	dd9c      	ble.n	800903a <__sflush_r+0x1a>
 8009100:	6a21      	ldr	r1, [r4, #32]
 8009102:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009104:	4643      	mov	r3, r8
 8009106:	463a      	mov	r2, r7
 8009108:	4628      	mov	r0, r5
 800910a:	47b0      	blx	r6
 800910c:	2800      	cmp	r0, #0
 800910e:	dc06      	bgt.n	800911e <__sflush_r+0xfe>
 8009110:	89a3      	ldrh	r3, [r4, #12]
 8009112:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009116:	81a3      	strh	r3, [r4, #12]
 8009118:	f04f 30ff 	mov.w	r0, #4294967295
 800911c:	e78e      	b.n	800903c <__sflush_r+0x1c>
 800911e:	4407      	add	r7, r0
 8009120:	eba8 0800 	sub.w	r8, r8, r0
 8009124:	e7e9      	b.n	80090fa <__sflush_r+0xda>
 8009126:	bf00      	nop
 8009128:	20400001 	.word	0x20400001

0800912c <_fflush_r>:
 800912c:	b538      	push	{r3, r4, r5, lr}
 800912e:	690b      	ldr	r3, [r1, #16]
 8009130:	4605      	mov	r5, r0
 8009132:	460c      	mov	r4, r1
 8009134:	b913      	cbnz	r3, 800913c <_fflush_r+0x10>
 8009136:	2500      	movs	r5, #0
 8009138:	4628      	mov	r0, r5
 800913a:	bd38      	pop	{r3, r4, r5, pc}
 800913c:	b118      	cbz	r0, 8009146 <_fflush_r+0x1a>
 800913e:	6983      	ldr	r3, [r0, #24]
 8009140:	b90b      	cbnz	r3, 8009146 <_fflush_r+0x1a>
 8009142:	f000 f887 	bl	8009254 <__sinit>
 8009146:	4b14      	ldr	r3, [pc, #80]	; (8009198 <_fflush_r+0x6c>)
 8009148:	429c      	cmp	r4, r3
 800914a:	d11b      	bne.n	8009184 <_fflush_r+0x58>
 800914c:	686c      	ldr	r4, [r5, #4]
 800914e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d0ef      	beq.n	8009136 <_fflush_r+0xa>
 8009156:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009158:	07d0      	lsls	r0, r2, #31
 800915a:	d404      	bmi.n	8009166 <_fflush_r+0x3a>
 800915c:	0599      	lsls	r1, r3, #22
 800915e:	d402      	bmi.n	8009166 <_fflush_r+0x3a>
 8009160:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009162:	f000 f915 	bl	8009390 <__retarget_lock_acquire_recursive>
 8009166:	4628      	mov	r0, r5
 8009168:	4621      	mov	r1, r4
 800916a:	f7ff ff59 	bl	8009020 <__sflush_r>
 800916e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009170:	07da      	lsls	r2, r3, #31
 8009172:	4605      	mov	r5, r0
 8009174:	d4e0      	bmi.n	8009138 <_fflush_r+0xc>
 8009176:	89a3      	ldrh	r3, [r4, #12]
 8009178:	059b      	lsls	r3, r3, #22
 800917a:	d4dd      	bmi.n	8009138 <_fflush_r+0xc>
 800917c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800917e:	f000 f908 	bl	8009392 <__retarget_lock_release_recursive>
 8009182:	e7d9      	b.n	8009138 <_fflush_r+0xc>
 8009184:	4b05      	ldr	r3, [pc, #20]	; (800919c <_fflush_r+0x70>)
 8009186:	429c      	cmp	r4, r3
 8009188:	d101      	bne.n	800918e <_fflush_r+0x62>
 800918a:	68ac      	ldr	r4, [r5, #8]
 800918c:	e7df      	b.n	800914e <_fflush_r+0x22>
 800918e:	4b04      	ldr	r3, [pc, #16]	; (80091a0 <_fflush_r+0x74>)
 8009190:	429c      	cmp	r4, r3
 8009192:	bf08      	it	eq
 8009194:	68ec      	ldreq	r4, [r5, #12]
 8009196:	e7da      	b.n	800914e <_fflush_r+0x22>
 8009198:	0800a03c 	.word	0x0800a03c
 800919c:	0800a05c 	.word	0x0800a05c
 80091a0:	0800a01c 	.word	0x0800a01c

080091a4 <std>:
 80091a4:	2300      	movs	r3, #0
 80091a6:	b510      	push	{r4, lr}
 80091a8:	4604      	mov	r4, r0
 80091aa:	e9c0 3300 	strd	r3, r3, [r0]
 80091ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80091b2:	6083      	str	r3, [r0, #8]
 80091b4:	8181      	strh	r1, [r0, #12]
 80091b6:	6643      	str	r3, [r0, #100]	; 0x64
 80091b8:	81c2      	strh	r2, [r0, #14]
 80091ba:	6183      	str	r3, [r0, #24]
 80091bc:	4619      	mov	r1, r3
 80091be:	2208      	movs	r2, #8
 80091c0:	305c      	adds	r0, #92	; 0x5c
 80091c2:	f7ff fdcf 	bl	8008d64 <memset>
 80091c6:	4b05      	ldr	r3, [pc, #20]	; (80091dc <std+0x38>)
 80091c8:	6263      	str	r3, [r4, #36]	; 0x24
 80091ca:	4b05      	ldr	r3, [pc, #20]	; (80091e0 <std+0x3c>)
 80091cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80091ce:	4b05      	ldr	r3, [pc, #20]	; (80091e4 <std+0x40>)
 80091d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80091d2:	4b05      	ldr	r3, [pc, #20]	; (80091e8 <std+0x44>)
 80091d4:	6224      	str	r4, [r4, #32]
 80091d6:	6323      	str	r3, [r4, #48]	; 0x30
 80091d8:	bd10      	pop	{r4, pc}
 80091da:	bf00      	nop
 80091dc:	08009c21 	.word	0x08009c21
 80091e0:	08009c43 	.word	0x08009c43
 80091e4:	08009c7b 	.word	0x08009c7b
 80091e8:	08009c9f 	.word	0x08009c9f

080091ec <_cleanup_r>:
 80091ec:	4901      	ldr	r1, [pc, #4]	; (80091f4 <_cleanup_r+0x8>)
 80091ee:	f000 b8af 	b.w	8009350 <_fwalk_reent>
 80091f2:	bf00      	nop
 80091f4:	0800912d 	.word	0x0800912d

080091f8 <__sfmoreglue>:
 80091f8:	b570      	push	{r4, r5, r6, lr}
 80091fa:	2268      	movs	r2, #104	; 0x68
 80091fc:	1e4d      	subs	r5, r1, #1
 80091fe:	4355      	muls	r5, r2
 8009200:	460e      	mov	r6, r1
 8009202:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009206:	f000 f997 	bl	8009538 <_malloc_r>
 800920a:	4604      	mov	r4, r0
 800920c:	b140      	cbz	r0, 8009220 <__sfmoreglue+0x28>
 800920e:	2100      	movs	r1, #0
 8009210:	e9c0 1600 	strd	r1, r6, [r0]
 8009214:	300c      	adds	r0, #12
 8009216:	60a0      	str	r0, [r4, #8]
 8009218:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800921c:	f7ff fda2 	bl	8008d64 <memset>
 8009220:	4620      	mov	r0, r4
 8009222:	bd70      	pop	{r4, r5, r6, pc}

08009224 <__sfp_lock_acquire>:
 8009224:	4801      	ldr	r0, [pc, #4]	; (800922c <__sfp_lock_acquire+0x8>)
 8009226:	f000 b8b3 	b.w	8009390 <__retarget_lock_acquire_recursive>
 800922a:	bf00      	nop
 800922c:	20000fbd 	.word	0x20000fbd

08009230 <__sfp_lock_release>:
 8009230:	4801      	ldr	r0, [pc, #4]	; (8009238 <__sfp_lock_release+0x8>)
 8009232:	f000 b8ae 	b.w	8009392 <__retarget_lock_release_recursive>
 8009236:	bf00      	nop
 8009238:	20000fbd 	.word	0x20000fbd

0800923c <__sinit_lock_acquire>:
 800923c:	4801      	ldr	r0, [pc, #4]	; (8009244 <__sinit_lock_acquire+0x8>)
 800923e:	f000 b8a7 	b.w	8009390 <__retarget_lock_acquire_recursive>
 8009242:	bf00      	nop
 8009244:	20000fbe 	.word	0x20000fbe

08009248 <__sinit_lock_release>:
 8009248:	4801      	ldr	r0, [pc, #4]	; (8009250 <__sinit_lock_release+0x8>)
 800924a:	f000 b8a2 	b.w	8009392 <__retarget_lock_release_recursive>
 800924e:	bf00      	nop
 8009250:	20000fbe 	.word	0x20000fbe

08009254 <__sinit>:
 8009254:	b510      	push	{r4, lr}
 8009256:	4604      	mov	r4, r0
 8009258:	f7ff fff0 	bl	800923c <__sinit_lock_acquire>
 800925c:	69a3      	ldr	r3, [r4, #24]
 800925e:	b11b      	cbz	r3, 8009268 <__sinit+0x14>
 8009260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009264:	f7ff bff0 	b.w	8009248 <__sinit_lock_release>
 8009268:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800926c:	6523      	str	r3, [r4, #80]	; 0x50
 800926e:	4b13      	ldr	r3, [pc, #76]	; (80092bc <__sinit+0x68>)
 8009270:	4a13      	ldr	r2, [pc, #76]	; (80092c0 <__sinit+0x6c>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	62a2      	str	r2, [r4, #40]	; 0x28
 8009276:	42a3      	cmp	r3, r4
 8009278:	bf04      	itt	eq
 800927a:	2301      	moveq	r3, #1
 800927c:	61a3      	streq	r3, [r4, #24]
 800927e:	4620      	mov	r0, r4
 8009280:	f000 f820 	bl	80092c4 <__sfp>
 8009284:	6060      	str	r0, [r4, #4]
 8009286:	4620      	mov	r0, r4
 8009288:	f000 f81c 	bl	80092c4 <__sfp>
 800928c:	60a0      	str	r0, [r4, #8]
 800928e:	4620      	mov	r0, r4
 8009290:	f000 f818 	bl	80092c4 <__sfp>
 8009294:	2200      	movs	r2, #0
 8009296:	60e0      	str	r0, [r4, #12]
 8009298:	2104      	movs	r1, #4
 800929a:	6860      	ldr	r0, [r4, #4]
 800929c:	f7ff ff82 	bl	80091a4 <std>
 80092a0:	68a0      	ldr	r0, [r4, #8]
 80092a2:	2201      	movs	r2, #1
 80092a4:	2109      	movs	r1, #9
 80092a6:	f7ff ff7d 	bl	80091a4 <std>
 80092aa:	68e0      	ldr	r0, [r4, #12]
 80092ac:	2202      	movs	r2, #2
 80092ae:	2112      	movs	r1, #18
 80092b0:	f7ff ff78 	bl	80091a4 <std>
 80092b4:	2301      	movs	r3, #1
 80092b6:	61a3      	str	r3, [r4, #24]
 80092b8:	e7d2      	b.n	8009260 <__sinit+0xc>
 80092ba:	bf00      	nop
 80092bc:	0800a018 	.word	0x0800a018
 80092c0:	080091ed 	.word	0x080091ed

080092c4 <__sfp>:
 80092c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092c6:	4607      	mov	r7, r0
 80092c8:	f7ff ffac 	bl	8009224 <__sfp_lock_acquire>
 80092cc:	4b1e      	ldr	r3, [pc, #120]	; (8009348 <__sfp+0x84>)
 80092ce:	681e      	ldr	r6, [r3, #0]
 80092d0:	69b3      	ldr	r3, [r6, #24]
 80092d2:	b913      	cbnz	r3, 80092da <__sfp+0x16>
 80092d4:	4630      	mov	r0, r6
 80092d6:	f7ff ffbd 	bl	8009254 <__sinit>
 80092da:	3648      	adds	r6, #72	; 0x48
 80092dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80092e0:	3b01      	subs	r3, #1
 80092e2:	d503      	bpl.n	80092ec <__sfp+0x28>
 80092e4:	6833      	ldr	r3, [r6, #0]
 80092e6:	b30b      	cbz	r3, 800932c <__sfp+0x68>
 80092e8:	6836      	ldr	r6, [r6, #0]
 80092ea:	e7f7      	b.n	80092dc <__sfp+0x18>
 80092ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80092f0:	b9d5      	cbnz	r5, 8009328 <__sfp+0x64>
 80092f2:	4b16      	ldr	r3, [pc, #88]	; (800934c <__sfp+0x88>)
 80092f4:	60e3      	str	r3, [r4, #12]
 80092f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80092fa:	6665      	str	r5, [r4, #100]	; 0x64
 80092fc:	f000 f847 	bl	800938e <__retarget_lock_init_recursive>
 8009300:	f7ff ff96 	bl	8009230 <__sfp_lock_release>
 8009304:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009308:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800930c:	6025      	str	r5, [r4, #0]
 800930e:	61a5      	str	r5, [r4, #24]
 8009310:	2208      	movs	r2, #8
 8009312:	4629      	mov	r1, r5
 8009314:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009318:	f7ff fd24 	bl	8008d64 <memset>
 800931c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009320:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009324:	4620      	mov	r0, r4
 8009326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009328:	3468      	adds	r4, #104	; 0x68
 800932a:	e7d9      	b.n	80092e0 <__sfp+0x1c>
 800932c:	2104      	movs	r1, #4
 800932e:	4638      	mov	r0, r7
 8009330:	f7ff ff62 	bl	80091f8 <__sfmoreglue>
 8009334:	4604      	mov	r4, r0
 8009336:	6030      	str	r0, [r6, #0]
 8009338:	2800      	cmp	r0, #0
 800933a:	d1d5      	bne.n	80092e8 <__sfp+0x24>
 800933c:	f7ff ff78 	bl	8009230 <__sfp_lock_release>
 8009340:	230c      	movs	r3, #12
 8009342:	603b      	str	r3, [r7, #0]
 8009344:	e7ee      	b.n	8009324 <__sfp+0x60>
 8009346:	bf00      	nop
 8009348:	0800a018 	.word	0x0800a018
 800934c:	ffff0001 	.word	0xffff0001

08009350 <_fwalk_reent>:
 8009350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009354:	4606      	mov	r6, r0
 8009356:	4688      	mov	r8, r1
 8009358:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800935c:	2700      	movs	r7, #0
 800935e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009362:	f1b9 0901 	subs.w	r9, r9, #1
 8009366:	d505      	bpl.n	8009374 <_fwalk_reent+0x24>
 8009368:	6824      	ldr	r4, [r4, #0]
 800936a:	2c00      	cmp	r4, #0
 800936c:	d1f7      	bne.n	800935e <_fwalk_reent+0xe>
 800936e:	4638      	mov	r0, r7
 8009370:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009374:	89ab      	ldrh	r3, [r5, #12]
 8009376:	2b01      	cmp	r3, #1
 8009378:	d907      	bls.n	800938a <_fwalk_reent+0x3a>
 800937a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800937e:	3301      	adds	r3, #1
 8009380:	d003      	beq.n	800938a <_fwalk_reent+0x3a>
 8009382:	4629      	mov	r1, r5
 8009384:	4630      	mov	r0, r6
 8009386:	47c0      	blx	r8
 8009388:	4307      	orrs	r7, r0
 800938a:	3568      	adds	r5, #104	; 0x68
 800938c:	e7e9      	b.n	8009362 <_fwalk_reent+0x12>

0800938e <__retarget_lock_init_recursive>:
 800938e:	4770      	bx	lr

08009390 <__retarget_lock_acquire_recursive>:
 8009390:	4770      	bx	lr

08009392 <__retarget_lock_release_recursive>:
 8009392:	4770      	bx	lr

08009394 <__swhatbuf_r>:
 8009394:	b570      	push	{r4, r5, r6, lr}
 8009396:	460e      	mov	r6, r1
 8009398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800939c:	2900      	cmp	r1, #0
 800939e:	b096      	sub	sp, #88	; 0x58
 80093a0:	4614      	mov	r4, r2
 80093a2:	461d      	mov	r5, r3
 80093a4:	da08      	bge.n	80093b8 <__swhatbuf_r+0x24>
 80093a6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80093aa:	2200      	movs	r2, #0
 80093ac:	602a      	str	r2, [r5, #0]
 80093ae:	061a      	lsls	r2, r3, #24
 80093b0:	d410      	bmi.n	80093d4 <__swhatbuf_r+0x40>
 80093b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093b6:	e00e      	b.n	80093d6 <__swhatbuf_r+0x42>
 80093b8:	466a      	mov	r2, sp
 80093ba:	f000 fc97 	bl	8009cec <_fstat_r>
 80093be:	2800      	cmp	r0, #0
 80093c0:	dbf1      	blt.n	80093a6 <__swhatbuf_r+0x12>
 80093c2:	9a01      	ldr	r2, [sp, #4]
 80093c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80093c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80093cc:	425a      	negs	r2, r3
 80093ce:	415a      	adcs	r2, r3
 80093d0:	602a      	str	r2, [r5, #0]
 80093d2:	e7ee      	b.n	80093b2 <__swhatbuf_r+0x1e>
 80093d4:	2340      	movs	r3, #64	; 0x40
 80093d6:	2000      	movs	r0, #0
 80093d8:	6023      	str	r3, [r4, #0]
 80093da:	b016      	add	sp, #88	; 0x58
 80093dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080093e0 <__smakebuf_r>:
 80093e0:	898b      	ldrh	r3, [r1, #12]
 80093e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80093e4:	079d      	lsls	r5, r3, #30
 80093e6:	4606      	mov	r6, r0
 80093e8:	460c      	mov	r4, r1
 80093ea:	d507      	bpl.n	80093fc <__smakebuf_r+0x1c>
 80093ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80093f0:	6023      	str	r3, [r4, #0]
 80093f2:	6123      	str	r3, [r4, #16]
 80093f4:	2301      	movs	r3, #1
 80093f6:	6163      	str	r3, [r4, #20]
 80093f8:	b002      	add	sp, #8
 80093fa:	bd70      	pop	{r4, r5, r6, pc}
 80093fc:	ab01      	add	r3, sp, #4
 80093fe:	466a      	mov	r2, sp
 8009400:	f7ff ffc8 	bl	8009394 <__swhatbuf_r>
 8009404:	9900      	ldr	r1, [sp, #0]
 8009406:	4605      	mov	r5, r0
 8009408:	4630      	mov	r0, r6
 800940a:	f000 f895 	bl	8009538 <_malloc_r>
 800940e:	b948      	cbnz	r0, 8009424 <__smakebuf_r+0x44>
 8009410:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009414:	059a      	lsls	r2, r3, #22
 8009416:	d4ef      	bmi.n	80093f8 <__smakebuf_r+0x18>
 8009418:	f023 0303 	bic.w	r3, r3, #3
 800941c:	f043 0302 	orr.w	r3, r3, #2
 8009420:	81a3      	strh	r3, [r4, #12]
 8009422:	e7e3      	b.n	80093ec <__smakebuf_r+0xc>
 8009424:	4b0d      	ldr	r3, [pc, #52]	; (800945c <__smakebuf_r+0x7c>)
 8009426:	62b3      	str	r3, [r6, #40]	; 0x28
 8009428:	89a3      	ldrh	r3, [r4, #12]
 800942a:	6020      	str	r0, [r4, #0]
 800942c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009430:	81a3      	strh	r3, [r4, #12]
 8009432:	9b00      	ldr	r3, [sp, #0]
 8009434:	6163      	str	r3, [r4, #20]
 8009436:	9b01      	ldr	r3, [sp, #4]
 8009438:	6120      	str	r0, [r4, #16]
 800943a:	b15b      	cbz	r3, 8009454 <__smakebuf_r+0x74>
 800943c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009440:	4630      	mov	r0, r6
 8009442:	f000 fc65 	bl	8009d10 <_isatty_r>
 8009446:	b128      	cbz	r0, 8009454 <__smakebuf_r+0x74>
 8009448:	89a3      	ldrh	r3, [r4, #12]
 800944a:	f023 0303 	bic.w	r3, r3, #3
 800944e:	f043 0301 	orr.w	r3, r3, #1
 8009452:	81a3      	strh	r3, [r4, #12]
 8009454:	89a0      	ldrh	r0, [r4, #12]
 8009456:	4305      	orrs	r5, r0
 8009458:	81a5      	strh	r5, [r4, #12]
 800945a:	e7cd      	b.n	80093f8 <__smakebuf_r+0x18>
 800945c:	080091ed 	.word	0x080091ed

08009460 <_free_r>:
 8009460:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009462:	2900      	cmp	r1, #0
 8009464:	d044      	beq.n	80094f0 <_free_r+0x90>
 8009466:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800946a:	9001      	str	r0, [sp, #4]
 800946c:	2b00      	cmp	r3, #0
 800946e:	f1a1 0404 	sub.w	r4, r1, #4
 8009472:	bfb8      	it	lt
 8009474:	18e4      	addlt	r4, r4, r3
 8009476:	f000 fc95 	bl	8009da4 <__malloc_lock>
 800947a:	4a1e      	ldr	r2, [pc, #120]	; (80094f4 <_free_r+0x94>)
 800947c:	9801      	ldr	r0, [sp, #4]
 800947e:	6813      	ldr	r3, [r2, #0]
 8009480:	b933      	cbnz	r3, 8009490 <_free_r+0x30>
 8009482:	6063      	str	r3, [r4, #4]
 8009484:	6014      	str	r4, [r2, #0]
 8009486:	b003      	add	sp, #12
 8009488:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800948c:	f000 bc90 	b.w	8009db0 <__malloc_unlock>
 8009490:	42a3      	cmp	r3, r4
 8009492:	d908      	bls.n	80094a6 <_free_r+0x46>
 8009494:	6825      	ldr	r5, [r4, #0]
 8009496:	1961      	adds	r1, r4, r5
 8009498:	428b      	cmp	r3, r1
 800949a:	bf01      	itttt	eq
 800949c:	6819      	ldreq	r1, [r3, #0]
 800949e:	685b      	ldreq	r3, [r3, #4]
 80094a0:	1949      	addeq	r1, r1, r5
 80094a2:	6021      	streq	r1, [r4, #0]
 80094a4:	e7ed      	b.n	8009482 <_free_r+0x22>
 80094a6:	461a      	mov	r2, r3
 80094a8:	685b      	ldr	r3, [r3, #4]
 80094aa:	b10b      	cbz	r3, 80094b0 <_free_r+0x50>
 80094ac:	42a3      	cmp	r3, r4
 80094ae:	d9fa      	bls.n	80094a6 <_free_r+0x46>
 80094b0:	6811      	ldr	r1, [r2, #0]
 80094b2:	1855      	adds	r5, r2, r1
 80094b4:	42a5      	cmp	r5, r4
 80094b6:	d10b      	bne.n	80094d0 <_free_r+0x70>
 80094b8:	6824      	ldr	r4, [r4, #0]
 80094ba:	4421      	add	r1, r4
 80094bc:	1854      	adds	r4, r2, r1
 80094be:	42a3      	cmp	r3, r4
 80094c0:	6011      	str	r1, [r2, #0]
 80094c2:	d1e0      	bne.n	8009486 <_free_r+0x26>
 80094c4:	681c      	ldr	r4, [r3, #0]
 80094c6:	685b      	ldr	r3, [r3, #4]
 80094c8:	6053      	str	r3, [r2, #4]
 80094ca:	4421      	add	r1, r4
 80094cc:	6011      	str	r1, [r2, #0]
 80094ce:	e7da      	b.n	8009486 <_free_r+0x26>
 80094d0:	d902      	bls.n	80094d8 <_free_r+0x78>
 80094d2:	230c      	movs	r3, #12
 80094d4:	6003      	str	r3, [r0, #0]
 80094d6:	e7d6      	b.n	8009486 <_free_r+0x26>
 80094d8:	6825      	ldr	r5, [r4, #0]
 80094da:	1961      	adds	r1, r4, r5
 80094dc:	428b      	cmp	r3, r1
 80094de:	bf04      	itt	eq
 80094e0:	6819      	ldreq	r1, [r3, #0]
 80094e2:	685b      	ldreq	r3, [r3, #4]
 80094e4:	6063      	str	r3, [r4, #4]
 80094e6:	bf04      	itt	eq
 80094e8:	1949      	addeq	r1, r1, r5
 80094ea:	6021      	streq	r1, [r4, #0]
 80094ec:	6054      	str	r4, [r2, #4]
 80094ee:	e7ca      	b.n	8009486 <_free_r+0x26>
 80094f0:	b003      	add	sp, #12
 80094f2:	bd30      	pop	{r4, r5, pc}
 80094f4:	20000fc0 	.word	0x20000fc0

080094f8 <sbrk_aligned>:
 80094f8:	b570      	push	{r4, r5, r6, lr}
 80094fa:	4e0e      	ldr	r6, [pc, #56]	; (8009534 <sbrk_aligned+0x3c>)
 80094fc:	460c      	mov	r4, r1
 80094fe:	6831      	ldr	r1, [r6, #0]
 8009500:	4605      	mov	r5, r0
 8009502:	b911      	cbnz	r1, 800950a <sbrk_aligned+0x12>
 8009504:	f000 fb7c 	bl	8009c00 <_sbrk_r>
 8009508:	6030      	str	r0, [r6, #0]
 800950a:	4621      	mov	r1, r4
 800950c:	4628      	mov	r0, r5
 800950e:	f000 fb77 	bl	8009c00 <_sbrk_r>
 8009512:	1c43      	adds	r3, r0, #1
 8009514:	d00a      	beq.n	800952c <sbrk_aligned+0x34>
 8009516:	1cc4      	adds	r4, r0, #3
 8009518:	f024 0403 	bic.w	r4, r4, #3
 800951c:	42a0      	cmp	r0, r4
 800951e:	d007      	beq.n	8009530 <sbrk_aligned+0x38>
 8009520:	1a21      	subs	r1, r4, r0
 8009522:	4628      	mov	r0, r5
 8009524:	f000 fb6c 	bl	8009c00 <_sbrk_r>
 8009528:	3001      	adds	r0, #1
 800952a:	d101      	bne.n	8009530 <sbrk_aligned+0x38>
 800952c:	f04f 34ff 	mov.w	r4, #4294967295
 8009530:	4620      	mov	r0, r4
 8009532:	bd70      	pop	{r4, r5, r6, pc}
 8009534:	20000fc4 	.word	0x20000fc4

08009538 <_malloc_r>:
 8009538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800953c:	1ccd      	adds	r5, r1, #3
 800953e:	f025 0503 	bic.w	r5, r5, #3
 8009542:	3508      	adds	r5, #8
 8009544:	2d0c      	cmp	r5, #12
 8009546:	bf38      	it	cc
 8009548:	250c      	movcc	r5, #12
 800954a:	2d00      	cmp	r5, #0
 800954c:	4607      	mov	r7, r0
 800954e:	db01      	blt.n	8009554 <_malloc_r+0x1c>
 8009550:	42a9      	cmp	r1, r5
 8009552:	d905      	bls.n	8009560 <_malloc_r+0x28>
 8009554:	230c      	movs	r3, #12
 8009556:	603b      	str	r3, [r7, #0]
 8009558:	2600      	movs	r6, #0
 800955a:	4630      	mov	r0, r6
 800955c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009560:	4e2e      	ldr	r6, [pc, #184]	; (800961c <_malloc_r+0xe4>)
 8009562:	f000 fc1f 	bl	8009da4 <__malloc_lock>
 8009566:	6833      	ldr	r3, [r6, #0]
 8009568:	461c      	mov	r4, r3
 800956a:	bb34      	cbnz	r4, 80095ba <_malloc_r+0x82>
 800956c:	4629      	mov	r1, r5
 800956e:	4638      	mov	r0, r7
 8009570:	f7ff ffc2 	bl	80094f8 <sbrk_aligned>
 8009574:	1c43      	adds	r3, r0, #1
 8009576:	4604      	mov	r4, r0
 8009578:	d14d      	bne.n	8009616 <_malloc_r+0xde>
 800957a:	6834      	ldr	r4, [r6, #0]
 800957c:	4626      	mov	r6, r4
 800957e:	2e00      	cmp	r6, #0
 8009580:	d140      	bne.n	8009604 <_malloc_r+0xcc>
 8009582:	6823      	ldr	r3, [r4, #0]
 8009584:	4631      	mov	r1, r6
 8009586:	4638      	mov	r0, r7
 8009588:	eb04 0803 	add.w	r8, r4, r3
 800958c:	f000 fb38 	bl	8009c00 <_sbrk_r>
 8009590:	4580      	cmp	r8, r0
 8009592:	d13a      	bne.n	800960a <_malloc_r+0xd2>
 8009594:	6821      	ldr	r1, [r4, #0]
 8009596:	3503      	adds	r5, #3
 8009598:	1a6d      	subs	r5, r5, r1
 800959a:	f025 0503 	bic.w	r5, r5, #3
 800959e:	3508      	adds	r5, #8
 80095a0:	2d0c      	cmp	r5, #12
 80095a2:	bf38      	it	cc
 80095a4:	250c      	movcc	r5, #12
 80095a6:	4629      	mov	r1, r5
 80095a8:	4638      	mov	r0, r7
 80095aa:	f7ff ffa5 	bl	80094f8 <sbrk_aligned>
 80095ae:	3001      	adds	r0, #1
 80095b0:	d02b      	beq.n	800960a <_malloc_r+0xd2>
 80095b2:	6823      	ldr	r3, [r4, #0]
 80095b4:	442b      	add	r3, r5
 80095b6:	6023      	str	r3, [r4, #0]
 80095b8:	e00e      	b.n	80095d8 <_malloc_r+0xa0>
 80095ba:	6822      	ldr	r2, [r4, #0]
 80095bc:	1b52      	subs	r2, r2, r5
 80095be:	d41e      	bmi.n	80095fe <_malloc_r+0xc6>
 80095c0:	2a0b      	cmp	r2, #11
 80095c2:	d916      	bls.n	80095f2 <_malloc_r+0xba>
 80095c4:	1961      	adds	r1, r4, r5
 80095c6:	42a3      	cmp	r3, r4
 80095c8:	6025      	str	r5, [r4, #0]
 80095ca:	bf18      	it	ne
 80095cc:	6059      	strne	r1, [r3, #4]
 80095ce:	6863      	ldr	r3, [r4, #4]
 80095d0:	bf08      	it	eq
 80095d2:	6031      	streq	r1, [r6, #0]
 80095d4:	5162      	str	r2, [r4, r5]
 80095d6:	604b      	str	r3, [r1, #4]
 80095d8:	4638      	mov	r0, r7
 80095da:	f104 060b 	add.w	r6, r4, #11
 80095de:	f000 fbe7 	bl	8009db0 <__malloc_unlock>
 80095e2:	f026 0607 	bic.w	r6, r6, #7
 80095e6:	1d23      	adds	r3, r4, #4
 80095e8:	1af2      	subs	r2, r6, r3
 80095ea:	d0b6      	beq.n	800955a <_malloc_r+0x22>
 80095ec:	1b9b      	subs	r3, r3, r6
 80095ee:	50a3      	str	r3, [r4, r2]
 80095f0:	e7b3      	b.n	800955a <_malloc_r+0x22>
 80095f2:	6862      	ldr	r2, [r4, #4]
 80095f4:	42a3      	cmp	r3, r4
 80095f6:	bf0c      	ite	eq
 80095f8:	6032      	streq	r2, [r6, #0]
 80095fa:	605a      	strne	r2, [r3, #4]
 80095fc:	e7ec      	b.n	80095d8 <_malloc_r+0xa0>
 80095fe:	4623      	mov	r3, r4
 8009600:	6864      	ldr	r4, [r4, #4]
 8009602:	e7b2      	b.n	800956a <_malloc_r+0x32>
 8009604:	4634      	mov	r4, r6
 8009606:	6876      	ldr	r6, [r6, #4]
 8009608:	e7b9      	b.n	800957e <_malloc_r+0x46>
 800960a:	230c      	movs	r3, #12
 800960c:	603b      	str	r3, [r7, #0]
 800960e:	4638      	mov	r0, r7
 8009610:	f000 fbce 	bl	8009db0 <__malloc_unlock>
 8009614:	e7a1      	b.n	800955a <_malloc_r+0x22>
 8009616:	6025      	str	r5, [r4, #0]
 8009618:	e7de      	b.n	80095d8 <_malloc_r+0xa0>
 800961a:	bf00      	nop
 800961c:	20000fc0 	.word	0x20000fc0

08009620 <__ssputs_r>:
 8009620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009624:	688e      	ldr	r6, [r1, #8]
 8009626:	429e      	cmp	r6, r3
 8009628:	4682      	mov	sl, r0
 800962a:	460c      	mov	r4, r1
 800962c:	4690      	mov	r8, r2
 800962e:	461f      	mov	r7, r3
 8009630:	d838      	bhi.n	80096a4 <__ssputs_r+0x84>
 8009632:	898a      	ldrh	r2, [r1, #12]
 8009634:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009638:	d032      	beq.n	80096a0 <__ssputs_r+0x80>
 800963a:	6825      	ldr	r5, [r4, #0]
 800963c:	6909      	ldr	r1, [r1, #16]
 800963e:	eba5 0901 	sub.w	r9, r5, r1
 8009642:	6965      	ldr	r5, [r4, #20]
 8009644:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009648:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800964c:	3301      	adds	r3, #1
 800964e:	444b      	add	r3, r9
 8009650:	106d      	asrs	r5, r5, #1
 8009652:	429d      	cmp	r5, r3
 8009654:	bf38      	it	cc
 8009656:	461d      	movcc	r5, r3
 8009658:	0553      	lsls	r3, r2, #21
 800965a:	d531      	bpl.n	80096c0 <__ssputs_r+0xa0>
 800965c:	4629      	mov	r1, r5
 800965e:	f7ff ff6b 	bl	8009538 <_malloc_r>
 8009662:	4606      	mov	r6, r0
 8009664:	b950      	cbnz	r0, 800967c <__ssputs_r+0x5c>
 8009666:	230c      	movs	r3, #12
 8009668:	f8ca 3000 	str.w	r3, [sl]
 800966c:	89a3      	ldrh	r3, [r4, #12]
 800966e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009672:	81a3      	strh	r3, [r4, #12]
 8009674:	f04f 30ff 	mov.w	r0, #4294967295
 8009678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800967c:	6921      	ldr	r1, [r4, #16]
 800967e:	464a      	mov	r2, r9
 8009680:	f000 fb68 	bl	8009d54 <memcpy>
 8009684:	89a3      	ldrh	r3, [r4, #12]
 8009686:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800968a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800968e:	81a3      	strh	r3, [r4, #12]
 8009690:	6126      	str	r6, [r4, #16]
 8009692:	6165      	str	r5, [r4, #20]
 8009694:	444e      	add	r6, r9
 8009696:	eba5 0509 	sub.w	r5, r5, r9
 800969a:	6026      	str	r6, [r4, #0]
 800969c:	60a5      	str	r5, [r4, #8]
 800969e:	463e      	mov	r6, r7
 80096a0:	42be      	cmp	r6, r7
 80096a2:	d900      	bls.n	80096a6 <__ssputs_r+0x86>
 80096a4:	463e      	mov	r6, r7
 80096a6:	6820      	ldr	r0, [r4, #0]
 80096a8:	4632      	mov	r2, r6
 80096aa:	4641      	mov	r1, r8
 80096ac:	f000 fb60 	bl	8009d70 <memmove>
 80096b0:	68a3      	ldr	r3, [r4, #8]
 80096b2:	1b9b      	subs	r3, r3, r6
 80096b4:	60a3      	str	r3, [r4, #8]
 80096b6:	6823      	ldr	r3, [r4, #0]
 80096b8:	4433      	add	r3, r6
 80096ba:	6023      	str	r3, [r4, #0]
 80096bc:	2000      	movs	r0, #0
 80096be:	e7db      	b.n	8009678 <__ssputs_r+0x58>
 80096c0:	462a      	mov	r2, r5
 80096c2:	f000 fb7b 	bl	8009dbc <_realloc_r>
 80096c6:	4606      	mov	r6, r0
 80096c8:	2800      	cmp	r0, #0
 80096ca:	d1e1      	bne.n	8009690 <__ssputs_r+0x70>
 80096cc:	6921      	ldr	r1, [r4, #16]
 80096ce:	4650      	mov	r0, sl
 80096d0:	f7ff fec6 	bl	8009460 <_free_r>
 80096d4:	e7c7      	b.n	8009666 <__ssputs_r+0x46>
	...

080096d8 <_svfiprintf_r>:
 80096d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096dc:	4698      	mov	r8, r3
 80096de:	898b      	ldrh	r3, [r1, #12]
 80096e0:	061b      	lsls	r3, r3, #24
 80096e2:	b09d      	sub	sp, #116	; 0x74
 80096e4:	4607      	mov	r7, r0
 80096e6:	460d      	mov	r5, r1
 80096e8:	4614      	mov	r4, r2
 80096ea:	d50e      	bpl.n	800970a <_svfiprintf_r+0x32>
 80096ec:	690b      	ldr	r3, [r1, #16]
 80096ee:	b963      	cbnz	r3, 800970a <_svfiprintf_r+0x32>
 80096f0:	2140      	movs	r1, #64	; 0x40
 80096f2:	f7ff ff21 	bl	8009538 <_malloc_r>
 80096f6:	6028      	str	r0, [r5, #0]
 80096f8:	6128      	str	r0, [r5, #16]
 80096fa:	b920      	cbnz	r0, 8009706 <_svfiprintf_r+0x2e>
 80096fc:	230c      	movs	r3, #12
 80096fe:	603b      	str	r3, [r7, #0]
 8009700:	f04f 30ff 	mov.w	r0, #4294967295
 8009704:	e0d1      	b.n	80098aa <_svfiprintf_r+0x1d2>
 8009706:	2340      	movs	r3, #64	; 0x40
 8009708:	616b      	str	r3, [r5, #20]
 800970a:	2300      	movs	r3, #0
 800970c:	9309      	str	r3, [sp, #36]	; 0x24
 800970e:	2320      	movs	r3, #32
 8009710:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009714:	f8cd 800c 	str.w	r8, [sp, #12]
 8009718:	2330      	movs	r3, #48	; 0x30
 800971a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80098c4 <_svfiprintf_r+0x1ec>
 800971e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009722:	f04f 0901 	mov.w	r9, #1
 8009726:	4623      	mov	r3, r4
 8009728:	469a      	mov	sl, r3
 800972a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800972e:	b10a      	cbz	r2, 8009734 <_svfiprintf_r+0x5c>
 8009730:	2a25      	cmp	r2, #37	; 0x25
 8009732:	d1f9      	bne.n	8009728 <_svfiprintf_r+0x50>
 8009734:	ebba 0b04 	subs.w	fp, sl, r4
 8009738:	d00b      	beq.n	8009752 <_svfiprintf_r+0x7a>
 800973a:	465b      	mov	r3, fp
 800973c:	4622      	mov	r2, r4
 800973e:	4629      	mov	r1, r5
 8009740:	4638      	mov	r0, r7
 8009742:	f7ff ff6d 	bl	8009620 <__ssputs_r>
 8009746:	3001      	adds	r0, #1
 8009748:	f000 80aa 	beq.w	80098a0 <_svfiprintf_r+0x1c8>
 800974c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800974e:	445a      	add	r2, fp
 8009750:	9209      	str	r2, [sp, #36]	; 0x24
 8009752:	f89a 3000 	ldrb.w	r3, [sl]
 8009756:	2b00      	cmp	r3, #0
 8009758:	f000 80a2 	beq.w	80098a0 <_svfiprintf_r+0x1c8>
 800975c:	2300      	movs	r3, #0
 800975e:	f04f 32ff 	mov.w	r2, #4294967295
 8009762:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009766:	f10a 0a01 	add.w	sl, sl, #1
 800976a:	9304      	str	r3, [sp, #16]
 800976c:	9307      	str	r3, [sp, #28]
 800976e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009772:	931a      	str	r3, [sp, #104]	; 0x68
 8009774:	4654      	mov	r4, sl
 8009776:	2205      	movs	r2, #5
 8009778:	f814 1b01 	ldrb.w	r1, [r4], #1
 800977c:	4851      	ldr	r0, [pc, #324]	; (80098c4 <_svfiprintf_r+0x1ec>)
 800977e:	f7f6 fd37 	bl	80001f0 <memchr>
 8009782:	9a04      	ldr	r2, [sp, #16]
 8009784:	b9d8      	cbnz	r0, 80097be <_svfiprintf_r+0xe6>
 8009786:	06d0      	lsls	r0, r2, #27
 8009788:	bf44      	itt	mi
 800978a:	2320      	movmi	r3, #32
 800978c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009790:	0711      	lsls	r1, r2, #28
 8009792:	bf44      	itt	mi
 8009794:	232b      	movmi	r3, #43	; 0x2b
 8009796:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800979a:	f89a 3000 	ldrb.w	r3, [sl]
 800979e:	2b2a      	cmp	r3, #42	; 0x2a
 80097a0:	d015      	beq.n	80097ce <_svfiprintf_r+0xf6>
 80097a2:	9a07      	ldr	r2, [sp, #28]
 80097a4:	4654      	mov	r4, sl
 80097a6:	2000      	movs	r0, #0
 80097a8:	f04f 0c0a 	mov.w	ip, #10
 80097ac:	4621      	mov	r1, r4
 80097ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097b2:	3b30      	subs	r3, #48	; 0x30
 80097b4:	2b09      	cmp	r3, #9
 80097b6:	d94e      	bls.n	8009856 <_svfiprintf_r+0x17e>
 80097b8:	b1b0      	cbz	r0, 80097e8 <_svfiprintf_r+0x110>
 80097ba:	9207      	str	r2, [sp, #28]
 80097bc:	e014      	b.n	80097e8 <_svfiprintf_r+0x110>
 80097be:	eba0 0308 	sub.w	r3, r0, r8
 80097c2:	fa09 f303 	lsl.w	r3, r9, r3
 80097c6:	4313      	orrs	r3, r2
 80097c8:	9304      	str	r3, [sp, #16]
 80097ca:	46a2      	mov	sl, r4
 80097cc:	e7d2      	b.n	8009774 <_svfiprintf_r+0x9c>
 80097ce:	9b03      	ldr	r3, [sp, #12]
 80097d0:	1d19      	adds	r1, r3, #4
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	9103      	str	r1, [sp, #12]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	bfbb      	ittet	lt
 80097da:	425b      	neglt	r3, r3
 80097dc:	f042 0202 	orrlt.w	r2, r2, #2
 80097e0:	9307      	strge	r3, [sp, #28]
 80097e2:	9307      	strlt	r3, [sp, #28]
 80097e4:	bfb8      	it	lt
 80097e6:	9204      	strlt	r2, [sp, #16]
 80097e8:	7823      	ldrb	r3, [r4, #0]
 80097ea:	2b2e      	cmp	r3, #46	; 0x2e
 80097ec:	d10c      	bne.n	8009808 <_svfiprintf_r+0x130>
 80097ee:	7863      	ldrb	r3, [r4, #1]
 80097f0:	2b2a      	cmp	r3, #42	; 0x2a
 80097f2:	d135      	bne.n	8009860 <_svfiprintf_r+0x188>
 80097f4:	9b03      	ldr	r3, [sp, #12]
 80097f6:	1d1a      	adds	r2, r3, #4
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	9203      	str	r2, [sp, #12]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	bfb8      	it	lt
 8009800:	f04f 33ff 	movlt.w	r3, #4294967295
 8009804:	3402      	adds	r4, #2
 8009806:	9305      	str	r3, [sp, #20]
 8009808:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80098d4 <_svfiprintf_r+0x1fc>
 800980c:	7821      	ldrb	r1, [r4, #0]
 800980e:	2203      	movs	r2, #3
 8009810:	4650      	mov	r0, sl
 8009812:	f7f6 fced 	bl	80001f0 <memchr>
 8009816:	b140      	cbz	r0, 800982a <_svfiprintf_r+0x152>
 8009818:	2340      	movs	r3, #64	; 0x40
 800981a:	eba0 000a 	sub.w	r0, r0, sl
 800981e:	fa03 f000 	lsl.w	r0, r3, r0
 8009822:	9b04      	ldr	r3, [sp, #16]
 8009824:	4303      	orrs	r3, r0
 8009826:	3401      	adds	r4, #1
 8009828:	9304      	str	r3, [sp, #16]
 800982a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800982e:	4826      	ldr	r0, [pc, #152]	; (80098c8 <_svfiprintf_r+0x1f0>)
 8009830:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009834:	2206      	movs	r2, #6
 8009836:	f7f6 fcdb 	bl	80001f0 <memchr>
 800983a:	2800      	cmp	r0, #0
 800983c:	d038      	beq.n	80098b0 <_svfiprintf_r+0x1d8>
 800983e:	4b23      	ldr	r3, [pc, #140]	; (80098cc <_svfiprintf_r+0x1f4>)
 8009840:	bb1b      	cbnz	r3, 800988a <_svfiprintf_r+0x1b2>
 8009842:	9b03      	ldr	r3, [sp, #12]
 8009844:	3307      	adds	r3, #7
 8009846:	f023 0307 	bic.w	r3, r3, #7
 800984a:	3308      	adds	r3, #8
 800984c:	9303      	str	r3, [sp, #12]
 800984e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009850:	4433      	add	r3, r6
 8009852:	9309      	str	r3, [sp, #36]	; 0x24
 8009854:	e767      	b.n	8009726 <_svfiprintf_r+0x4e>
 8009856:	fb0c 3202 	mla	r2, ip, r2, r3
 800985a:	460c      	mov	r4, r1
 800985c:	2001      	movs	r0, #1
 800985e:	e7a5      	b.n	80097ac <_svfiprintf_r+0xd4>
 8009860:	2300      	movs	r3, #0
 8009862:	3401      	adds	r4, #1
 8009864:	9305      	str	r3, [sp, #20]
 8009866:	4619      	mov	r1, r3
 8009868:	f04f 0c0a 	mov.w	ip, #10
 800986c:	4620      	mov	r0, r4
 800986e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009872:	3a30      	subs	r2, #48	; 0x30
 8009874:	2a09      	cmp	r2, #9
 8009876:	d903      	bls.n	8009880 <_svfiprintf_r+0x1a8>
 8009878:	2b00      	cmp	r3, #0
 800987a:	d0c5      	beq.n	8009808 <_svfiprintf_r+0x130>
 800987c:	9105      	str	r1, [sp, #20]
 800987e:	e7c3      	b.n	8009808 <_svfiprintf_r+0x130>
 8009880:	fb0c 2101 	mla	r1, ip, r1, r2
 8009884:	4604      	mov	r4, r0
 8009886:	2301      	movs	r3, #1
 8009888:	e7f0      	b.n	800986c <_svfiprintf_r+0x194>
 800988a:	ab03      	add	r3, sp, #12
 800988c:	9300      	str	r3, [sp, #0]
 800988e:	462a      	mov	r2, r5
 8009890:	4b0f      	ldr	r3, [pc, #60]	; (80098d0 <_svfiprintf_r+0x1f8>)
 8009892:	a904      	add	r1, sp, #16
 8009894:	4638      	mov	r0, r7
 8009896:	f3af 8000 	nop.w
 800989a:	1c42      	adds	r2, r0, #1
 800989c:	4606      	mov	r6, r0
 800989e:	d1d6      	bne.n	800984e <_svfiprintf_r+0x176>
 80098a0:	89ab      	ldrh	r3, [r5, #12]
 80098a2:	065b      	lsls	r3, r3, #25
 80098a4:	f53f af2c 	bmi.w	8009700 <_svfiprintf_r+0x28>
 80098a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098aa:	b01d      	add	sp, #116	; 0x74
 80098ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098b0:	ab03      	add	r3, sp, #12
 80098b2:	9300      	str	r3, [sp, #0]
 80098b4:	462a      	mov	r2, r5
 80098b6:	4b06      	ldr	r3, [pc, #24]	; (80098d0 <_svfiprintf_r+0x1f8>)
 80098b8:	a904      	add	r1, sp, #16
 80098ba:	4638      	mov	r0, r7
 80098bc:	f000 f87a 	bl	80099b4 <_printf_i>
 80098c0:	e7eb      	b.n	800989a <_svfiprintf_r+0x1c2>
 80098c2:	bf00      	nop
 80098c4:	0800a07c 	.word	0x0800a07c
 80098c8:	0800a086 	.word	0x0800a086
 80098cc:	00000000 	.word	0x00000000
 80098d0:	08009621 	.word	0x08009621
 80098d4:	0800a082 	.word	0x0800a082

080098d8 <_printf_common>:
 80098d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098dc:	4616      	mov	r6, r2
 80098de:	4699      	mov	r9, r3
 80098e0:	688a      	ldr	r2, [r1, #8]
 80098e2:	690b      	ldr	r3, [r1, #16]
 80098e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80098e8:	4293      	cmp	r3, r2
 80098ea:	bfb8      	it	lt
 80098ec:	4613      	movlt	r3, r2
 80098ee:	6033      	str	r3, [r6, #0]
 80098f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80098f4:	4607      	mov	r7, r0
 80098f6:	460c      	mov	r4, r1
 80098f8:	b10a      	cbz	r2, 80098fe <_printf_common+0x26>
 80098fa:	3301      	adds	r3, #1
 80098fc:	6033      	str	r3, [r6, #0]
 80098fe:	6823      	ldr	r3, [r4, #0]
 8009900:	0699      	lsls	r1, r3, #26
 8009902:	bf42      	ittt	mi
 8009904:	6833      	ldrmi	r3, [r6, #0]
 8009906:	3302      	addmi	r3, #2
 8009908:	6033      	strmi	r3, [r6, #0]
 800990a:	6825      	ldr	r5, [r4, #0]
 800990c:	f015 0506 	ands.w	r5, r5, #6
 8009910:	d106      	bne.n	8009920 <_printf_common+0x48>
 8009912:	f104 0a19 	add.w	sl, r4, #25
 8009916:	68e3      	ldr	r3, [r4, #12]
 8009918:	6832      	ldr	r2, [r6, #0]
 800991a:	1a9b      	subs	r3, r3, r2
 800991c:	42ab      	cmp	r3, r5
 800991e:	dc26      	bgt.n	800996e <_printf_common+0x96>
 8009920:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009924:	1e13      	subs	r3, r2, #0
 8009926:	6822      	ldr	r2, [r4, #0]
 8009928:	bf18      	it	ne
 800992a:	2301      	movne	r3, #1
 800992c:	0692      	lsls	r2, r2, #26
 800992e:	d42b      	bmi.n	8009988 <_printf_common+0xb0>
 8009930:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009934:	4649      	mov	r1, r9
 8009936:	4638      	mov	r0, r7
 8009938:	47c0      	blx	r8
 800993a:	3001      	adds	r0, #1
 800993c:	d01e      	beq.n	800997c <_printf_common+0xa4>
 800993e:	6823      	ldr	r3, [r4, #0]
 8009940:	68e5      	ldr	r5, [r4, #12]
 8009942:	6832      	ldr	r2, [r6, #0]
 8009944:	f003 0306 	and.w	r3, r3, #6
 8009948:	2b04      	cmp	r3, #4
 800994a:	bf08      	it	eq
 800994c:	1aad      	subeq	r5, r5, r2
 800994e:	68a3      	ldr	r3, [r4, #8]
 8009950:	6922      	ldr	r2, [r4, #16]
 8009952:	bf0c      	ite	eq
 8009954:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009958:	2500      	movne	r5, #0
 800995a:	4293      	cmp	r3, r2
 800995c:	bfc4      	itt	gt
 800995e:	1a9b      	subgt	r3, r3, r2
 8009960:	18ed      	addgt	r5, r5, r3
 8009962:	2600      	movs	r6, #0
 8009964:	341a      	adds	r4, #26
 8009966:	42b5      	cmp	r5, r6
 8009968:	d11a      	bne.n	80099a0 <_printf_common+0xc8>
 800996a:	2000      	movs	r0, #0
 800996c:	e008      	b.n	8009980 <_printf_common+0xa8>
 800996e:	2301      	movs	r3, #1
 8009970:	4652      	mov	r2, sl
 8009972:	4649      	mov	r1, r9
 8009974:	4638      	mov	r0, r7
 8009976:	47c0      	blx	r8
 8009978:	3001      	adds	r0, #1
 800997a:	d103      	bne.n	8009984 <_printf_common+0xac>
 800997c:	f04f 30ff 	mov.w	r0, #4294967295
 8009980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009984:	3501      	adds	r5, #1
 8009986:	e7c6      	b.n	8009916 <_printf_common+0x3e>
 8009988:	18e1      	adds	r1, r4, r3
 800998a:	1c5a      	adds	r2, r3, #1
 800998c:	2030      	movs	r0, #48	; 0x30
 800998e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009992:	4422      	add	r2, r4
 8009994:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009998:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800999c:	3302      	adds	r3, #2
 800999e:	e7c7      	b.n	8009930 <_printf_common+0x58>
 80099a0:	2301      	movs	r3, #1
 80099a2:	4622      	mov	r2, r4
 80099a4:	4649      	mov	r1, r9
 80099a6:	4638      	mov	r0, r7
 80099a8:	47c0      	blx	r8
 80099aa:	3001      	adds	r0, #1
 80099ac:	d0e6      	beq.n	800997c <_printf_common+0xa4>
 80099ae:	3601      	adds	r6, #1
 80099b0:	e7d9      	b.n	8009966 <_printf_common+0x8e>
	...

080099b4 <_printf_i>:
 80099b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099b8:	7e0f      	ldrb	r7, [r1, #24]
 80099ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80099bc:	2f78      	cmp	r7, #120	; 0x78
 80099be:	4691      	mov	r9, r2
 80099c0:	4680      	mov	r8, r0
 80099c2:	460c      	mov	r4, r1
 80099c4:	469a      	mov	sl, r3
 80099c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80099ca:	d807      	bhi.n	80099dc <_printf_i+0x28>
 80099cc:	2f62      	cmp	r7, #98	; 0x62
 80099ce:	d80a      	bhi.n	80099e6 <_printf_i+0x32>
 80099d0:	2f00      	cmp	r7, #0
 80099d2:	f000 80d8 	beq.w	8009b86 <_printf_i+0x1d2>
 80099d6:	2f58      	cmp	r7, #88	; 0x58
 80099d8:	f000 80a3 	beq.w	8009b22 <_printf_i+0x16e>
 80099dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80099e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80099e4:	e03a      	b.n	8009a5c <_printf_i+0xa8>
 80099e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80099ea:	2b15      	cmp	r3, #21
 80099ec:	d8f6      	bhi.n	80099dc <_printf_i+0x28>
 80099ee:	a101      	add	r1, pc, #4	; (adr r1, 80099f4 <_printf_i+0x40>)
 80099f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80099f4:	08009a4d 	.word	0x08009a4d
 80099f8:	08009a61 	.word	0x08009a61
 80099fc:	080099dd 	.word	0x080099dd
 8009a00:	080099dd 	.word	0x080099dd
 8009a04:	080099dd 	.word	0x080099dd
 8009a08:	080099dd 	.word	0x080099dd
 8009a0c:	08009a61 	.word	0x08009a61
 8009a10:	080099dd 	.word	0x080099dd
 8009a14:	080099dd 	.word	0x080099dd
 8009a18:	080099dd 	.word	0x080099dd
 8009a1c:	080099dd 	.word	0x080099dd
 8009a20:	08009b6d 	.word	0x08009b6d
 8009a24:	08009a91 	.word	0x08009a91
 8009a28:	08009b4f 	.word	0x08009b4f
 8009a2c:	080099dd 	.word	0x080099dd
 8009a30:	080099dd 	.word	0x080099dd
 8009a34:	08009b8f 	.word	0x08009b8f
 8009a38:	080099dd 	.word	0x080099dd
 8009a3c:	08009a91 	.word	0x08009a91
 8009a40:	080099dd 	.word	0x080099dd
 8009a44:	080099dd 	.word	0x080099dd
 8009a48:	08009b57 	.word	0x08009b57
 8009a4c:	682b      	ldr	r3, [r5, #0]
 8009a4e:	1d1a      	adds	r2, r3, #4
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	602a      	str	r2, [r5, #0]
 8009a54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	e0a3      	b.n	8009ba8 <_printf_i+0x1f4>
 8009a60:	6820      	ldr	r0, [r4, #0]
 8009a62:	6829      	ldr	r1, [r5, #0]
 8009a64:	0606      	lsls	r6, r0, #24
 8009a66:	f101 0304 	add.w	r3, r1, #4
 8009a6a:	d50a      	bpl.n	8009a82 <_printf_i+0xce>
 8009a6c:	680e      	ldr	r6, [r1, #0]
 8009a6e:	602b      	str	r3, [r5, #0]
 8009a70:	2e00      	cmp	r6, #0
 8009a72:	da03      	bge.n	8009a7c <_printf_i+0xc8>
 8009a74:	232d      	movs	r3, #45	; 0x2d
 8009a76:	4276      	negs	r6, r6
 8009a78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a7c:	485e      	ldr	r0, [pc, #376]	; (8009bf8 <_printf_i+0x244>)
 8009a7e:	230a      	movs	r3, #10
 8009a80:	e019      	b.n	8009ab6 <_printf_i+0x102>
 8009a82:	680e      	ldr	r6, [r1, #0]
 8009a84:	602b      	str	r3, [r5, #0]
 8009a86:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009a8a:	bf18      	it	ne
 8009a8c:	b236      	sxthne	r6, r6
 8009a8e:	e7ef      	b.n	8009a70 <_printf_i+0xbc>
 8009a90:	682b      	ldr	r3, [r5, #0]
 8009a92:	6820      	ldr	r0, [r4, #0]
 8009a94:	1d19      	adds	r1, r3, #4
 8009a96:	6029      	str	r1, [r5, #0]
 8009a98:	0601      	lsls	r1, r0, #24
 8009a9a:	d501      	bpl.n	8009aa0 <_printf_i+0xec>
 8009a9c:	681e      	ldr	r6, [r3, #0]
 8009a9e:	e002      	b.n	8009aa6 <_printf_i+0xf2>
 8009aa0:	0646      	lsls	r6, r0, #25
 8009aa2:	d5fb      	bpl.n	8009a9c <_printf_i+0xe8>
 8009aa4:	881e      	ldrh	r6, [r3, #0]
 8009aa6:	4854      	ldr	r0, [pc, #336]	; (8009bf8 <_printf_i+0x244>)
 8009aa8:	2f6f      	cmp	r7, #111	; 0x6f
 8009aaa:	bf0c      	ite	eq
 8009aac:	2308      	moveq	r3, #8
 8009aae:	230a      	movne	r3, #10
 8009ab0:	2100      	movs	r1, #0
 8009ab2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009ab6:	6865      	ldr	r5, [r4, #4]
 8009ab8:	60a5      	str	r5, [r4, #8]
 8009aba:	2d00      	cmp	r5, #0
 8009abc:	bfa2      	ittt	ge
 8009abe:	6821      	ldrge	r1, [r4, #0]
 8009ac0:	f021 0104 	bicge.w	r1, r1, #4
 8009ac4:	6021      	strge	r1, [r4, #0]
 8009ac6:	b90e      	cbnz	r6, 8009acc <_printf_i+0x118>
 8009ac8:	2d00      	cmp	r5, #0
 8009aca:	d04d      	beq.n	8009b68 <_printf_i+0x1b4>
 8009acc:	4615      	mov	r5, r2
 8009ace:	fbb6 f1f3 	udiv	r1, r6, r3
 8009ad2:	fb03 6711 	mls	r7, r3, r1, r6
 8009ad6:	5dc7      	ldrb	r7, [r0, r7]
 8009ad8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009adc:	4637      	mov	r7, r6
 8009ade:	42bb      	cmp	r3, r7
 8009ae0:	460e      	mov	r6, r1
 8009ae2:	d9f4      	bls.n	8009ace <_printf_i+0x11a>
 8009ae4:	2b08      	cmp	r3, #8
 8009ae6:	d10b      	bne.n	8009b00 <_printf_i+0x14c>
 8009ae8:	6823      	ldr	r3, [r4, #0]
 8009aea:	07de      	lsls	r6, r3, #31
 8009aec:	d508      	bpl.n	8009b00 <_printf_i+0x14c>
 8009aee:	6923      	ldr	r3, [r4, #16]
 8009af0:	6861      	ldr	r1, [r4, #4]
 8009af2:	4299      	cmp	r1, r3
 8009af4:	bfde      	ittt	le
 8009af6:	2330      	movle	r3, #48	; 0x30
 8009af8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009afc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009b00:	1b52      	subs	r2, r2, r5
 8009b02:	6122      	str	r2, [r4, #16]
 8009b04:	f8cd a000 	str.w	sl, [sp]
 8009b08:	464b      	mov	r3, r9
 8009b0a:	aa03      	add	r2, sp, #12
 8009b0c:	4621      	mov	r1, r4
 8009b0e:	4640      	mov	r0, r8
 8009b10:	f7ff fee2 	bl	80098d8 <_printf_common>
 8009b14:	3001      	adds	r0, #1
 8009b16:	d14c      	bne.n	8009bb2 <_printf_i+0x1fe>
 8009b18:	f04f 30ff 	mov.w	r0, #4294967295
 8009b1c:	b004      	add	sp, #16
 8009b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b22:	4835      	ldr	r0, [pc, #212]	; (8009bf8 <_printf_i+0x244>)
 8009b24:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009b28:	6829      	ldr	r1, [r5, #0]
 8009b2a:	6823      	ldr	r3, [r4, #0]
 8009b2c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009b30:	6029      	str	r1, [r5, #0]
 8009b32:	061d      	lsls	r5, r3, #24
 8009b34:	d514      	bpl.n	8009b60 <_printf_i+0x1ac>
 8009b36:	07df      	lsls	r7, r3, #31
 8009b38:	bf44      	itt	mi
 8009b3a:	f043 0320 	orrmi.w	r3, r3, #32
 8009b3e:	6023      	strmi	r3, [r4, #0]
 8009b40:	b91e      	cbnz	r6, 8009b4a <_printf_i+0x196>
 8009b42:	6823      	ldr	r3, [r4, #0]
 8009b44:	f023 0320 	bic.w	r3, r3, #32
 8009b48:	6023      	str	r3, [r4, #0]
 8009b4a:	2310      	movs	r3, #16
 8009b4c:	e7b0      	b.n	8009ab0 <_printf_i+0xfc>
 8009b4e:	6823      	ldr	r3, [r4, #0]
 8009b50:	f043 0320 	orr.w	r3, r3, #32
 8009b54:	6023      	str	r3, [r4, #0]
 8009b56:	2378      	movs	r3, #120	; 0x78
 8009b58:	4828      	ldr	r0, [pc, #160]	; (8009bfc <_printf_i+0x248>)
 8009b5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009b5e:	e7e3      	b.n	8009b28 <_printf_i+0x174>
 8009b60:	0659      	lsls	r1, r3, #25
 8009b62:	bf48      	it	mi
 8009b64:	b2b6      	uxthmi	r6, r6
 8009b66:	e7e6      	b.n	8009b36 <_printf_i+0x182>
 8009b68:	4615      	mov	r5, r2
 8009b6a:	e7bb      	b.n	8009ae4 <_printf_i+0x130>
 8009b6c:	682b      	ldr	r3, [r5, #0]
 8009b6e:	6826      	ldr	r6, [r4, #0]
 8009b70:	6961      	ldr	r1, [r4, #20]
 8009b72:	1d18      	adds	r0, r3, #4
 8009b74:	6028      	str	r0, [r5, #0]
 8009b76:	0635      	lsls	r5, r6, #24
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	d501      	bpl.n	8009b80 <_printf_i+0x1cc>
 8009b7c:	6019      	str	r1, [r3, #0]
 8009b7e:	e002      	b.n	8009b86 <_printf_i+0x1d2>
 8009b80:	0670      	lsls	r0, r6, #25
 8009b82:	d5fb      	bpl.n	8009b7c <_printf_i+0x1c8>
 8009b84:	8019      	strh	r1, [r3, #0]
 8009b86:	2300      	movs	r3, #0
 8009b88:	6123      	str	r3, [r4, #16]
 8009b8a:	4615      	mov	r5, r2
 8009b8c:	e7ba      	b.n	8009b04 <_printf_i+0x150>
 8009b8e:	682b      	ldr	r3, [r5, #0]
 8009b90:	1d1a      	adds	r2, r3, #4
 8009b92:	602a      	str	r2, [r5, #0]
 8009b94:	681d      	ldr	r5, [r3, #0]
 8009b96:	6862      	ldr	r2, [r4, #4]
 8009b98:	2100      	movs	r1, #0
 8009b9a:	4628      	mov	r0, r5
 8009b9c:	f7f6 fb28 	bl	80001f0 <memchr>
 8009ba0:	b108      	cbz	r0, 8009ba6 <_printf_i+0x1f2>
 8009ba2:	1b40      	subs	r0, r0, r5
 8009ba4:	6060      	str	r0, [r4, #4]
 8009ba6:	6863      	ldr	r3, [r4, #4]
 8009ba8:	6123      	str	r3, [r4, #16]
 8009baa:	2300      	movs	r3, #0
 8009bac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bb0:	e7a8      	b.n	8009b04 <_printf_i+0x150>
 8009bb2:	6923      	ldr	r3, [r4, #16]
 8009bb4:	462a      	mov	r2, r5
 8009bb6:	4649      	mov	r1, r9
 8009bb8:	4640      	mov	r0, r8
 8009bba:	47d0      	blx	sl
 8009bbc:	3001      	adds	r0, #1
 8009bbe:	d0ab      	beq.n	8009b18 <_printf_i+0x164>
 8009bc0:	6823      	ldr	r3, [r4, #0]
 8009bc2:	079b      	lsls	r3, r3, #30
 8009bc4:	d413      	bmi.n	8009bee <_printf_i+0x23a>
 8009bc6:	68e0      	ldr	r0, [r4, #12]
 8009bc8:	9b03      	ldr	r3, [sp, #12]
 8009bca:	4298      	cmp	r0, r3
 8009bcc:	bfb8      	it	lt
 8009bce:	4618      	movlt	r0, r3
 8009bd0:	e7a4      	b.n	8009b1c <_printf_i+0x168>
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	4632      	mov	r2, r6
 8009bd6:	4649      	mov	r1, r9
 8009bd8:	4640      	mov	r0, r8
 8009bda:	47d0      	blx	sl
 8009bdc:	3001      	adds	r0, #1
 8009bde:	d09b      	beq.n	8009b18 <_printf_i+0x164>
 8009be0:	3501      	adds	r5, #1
 8009be2:	68e3      	ldr	r3, [r4, #12]
 8009be4:	9903      	ldr	r1, [sp, #12]
 8009be6:	1a5b      	subs	r3, r3, r1
 8009be8:	42ab      	cmp	r3, r5
 8009bea:	dcf2      	bgt.n	8009bd2 <_printf_i+0x21e>
 8009bec:	e7eb      	b.n	8009bc6 <_printf_i+0x212>
 8009bee:	2500      	movs	r5, #0
 8009bf0:	f104 0619 	add.w	r6, r4, #25
 8009bf4:	e7f5      	b.n	8009be2 <_printf_i+0x22e>
 8009bf6:	bf00      	nop
 8009bf8:	0800a08d 	.word	0x0800a08d
 8009bfc:	0800a09e 	.word	0x0800a09e

08009c00 <_sbrk_r>:
 8009c00:	b538      	push	{r3, r4, r5, lr}
 8009c02:	4d06      	ldr	r5, [pc, #24]	; (8009c1c <_sbrk_r+0x1c>)
 8009c04:	2300      	movs	r3, #0
 8009c06:	4604      	mov	r4, r0
 8009c08:	4608      	mov	r0, r1
 8009c0a:	602b      	str	r3, [r5, #0]
 8009c0c:	f7f8 fa2c 	bl	8002068 <_sbrk>
 8009c10:	1c43      	adds	r3, r0, #1
 8009c12:	d102      	bne.n	8009c1a <_sbrk_r+0x1a>
 8009c14:	682b      	ldr	r3, [r5, #0]
 8009c16:	b103      	cbz	r3, 8009c1a <_sbrk_r+0x1a>
 8009c18:	6023      	str	r3, [r4, #0]
 8009c1a:	bd38      	pop	{r3, r4, r5, pc}
 8009c1c:	20000fc8 	.word	0x20000fc8

08009c20 <__sread>:
 8009c20:	b510      	push	{r4, lr}
 8009c22:	460c      	mov	r4, r1
 8009c24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c28:	f000 f8f8 	bl	8009e1c <_read_r>
 8009c2c:	2800      	cmp	r0, #0
 8009c2e:	bfab      	itete	ge
 8009c30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009c32:	89a3      	ldrhlt	r3, [r4, #12]
 8009c34:	181b      	addge	r3, r3, r0
 8009c36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009c3a:	bfac      	ite	ge
 8009c3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009c3e:	81a3      	strhlt	r3, [r4, #12]
 8009c40:	bd10      	pop	{r4, pc}

08009c42 <__swrite>:
 8009c42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c46:	461f      	mov	r7, r3
 8009c48:	898b      	ldrh	r3, [r1, #12]
 8009c4a:	05db      	lsls	r3, r3, #23
 8009c4c:	4605      	mov	r5, r0
 8009c4e:	460c      	mov	r4, r1
 8009c50:	4616      	mov	r6, r2
 8009c52:	d505      	bpl.n	8009c60 <__swrite+0x1e>
 8009c54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c58:	2302      	movs	r3, #2
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	f000 f868 	bl	8009d30 <_lseek_r>
 8009c60:	89a3      	ldrh	r3, [r4, #12]
 8009c62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c6a:	81a3      	strh	r3, [r4, #12]
 8009c6c:	4632      	mov	r2, r6
 8009c6e:	463b      	mov	r3, r7
 8009c70:	4628      	mov	r0, r5
 8009c72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c76:	f000 b817 	b.w	8009ca8 <_write_r>

08009c7a <__sseek>:
 8009c7a:	b510      	push	{r4, lr}
 8009c7c:	460c      	mov	r4, r1
 8009c7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c82:	f000 f855 	bl	8009d30 <_lseek_r>
 8009c86:	1c43      	adds	r3, r0, #1
 8009c88:	89a3      	ldrh	r3, [r4, #12]
 8009c8a:	bf15      	itete	ne
 8009c8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009c8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009c92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009c96:	81a3      	strheq	r3, [r4, #12]
 8009c98:	bf18      	it	ne
 8009c9a:	81a3      	strhne	r3, [r4, #12]
 8009c9c:	bd10      	pop	{r4, pc}

08009c9e <__sclose>:
 8009c9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ca2:	f000 b813 	b.w	8009ccc <_close_r>
	...

08009ca8 <_write_r>:
 8009ca8:	b538      	push	{r3, r4, r5, lr}
 8009caa:	4d07      	ldr	r5, [pc, #28]	; (8009cc8 <_write_r+0x20>)
 8009cac:	4604      	mov	r4, r0
 8009cae:	4608      	mov	r0, r1
 8009cb0:	4611      	mov	r1, r2
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	602a      	str	r2, [r5, #0]
 8009cb6:	461a      	mov	r2, r3
 8009cb8:	f7f8 f985 	bl	8001fc6 <_write>
 8009cbc:	1c43      	adds	r3, r0, #1
 8009cbe:	d102      	bne.n	8009cc6 <_write_r+0x1e>
 8009cc0:	682b      	ldr	r3, [r5, #0]
 8009cc2:	b103      	cbz	r3, 8009cc6 <_write_r+0x1e>
 8009cc4:	6023      	str	r3, [r4, #0]
 8009cc6:	bd38      	pop	{r3, r4, r5, pc}
 8009cc8:	20000fc8 	.word	0x20000fc8

08009ccc <_close_r>:
 8009ccc:	b538      	push	{r3, r4, r5, lr}
 8009cce:	4d06      	ldr	r5, [pc, #24]	; (8009ce8 <_close_r+0x1c>)
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	4604      	mov	r4, r0
 8009cd4:	4608      	mov	r0, r1
 8009cd6:	602b      	str	r3, [r5, #0]
 8009cd8:	f7f8 f991 	bl	8001ffe <_close>
 8009cdc:	1c43      	adds	r3, r0, #1
 8009cde:	d102      	bne.n	8009ce6 <_close_r+0x1a>
 8009ce0:	682b      	ldr	r3, [r5, #0]
 8009ce2:	b103      	cbz	r3, 8009ce6 <_close_r+0x1a>
 8009ce4:	6023      	str	r3, [r4, #0]
 8009ce6:	bd38      	pop	{r3, r4, r5, pc}
 8009ce8:	20000fc8 	.word	0x20000fc8

08009cec <_fstat_r>:
 8009cec:	b538      	push	{r3, r4, r5, lr}
 8009cee:	4d07      	ldr	r5, [pc, #28]	; (8009d0c <_fstat_r+0x20>)
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	4604      	mov	r4, r0
 8009cf4:	4608      	mov	r0, r1
 8009cf6:	4611      	mov	r1, r2
 8009cf8:	602b      	str	r3, [r5, #0]
 8009cfa:	f7f8 f98c 	bl	8002016 <_fstat>
 8009cfe:	1c43      	adds	r3, r0, #1
 8009d00:	d102      	bne.n	8009d08 <_fstat_r+0x1c>
 8009d02:	682b      	ldr	r3, [r5, #0]
 8009d04:	b103      	cbz	r3, 8009d08 <_fstat_r+0x1c>
 8009d06:	6023      	str	r3, [r4, #0]
 8009d08:	bd38      	pop	{r3, r4, r5, pc}
 8009d0a:	bf00      	nop
 8009d0c:	20000fc8 	.word	0x20000fc8

08009d10 <_isatty_r>:
 8009d10:	b538      	push	{r3, r4, r5, lr}
 8009d12:	4d06      	ldr	r5, [pc, #24]	; (8009d2c <_isatty_r+0x1c>)
 8009d14:	2300      	movs	r3, #0
 8009d16:	4604      	mov	r4, r0
 8009d18:	4608      	mov	r0, r1
 8009d1a:	602b      	str	r3, [r5, #0]
 8009d1c:	f7f8 f98b 	bl	8002036 <_isatty>
 8009d20:	1c43      	adds	r3, r0, #1
 8009d22:	d102      	bne.n	8009d2a <_isatty_r+0x1a>
 8009d24:	682b      	ldr	r3, [r5, #0]
 8009d26:	b103      	cbz	r3, 8009d2a <_isatty_r+0x1a>
 8009d28:	6023      	str	r3, [r4, #0]
 8009d2a:	bd38      	pop	{r3, r4, r5, pc}
 8009d2c:	20000fc8 	.word	0x20000fc8

08009d30 <_lseek_r>:
 8009d30:	b538      	push	{r3, r4, r5, lr}
 8009d32:	4d07      	ldr	r5, [pc, #28]	; (8009d50 <_lseek_r+0x20>)
 8009d34:	4604      	mov	r4, r0
 8009d36:	4608      	mov	r0, r1
 8009d38:	4611      	mov	r1, r2
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	602a      	str	r2, [r5, #0]
 8009d3e:	461a      	mov	r2, r3
 8009d40:	f7f8 f984 	bl	800204c <_lseek>
 8009d44:	1c43      	adds	r3, r0, #1
 8009d46:	d102      	bne.n	8009d4e <_lseek_r+0x1e>
 8009d48:	682b      	ldr	r3, [r5, #0]
 8009d4a:	b103      	cbz	r3, 8009d4e <_lseek_r+0x1e>
 8009d4c:	6023      	str	r3, [r4, #0]
 8009d4e:	bd38      	pop	{r3, r4, r5, pc}
 8009d50:	20000fc8 	.word	0x20000fc8

08009d54 <memcpy>:
 8009d54:	440a      	add	r2, r1
 8009d56:	4291      	cmp	r1, r2
 8009d58:	f100 33ff 	add.w	r3, r0, #4294967295
 8009d5c:	d100      	bne.n	8009d60 <memcpy+0xc>
 8009d5e:	4770      	bx	lr
 8009d60:	b510      	push	{r4, lr}
 8009d62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d6a:	4291      	cmp	r1, r2
 8009d6c:	d1f9      	bne.n	8009d62 <memcpy+0xe>
 8009d6e:	bd10      	pop	{r4, pc}

08009d70 <memmove>:
 8009d70:	4288      	cmp	r0, r1
 8009d72:	b510      	push	{r4, lr}
 8009d74:	eb01 0402 	add.w	r4, r1, r2
 8009d78:	d902      	bls.n	8009d80 <memmove+0x10>
 8009d7a:	4284      	cmp	r4, r0
 8009d7c:	4623      	mov	r3, r4
 8009d7e:	d807      	bhi.n	8009d90 <memmove+0x20>
 8009d80:	1e43      	subs	r3, r0, #1
 8009d82:	42a1      	cmp	r1, r4
 8009d84:	d008      	beq.n	8009d98 <memmove+0x28>
 8009d86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d8e:	e7f8      	b.n	8009d82 <memmove+0x12>
 8009d90:	4402      	add	r2, r0
 8009d92:	4601      	mov	r1, r0
 8009d94:	428a      	cmp	r2, r1
 8009d96:	d100      	bne.n	8009d9a <memmove+0x2a>
 8009d98:	bd10      	pop	{r4, pc}
 8009d9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009da2:	e7f7      	b.n	8009d94 <memmove+0x24>

08009da4 <__malloc_lock>:
 8009da4:	4801      	ldr	r0, [pc, #4]	; (8009dac <__malloc_lock+0x8>)
 8009da6:	f7ff baf3 	b.w	8009390 <__retarget_lock_acquire_recursive>
 8009daa:	bf00      	nop
 8009dac:	20000fbc 	.word	0x20000fbc

08009db0 <__malloc_unlock>:
 8009db0:	4801      	ldr	r0, [pc, #4]	; (8009db8 <__malloc_unlock+0x8>)
 8009db2:	f7ff baee 	b.w	8009392 <__retarget_lock_release_recursive>
 8009db6:	bf00      	nop
 8009db8:	20000fbc 	.word	0x20000fbc

08009dbc <_realloc_r>:
 8009dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dc0:	4680      	mov	r8, r0
 8009dc2:	4614      	mov	r4, r2
 8009dc4:	460e      	mov	r6, r1
 8009dc6:	b921      	cbnz	r1, 8009dd2 <_realloc_r+0x16>
 8009dc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009dcc:	4611      	mov	r1, r2
 8009dce:	f7ff bbb3 	b.w	8009538 <_malloc_r>
 8009dd2:	b92a      	cbnz	r2, 8009de0 <_realloc_r+0x24>
 8009dd4:	f7ff fb44 	bl	8009460 <_free_r>
 8009dd8:	4625      	mov	r5, r4
 8009dda:	4628      	mov	r0, r5
 8009ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009de0:	f000 f82e 	bl	8009e40 <_malloc_usable_size_r>
 8009de4:	4284      	cmp	r4, r0
 8009de6:	4607      	mov	r7, r0
 8009de8:	d802      	bhi.n	8009df0 <_realloc_r+0x34>
 8009dea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009dee:	d812      	bhi.n	8009e16 <_realloc_r+0x5a>
 8009df0:	4621      	mov	r1, r4
 8009df2:	4640      	mov	r0, r8
 8009df4:	f7ff fba0 	bl	8009538 <_malloc_r>
 8009df8:	4605      	mov	r5, r0
 8009dfa:	2800      	cmp	r0, #0
 8009dfc:	d0ed      	beq.n	8009dda <_realloc_r+0x1e>
 8009dfe:	42bc      	cmp	r4, r7
 8009e00:	4622      	mov	r2, r4
 8009e02:	4631      	mov	r1, r6
 8009e04:	bf28      	it	cs
 8009e06:	463a      	movcs	r2, r7
 8009e08:	f7ff ffa4 	bl	8009d54 <memcpy>
 8009e0c:	4631      	mov	r1, r6
 8009e0e:	4640      	mov	r0, r8
 8009e10:	f7ff fb26 	bl	8009460 <_free_r>
 8009e14:	e7e1      	b.n	8009dda <_realloc_r+0x1e>
 8009e16:	4635      	mov	r5, r6
 8009e18:	e7df      	b.n	8009dda <_realloc_r+0x1e>
	...

08009e1c <_read_r>:
 8009e1c:	b538      	push	{r3, r4, r5, lr}
 8009e1e:	4d07      	ldr	r5, [pc, #28]	; (8009e3c <_read_r+0x20>)
 8009e20:	4604      	mov	r4, r0
 8009e22:	4608      	mov	r0, r1
 8009e24:	4611      	mov	r1, r2
 8009e26:	2200      	movs	r2, #0
 8009e28:	602a      	str	r2, [r5, #0]
 8009e2a:	461a      	mov	r2, r3
 8009e2c:	f7f8 f8ae 	bl	8001f8c <_read>
 8009e30:	1c43      	adds	r3, r0, #1
 8009e32:	d102      	bne.n	8009e3a <_read_r+0x1e>
 8009e34:	682b      	ldr	r3, [r5, #0]
 8009e36:	b103      	cbz	r3, 8009e3a <_read_r+0x1e>
 8009e38:	6023      	str	r3, [r4, #0]
 8009e3a:	bd38      	pop	{r3, r4, r5, pc}
 8009e3c:	20000fc8 	.word	0x20000fc8

08009e40 <_malloc_usable_size_r>:
 8009e40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e44:	1f18      	subs	r0, r3, #4
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	bfbc      	itt	lt
 8009e4a:	580b      	ldrlt	r3, [r1, r0]
 8009e4c:	18c0      	addlt	r0, r0, r3
 8009e4e:	4770      	bx	lr

08009e50 <_init>:
 8009e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e52:	bf00      	nop
 8009e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e56:	bc08      	pop	{r3}
 8009e58:	469e      	mov	lr, r3
 8009e5a:	4770      	bx	lr

08009e5c <_fini>:
 8009e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e5e:	bf00      	nop
 8009e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e62:	bc08      	pop	{r3}
 8009e64:	469e      	mov	lr, r3
 8009e66:	4770      	bx	lr
