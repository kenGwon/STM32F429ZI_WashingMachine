
kenGwon_WashingMachine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a220  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  0800a3d0  0800a3d0  0001a3d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5e8  0800a5e8  00020184  2**0
                  CONTENTS
  4 .ARM          00000008  0800a5e8  0800a5e8  0001a5e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5f0  0800a5f0  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5f0  0800a5f0  0001a5f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a5f4  0800a5f4  0001a5f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  0800a5f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020184  2**0
                  CONTENTS
 10 .bss          00000e94  20000184  20000184  00020184  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001018  20001018  00020184  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020310  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000431b  00000000  00000000  000404c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019e0  00000000  00000000  000447e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001810  00000000  00000000  000461c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ae72  00000000  00000000  000479d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022e2d  00000000  00000000  00072842  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee206  00000000  00000000  0009566f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00183875  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007450  00000000  00000000  001838c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000184 	.word	0x20000184
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a3b8 	.word	0x0800a3b8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000188 	.word	0x20000188
 80001ec:	0800a3b8 	.word	0x0800a3b8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <DHT11_Init>:

/*
 * desc: DHT11은 active-low로 작동하기 때문에 초기화 과정에서 전위를 1로 셋팅해준다.
 */
void DHT11_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_DATA_RIN, GPIO_PIN_SET);
 8000598:	2201      	movs	r2, #1
 800059a:	2101      	movs	r1, #1
 800059c:	4804      	ldr	r0, [pc, #16]	; (80005b0 <DHT11_Init+0x1c>)
 800059e:	f003 fedd 	bl	800435c <HAL_GPIO_WritePin>
	HAL_Delay(3000); // 초기화 할때는 딱 한번만 일어나기 때문에 hal_delay()를 줘도 상관 없다.
 80005a2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80005a6:	f003 f825 	bl	80035f4 <HAL_Delay>
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40020000 	.word	0x40020000

080005b4 <LCD_Command>:
	}
#endif
}

void LCD_Command(uint8_t command)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af02      	add	r7, sp, #8
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = command & 0xf0;
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	f023 030f 	bic.w	r3, r3, #15
 80005c4:	73fb      	strb	r3, [r7, #15]
	low_nibble = (command<<4) & 0xf0;
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	011b      	lsls	r3, r3, #4
 80005ca:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 80005cc:	7bfb      	ldrb	r3, [r7, #15]
 80005ce:	f043 030c 	orr.w	r3, r3, #12
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 80005d6:	7bfb      	ldrb	r3, [r7, #15]
 80005d8:	f043 0308 	orr.w	r3, r3, #8
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 80005e0:	7bbb      	ldrb	r3, [r7, #14]
 80005e2:	f043 030c 	orr.w	r3, r3, #12
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 80005ea:	7bbb      	ldrb	r3, [r7, #14]
 80005ec:	f043 0308 	orr.w	r3, r3, #8
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 80005f4:	bf00      	nop
 80005f6:	f107 0208 	add.w	r2, r7, #8
 80005fa:	2364      	movs	r3, #100	; 0x64
 80005fc:	9300      	str	r3, [sp, #0]
 80005fe:	2304      	movs	r3, #4
 8000600:	214e      	movs	r1, #78	; 0x4e
 8000602:	4805      	ldr	r0, [pc, #20]	; (8000618 <LCD_Command+0x64>)
 8000604:	f004 f808 	bl	8004618 <HAL_I2C_Master_Transmit>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d1f3      	bne.n	80005f6 <LCD_Command+0x42>
			i2c_buffer, 4, 100)!=HAL_OK){
		//HAL_Delay(1);
	}
	return;
 800060e:	bf00      	nop
}
 8000610:	3710      	adds	r7, #16
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	200003e8 	.word	0x200003e8

0800061c <LCD_Data>:

// 1 byte write... 딱 한개의 캐릭터만 찍는 것이다.
void LCD_Data(uint8_t data)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af02      	add	r7, sp, #8
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = data & 0xf0;
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	f023 030f 	bic.w	r3, r3, #15
 800062c:	73fb      	strb	r3, [r7, #15]
	low_nibble = (data<<4) & 0xf0;
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	011b      	lsls	r3, r3, #4
 8000632:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 8000634:	7bfb      	ldrb	r3, [r7, #15]
 8000636:	f043 030d 	orr.w	r3, r3, #13
 800063a:	b2db      	uxtb	r3, r3
 800063c:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 800063e:	7bfb      	ldrb	r3, [r7, #15]
 8000640:	f043 0309 	orr.w	r3, r3, #9
 8000644:	b2db      	uxtb	r3, r3
 8000646:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 8000648:	7bbb      	ldrb	r3, [r7, #14]
 800064a:	f043 030d 	orr.w	r3, r3, #13
 800064e:	b2db      	uxtb	r3, r3
 8000650:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 8000652:	7bbb      	ldrb	r3, [r7, #14]
 8000654:	f043 0309 	orr.w	r3, r3, #9
 8000658:	b2db      	uxtb	r3, r3
 800065a:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 800065c:	bf00      	nop
 800065e:	f107 0208 	add.w	r2, r7, #8
 8000662:	2364      	movs	r3, #100	; 0x64
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	2304      	movs	r3, #4
 8000668:	214e      	movs	r1, #78	; 0x4e
 800066a:	4805      	ldr	r0, [pc, #20]	; (8000680 <LCD_Data+0x64>)
 800066c:	f003 ffd4 	bl	8004618 <HAL_I2C_Master_Transmit>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d1f3      	bne.n	800065e <LCD_Data+0x42>
			i2c_buffer, 4, 100)!=HAL_OK){
		//HAL_Delay(1);
	}
	return;
 8000676:	bf00      	nop
}
 8000678:	3710      	adds	r7, #16
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	200003e8 	.word	0x200003e8

08000684 <I2C_LCD_Init>:

// lcd 초기화
void I2C_LCD_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0

	LCD_Command(0x33);
 8000688:	2033      	movs	r0, #51	; 0x33
 800068a:	f7ff ff93 	bl	80005b4 <LCD_Command>
	LCD_Command(0x32);
 800068e:	2032      	movs	r0, #50	; 0x32
 8000690:	f7ff ff90 	bl	80005b4 <LCD_Command>
	LCD_Command(0x28);	//Function Set 4-bit mode
 8000694:	2028      	movs	r0, #40	; 0x28
 8000696:	f7ff ff8d 	bl	80005b4 <LCD_Command>
	LCD_Command(DISPLAY_ON);
 800069a:	200c      	movs	r0, #12
 800069c:	f7ff ff8a 	bl	80005b4 <LCD_Command>
	LCD_Command(0x06);	//Entry mode set
 80006a0:	2006      	movs	r0, #6
 80006a2:	f7ff ff87 	bl	80005b4 <LCD_Command>
	LCD_Command(CLEAR_DISPLAY);
 80006a6:	2001      	movs	r0, #1
 80006a8:	f7ff ff84 	bl	80005b4 <LCD_Command>
	HAL_Delay(2);
 80006ac:	2002      	movs	r0, #2
 80006ae:	f002 ffa1 	bl	80035f4 <HAL_Delay>
}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}

080006b6 <LCD_String>:

// null을 만날때 까지 string을 LCD에 출력
void LCD_String(uint8_t *str)
{
 80006b6:	b580      	push	{r7, lr}
 80006b8:	b082      	sub	sp, #8
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	6078      	str	r0, [r7, #4]
	while(*str) // 널문자를 만날 때까지
 80006be:	e006      	b.n	80006ce <LCD_String+0x18>
	{
		LCD_Data(*str++);
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	1c5a      	adds	r2, r3, #1
 80006c4:	607a      	str	r2, [r7, #4]
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff ffa7 	bl	800061c <LCD_Data>
	while(*str) // 널문자를 만날 때까지
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d1f4      	bne.n	80006c0 <LCD_String+0xa>
	}
}
 80006d6:	bf00      	nop
 80006d8:	bf00      	nop
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <Move_Cursor>:

// 해당 줄,col으로 이동 하는 함수
void Move_Cursor(uint8_t row, uint8_t column)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	460a      	mov	r2, r1
 80006ea:	71fb      	strb	r3, [r7, #7]
 80006ec:	4613      	mov	r3, r2
 80006ee:	71bb      	strb	r3, [r7, #6]
	LCD_Command(0x80 | row<<6 | column);
 80006f0:	79fb      	ldrb	r3, [r7, #7]
 80006f2:	019b      	lsls	r3, r3, #6
 80006f4:	b2da      	uxtb	r2, r3
 80006f6:	79bb      	ldrb	r3, [r7, #6]
 80006f8:	4313      	orrs	r3, r2
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000700:	b2db      	uxtb	r3, r3
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff ff56 	bl	80005b4 <LCD_Command>
	return;
 8000708:	bf00      	nop
}
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <Get_Button>:
 * param2: 함수가 접근하는 푸시 버튼 1개에 대응하는 1개 핀의 주소
 * param3: 함수가 접근하는 푸시 버튼 1개가 button_status[] 배열 상의 몇번째 인덱스에 해당하게 할 것인지를 결정하는 값
 * return: 푸시 버튼의 상태 (BUTTON_RELEASE 또는 BUTTON_PRESS)
 */
int Get_Button(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint8_t button_number)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	460b      	mov	r3, r1
 800071a:	807b      	strh	r3, [r7, #2]
 800071c:	4613      	mov	r3, r2
 800071e:	707b      	strb	r3, [r7, #1]
	unsigned char curr_state; // uint8_t로 선언해도 되지만 unsigned char로 선언한 이유는 여기에 담기는 값이 비록 0 또는 1이겠지만, 그것을 BUTTON_PRESS 또는 BUTTON_RELEASE와 같은 논리적 상태로 보겠다는 개발자의 의도를 담은 선언이다.
	curr_state = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin); // 0(BUTTON_PRESS) 또는 1(BUTTON_RELEASE)
 8000720:	887b      	ldrh	r3, [r7, #2]
 8000722:	4619      	mov	r1, r3
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f003 fe01 	bl	800432c <HAL_GPIO_ReadPin>
 800072a:	4603      	mov	r3, r0
 800072c:	73fb      	strb	r3, [r7, #15]

	if (curr_state == BUTTON_PRESS && button_status[button_number] == BUTTON_RELEASE)
 800072e:	7bfb      	ldrb	r3, [r7, #15]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d10d      	bne.n	8000750 <Get_Button+0x40>
 8000734:	787b      	ldrb	r3, [r7, #1]
 8000736:	4a11      	ldr	r2, [pc, #68]	; (800077c <Get_Button+0x6c>)
 8000738:	5cd3      	ldrb	r3, [r2, r3]
 800073a:	2b01      	cmp	r3, #1
 800073c:	d108      	bne.n	8000750 <Get_Button+0x40>
	{
		HAL_Delay(100); // 0.1초 동안 노이즈가 지나가길 기다림
 800073e:	2064      	movs	r0, #100	; 0x64
 8000740:	f002 ff58 	bl	80035f4 <HAL_Delay>
		button_status[button_number] = BUTTON_PRESS; // 누르긴 눌렀으니까 우선 button_status배열 상의 상태를 BUTTON_PRESS로 바꿔준다.
 8000744:	787b      	ldrb	r3, [r7, #1]
 8000746:	4a0d      	ldr	r2, [pc, #52]	; (800077c <Get_Button+0x6c>)
 8000748:	2100      	movs	r1, #0
 800074a:	54d1      	strb	r1, [r2, r3]
		return BUTTON_RELEASE; // 아직은 버튼을 누른것으로 간주할 수 없다.(왜냐하면 button_status배열 상의 버튼의 기존 상태가 BUTTON_RELEASE였기 때문이다.)
 800074c:	2301      	movs	r3, #1
 800074e:	e011      	b.n	8000774 <Get_Button+0x64>
	}
	else if (curr_state == BUTTON_RELEASE && button_status[button_number] == BUTTON_PRESS)
 8000750:	7bfb      	ldrb	r3, [r7, #15]
 8000752:	2b01      	cmp	r3, #1
 8000754:	d10d      	bne.n	8000772 <Get_Button+0x62>
 8000756:	787b      	ldrb	r3, [r7, #1]
 8000758:	4a08      	ldr	r2, [pc, #32]	; (800077c <Get_Button+0x6c>)
 800075a:	5cd3      	ldrb	r3, [r2, r3]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d108      	bne.n	8000772 <Get_Button+0x62>
	{
		button_status[button_number] = BUTTON_RELEASE; // button_status배열 상의 상태를 curr_state에 맞게 다시 초기화해주고
 8000760:	787b      	ldrb	r3, [r7, #1]
 8000762:	4a06      	ldr	r2, [pc, #24]	; (800077c <Get_Button+0x6c>)
 8000764:	2101      	movs	r1, #1
 8000766:	54d1      	strb	r1, [r2, r3]
		HAL_Delay(30);
 8000768:	201e      	movs	r0, #30
 800076a:	f002 ff43 	bl	80035f4 <HAL_Delay>
		return BUTTON_PRESS; // 정말 버튼을 누른 것으로 인정
 800076e:	2300      	movs	r3, #0
 8000770:	e000      	b.n	8000774 <Get_Button+0x64>
	}

	return BUTTON_RELEASE;
 8000772:	2301      	movs	r3, #1
}
 8000774:	4618      	mov	r0, r3
 8000776:	3710      	adds	r7, #16
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000000 	.word	0x20000000

08000780 <Buzzer_Turn_On>:

/*
 * desc: 부저에서 소리가 나오도록 duty cycle을 설정해준다.
 */
void Buzzer_Turn_On(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
	return __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, 200);
 8000784:	4b03      	ldr	r3, [pc, #12]	; (8000794 <Buzzer_Turn_On+0x14>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	22c8      	movs	r2, #200	; 0xc8
 800078a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr
 8000794:	2000057c 	.word	0x2000057c

08000798 <Buzzer_Turn_Off>:

/*
 * desc: 부저에서 소리가 안 나오도록 duty cycle을 설정해준다.
 */
void Buzzer_Turn_Off(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
	return __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, 0);
 800079c:	4b03      	ldr	r3, [pc, #12]	; (80007ac <Buzzer_Turn_Off+0x14>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	2200      	movs	r2, #0
 80007a2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr
 80007ac:	2000057c 	.word	0x2000057c

080007b0 <Mode_Complete_Alarm>:

/*
 * desc: 세탁/헹굼/탈수가 모두 완료되면 부저로 노래를 출력한다.
 */
void Mode_Complete_Alarm(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
	static uint32_t i = 0;
	int divide_freq = 1600000;
 80007b6:	4b25      	ldr	r3, [pc, #148]	; (800084c <Mode_Complete_Alarm+0x9c>)
 80007b8:	607b      	str	r3, [r7, #4]

	if (mode_complete_alarm_stop_start_flag == START)
 80007ba:	4b25      	ldr	r3, [pc, #148]	; (8000850 <Mode_Complete_Alarm+0xa0>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d139      	bne.n	8000838 <Mode_Complete_Alarm+0x88>
	{
		Buzzer_Turn_On();
 80007c4:	f7ff ffdc 	bl	8000780 <Buzzer_Turn_On>
		__HAL_TIM_SET_AUTORELOAD(&htim9, divide_freq / mode_complete_note[i]);
 80007c8:	6879      	ldr	r1, [r7, #4]
 80007ca:	4b22      	ldr	r3, [pc, #136]	; (8000854 <Mode_Complete_Alarm+0xa4>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4a22      	ldr	r2, [pc, #136]	; (8000858 <Mode_Complete_Alarm+0xa8>)
 80007d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007d4:	4b21      	ldr	r3, [pc, #132]	; (800085c <Mode_Complete_Alarm+0xac>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	fbb1 f2f2 	udiv	r2, r1, r2
 80007dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80007de:	687a      	ldr	r2, [r7, #4]
 80007e0:	4b1c      	ldr	r3, [pc, #112]	; (8000854 <Mode_Complete_Alarm+0xa4>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	491c      	ldr	r1, [pc, #112]	; (8000858 <Mode_Complete_Alarm+0xa8>)
 80007e6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ee:	4a1b      	ldr	r2, [pc, #108]	; (800085c <Mode_Complete_Alarm+0xac>)
 80007f0:	60d3      	str	r3, [r2, #12]

		// 리듬 단위 1은 0.2초라고 가정
		if (TIM10_10ms_WM_buzzer_timer > 20 * mode_complete_rythm[i])
 80007f2:	4b18      	ldr	r3, [pc, #96]	; (8000854 <Mode_Complete_Alarm+0xa4>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a1a      	ldr	r2, [pc, #104]	; (8000860 <Mode_Complete_Alarm+0xb0>)
 80007f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007fc:	4613      	mov	r3, r2
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	4413      	add	r3, r2
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	461a      	mov	r2, r3
 8000806:	4b17      	ldr	r3, [pc, #92]	; (8000864 <Mode_Complete_Alarm+0xb4>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	429a      	cmp	r2, r3
 800080c:	d207      	bcs.n	800081e <Mode_Complete_Alarm+0x6e>
		{
			TIM10_10ms_WM_buzzer_timer = 0;
 800080e:	4b15      	ldr	r3, [pc, #84]	; (8000864 <Mode_Complete_Alarm+0xb4>)
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
			i++;
 8000814:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <Mode_Complete_Alarm+0xa4>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	3301      	adds	r3, #1
 800081a:	4a0e      	ldr	r2, [pc, #56]	; (8000854 <Mode_Complete_Alarm+0xa4>)
 800081c:	6013      	str	r3, [r2, #0]
		}

		if (i >= sizeof(mode_complete_note)/sizeof(uint32_t))
 800081e:	4b0d      	ldr	r3, [pc, #52]	; (8000854 <Mode_Complete_Alarm+0xa4>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	2b1a      	cmp	r3, #26
 8000824:	d90d      	bls.n	8000842 <Mode_Complete_Alarm+0x92>
		{
			i = 0;
 8000826:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <Mode_Complete_Alarm+0xa4>)
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
			mode_complete_alarm_stop_start_flag = STOP;
 800082c:	4b08      	ldr	r3, [pc, #32]	; (8000850 <Mode_Complete_Alarm+0xa0>)
 800082e:	2200      	movs	r2, #0
 8000830:	701a      	strb	r2, [r3, #0]
			Buzzer_Turn_Off();
 8000832:	f7ff ffb1 	bl	8000798 <Buzzer_Turn_Off>
	else
	{
		i = 0;
		Buzzer_Turn_Off();
	}
}
 8000836:	e004      	b.n	8000842 <Mode_Complete_Alarm+0x92>
		i = 0;
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <Mode_Complete_Alarm+0xa4>)
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
		Buzzer_Turn_Off();
 800083e:	f7ff ffab 	bl	8000798 <Buzzer_Turn_Off>
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	00186a00 	.word	0x00186a00
 8000850:	20000f87 	.word	0x20000f87
 8000854:	200001a0 	.word	0x200001a0
 8000858:	20000008 	.word	0x20000008
 800085c:	2000057c 	.word	0x2000057c
 8000860:	20000074 	.word	0x20000074
 8000864:	20000c20 	.word	0x20000c20

08000868 <DCmotor_Forward_Rotate>:
/*
 * desc: DC모터를 원하는 시간동안 정방향 회전시킨 뒤 멈춘다.
 * param1: DC모터가 가동하는 시간(초 단위)
 */
void DCmotor_Forward_Rotate(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 800086c:	2201      	movs	r2, #1
 800086e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <DCmotor_Forward_Rotate+0x20>)
 8000874:	f003 fd72 	bl	800435c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8000878:	2200      	movs	r2, #0
 800087a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800087e:	4802      	ldr	r0, [pc, #8]	; (8000888 <DCmotor_Forward_Rotate+0x20>)
 8000880:	f003 fd6c 	bl	800435c <HAL_GPIO_WritePin>
}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40021000 	.word	0x40021000

0800088c <DCmotor_Backward_Rotate>:
/*
 * desc: DC모터를 원하는 시간동안 역방향 회전시킨 뒤 멈춘다.
 * param1: DC모터가 가동하는 시간(초 단위)
 */
void DCmotor_Backward_Rotate(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8000890:	2200      	movs	r2, #0
 8000892:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000896:	4805      	ldr	r0, [pc, #20]	; (80008ac <DCmotor_Backward_Rotate+0x20>)
 8000898:	f003 fd60 	bl	800435c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 800089c:	2201      	movs	r2, #1
 800089e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008a2:	4802      	ldr	r0, [pc, #8]	; (80008ac <DCmotor_Backward_Rotate+0x20>)
 80008a4:	f003 fd5a 	bl	800435c <HAL_GPIO_WritePin>
}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40021000 	.word	0x40021000

080008b0 <DCmotor_Break>:

/*
 * desc: DC모터를 멈춘다.
 */
void DCmotor_Break(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 80008b4:	2201      	movs	r2, #1
 80008b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008ba:	4805      	ldr	r0, [pc, #20]	; (80008d0 <DCmotor_Break+0x20>)
 80008bc:	f003 fd4e 	bl	800435c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 80008c0:	2201      	movs	r2, #1
 80008c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008c6:	4802      	ldr	r0, [pc, #8]	; (80008d0 <DCmotor_Break+0x20>)
 80008c8:	f003 fd48 	bl	800435c <HAL_GPIO_WritePin>
}
 80008cc:	bf00      	nop
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40021000 	.word	0x40021000

080008d4 <DCmotor_Set_DutyCycle>:

void DCmotor_Set_DutyCycle(uint16_t duty_cycle)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, duty_cycle);
 80008de:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <DCmotor_Set_DutyCycle+0x20>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	88fa      	ldrh	r2, [r7, #6]
 80008e4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80008e6:	bf00      	nop
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	200004ec 	.word	0x200004ec

080008f8 <FND4digit_off>:

/*
 * desc:
 */
void FND4digit_off(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
#if 0 // common 에노우드 WCN4-
	HAL_GPIO_WritePin(FND_COM_PORT, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(FND_DATA_PORT,FND_font[8]|FND_p, GPIO_PIN_SET);
#else // common 캐소우드 CL5642AH30
	HAL_GPIO_WritePin(FND_COM_PORT, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_SET);
 80008fc:	2201      	movs	r2, #1
 80008fe:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8000902:	4809      	ldr	r0, [pc, #36]	; (8000928 <FND4digit_off+0x30>)
 8000904:	f003 fd2a 	bl	800435c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FND_DATA_PORT,FND_font[8]|FND_p, GPIO_PIN_RESET);
 8000908:	4b08      	ldr	r3, [pc, #32]	; (800092c <FND4digit_off+0x34>)
 800090a:	6a1b      	ldr	r3, [r3, #32]
 800090c:	b29b      	uxth	r3, r3
 800090e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000912:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000916:	b29b      	uxth	r3, r3
 8000918:	2200      	movs	r2, #0
 800091a:	4619      	mov	r1, r3
 800091c:	4804      	ldr	r0, [pc, #16]	; (8000930 <FND4digit_off+0x38>)
 800091e:	f003 fd1d 	bl	800435c <HAL_GPIO_WritePin>
#endif
	return;
 8000922:	bf00      	nop
}
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40020800 	.word	0x40020800
 800092c:	200000e8 	.word	0x200000e8
 8000930:	40020400 	.word	0x40020400

08000934 <FND4digit_time_update>:
/*
 * desc: 초 단위로 들어온 시간을 시:분:초 형태로 잘라서, 분:초만 FND 배열에 넣는다.
 * param1: 초 단위로 환산된 시간
 */
static void FND4digit_time_update(uint32_t time)
{
 8000934:	b480      	push	{r7}
 8000936:	b085      	sub	sp, #20
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
	uint8_t miniute, second, miniute_tens, miniute_units, second_tens, second_units;

	miniute = (time % 3600) / 60;
 800093c:	687a      	ldr	r2, [r7, #4]
 800093e:	4b33      	ldr	r3, [pc, #204]	; (8000a0c <FND4digit_time_update+0xd8>)
 8000940:	fba3 1302 	umull	r1, r3, r3, r2
 8000944:	0adb      	lsrs	r3, r3, #11
 8000946:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800094a:	fb01 f303 	mul.w	r3, r1, r3
 800094e:	1ad3      	subs	r3, r2, r3
 8000950:	4a2f      	ldr	r2, [pc, #188]	; (8000a10 <FND4digit_time_update+0xdc>)
 8000952:	fba2 2303 	umull	r2, r3, r2, r3
 8000956:	095b      	lsrs	r3, r3, #5
 8000958:	73fb      	strb	r3, [r7, #15]
	second = (time % 3600) % 60;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4a2b      	ldr	r2, [pc, #172]	; (8000a0c <FND4digit_time_update+0xd8>)
 800095e:	fba2 1203 	umull	r1, r2, r2, r3
 8000962:	0ad2      	lsrs	r2, r2, #11
 8000964:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8000968:	fb01 f202 	mul.w	r2, r1, r2
 800096c:	1a9a      	subs	r2, r3, r2
 800096e:	4b28      	ldr	r3, [pc, #160]	; (8000a10 <FND4digit_time_update+0xdc>)
 8000970:	fba3 1302 	umull	r1, r3, r3, r2
 8000974:	0959      	lsrs	r1, r3, #5
 8000976:	460b      	mov	r3, r1
 8000978:	011b      	lsls	r3, r3, #4
 800097a:	1a5b      	subs	r3, r3, r1
 800097c:	009b      	lsls	r3, r3, #2
 800097e:	1ad1      	subs	r1, r2, r3
 8000980:	460b      	mov	r3, r1
 8000982:	73bb      	strb	r3, [r7, #14]

	miniute_tens = miniute / 10;
 8000984:	7bfb      	ldrb	r3, [r7, #15]
 8000986:	4a23      	ldr	r2, [pc, #140]	; (8000a14 <FND4digit_time_update+0xe0>)
 8000988:	fba2 2303 	umull	r2, r3, r2, r3
 800098c:	08db      	lsrs	r3, r3, #3
 800098e:	737b      	strb	r3, [r7, #13]
	miniute_units = miniute % 10;
 8000990:	7bfa      	ldrb	r2, [r7, #15]
 8000992:	4b20      	ldr	r3, [pc, #128]	; (8000a14 <FND4digit_time_update+0xe0>)
 8000994:	fba3 1302 	umull	r1, r3, r3, r2
 8000998:	08d9      	lsrs	r1, r3, #3
 800099a:	460b      	mov	r3, r1
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	440b      	add	r3, r1
 80009a0:	005b      	lsls	r3, r3, #1
 80009a2:	1ad3      	subs	r3, r2, r3
 80009a4:	733b      	strb	r3, [r7, #12]
	second_tens = second / 10;
 80009a6:	7bbb      	ldrb	r3, [r7, #14]
 80009a8:	4a1a      	ldr	r2, [pc, #104]	; (8000a14 <FND4digit_time_update+0xe0>)
 80009aa:	fba2 2303 	umull	r2, r3, r2, r3
 80009ae:	08db      	lsrs	r3, r3, #3
 80009b0:	72fb      	strb	r3, [r7, #11]
	second_units = second % 10;
 80009b2:	7bba      	ldrb	r2, [r7, #14]
 80009b4:	4b17      	ldr	r3, [pc, #92]	; (8000a14 <FND4digit_time_update+0xe0>)
 80009b6:	fba3 1302 	umull	r1, r3, r3, r2
 80009ba:	08d9      	lsrs	r1, r3, #3
 80009bc:	460b      	mov	r3, r1
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	440b      	add	r3, r1
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	1ad3      	subs	r3, r2, r3
 80009c6:	72bb      	strb	r3, [r7, #10]

	// 분
	FND[0] = FND_font[second_units]; // FND 오른쪽 끝 자리
 80009c8:	7abb      	ldrb	r3, [r7, #10]
 80009ca:	4a13      	ldr	r2, [pc, #76]	; (8000a18 <FND4digit_time_update+0xe4>)
 80009cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009d0:	b29a      	uxth	r2, r3
 80009d2:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <FND4digit_time_update+0xe8>)
 80009d4:	801a      	strh	r2, [r3, #0]
	FND[1] = FND_font[second_tens];
 80009d6:	7afb      	ldrb	r3, [r7, #11]
 80009d8:	4a0f      	ldr	r2, [pc, #60]	; (8000a18 <FND4digit_time_update+0xe4>)
 80009da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009de:	b29a      	uxth	r2, r3
 80009e0:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <FND4digit_time_update+0xe8>)
 80009e2:	805a      	strh	r2, [r3, #2]
	// 초
	FND[2] = FND_font[miniute_units];
 80009e4:	7b3b      	ldrb	r3, [r7, #12]
 80009e6:	4a0c      	ldr	r2, [pc, #48]	; (8000a18 <FND4digit_time_update+0xe4>)
 80009e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ec:	b29a      	uxth	r2, r3
 80009ee:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <FND4digit_time_update+0xe8>)
 80009f0:	809a      	strh	r2, [r3, #4]
	FND[3] = FND_font[miniute_tens]; // FND 왼쪽 끝 자리
 80009f2:	7b7b      	ldrb	r3, [r7, #13]
 80009f4:	4a08      	ldr	r2, [pc, #32]	; (8000a18 <FND4digit_time_update+0xe4>)
 80009f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009fa:	b29a      	uxth	r2, r3
 80009fc:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <FND4digit_time_update+0xe8>)
 80009fe:	80da      	strh	r2, [r3, #6]
}
 8000a00:	bf00      	nop
 8000a02:	3714      	adds	r7, #20
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	91a2b3c5 	.word	0x91a2b3c5
 8000a10:	88888889 	.word	0x88888889
 8000a14:	cccccccd 	.word	0xcccccccd
 8000a18:	200000e8 	.word	0x200000e8
 8000a1c:	200001a4 	.word	0x200001a4

08000a20 <FND4digit_time_display>:
/*
 * desc: 초 단위로 들어온 시간을 00:00(분:초) 형태로 FND에 출력한다.
 * param1: 초 단위로 환산된 시간
 */
void FND4digit_time_display(uint32_t time)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
	static unsigned int msec=0;    // ms counter
	static int i=0;     // FND position indicator


	if (fnd1ms_counter >= 2)   // 2ms reached
 8000a28:	4b20      	ldr	r3, [pc, #128]	; (8000aac <FND4digit_time_display+0x8c>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	dd38      	ble.n	8000aa2 <FND4digit_time_display+0x82>
	{
		fnd1ms_counter=0;
 8000a30:	4b1e      	ldr	r3, [pc, #120]	; (8000aac <FND4digit_time_display+0x8c>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
		msec += 2;
 8000a36:	4b1e      	ldr	r3, [pc, #120]	; (8000ab0 <FND4digit_time_display+0x90>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	3302      	adds	r3, #2
 8000a3c:	4a1c      	ldr	r2, [pc, #112]	; (8000ab0 <FND4digit_time_display+0x90>)
 8000a3e:	6013      	str	r3, [r2, #0]

		if (msec > 1000)   // 1000ms reached
 8000a40:	4b1b      	ldr	r3, [pc, #108]	; (8000ab0 <FND4digit_time_display+0x90>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a48:	d905      	bls.n	8000a56 <FND4digit_time_display+0x36>
		{
			msec = 0;
 8000a4a:	4b19      	ldr	r3, [pc, #100]	; (8000ab0 <FND4digit_time_display+0x90>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
			FND4digit_time_update(time);
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f7ff ff6f 	bl	8000934 <FND4digit_time_update>
		}
		FND4digit_off();
 8000a56:	f7ff ff4f 	bl	80008f8 <FND4digit_off>

#if 0 // common 애노우드  WCN4-
		HAL_GPIO_WritePin(FND_COM_PORT,FND_digit[i], GPIO_PIN_SET);
		HAL_GPIO_WritePin(FND_DATA_PORT, FND[i], GPIO_PIN_RESET);
#else // common 캐소우드 CL5642AH30
		HAL_GPIO_WritePin(FND_COM_PORT,FND_digit[i], GPIO_PIN_RESET);
 8000a5a:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <FND4digit_time_display+0x94>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4a16      	ldr	r2, [pc, #88]	; (8000ab8 <FND4digit_time_display+0x98>)
 8000a60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a64:	2200      	movs	r2, #0
 8000a66:	4619      	mov	r1, r3
 8000a68:	4814      	ldr	r0, [pc, #80]	; (8000abc <FND4digit_time_display+0x9c>)
 8000a6a:	f003 fc77 	bl	800435c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FND_DATA_PORT, FND[i], GPIO_PIN_SET);
 8000a6e:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <FND4digit_time_display+0x94>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a13      	ldr	r2, [pc, #76]	; (8000ac0 <FND4digit_time_display+0xa0>)
 8000a74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a78:	2201      	movs	r2, #1
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4811      	ldr	r0, [pc, #68]	; (8000ac4 <FND4digit_time_display+0xa4>)
 8000a7e:	f003 fc6d 	bl	800435c <HAL_GPIO_WritePin>
#endif



		i++;   // 다음 display할 FND를 가리킨다.
 8000a82:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <FND4digit_time_display+0x94>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	3301      	adds	r3, #1
 8000a88:	4a0a      	ldr	r2, [pc, #40]	; (8000ab4 <FND4digit_time_display+0x94>)
 8000a8a:	6013      	str	r3, [r2, #0]
		i %= 4;
 8000a8c:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <FND4digit_time_display+0x94>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	425a      	negs	r2, r3
 8000a92:	f003 0303 	and.w	r3, r3, #3
 8000a96:	f002 0203 	and.w	r2, r2, #3
 8000a9a:	bf58      	it	pl
 8000a9c:	4253      	negpl	r3, r2
 8000a9e:	4a05      	ldr	r2, [pc, #20]	; (8000ab4 <FND4digit_time_display+0x94>)
 8000aa0:	6013      	str	r3, [r2, #0]
	}
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000be8 	.word	0x20000be8
 8000ab0:	200001ac 	.word	0x200001ac
 8000ab4:	200001b0 	.word	0x200001b0
 8000ab8:	200000e0 	.word	0x200000e0
 8000abc:	40020800 	.word	0x40020800
 8000ac0:	200001a4 	.word	0x200001a4
 8000ac4:	40020400 	.word	0x40020400

08000ac8 <bcd2dec>:
	HAL_RTC_SetTime(&hrtc, &my_systemTime, RTC_FORMAT_BCD);
}

// 0010 0111 -> 23 (.ioc 환경변수 설정에서 날자값을 bcd포맷으로 저장하게 했기 때문에 이렇게 된다. binary 포맷이었다면 0001 0111 이었을 것)
uint8_t bcd2dec(uint8_t byte)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	71fb      	strb	r3, [r7, #7]
	uint8_t high, low;
	low = byte & 0x0f; // 하위 4bit (low nibble)
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	f003 030f 	and.w	r3, r3, #15
 8000ad8:	73fb      	strb	r3, [r7, #15]
	high = (byte >> 4) * 10; // 상위 4bit (high nibble)
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	091b      	lsrs	r3, r3, #4
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	0092      	lsls	r2, r2, #2
 8000ae4:	4413      	add	r3, r2
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	73bb      	strb	r3, [r7, #14]

	return high + low;
 8000aea:	7bba      	ldrb	r2, [r7, #14]
 8000aec:	7bfb      	ldrb	r3, [r7, #15]
 8000aee:	4413      	add	r3, r2
 8000af0:	b2db      	uxtb	r3, r3
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3714      	adds	r7, #20
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
	...

08000b00 <dec2bcd>:

// 23 -> 0010 0111
uint8_t dec2bcd(uint8_t byte)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	71fb      	strb	r3, [r7, #7]
	uint8_t high, low;

	high = (byte / 10) << 4;
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	4a0d      	ldr	r2, [pc, #52]	; (8000b44 <dec2bcd+0x44>)
 8000b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b12:	08db      	lsrs	r3, r3, #3
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	011b      	lsls	r3, r3, #4
 8000b18:	73fb      	strb	r3, [r7, #15]
	low = (byte % 10);
 8000b1a:	79fa      	ldrb	r2, [r7, #7]
 8000b1c:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <dec2bcd+0x44>)
 8000b1e:	fba3 1302 	umull	r1, r3, r3, r2
 8000b22:	08d9      	lsrs	r1, r3, #3
 8000b24:	460b      	mov	r3, r1
 8000b26:	009b      	lsls	r3, r3, #2
 8000b28:	440b      	add	r3, r1
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	73bb      	strb	r3, [r7, #14]

	return high + low;
 8000b30:	7bfa      	ldrb	r2, [r7, #15]
 8000b32:	7bbb      	ldrb	r3, [r7, #14]
 8000b34:	4413      	add	r3, r2
 8000b36:	b2db      	uxtb	r3, r3
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3714      	adds	r7, #20
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	cccccccd 	.word	0xcccccccd

08000b48 <LEDbar_All_Off>:

/*
 * desc: ledbar가 모두 꺼진다.
 */
void LEDbar_All_Off(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, 0xff, 0);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	21ff      	movs	r1, #255	; 0xff
 8000b50:	4802      	ldr	r0, [pc, #8]	; (8000b5c <LEDbar_All_Off+0x14>)
 8000b52:	f003 fc03 	bl	800435c <HAL_GPIO_WritePin>
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40020c00 	.word	0x40020c00

08000b60 <LEDbar_On_Up>:

/*
 * desc: ledbar는 8개의 led로 구성되어 있는데, 아래서부터 위로 한칸씩 올라가면서 1개의 led가 켜졌다가 꺼진다.
 */
void LEDbar_On_Up(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
	static int i = 0;

	if (TIM10_10ms_counter_ledbar >= 20)
 8000b64:	4b10      	ldr	r3, [pc, #64]	; (8000ba8 <LEDbar_On_Up+0x48>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	2b13      	cmp	r3, #19
 8000b6a:	d91b      	bls.n	8000ba4 <LEDbar_On_Up+0x44>
	{
		TIM10_10ms_counter_ledbar = 0;
 8000b6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <LEDbar_On_Up+0x48>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]

		if (i == 8)
 8000b72:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <LEDbar_On_Up+0x4c>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	2b08      	cmp	r3, #8
 8000b78:	d104      	bne.n	8000b84 <LEDbar_On_Up+0x24>
		{
			LEDbar_All_Off();
 8000b7a:	f7ff ffe5 	bl	8000b48 <LEDbar_All_Off>
			i = 0;
 8000b7e:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <LEDbar_On_Up+0x4c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
		}

		LEDbar_All_Off();
 8000b84:	f7ff ffe0 	bl	8000b48 <LEDbar_All_Off>
		HAL_GPIO_WritePin(GPIOD, 0x01 << i++, 1);
 8000b88:	4b08      	ldr	r3, [pc, #32]	; (8000bac <LEDbar_On_Up+0x4c>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	1c5a      	adds	r2, r3, #1
 8000b8e:	4907      	ldr	r1, [pc, #28]	; (8000bac <LEDbar_On_Up+0x4c>)
 8000b90:	600a      	str	r2, [r1, #0]
 8000b92:	2201      	movs	r2, #1
 8000b94:	fa02 f303 	lsl.w	r3, r2, r3
 8000b98:	b29b      	uxth	r3, r3
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4804      	ldr	r0, [pc, #16]	; (8000bb0 <LEDbar_On_Up+0x50>)
 8000ba0:	f003 fbdc 	bl	800435c <HAL_GPIO_WritePin>
	}
}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20000bf8 	.word	0x20000bf8
 8000bac:	200001b4 	.word	0x200001b4
 8000bb0:	40020c00 	.word	0x40020c00

08000bb4 <LEDbar_Keepon_Up>:

/*
 * desc: ledbar는 8개의 led로 구성되어 있는데, 아래서부터 위로 한칸씩 올라가면서 켜진 LED는 유지하면서 1개의 led가 추가로 켜진다.
 */
void LEDbar_Keepon_Up(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
	static int i = 0;

	if (TIM10_10ms_counter_ledbar >= 20)
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <LEDbar_Keepon_Up+0x44>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	2b13      	cmp	r3, #19
 8000bbe:	d919      	bls.n	8000bf4 <LEDbar_Keepon_Up+0x40>
	{
		TIM10_10ms_counter_ledbar = 0;
 8000bc0:	4b0d      	ldr	r3, [pc, #52]	; (8000bf8 <LEDbar_Keepon_Up+0x44>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]

		if (i == 8)
 8000bc6:	4b0d      	ldr	r3, [pc, #52]	; (8000bfc <LEDbar_Keepon_Up+0x48>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	2b08      	cmp	r3, #8
 8000bcc:	d104      	bne.n	8000bd8 <LEDbar_Keepon_Up+0x24>
		{
			LEDbar_All_Off();
 8000bce:	f7ff ffbb 	bl	8000b48 <LEDbar_All_Off>
			i = 0;
 8000bd2:	4b0a      	ldr	r3, [pc, #40]	; (8000bfc <LEDbar_Keepon_Up+0x48>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(GPIOD, 0x00|(0x01 << i++), 1);
 8000bd8:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <LEDbar_Keepon_Up+0x48>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	1c5a      	adds	r2, r3, #1
 8000bde:	4907      	ldr	r1, [pc, #28]	; (8000bfc <LEDbar_Keepon_Up+0x48>)
 8000be0:	600a      	str	r2, [r1, #0]
 8000be2:	2201      	movs	r2, #1
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	2201      	movs	r2, #1
 8000bec:	4619      	mov	r1, r3
 8000bee:	4804      	ldr	r0, [pc, #16]	; (8000c00 <LEDbar_Keepon_Up+0x4c>)
 8000bf0:	f003 fbb4 	bl	800435c <HAL_GPIO_WritePin>
	}
}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000bf8 	.word	0x20000bf8
 8000bfc:	200001b8 	.word	0x200001b8
 8000c00:	40020c00 	.word	0x40020c00

08000c04 <LEDbar_Flower_On>:

/*
 * desc: ledbar는 8개의 led로 구성되어 있는데, led가 펴져나가는 물결 모양으로 점멸되게 한다.
 */
void LEDbar_Flower_On(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
	static int i = 0;

	if (TIM10_10ms_counter_ledbar >= 20)
 8000c08:	4b16      	ldr	r3, [pc, #88]	; (8000c64 <LEDbar_Flower_On+0x60>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2b13      	cmp	r3, #19
 8000c0e:	d926      	bls.n	8000c5e <LEDbar_Flower_On+0x5a>
	{
		TIM10_10ms_counter_ledbar = 0;
 8000c10:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <LEDbar_Flower_On+0x60>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]

		if (i == 4)
 8000c16:	4b14      	ldr	r3, [pc, #80]	; (8000c68 <LEDbar_Flower_On+0x64>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	2b04      	cmp	r3, #4
 8000c1c:	d104      	bne.n	8000c28 <LEDbar_Flower_On+0x24>
		{
			LEDbar_All_Off();
 8000c1e:	f7ff ff93 	bl	8000b48 <LEDbar_All_Off>
			i = 0;
 8000c22:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <LEDbar_Flower_On+0x64>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(GPIOD, 0x08 >> i, 1);
 8000c28:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <LEDbar_Flower_On+0x64>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2208      	movs	r2, #8
 8000c2e:	fa42 f303 	asr.w	r3, r2, r3
 8000c32:	b29b      	uxth	r3, r3
 8000c34:	2201      	movs	r2, #1
 8000c36:	4619      	mov	r1, r3
 8000c38:	480c      	ldr	r0, [pc, #48]	; (8000c6c <LEDbar_Flower_On+0x68>)
 8000c3a:	f003 fb8f 	bl	800435c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, 0x10 << i, 1);
 8000c3e:	4b0a      	ldr	r3, [pc, #40]	; (8000c68 <LEDbar_Flower_On+0x64>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2210      	movs	r2, #16
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4807      	ldr	r0, [pc, #28]	; (8000c6c <LEDbar_Flower_On+0x68>)
 8000c50:	f003 fb84 	bl	800435c <HAL_GPIO_WritePin>
		i++;
 8000c54:	4b04      	ldr	r3, [pc, #16]	; (8000c68 <LEDbar_Flower_On+0x64>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	4a03      	ldr	r2, [pc, #12]	; (8000c68 <LEDbar_Flower_On+0x64>)
 8000c5c:	6013      	str	r3, [r2, #0]
	}
}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000bf8 	.word	0x20000bf8
 8000c68:	200001bc 	.word	0x200001bc
 8000c6c:	40020c00 	.word	0x40020c00

08000c70 <HAL_STSTICK_Handler>:
// ---------- call by SysTick_Handler of stm32f4xx_it.c ----------
// ARM default timer
// enter here every 1ms
volatile int fnd1ms_counter = 0;
void HAL_STSTICK_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
	fnd1ms_counter++; // 1ms timer
 8000c74:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <HAL_STSTICK_Handler+0x18>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	4a03      	ldr	r2, [pc, #12]	; (8000c88 <HAL_STSTICK_Handler+0x18>)
 8000c7c:	6013      	str	r3, [r2, #0]
}
 8000c7e:	bf00      	nop
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	20000be8 	.word	0x20000be8

08000c8c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE   // Add for printf
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000c94:	1d39      	adds	r1, r7, #4
 8000c96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	4803      	ldr	r0, [pc, #12]	; (8000cac <__io_putchar+0x20>)
 8000c9e:	f006 ffbe 	bl	8007c1e <HAL_UART_Transmit>

  return ch;
 8000ca2:	687b      	ldr	r3, [r7, #4]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20000654 	.word	0x20000654

08000cb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cb4:	f002 fc2c 	bl	8003510 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cb8:	f000 f826 	bl	8000d08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cbc:	f000 fc3e 	bl	800153c <MX_GPIO_Init>
  MX_ETH_Init();
 8000cc0:	f000 f88e 	bl	8000de0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000cc4:	f000 fbb8 	bl	8001438 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000cc8:	f000 fc0a 	bl	80014e0 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM10_Init();
 8000ccc:	f000 fb6c 	bl	80013a8 <MX_TIM10_Init>
  MX_TIM11_Init();
 8000cd0:	f000 fb8e 	bl	80013f0 <MX_TIM11_Init>
  MX_I2C1_Init();
 8000cd4:	f000 f8d2 	bl	8000e7c <MX_I2C1_Init>
  MX_TIM3_Init();
 8000cd8:	f000 f9c4 	bl	8001064 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000cdc:	f000 fa16 	bl	800110c <MX_TIM4_Init>
  MX_TIM2_Init();
 8000ce0:	f000 f966 	bl	8000fb0 <MX_TIM2_Init>
  MX_USART6_UART_Init();
 8000ce4:	f000 fbd2 	bl	800148c <MX_USART6_UART_Init>
  MX_RTC_Init();
 8000ce8:	f000 f908 	bl	8000efc <MX_RTC_Init>
  MX_TIM5_Init();
 8000cec:	f000 fa84 	bl	80011f8 <MX_TIM5_Init>
  MX_TIM9_Init();
 8000cf0:	f000 faf8 	bl	80012e4 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  printf("enter main()!!!\n");
 8000cf4:	4803      	ldr	r0, [pc, #12]	; (8000d04 <main+0x54>)
 8000cf6:	f008 fb5f 	bl	80093b8 <puts>
  DHT11_Init();
  I2C_LCD_Init();
#endif
  // ============================== END for Fan_Machine.c ==============================

  WashingMachine_Init();
 8000cfa:	f001 fc13 	bl	8002524 <WashingMachine_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  WashingMachine_Processing();
 8000cfe:	f001 fc51 	bl	80025a4 <WashingMachine_Processing>
 8000d02:	e7fc      	b.n	8000cfe <main+0x4e>
 8000d04:	0800a3d0 	.word	0x0800a3d0

08000d08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b094      	sub	sp, #80	; 0x50
 8000d0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d0e:	f107 0320 	add.w	r3, r7, #32
 8000d12:	2230      	movs	r2, #48	; 0x30
 8000d14:	2100      	movs	r1, #0
 8000d16:	4618      	mov	r0, r3
 8000d18:	f008 fad8 	bl	80092cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d1c:	f107 030c 	add.w	r3, r7, #12
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	60bb      	str	r3, [r7, #8]
 8000d30:	4b29      	ldr	r3, [pc, #164]	; (8000dd8 <SystemClock_Config+0xd0>)
 8000d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d34:	4a28      	ldr	r2, [pc, #160]	; (8000dd8 <SystemClock_Config+0xd0>)
 8000d36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d3c:	4b26      	ldr	r3, [pc, #152]	; (8000dd8 <SystemClock_Config+0xd0>)
 8000d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d44:	60bb      	str	r3, [r7, #8]
 8000d46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d48:	2300      	movs	r3, #0
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	4b23      	ldr	r3, [pc, #140]	; (8000ddc <SystemClock_Config+0xd4>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a22      	ldr	r2, [pc, #136]	; (8000ddc <SystemClock_Config+0xd4>)
 8000d52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d56:	6013      	str	r3, [r2, #0]
 8000d58:	4b20      	ldr	r3, [pc, #128]	; (8000ddc <SystemClock_Config+0xd4>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d60:	607b      	str	r3, [r7, #4]
 8000d62:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000d64:	2309      	movs	r3, #9
 8000d66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d68:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d72:	2302      	movs	r3, #2
 8000d74:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d76:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d7c:	2304      	movs	r3, #4
 8000d7e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000d80:	23a8      	movs	r3, #168	; 0xa8
 8000d82:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d84:	2302      	movs	r3, #2
 8000d86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d88:	2307      	movs	r3, #7
 8000d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d8c:	f107 0320 	add.w	r3, r7, #32
 8000d90:	4618      	mov	r0, r3
 8000d92:	f004 f8e1 	bl	8004f58 <HAL_RCC_OscConfig>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000d9c:	f000 fd1e 	bl	80017dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000da0:	230f      	movs	r3, #15
 8000da2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000da4:	2302      	movs	r3, #2
 8000da6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000dac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000db0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000db2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000db6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000db8:	f107 030c 	add.w	r3, r7, #12
 8000dbc:	2105      	movs	r1, #5
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f004 fb42 	bl	8005448 <HAL_RCC_ClockConfig>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000dca:	f000 fd07 	bl	80017dc <Error_Handler>
  }
}
 8000dce:	bf00      	nop
 8000dd0:	3750      	adds	r7, #80	; 0x50
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40007000 	.word	0x40007000

08000de0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000de4:	4b1f      	ldr	r3, [pc, #124]	; (8000e64 <MX_ETH_Init+0x84>)
 8000de6:	4a20      	ldr	r2, [pc, #128]	; (8000e68 <MX_ETH_Init+0x88>)
 8000de8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000dea:	4b20      	ldr	r3, [pc, #128]	; (8000e6c <MX_ETH_Init+0x8c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000df0:	4b1e      	ldr	r3, [pc, #120]	; (8000e6c <MX_ETH_Init+0x8c>)
 8000df2:	2280      	movs	r2, #128	; 0x80
 8000df4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000df6:	4b1d      	ldr	r3, [pc, #116]	; (8000e6c <MX_ETH_Init+0x8c>)
 8000df8:	22e1      	movs	r2, #225	; 0xe1
 8000dfa:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000dfc:	4b1b      	ldr	r3, [pc, #108]	; (8000e6c <MX_ETH_Init+0x8c>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000e02:	4b1a      	ldr	r3, [pc, #104]	; (8000e6c <MX_ETH_Init+0x8c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000e08:	4b18      	ldr	r3, [pc, #96]	; (8000e6c <MX_ETH_Init+0x8c>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000e0e:	4b15      	ldr	r3, [pc, #84]	; (8000e64 <MX_ETH_Init+0x84>)
 8000e10:	4a16      	ldr	r2, [pc, #88]	; (8000e6c <MX_ETH_Init+0x8c>)
 8000e12:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000e14:	4b13      	ldr	r3, [pc, #76]	; (8000e64 <MX_ETH_Init+0x84>)
 8000e16:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000e1a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000e1c:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <MX_ETH_Init+0x84>)
 8000e1e:	4a14      	ldr	r2, [pc, #80]	; (8000e70 <MX_ETH_Init+0x90>)
 8000e20:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000e22:	4b10      	ldr	r3, [pc, #64]	; (8000e64 <MX_ETH_Init+0x84>)
 8000e24:	4a13      	ldr	r2, [pc, #76]	; (8000e74 <MX_ETH_Init+0x94>)
 8000e26:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000e28:	4b0e      	ldr	r3, [pc, #56]	; (8000e64 <MX_ETH_Init+0x84>)
 8000e2a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000e2e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000e30:	480c      	ldr	r0, [pc, #48]	; (8000e64 <MX_ETH_Init+0x84>)
 8000e32:	f002 fda7 	bl	8003984 <HAL_ETH_Init>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000e3c:	f000 fcce 	bl	80017dc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000e40:	2238      	movs	r2, #56	; 0x38
 8000e42:	2100      	movs	r1, #0
 8000e44:	480c      	ldr	r0, [pc, #48]	; (8000e78 <MX_ETH_Init+0x98>)
 8000e46:	f008 fa41 	bl	80092cc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000e4a:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <MX_ETH_Init+0x98>)
 8000e4c:	2221      	movs	r2, #33	; 0x21
 8000e4e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000e50:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <MX_ETH_Init+0x98>)
 8000e52:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000e56:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000e58:	4b07      	ldr	r3, [pc, #28]	; (8000e78 <MX_ETH_Init+0x98>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000338 	.word	0x20000338
 8000e68:	40028000 	.word	0x40028000
 8000e6c:	20000bec 	.word	0x20000bec
 8000e70:	20000298 	.word	0x20000298
 8000e74:	200001f8 	.word	0x200001f8
 8000e78:	200001c0 	.word	0x200001c0

08000e7c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e80:	4b1b      	ldr	r3, [pc, #108]	; (8000ef0 <MX_I2C1_Init+0x74>)
 8000e82:	4a1c      	ldr	r2, [pc, #112]	; (8000ef4 <MX_I2C1_Init+0x78>)
 8000e84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e86:	4b1a      	ldr	r3, [pc, #104]	; (8000ef0 <MX_I2C1_Init+0x74>)
 8000e88:	4a1b      	ldr	r2, [pc, #108]	; (8000ef8 <MX_I2C1_Init+0x7c>)
 8000e8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e8c:	4b18      	ldr	r3, [pc, #96]	; (8000ef0 <MX_I2C1_Init+0x74>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e92:	4b17      	ldr	r3, [pc, #92]	; (8000ef0 <MX_I2C1_Init+0x74>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e98:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <MX_I2C1_Init+0x74>)
 8000e9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e9e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ea0:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <MX_I2C1_Init+0x74>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ea6:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <MX_I2C1_Init+0x74>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eac:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <MX_I2C1_Init+0x74>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eb2:	4b0f      	ldr	r3, [pc, #60]	; (8000ef0 <MX_I2C1_Init+0x74>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000eb8:	480d      	ldr	r0, [pc, #52]	; (8000ef0 <MX_I2C1_Init+0x74>)
 8000eba:	f003 fa69 	bl	8004390 <HAL_I2C_Init>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ec4:	f000 fc8a 	bl	80017dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ec8:	2100      	movs	r1, #0
 8000eca:	4809      	ldr	r0, [pc, #36]	; (8000ef0 <MX_I2C1_Init+0x74>)
 8000ecc:	f003 feab 	bl	8004c26 <HAL_I2CEx_ConfigAnalogFilter>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000ed6:	f000 fc81 	bl	80017dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000eda:	2100      	movs	r1, #0
 8000edc:	4804      	ldr	r0, [pc, #16]	; (8000ef0 <MX_I2C1_Init+0x74>)
 8000ede:	f003 fede 	bl	8004c9e <HAL_I2CEx_ConfigDigitalFilter>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000ee8:	f000 fc78 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	200003e8 	.word	0x200003e8
 8000ef4:	40005400 	.word	0x40005400
 8000ef8:	000186a0 	.word	0x000186a0

08000efc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000f02:	1d3b      	adds	r3, r7, #4
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000f10:	2300      	movs	r3, #0
 8000f12:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000f14:	4b24      	ldr	r3, [pc, #144]	; (8000fa8 <MX_RTC_Init+0xac>)
 8000f16:	4a25      	ldr	r2, [pc, #148]	; (8000fac <MX_RTC_Init+0xb0>)
 8000f18:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000f1a:	4b23      	ldr	r3, [pc, #140]	; (8000fa8 <MX_RTC_Init+0xac>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000f20:	4b21      	ldr	r3, [pc, #132]	; (8000fa8 <MX_RTC_Init+0xac>)
 8000f22:	227f      	movs	r2, #127	; 0x7f
 8000f24:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000f26:	4b20      	ldr	r3, [pc, #128]	; (8000fa8 <MX_RTC_Init+0xac>)
 8000f28:	22ff      	movs	r2, #255	; 0xff
 8000f2a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000f2c:	4b1e      	ldr	r3, [pc, #120]	; (8000fa8 <MX_RTC_Init+0xac>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f32:	4b1d      	ldr	r3, [pc, #116]	; (8000fa8 <MX_RTC_Init+0xac>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f38:	4b1b      	ldr	r3, [pc, #108]	; (8000fa8 <MX_RTC_Init+0xac>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f3e:	481a      	ldr	r0, [pc, #104]	; (8000fa8 <MX_RTC_Init+0xac>)
 8000f40:	f004 fe62 	bl	8005c08 <HAL_RTC_Init>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000f4a:	f000 fc47 	bl	80017dc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x8;
 8000f4e:	2308      	movs	r3, #8
 8000f50:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x38;
 8000f52:	2338      	movs	r3, #56	; 0x38
 8000f54:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x15;
 8000f56:	2315      	movs	r3, #21
 8000f58:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000f62:	1d3b      	adds	r3, r7, #4
 8000f64:	2201      	movs	r2, #1
 8000f66:	4619      	mov	r1, r3
 8000f68:	480f      	ldr	r0, [pc, #60]	; (8000fa8 <MX_RTC_Init+0xac>)
 8000f6a:	f004 fec3 	bl	8005cf4 <HAL_RTC_SetTime>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000f74:	f000 fc32 	bl	80017dc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_OCTOBER;
 8000f7c:	2310      	movs	r3, #16
 8000f7e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x16;
 8000f80:	2316      	movs	r3, #22
 8000f82:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 8000f84:	2323      	movs	r3, #35	; 0x23
 8000f86:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000f88:	463b      	mov	r3, r7
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4806      	ldr	r0, [pc, #24]	; (8000fa8 <MX_RTC_Init+0xac>)
 8000f90:	f004 ffa8 	bl	8005ee4 <HAL_RTC_SetDate>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000f9a:	f000 fc1f 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f9e:	bf00      	nop
 8000fa0:	3718      	adds	r7, #24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	2000043c 	.word	0x2000043c
 8000fac:	40002800 	.word	0x40002800

08000fb0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	; 0x28
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fb6:	f107 0320 	add.w	r3, r7, #32
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fc0:	1d3b      	adds	r3, r7, #4
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
 8000fca:	60da      	str	r2, [r3, #12]
 8000fcc:	611a      	str	r2, [r3, #16]
 8000fce:	615a      	str	r2, [r3, #20]
 8000fd0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fd2:	4b23      	ldr	r3, [pc, #140]	; (8001060 <MX_TIM2_Init+0xb0>)
 8000fd4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fd8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680-1;
 8000fda:	4b21      	ldr	r3, [pc, #132]	; (8001060 <MX_TIM2_Init+0xb0>)
 8000fdc:	f240 628f 	movw	r2, #1679	; 0x68f
 8000fe0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe2:	4b1f      	ldr	r3, [pc, #124]	; (8001060 <MX_TIM2_Init+0xb0>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000fe8:	4b1d      	ldr	r3, [pc, #116]	; (8001060 <MX_TIM2_Init+0xb0>)
 8000fea:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ff0:	4b1b      	ldr	r3, [pc, #108]	; (8001060 <MX_TIM2_Init+0xb0>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff6:	4b1a      	ldr	r3, [pc, #104]	; (8001060 <MX_TIM2_Init+0xb0>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ffc:	4818      	ldr	r0, [pc, #96]	; (8001060 <MX_TIM2_Init+0xb0>)
 8000ffe:	f005 f9c1 	bl	8006384 <HAL_TIM_PWM_Init>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001008:	f000 fbe8 	bl	80017dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800100c:	2300      	movs	r3, #0
 800100e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001010:	2300      	movs	r3, #0
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001014:	f107 0320 	add.w	r3, r7, #32
 8001018:	4619      	mov	r1, r3
 800101a:	4811      	ldr	r0, [pc, #68]	; (8001060 <MX_TIM2_Init+0xb0>)
 800101c:	f006 fd22 	bl	8007a64 <HAL_TIMEx_MasterConfigSynchronization>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001026:	f000 fbd9 	bl	80017dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800102a:	2360      	movs	r3, #96	; 0x60
 800102c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 800102e:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001032:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001034:	2300      	movs	r3, #0
 8001036:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800103c:	1d3b      	adds	r3, r7, #4
 800103e:	2200      	movs	r2, #0
 8001040:	4619      	mov	r1, r3
 8001042:	4807      	ldr	r0, [pc, #28]	; (8001060 <MX_TIM2_Init+0xb0>)
 8001044:	f005 fee8 	bl	8006e18 <HAL_TIM_PWM_ConfigChannel>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 800104e:	f000 fbc5 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001052:	4803      	ldr	r0, [pc, #12]	; (8001060 <MX_TIM2_Init+0xb0>)
 8001054:	f000 fe52 	bl	8001cfc <HAL_TIM_MspPostInit>

}
 8001058:	bf00      	nop
 800105a:	3728      	adds	r7, #40	; 0x28
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	2000045c 	.word	0x2000045c

08001064 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800106a:	f107 0310 	add.w	r3, r7, #16
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001074:	463b      	mov	r3, r7
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	609a      	str	r2, [r3, #8]
 800107e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001080:	4b20      	ldr	r3, [pc, #128]	; (8001104 <MX_TIM3_Init+0xa0>)
 8001082:	4a21      	ldr	r2, [pc, #132]	; (8001108 <MX_TIM3_Init+0xa4>)
 8001084:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8001086:	4b1f      	ldr	r3, [pc, #124]	; (8001104 <MX_TIM3_Init+0xa0>)
 8001088:	2253      	movs	r2, #83	; 0x53
 800108a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800108c:	4b1d      	ldr	r3, [pc, #116]	; (8001104 <MX_TIM3_Init+0xa0>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001092:	4b1c      	ldr	r3, [pc, #112]	; (8001104 <MX_TIM3_Init+0xa0>)
 8001094:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001098:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800109a:	4b1a      	ldr	r3, [pc, #104]	; (8001104 <MX_TIM3_Init+0xa0>)
 800109c:	2200      	movs	r2, #0
 800109e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a0:	4b18      	ldr	r3, [pc, #96]	; (8001104 <MX_TIM3_Init+0xa0>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80010a6:	4817      	ldr	r0, [pc, #92]	; (8001104 <MX_TIM3_Init+0xa0>)
 80010a8:	f005 fb9a 	bl	80067e0 <HAL_TIM_IC_Init>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80010b2:	f000 fb93 	bl	80017dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010b6:	2300      	movs	r3, #0
 80010b8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010be:	f107 0310 	add.w	r3, r7, #16
 80010c2:	4619      	mov	r1, r3
 80010c4:	480f      	ldr	r0, [pc, #60]	; (8001104 <MX_TIM3_Init+0xa0>)
 80010c6:	f006 fccd 	bl	8007a64 <HAL_TIMEx_MasterConfigSynchronization>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80010d0:	f000 fb84 	bl	80017dc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80010d4:	230a      	movs	r3, #10
 80010d6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010d8:	2301      	movs	r3, #1
 80010da:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80010dc:	2300      	movs	r3, #0
 80010de:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80010e4:	463b      	mov	r3, r7
 80010e6:	2200      	movs	r2, #0
 80010e8:	4619      	mov	r1, r3
 80010ea:	4806      	ldr	r0, [pc, #24]	; (8001104 <MX_TIM3_Init+0xa0>)
 80010ec:	f005 fdf8 	bl	8006ce0 <HAL_TIM_IC_ConfigChannel>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80010f6:	f000 fb71 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80010fa:	bf00      	nop
 80010fc:	3718      	adds	r7, #24
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	200004a4 	.word	0x200004a4
 8001108:	40000400 	.word	0x40000400

0800110c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b08e      	sub	sp, #56	; 0x38
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001112:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001120:	f107 0320 	add.w	r3, r7, #32
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800112a:	1d3b      	adds	r3, r7, #4
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
 8001138:	615a      	str	r2, [r3, #20]
 800113a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800113c:	4b2c      	ldr	r3, [pc, #176]	; (80011f0 <MX_TIM4_Init+0xe4>)
 800113e:	4a2d      	ldr	r2, [pc, #180]	; (80011f4 <MX_TIM4_Init+0xe8>)
 8001140:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840-1;
 8001142:	4b2b      	ldr	r3, [pc, #172]	; (80011f0 <MX_TIM4_Init+0xe4>)
 8001144:	f240 3247 	movw	r2, #839	; 0x347
 8001148:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800114a:	4b29      	ldr	r3, [pc, #164]	; (80011f0 <MX_TIM4_Init+0xe4>)
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8001150:	4b27      	ldr	r3, [pc, #156]	; (80011f0 <MX_TIM4_Init+0xe4>)
 8001152:	2263      	movs	r2, #99	; 0x63
 8001154:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001156:	4b26      	ldr	r3, [pc, #152]	; (80011f0 <MX_TIM4_Init+0xe4>)
 8001158:	2200      	movs	r2, #0
 800115a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800115c:	4b24      	ldr	r3, [pc, #144]	; (80011f0 <MX_TIM4_Init+0xe4>)
 800115e:	2200      	movs	r2, #0
 8001160:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001162:	4823      	ldr	r0, [pc, #140]	; (80011f0 <MX_TIM4_Init+0xe4>)
 8001164:	f005 f84e 	bl	8006204 <HAL_TIM_Base_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800116e:	f000 fb35 	bl	80017dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001172:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001176:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001178:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800117c:	4619      	mov	r1, r3
 800117e:	481c      	ldr	r0, [pc, #112]	; (80011f0 <MX_TIM4_Init+0xe4>)
 8001180:	f005 ff0c 	bl	8006f9c <HAL_TIM_ConfigClockSource>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800118a:	f000 fb27 	bl	80017dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800118e:	4818      	ldr	r0, [pc, #96]	; (80011f0 <MX_TIM4_Init+0xe4>)
 8001190:	f005 f8f8 	bl	8006384 <HAL_TIM_PWM_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800119a:	f000 fb1f 	bl	80017dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800119e:	2300      	movs	r3, #0
 80011a0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a2:	2300      	movs	r3, #0
 80011a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011a6:	f107 0320 	add.w	r3, r7, #32
 80011aa:	4619      	mov	r1, r3
 80011ac:	4810      	ldr	r0, [pc, #64]	; (80011f0 <MX_TIM4_Init+0xe4>)
 80011ae:	f006 fc59 	bl	8007a64 <HAL_TIMEx_MasterConfigSynchronization>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80011b8:	f000 fb10 	bl	80017dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011bc:	2360      	movs	r3, #96	; 0x60
 80011be:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 70-1;
 80011c0:	2345      	movs	r3, #69	; 0x45
 80011c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011c4:	2300      	movs	r3, #0
 80011c6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80011c8:	2304      	movs	r3, #4
 80011ca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	2200      	movs	r2, #0
 80011d0:	4619      	mov	r1, r3
 80011d2:	4807      	ldr	r0, [pc, #28]	; (80011f0 <MX_TIM4_Init+0xe4>)
 80011d4:	f005 fe20 	bl	8006e18 <HAL_TIM_PWM_ConfigChannel>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80011de:	f000 fafd 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80011e2:	4803      	ldr	r0, [pc, #12]	; (80011f0 <MX_TIM4_Init+0xe4>)
 80011e4:	f000 fd8a 	bl	8001cfc <HAL_TIM_MspPostInit>

}
 80011e8:	bf00      	nop
 80011ea:	3738      	adds	r7, #56	; 0x38
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	200004ec 	.word	0x200004ec
 80011f4:	40000800 	.word	0x40000800

080011f8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08e      	sub	sp, #56	; 0x38
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800120c:	f107 0320 	add.w	r3, r7, #32
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001216:	1d3b      	adds	r3, r7, #4
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
 8001224:	615a      	str	r2, [r3, #20]
 8001226:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001228:	4b2c      	ldr	r3, [pc, #176]	; (80012dc <MX_TIM5_Init+0xe4>)
 800122a:	4a2d      	ldr	r2, [pc, #180]	; (80012e0 <MX_TIM5_Init+0xe8>)
 800122c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 52.5-1;
 800122e:	4b2b      	ldr	r3, [pc, #172]	; (80012dc <MX_TIM5_Init+0xe4>)
 8001230:	2233      	movs	r2, #51	; 0x33
 8001232:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001234:	4b29      	ldr	r3, [pc, #164]	; (80012dc <MX_TIM5_Init+0xe4>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 400-1;
 800123a:	4b28      	ldr	r3, [pc, #160]	; (80012dc <MX_TIM5_Init+0xe4>)
 800123c:	f240 128f 	movw	r2, #399	; 0x18f
 8001240:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001242:	4b26      	ldr	r3, [pc, #152]	; (80012dc <MX_TIM5_Init+0xe4>)
 8001244:	2200      	movs	r2, #0
 8001246:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001248:	4b24      	ldr	r3, [pc, #144]	; (80012dc <MX_TIM5_Init+0xe4>)
 800124a:	2200      	movs	r2, #0
 800124c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800124e:	4823      	ldr	r0, [pc, #140]	; (80012dc <MX_TIM5_Init+0xe4>)
 8001250:	f004 ffd8 	bl	8006204 <HAL_TIM_Base_Init>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800125a:	f000 fabf 	bl	80017dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800125e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001262:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001264:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001268:	4619      	mov	r1, r3
 800126a:	481c      	ldr	r0, [pc, #112]	; (80012dc <MX_TIM5_Init+0xe4>)
 800126c:	f005 fe96 	bl	8006f9c <HAL_TIM_ConfigClockSource>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8001276:	f000 fab1 	bl	80017dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800127a:	4818      	ldr	r0, [pc, #96]	; (80012dc <MX_TIM5_Init+0xe4>)
 800127c:	f005 f882 	bl	8006384 <HAL_TIM_PWM_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8001286:	f000 faa9 	bl	80017dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800128a:	2300      	movs	r3, #0
 800128c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800128e:	2300      	movs	r3, #0
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001292:	f107 0320 	add.w	r3, r7, #32
 8001296:	4619      	mov	r1, r3
 8001298:	4810      	ldr	r0, [pc, #64]	; (80012dc <MX_TIM5_Init+0xe4>)
 800129a:	f006 fbe3 	bl	8007a64 <HAL_TIMEx_MasterConfigSynchronization>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 80012a4:	f000 fa9a 	bl	80017dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012a8:	2360      	movs	r3, #96	; 0x60
 80012aa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012b8:	1d3b      	adds	r3, r7, #4
 80012ba:	220c      	movs	r2, #12
 80012bc:	4619      	mov	r1, r3
 80012be:	4807      	ldr	r0, [pc, #28]	; (80012dc <MX_TIM5_Init+0xe4>)
 80012c0:	f005 fdaa 	bl	8006e18 <HAL_TIM_PWM_ConfigChannel>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 80012ca:	f000 fa87 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80012ce:	4803      	ldr	r0, [pc, #12]	; (80012dc <MX_TIM5_Init+0xe4>)
 80012d0:	f000 fd14 	bl	8001cfc <HAL_TIM_MspPostInit>

}
 80012d4:	bf00      	nop
 80012d6:	3738      	adds	r7, #56	; 0x38
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20000534 	.word	0x20000534
 80012e0:	40000c00 	.word	0x40000c00

080012e4 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08c      	sub	sp, #48	; 0x30
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ea:	f107 0320 	add.w	r3, r7, #32
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012f8:	1d3b      	adds	r3, r7, #4
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	60da      	str	r2, [r3, #12]
 8001304:	611a      	str	r2, [r3, #16]
 8001306:	615a      	str	r2, [r3, #20]
 8001308:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800130a:	4b25      	ldr	r3, [pc, #148]	; (80013a0 <MX_TIM9_Init+0xbc>)
 800130c:	4a25      	ldr	r2, [pc, #148]	; (80013a4 <MX_TIM9_Init+0xc0>)
 800130e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 105-1;
 8001310:	4b23      	ldr	r3, [pc, #140]	; (80013a0 <MX_TIM9_Init+0xbc>)
 8001312:	2268      	movs	r2, #104	; 0x68
 8001314:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001316:	4b22      	ldr	r3, [pc, #136]	; (80013a0 <MX_TIM9_Init+0xbc>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 400-1;
 800131c:	4b20      	ldr	r3, [pc, #128]	; (80013a0 <MX_TIM9_Init+0xbc>)
 800131e:	f240 128f 	movw	r2, #399	; 0x18f
 8001322:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001324:	4b1e      	ldr	r3, [pc, #120]	; (80013a0 <MX_TIM9_Init+0xbc>)
 8001326:	2200      	movs	r2, #0
 8001328:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800132a:	4b1d      	ldr	r3, [pc, #116]	; (80013a0 <MX_TIM9_Init+0xbc>)
 800132c:	2200      	movs	r2, #0
 800132e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001330:	481b      	ldr	r0, [pc, #108]	; (80013a0 <MX_TIM9_Init+0xbc>)
 8001332:	f004 ff67 	bl	8006204 <HAL_TIM_Base_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 800133c:	f000 fa4e 	bl	80017dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001344:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001346:	f107 0320 	add.w	r3, r7, #32
 800134a:	4619      	mov	r1, r3
 800134c:	4814      	ldr	r0, [pc, #80]	; (80013a0 <MX_TIM9_Init+0xbc>)
 800134e:	f005 fe25 	bl	8006f9c <HAL_TIM_ConfigClockSource>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8001358:	f000 fa40 	bl	80017dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800135c:	4810      	ldr	r0, [pc, #64]	; (80013a0 <MX_TIM9_Init+0xbc>)
 800135e:	f005 f811 	bl	8006384 <HAL_TIM_PWM_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8001368:	f000 fa38 	bl	80017dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800136c:	2360      	movs	r3, #96	; 0x60
 800136e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 200-1;
 8001370:	23c7      	movs	r3, #199	; 0xc7
 8001372:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001374:	2300      	movs	r3, #0
 8001376:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800137c:	1d3b      	adds	r3, r7, #4
 800137e:	2200      	movs	r2, #0
 8001380:	4619      	mov	r1, r3
 8001382:	4807      	ldr	r0, [pc, #28]	; (80013a0 <MX_TIM9_Init+0xbc>)
 8001384:	f005 fd48 	bl	8006e18 <HAL_TIM_PWM_ConfigChannel>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 800138e:	f000 fa25 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001392:	4803      	ldr	r0, [pc, #12]	; (80013a0 <MX_TIM9_Init+0xbc>)
 8001394:	f000 fcb2 	bl	8001cfc <HAL_TIM_MspPostInit>

}
 8001398:	bf00      	nop
 800139a:	3730      	adds	r7, #48	; 0x30
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	2000057c 	.word	0x2000057c
 80013a4:	40014000 	.word	0x40014000

080013a8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80013ac:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <MX_TIM10_Init+0x40>)
 80013ae:	4a0f      	ldr	r2, [pc, #60]	; (80013ec <MX_TIM10_Init+0x44>)
 80013b0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 80013b2:	4b0d      	ldr	r3, [pc, #52]	; (80013e8 <MX_TIM10_Init+0x40>)
 80013b4:	22a7      	movs	r2, #167	; 0xa7
 80013b6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b8:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <MX_TIM10_Init+0x40>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000-1;
 80013be:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <MX_TIM10_Init+0x40>)
 80013c0:	f242 720f 	movw	r2, #9999	; 0x270f
 80013c4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c6:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <MX_TIM10_Init+0x40>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <MX_TIM10_Init+0x40>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80013d2:	4805      	ldr	r0, [pc, #20]	; (80013e8 <MX_TIM10_Init+0x40>)
 80013d4:	f004 ff16 	bl	8006204 <HAL_TIM_Base_Init>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80013de:	f000 f9fd 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	200005c4 	.word	0x200005c4
 80013ec:	40014400 	.word	0x40014400

080013f0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80013f4:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <MX_TIM11_Init+0x40>)
 80013f6:	4a0f      	ldr	r2, [pc, #60]	; (8001434 <MX_TIM11_Init+0x44>)
 80013f8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 168-1;
 80013fa:	4b0d      	ldr	r3, [pc, #52]	; (8001430 <MX_TIM11_Init+0x40>)
 80013fc:	22a7      	movs	r2, #167	; 0xa7
 80013fe:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001400:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <MX_TIM11_Init+0x40>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001406:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <MX_TIM11_Init+0x40>)
 8001408:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800140c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800140e:	4b08      	ldr	r3, [pc, #32]	; (8001430 <MX_TIM11_Init+0x40>)
 8001410:	2200      	movs	r2, #0
 8001412:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <MX_TIM11_Init+0x40>)
 8001416:	2200      	movs	r2, #0
 8001418:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800141a:	4805      	ldr	r0, [pc, #20]	; (8001430 <MX_TIM11_Init+0x40>)
 800141c:	f004 fef2 	bl	8006204 <HAL_TIM_Base_Init>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001426:	f000 f9d9 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	2000060c 	.word	0x2000060c
 8001434:	40014800 	.word	0x40014800

08001438 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800143c:	4b11      	ldr	r3, [pc, #68]	; (8001484 <MX_USART3_UART_Init+0x4c>)
 800143e:	4a12      	ldr	r2, [pc, #72]	; (8001488 <MX_USART3_UART_Init+0x50>)
 8001440:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001442:	4b10      	ldr	r3, [pc, #64]	; (8001484 <MX_USART3_UART_Init+0x4c>)
 8001444:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001448:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800144a:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <MX_USART3_UART_Init+0x4c>)
 800144c:	2200      	movs	r2, #0
 800144e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001450:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <MX_USART3_UART_Init+0x4c>)
 8001452:	2200      	movs	r2, #0
 8001454:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001456:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <MX_USART3_UART_Init+0x4c>)
 8001458:	2200      	movs	r2, #0
 800145a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800145c:	4b09      	ldr	r3, [pc, #36]	; (8001484 <MX_USART3_UART_Init+0x4c>)
 800145e:	220c      	movs	r2, #12
 8001460:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001462:	4b08      	ldr	r3, [pc, #32]	; (8001484 <MX_USART3_UART_Init+0x4c>)
 8001464:	2200      	movs	r2, #0
 8001466:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001468:	4b06      	ldr	r3, [pc, #24]	; (8001484 <MX_USART3_UART_Init+0x4c>)
 800146a:	2200      	movs	r2, #0
 800146c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800146e:	4805      	ldr	r0, [pc, #20]	; (8001484 <MX_USART3_UART_Init+0x4c>)
 8001470:	f006 fb88 	bl	8007b84 <HAL_UART_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800147a:	f000 f9af 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000654 	.word	0x20000654
 8001488:	40004800 	.word	0x40004800

0800148c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001490:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <MX_USART6_UART_Init+0x4c>)
 8001492:	4a12      	ldr	r2, [pc, #72]	; (80014dc <MX_USART6_UART_Init+0x50>)
 8001494:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001496:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <MX_USART6_UART_Init+0x4c>)
 8001498:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800149c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800149e:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <MX_USART6_UART_Init+0x4c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80014a4:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <MX_USART6_UART_Init+0x4c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80014aa:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <MX_USART6_UART_Init+0x4c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80014b0:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <MX_USART6_UART_Init+0x4c>)
 80014b2:	220c      	movs	r2, #12
 80014b4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014b6:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <MX_USART6_UART_Init+0x4c>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <MX_USART6_UART_Init+0x4c>)
 80014be:	2200      	movs	r2, #0
 80014c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80014c2:	4805      	ldr	r0, [pc, #20]	; (80014d8 <MX_USART6_UART_Init+0x4c>)
 80014c4:	f006 fb5e 	bl	8007b84 <HAL_UART_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80014ce:	f000 f985 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20000698 	.word	0x20000698
 80014dc:	40011400 	.word	0x40011400

080014e0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80014e4:	4b14      	ldr	r3, [pc, #80]	; (8001538 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014e6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80014ea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80014ec:	4b12      	ldr	r3, [pc, #72]	; (8001538 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014ee:	2204      	movs	r2, #4
 80014f0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80014f2:	4b11      	ldr	r3, [pc, #68]	; (8001538 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014f4:	2202      	movs	r2, #2
 80014f6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80014f8:	4b0f      	ldr	r3, [pc, #60]	; (8001538 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80014fe:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001500:	2202      	movs	r2, #2
 8001502:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001504:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001506:	2201      	movs	r2, #1
 8001508:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800150a:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800150c:	2200      	movs	r2, #0
 800150e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001510:	4b09      	ldr	r3, [pc, #36]	; (8001538 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001512:	2200      	movs	r2, #0
 8001514:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001516:	4b08      	ldr	r3, [pc, #32]	; (8001538 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001518:	2201      	movs	r2, #1
 800151a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800151c:	4b06      	ldr	r3, [pc, #24]	; (8001538 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800151e:	2200      	movs	r2, #0
 8001520:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001522:	4805      	ldr	r0, [pc, #20]	; (8001538 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001524:	f003 fbfa 	bl	8004d1c <HAL_PCD_Init>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800152e:	f000 f955 	bl	80017dc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	200006dc 	.word	0x200006dc

0800153c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08e      	sub	sp, #56	; 0x38
 8001540:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001542:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]
 800154c:	609a      	str	r2, [r3, #8]
 800154e:	60da      	str	r2, [r3, #12]
 8001550:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	623b      	str	r3, [r7, #32]
 8001556:	4b99      	ldr	r3, [pc, #612]	; (80017bc <MX_GPIO_Init+0x280>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	4a98      	ldr	r2, [pc, #608]	; (80017bc <MX_GPIO_Init+0x280>)
 800155c:	f043 0310 	orr.w	r3, r3, #16
 8001560:	6313      	str	r3, [r2, #48]	; 0x30
 8001562:	4b96      	ldr	r3, [pc, #600]	; (80017bc <MX_GPIO_Init+0x280>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	f003 0310 	and.w	r3, r3, #16
 800156a:	623b      	str	r3, [r7, #32]
 800156c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	61fb      	str	r3, [r7, #28]
 8001572:	4b92      	ldr	r3, [pc, #584]	; (80017bc <MX_GPIO_Init+0x280>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	4a91      	ldr	r2, [pc, #580]	; (80017bc <MX_GPIO_Init+0x280>)
 8001578:	f043 0304 	orr.w	r3, r3, #4
 800157c:	6313      	str	r3, [r2, #48]	; 0x30
 800157e:	4b8f      	ldr	r3, [pc, #572]	; (80017bc <MX_GPIO_Init+0x280>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	f003 0304 	and.w	r3, r3, #4
 8001586:	61fb      	str	r3, [r7, #28]
 8001588:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	61bb      	str	r3, [r7, #24]
 800158e:	4b8b      	ldr	r3, [pc, #556]	; (80017bc <MX_GPIO_Init+0x280>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	4a8a      	ldr	r2, [pc, #552]	; (80017bc <MX_GPIO_Init+0x280>)
 8001594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001598:	6313      	str	r3, [r2, #48]	; 0x30
 800159a:	4b88      	ldr	r3, [pc, #544]	; (80017bc <MX_GPIO_Init+0x280>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015a2:	61bb      	str	r3, [r7, #24]
 80015a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	617b      	str	r3, [r7, #20]
 80015aa:	4b84      	ldr	r3, [pc, #528]	; (80017bc <MX_GPIO_Init+0x280>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	4a83      	ldr	r2, [pc, #524]	; (80017bc <MX_GPIO_Init+0x280>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	6313      	str	r3, [r2, #48]	; 0x30
 80015b6:	4b81      	ldr	r3, [pc, #516]	; (80017bc <MX_GPIO_Init+0x280>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	617b      	str	r3, [r7, #20]
 80015c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	613b      	str	r3, [r7, #16]
 80015c6:	4b7d      	ldr	r3, [pc, #500]	; (80017bc <MX_GPIO_Init+0x280>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	4a7c      	ldr	r2, [pc, #496]	; (80017bc <MX_GPIO_Init+0x280>)
 80015cc:	f043 0302 	orr.w	r3, r3, #2
 80015d0:	6313      	str	r3, [r2, #48]	; 0x30
 80015d2:	4b7a      	ldr	r3, [pc, #488]	; (80017bc <MX_GPIO_Init+0x280>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	613b      	str	r3, [r7, #16]
 80015dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	4b76      	ldr	r3, [pc, #472]	; (80017bc <MX_GPIO_Init+0x280>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	4a75      	ldr	r2, [pc, #468]	; (80017bc <MX_GPIO_Init+0x280>)
 80015e8:	f043 0320 	orr.w	r3, r3, #32
 80015ec:	6313      	str	r3, [r2, #48]	; 0x30
 80015ee:	4b73      	ldr	r3, [pc, #460]	; (80017bc <MX_GPIO_Init+0x280>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	f003 0320 	and.w	r3, r3, #32
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	60bb      	str	r3, [r7, #8]
 80015fe:	4b6f      	ldr	r3, [pc, #444]	; (80017bc <MX_GPIO_Init+0x280>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4a6e      	ldr	r2, [pc, #440]	; (80017bc <MX_GPIO_Init+0x280>)
 8001604:	f043 0308 	orr.w	r3, r3, #8
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4b6c      	ldr	r3, [pc, #432]	; (80017bc <MX_GPIO_Init+0x280>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f003 0308 	and.w	r3, r3, #8
 8001612:	60bb      	str	r3, [r7, #8]
 8001614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	607b      	str	r3, [r7, #4]
 800161a:	4b68      	ldr	r3, [pc, #416]	; (80017bc <MX_GPIO_Init+0x280>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	4a67      	ldr	r2, [pc, #412]	; (80017bc <MX_GPIO_Init+0x280>)
 8001620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
 8001626:	4b65      	ldr	r3, [pc, #404]	; (80017bc <MX_GPIO_Init+0x280>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800162e:	607b      	str	r3, [r7, #4]
 8001630:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 8001632:	2200      	movs	r2, #0
 8001634:	2101      	movs	r1, #1
 8001636:	4862      	ldr	r0, [pc, #392]	; (80017c0 <MX_GPIO_Init+0x284>)
 8001638:	f002 fe90 	bl	800435c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|FND_A_Pin|FND_B_Pin|FND_G_Pin
 800163c:	2200      	movs	r2, #0
 800163e:	f24d 01ff 	movw	r1, #53503	; 0xd0ff
 8001642:	4860      	ldr	r0, [pc, #384]	; (80017c4 <MX_GPIO_Init+0x288>)
 8001644:	f002 fe8a 	bl	800435c <HAL_GPIO_WritePin>
                          |LD3_Pin|FND_DP_Pin|FND_C_Pin|FND_D_Pin
                          |FND_E_Pin|FND_F_Pin|LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, GPIO_PIN_RESET);
 8001648:	2200      	movs	r2, #0
 800164a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800164e:	485e      	ldr	r0, [pc, #376]	; (80017c8 <MX_GPIO_Init+0x28c>)
 8001650:	f002 fe84 	bl	800435c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, IN1_DCMOTOR_Pin|IN2_DCMOTOR_Pin|FAN_ROTATE_DERECTION_LED_Pin, GPIO_PIN_RESET);
 8001654:	2200      	movs	r2, #0
 8001656:	f44f 510c 	mov.w	r1, #8960	; 0x2300
 800165a:	485c      	ldr	r0, [pc, #368]	; (80017cc <MX_GPIO_Init+0x290>)
 800165c:	f002 fe7e 	bl	800435c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001660:	2200      	movs	r2, #0
 8001662:	2140      	movs	r1, #64	; 0x40
 8001664:	485a      	ldr	r0, [pc, #360]	; (80017d0 <MX_GPIO_Init+0x294>)
 8001666:	f002 fe79 	bl	800435c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FND_D1_Pin|FND_D2_Pin|FND_D3_Pin|FND_D4_Pin, GPIO_PIN_RESET);
 800166a:	2200      	movs	r2, #0
 800166c:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8001670:	4858      	ldr	r0, [pc, #352]	; (80017d4 <MX_GPIO_Init+0x298>)
 8001672:	f002 fe73 	bl	800435c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LEDBAR0_Pin|LEDBAR1_Pin|LEDBAR2_Pin|LEDBAR3_Pin
 8001676:	2200      	movs	r2, #0
 8001678:	21ff      	movs	r1, #255	; 0xff
 800167a:	4857      	ldr	r0, [pc, #348]	; (80017d8 <MX_GPIO_Init+0x29c>)
 800167c:	f002 fe6e 	bl	800435c <HAL_GPIO_WritePin>
                          |LEDBAR4_Pin|LEDBAR5_Pin|LEDBAR6_Pin|LEDBAR7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001680:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001686:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800168a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001690:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001694:	4619      	mov	r1, r3
 8001696:	484f      	ldr	r0, [pc, #316]	; (80017d4 <MX_GPIO_Init+0x298>)
 8001698:	f002 fc9c 	bl	8003fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 800169c:	2301      	movs	r3, #1
 800169e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a0:	2301      	movs	r3, #1
 80016a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a8:	2300      	movs	r3, #0
 80016aa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 80016ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b0:	4619      	mov	r1, r3
 80016b2:	4843      	ldr	r0, [pc, #268]	; (80017c0 <MX_GPIO_Init+0x284>)
 80016b4:	f002 fc8e 	bl	8003fd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin FND_A_Pin FND_B_Pin FND_G_Pin
                           LD3_Pin FND_DP_Pin FND_C_Pin FND_D_Pin
                           FND_E_Pin FND_F_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|FND_A_Pin|FND_B_Pin|FND_G_Pin
 80016b8:	f24d 03ff 	movw	r3, #53503	; 0xd0ff
 80016bc:	627b      	str	r3, [r7, #36]	; 0x24
                          |LD3_Pin|FND_DP_Pin|FND_C_Pin|FND_D_Pin
                          |FND_E_Pin|FND_F_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016be:	2301      	movs	r3, #1
 80016c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c6:	2300      	movs	r3, #0
 80016c8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ce:	4619      	mov	r1, r3
 80016d0:	483c      	ldr	r0, [pc, #240]	; (80017c4 <MX_GPIO_Init+0x288>)
 80016d2:	f002 fc7f 	bl	8003fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULTRASONIC_TRIGGER_Pin */
  GPIO_InitStruct.Pin = ULTRASONIC_TRIGGER_Pin;
 80016d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016dc:	2301      	movs	r3, #1
 80016de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e4:	2300      	movs	r3, #0
 80016e6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ULTRASONIC_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 80016e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ec:	4619      	mov	r1, r3
 80016ee:	4836      	ldr	r0, [pc, #216]	; (80017c8 <MX_GPIO_Init+0x28c>)
 80016f0:	f002 fc70 	bl	8003fd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_DCMOTOR_Pin IN2_DCMOTOR_Pin FAN_ROTATE_DERECTION_LED_Pin */
  GPIO_InitStruct.Pin = IN1_DCMOTOR_Pin|IN2_DCMOTOR_Pin|FAN_ROTATE_DERECTION_LED_Pin;
 80016f4:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 80016f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fa:	2301      	movs	r3, #1
 80016fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001702:	2300      	movs	r3, #0
 8001704:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001706:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800170a:	4619      	mov	r1, r3
 800170c:	482f      	ldr	r0, [pc, #188]	; (80017cc <MX_GPIO_Init+0x290>)
 800170e:	f002 fc61 	bl	8003fd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON3_Pin BUTTON2_Pin BUTTON1_Pin BUTTON0_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON2_Pin|BUTTON1_Pin|BUTTON0_Pin;
 8001712:	f44f 4354 	mov.w	r3, #54272	; 0xd400
 8001716:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001718:	2300      	movs	r3, #0
 800171a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001720:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001724:	4619      	mov	r1, r3
 8001726:	4829      	ldr	r0, [pc, #164]	; (80017cc <MX_GPIO_Init+0x290>)
 8001728:	f002 fc54 	bl	8003fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON4_Pin */
  GPIO_InitStruct.Pin = BUTTON4_Pin;
 800172c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001730:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001732:	2300      	movs	r3, #0
 8001734:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BUTTON4_GPIO_Port, &GPIO_InitStruct);
 800173a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800173e:	4619      	mov	r1, r3
 8001740:	4820      	ldr	r0, [pc, #128]	; (80017c4 <MX_GPIO_Init+0x288>)
 8001742:	f002 fc47 	bl	8003fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001746:	2340      	movs	r3, #64	; 0x40
 8001748:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174a:	2301      	movs	r3, #1
 800174c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001752:	2300      	movs	r3, #0
 8001754:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001756:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800175a:	4619      	mov	r1, r3
 800175c:	481c      	ldr	r0, [pc, #112]	; (80017d0 <MX_GPIO_Init+0x294>)
 800175e:	f002 fc39 	bl	8003fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001762:	2380      	movs	r3, #128	; 0x80
 8001764:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001766:	2300      	movs	r3, #0
 8001768:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176a:	2300      	movs	r3, #0
 800176c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800176e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001772:	4619      	mov	r1, r3
 8001774:	4816      	ldr	r0, [pc, #88]	; (80017d0 <MX_GPIO_Init+0x294>)
 8001776:	f002 fc2d 	bl	8003fd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : FND_D1_Pin FND_D2_Pin FND_D3_Pin FND_D4_Pin */
  GPIO_InitStruct.Pin = FND_D1_Pin|FND_D2_Pin|FND_D3_Pin|FND_D4_Pin;
 800177a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800177e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001780:	2301      	movs	r3, #1
 8001782:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001788:	2300      	movs	r3, #0
 800178a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800178c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001790:	4619      	mov	r1, r3
 8001792:	4810      	ldr	r0, [pc, #64]	; (80017d4 <MX_GPIO_Init+0x298>)
 8001794:	f002 fc1e 	bl	8003fd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDBAR0_Pin LEDBAR1_Pin LEDBAR2_Pin LEDBAR3_Pin
                           LEDBAR4_Pin LEDBAR5_Pin LEDBAR6_Pin LEDBAR7_Pin */
  GPIO_InitStruct.Pin = LEDBAR0_Pin|LEDBAR1_Pin|LEDBAR2_Pin|LEDBAR3_Pin
 8001798:	23ff      	movs	r3, #255	; 0xff
 800179a:	627b      	str	r3, [r7, #36]	; 0x24
                          |LEDBAR4_Pin|LEDBAR5_Pin|LEDBAR6_Pin|LEDBAR7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800179c:	2301      	movs	r3, #1
 800179e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a4:	2300      	movs	r3, #0
 80017a6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ac:	4619      	mov	r1, r3
 80017ae:	480a      	ldr	r0, [pc, #40]	; (80017d8 <MX_GPIO_Init+0x29c>)
 80017b0:	f002 fc10 	bl	8003fd4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017b4:	bf00      	nop
 80017b6:	3738      	adds	r7, #56	; 0x38
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40023800 	.word	0x40023800
 80017c0:	40020000 	.word	0x40020000
 80017c4:	40020400 	.word	0x40020400
 80017c8:	40021400 	.word	0x40021400
 80017cc:	40021000 	.word	0x40021000
 80017d0:	40021800 	.word	0x40021800
 80017d4:	40020800 	.word	0x40020800
 80017d8:	40020c00 	.word	0x40020c00

080017dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017e0:	b672      	cpsid	i
}
 80017e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017e4:	e7fe      	b.n	80017e4 <Error_Handler+0x8>
	...

080017e8 <open_WashingMachine_Lid>:
	// 서보모터 데이터 시트에서 1.5ms동안 유지되는 high 신호는 90도 회전으로 본다. ==> 0.00002 * 75개
	// 서보모터 데이터 시트에서 1ms동안 유지되는 high 신호는 0도 회전으로 본다. ==> 0.00002 * 50개
}

void open_WashingMachine_Lid(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 50);
 80017ec:	4b04      	ldr	r3, [pc, #16]	; (8001800 <open_WashingMachine_Lid+0x18>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2232      	movs	r2, #50	; 0x32
 80017f2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	2000045c 	.word	0x2000045c

08001804 <close_WashingMachine_Lid>:

void close_WashingMachine_Lid(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 100);
 8001808:	4b04      	ldr	r3, [pc, #16]	; (800181c <close_WashingMachine_Lid+0x18>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2264      	movs	r2, #100	; 0x64
 800180e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	2000045c 	.word	0x2000045c

08001820 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	607b      	str	r3, [r7, #4]
 800182a:	4b10      	ldr	r3, [pc, #64]	; (800186c <HAL_MspInit+0x4c>)
 800182c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182e:	4a0f      	ldr	r2, [pc, #60]	; (800186c <HAL_MspInit+0x4c>)
 8001830:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001834:	6453      	str	r3, [r2, #68]	; 0x44
 8001836:	4b0d      	ldr	r3, [pc, #52]	; (800186c <HAL_MspInit+0x4c>)
 8001838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800183e:	607b      	str	r3, [r7, #4]
 8001840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	603b      	str	r3, [r7, #0]
 8001846:	4b09      	ldr	r3, [pc, #36]	; (800186c <HAL_MspInit+0x4c>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	4a08      	ldr	r2, [pc, #32]	; (800186c <HAL_MspInit+0x4c>)
 800184c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001850:	6413      	str	r3, [r2, #64]	; 0x40
 8001852:	4b06      	ldr	r3, [pc, #24]	; (800186c <HAL_MspInit+0x4c>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185a:	603b      	str	r3, [r7, #0]
 800185c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	40023800 	.word	0x40023800

08001870 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b08e      	sub	sp, #56	; 0x38
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001878:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	60da      	str	r2, [r3, #12]
 8001886:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a55      	ldr	r2, [pc, #340]	; (80019e4 <HAL_ETH_MspInit+0x174>)
 800188e:	4293      	cmp	r3, r2
 8001890:	f040 80a4 	bne.w	80019dc <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001894:	2300      	movs	r3, #0
 8001896:	623b      	str	r3, [r7, #32]
 8001898:	4b53      	ldr	r3, [pc, #332]	; (80019e8 <HAL_ETH_MspInit+0x178>)
 800189a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189c:	4a52      	ldr	r2, [pc, #328]	; (80019e8 <HAL_ETH_MspInit+0x178>)
 800189e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018a2:	6313      	str	r3, [r2, #48]	; 0x30
 80018a4:	4b50      	ldr	r3, [pc, #320]	; (80019e8 <HAL_ETH_MspInit+0x178>)
 80018a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ac:	623b      	str	r3, [r7, #32]
 80018ae:	6a3b      	ldr	r3, [r7, #32]
 80018b0:	2300      	movs	r3, #0
 80018b2:	61fb      	str	r3, [r7, #28]
 80018b4:	4b4c      	ldr	r3, [pc, #304]	; (80019e8 <HAL_ETH_MspInit+0x178>)
 80018b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b8:	4a4b      	ldr	r2, [pc, #300]	; (80019e8 <HAL_ETH_MspInit+0x178>)
 80018ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80018be:	6313      	str	r3, [r2, #48]	; 0x30
 80018c0:	4b49      	ldr	r3, [pc, #292]	; (80019e8 <HAL_ETH_MspInit+0x178>)
 80018c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018c8:	61fb      	str	r3, [r7, #28]
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	2300      	movs	r3, #0
 80018ce:	61bb      	str	r3, [r7, #24]
 80018d0:	4b45      	ldr	r3, [pc, #276]	; (80019e8 <HAL_ETH_MspInit+0x178>)
 80018d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d4:	4a44      	ldr	r2, [pc, #272]	; (80019e8 <HAL_ETH_MspInit+0x178>)
 80018d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80018da:	6313      	str	r3, [r2, #48]	; 0x30
 80018dc:	4b42      	ldr	r3, [pc, #264]	; (80019e8 <HAL_ETH_MspInit+0x178>)
 80018de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80018e4:	61bb      	str	r3, [r7, #24]
 80018e6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]
 80018ec:	4b3e      	ldr	r3, [pc, #248]	; (80019e8 <HAL_ETH_MspInit+0x178>)
 80018ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f0:	4a3d      	ldr	r2, [pc, #244]	; (80019e8 <HAL_ETH_MspInit+0x178>)
 80018f2:	f043 0304 	orr.w	r3, r3, #4
 80018f6:	6313      	str	r3, [r2, #48]	; 0x30
 80018f8:	4b3b      	ldr	r3, [pc, #236]	; (80019e8 <HAL_ETH_MspInit+0x178>)
 80018fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fc:	f003 0304 	and.w	r3, r3, #4
 8001900:	617b      	str	r3, [r7, #20]
 8001902:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001904:	2300      	movs	r3, #0
 8001906:	613b      	str	r3, [r7, #16]
 8001908:	4b37      	ldr	r3, [pc, #220]	; (80019e8 <HAL_ETH_MspInit+0x178>)
 800190a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190c:	4a36      	ldr	r2, [pc, #216]	; (80019e8 <HAL_ETH_MspInit+0x178>)
 800190e:	f043 0301 	orr.w	r3, r3, #1
 8001912:	6313      	str	r3, [r2, #48]	; 0x30
 8001914:	4b34      	ldr	r3, [pc, #208]	; (80019e8 <HAL_ETH_MspInit+0x178>)
 8001916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001918:	f003 0301 	and.w	r3, r3, #1
 800191c:	613b      	str	r3, [r7, #16]
 800191e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001920:	2300      	movs	r3, #0
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	4b30      	ldr	r3, [pc, #192]	; (80019e8 <HAL_ETH_MspInit+0x178>)
 8001926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001928:	4a2f      	ldr	r2, [pc, #188]	; (80019e8 <HAL_ETH_MspInit+0x178>)
 800192a:	f043 0302 	orr.w	r3, r3, #2
 800192e:	6313      	str	r3, [r2, #48]	; 0x30
 8001930:	4b2d      	ldr	r3, [pc, #180]	; (80019e8 <HAL_ETH_MspInit+0x178>)
 8001932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800193c:	2300      	movs	r3, #0
 800193e:	60bb      	str	r3, [r7, #8]
 8001940:	4b29      	ldr	r3, [pc, #164]	; (80019e8 <HAL_ETH_MspInit+0x178>)
 8001942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001944:	4a28      	ldr	r2, [pc, #160]	; (80019e8 <HAL_ETH_MspInit+0x178>)
 8001946:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800194a:	6313      	str	r3, [r2, #48]	; 0x30
 800194c:	4b26      	ldr	r3, [pc, #152]	; (80019e8 <HAL_ETH_MspInit+0x178>)
 800194e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001954:	60bb      	str	r3, [r7, #8]
 8001956:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001958:	2332      	movs	r3, #50	; 0x32
 800195a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195c:	2302      	movs	r3, #2
 800195e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001960:	2300      	movs	r3, #0
 8001962:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001964:	2303      	movs	r3, #3
 8001966:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001968:	230b      	movs	r3, #11
 800196a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800196c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001970:	4619      	mov	r1, r3
 8001972:	481e      	ldr	r0, [pc, #120]	; (80019ec <HAL_ETH_MspInit+0x17c>)
 8001974:	f002 fb2e 	bl	8003fd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001978:	2386      	movs	r3, #134	; 0x86
 800197a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197c:	2302      	movs	r3, #2
 800197e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001984:	2303      	movs	r3, #3
 8001986:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001988:	230b      	movs	r3, #11
 800198a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001990:	4619      	mov	r1, r3
 8001992:	4817      	ldr	r0, [pc, #92]	; (80019f0 <HAL_ETH_MspInit+0x180>)
 8001994:	f002 fb1e 	bl	8003fd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001998:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800199c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199e:	2302      	movs	r3, #2
 80019a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a6:	2303      	movs	r3, #3
 80019a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019aa:	230b      	movs	r3, #11
 80019ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80019ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019b2:	4619      	mov	r1, r3
 80019b4:	480f      	ldr	r0, [pc, #60]	; (80019f4 <HAL_ETH_MspInit+0x184>)
 80019b6:	f002 fb0d 	bl	8003fd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80019ba:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80019be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c0:	2302      	movs	r3, #2
 80019c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c8:	2303      	movs	r3, #3
 80019ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019cc:	230b      	movs	r3, #11
 80019ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019d4:	4619      	mov	r1, r3
 80019d6:	4808      	ldr	r0, [pc, #32]	; (80019f8 <HAL_ETH_MspInit+0x188>)
 80019d8:	f002 fafc 	bl	8003fd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80019dc:	bf00      	nop
 80019de:	3738      	adds	r7, #56	; 0x38
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40028000 	.word	0x40028000
 80019e8:	40023800 	.word	0x40023800
 80019ec:	40020800 	.word	0x40020800
 80019f0:	40020000 	.word	0x40020000
 80019f4:	40020400 	.word	0x40020400
 80019f8:	40021800 	.word	0x40021800

080019fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b08a      	sub	sp, #40	; 0x28
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a04:	f107 0314 	add.w	r3, r7, #20
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	60da      	str	r2, [r3, #12]
 8001a12:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a19      	ldr	r2, [pc, #100]	; (8001a80 <HAL_I2C_MspInit+0x84>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d12c      	bne.n	8001a78 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	613b      	str	r3, [r7, #16]
 8001a22:	4b18      	ldr	r3, [pc, #96]	; (8001a84 <HAL_I2C_MspInit+0x88>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	4a17      	ldr	r2, [pc, #92]	; (8001a84 <HAL_I2C_MspInit+0x88>)
 8001a28:	f043 0302 	orr.w	r3, r3, #2
 8001a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2e:	4b15      	ldr	r3, [pc, #84]	; (8001a84 <HAL_I2C_MspInit+0x88>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	613b      	str	r3, [r7, #16]
 8001a38:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a3a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a40:	2312      	movs	r3, #18
 8001a42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a4c:	2304      	movs	r3, #4
 8001a4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a50:	f107 0314 	add.w	r3, r7, #20
 8001a54:	4619      	mov	r1, r3
 8001a56:	480c      	ldr	r0, [pc, #48]	; (8001a88 <HAL_I2C_MspInit+0x8c>)
 8001a58:	f002 fabc 	bl	8003fd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <HAL_I2C_MspInit+0x88>)
 8001a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a64:	4a07      	ldr	r2, [pc, #28]	; (8001a84 <HAL_I2C_MspInit+0x88>)
 8001a66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a6a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a6c:	4b05      	ldr	r3, [pc, #20]	; (8001a84 <HAL_I2C_MspInit+0x88>)
 8001a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a74:	60fb      	str	r3, [r7, #12]
 8001a76:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a78:	bf00      	nop
 8001a7a:	3728      	adds	r7, #40	; 0x28
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40005400 	.word	0x40005400
 8001a84:	40023800 	.word	0x40023800
 8001a88:	40020400 	.word	0x40020400

08001a8c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08e      	sub	sp, #56	; 0x38
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a94:	f107 0308 	add.w	r3, r7, #8
 8001a98:	2230      	movs	r2, #48	; 0x30
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f007 fc15 	bl	80092cc <memset>
  if(hrtc->Instance==RTC)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a0c      	ldr	r2, [pc, #48]	; (8001ad8 <HAL_RTC_MspInit+0x4c>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d111      	bne.n	8001ad0 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001aac:	2320      	movs	r3, #32
 8001aae:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001ab0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ab4:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ab6:	f107 0308 	add.w	r3, r7, #8
 8001aba:	4618      	mov	r0, r3
 8001abc:	f003 fee4 	bl	8005888 <HAL_RCCEx_PeriphCLKConfig>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001ac6:	f7ff fe89 	bl	80017dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001aca:	4b04      	ldr	r3, [pc, #16]	; (8001adc <HAL_RTC_MspInit+0x50>)
 8001acc:	2201      	movs	r2, #1
 8001ace:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001ad0:	bf00      	nop
 8001ad2:	3738      	adds	r7, #56	; 0x38
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40002800 	.word	0x40002800
 8001adc:	42470e3c 	.word	0x42470e3c

08001ae0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001af0:	d115      	bne.n	8001b1e <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <HAL_TIM_PWM_MspInit+0x48>)
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	4a0b      	ldr	r2, [pc, #44]	; (8001b28 <HAL_TIM_PWM_MspInit+0x48>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	6413      	str	r3, [r2, #64]	; 0x40
 8001b02:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <HAL_TIM_PWM_MspInit+0x48>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2100      	movs	r1, #0
 8001b12:	201c      	movs	r0, #28
 8001b14:	f001 fe6d 	bl	80037f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b18:	201c      	movs	r0, #28
 8001b1a:	f001 fe86 	bl	800382a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001b1e:	bf00      	nop
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40023800 	.word	0x40023800

08001b2c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b08a      	sub	sp, #40	; 0x28
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b34:	f107 0314 	add.w	r3, r7, #20
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	60da      	str	r2, [r3, #12]
 8001b42:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a1d      	ldr	r2, [pc, #116]	; (8001bc0 <HAL_TIM_IC_MspInit+0x94>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d133      	bne.n	8001bb6 <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	613b      	str	r3, [r7, #16]
 8001b52:	4b1c      	ldr	r3, [pc, #112]	; (8001bc4 <HAL_TIM_IC_MspInit+0x98>)
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	4a1b      	ldr	r2, [pc, #108]	; (8001bc4 <HAL_TIM_IC_MspInit+0x98>)
 8001b58:	f043 0302 	orr.w	r3, r3, #2
 8001b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b5e:	4b19      	ldr	r3, [pc, #100]	; (8001bc4 <HAL_TIM_IC_MspInit+0x98>)
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	613b      	str	r3, [r7, #16]
 8001b68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60fb      	str	r3, [r7, #12]
 8001b6e:	4b15      	ldr	r3, [pc, #84]	; (8001bc4 <HAL_TIM_IC_MspInit+0x98>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	4a14      	ldr	r2, [pc, #80]	; (8001bc4 <HAL_TIM_IC_MspInit+0x98>)
 8001b74:	f043 0301 	orr.w	r3, r3, #1
 8001b78:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7a:	4b12      	ldr	r3, [pc, #72]	; (8001bc4 <HAL_TIM_IC_MspInit+0x98>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = ULTRASONIC_TIM3_CH1_Pin;
 8001b86:	2340      	movs	r3, #64	; 0x40
 8001b88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b92:	2300      	movs	r3, #0
 8001b94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b96:	2302      	movs	r3, #2
 8001b98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ULTRASONIC_TIM3_CH1_GPIO_Port, &GPIO_InitStruct);
 8001b9a:	f107 0314 	add.w	r3, r7, #20
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4809      	ldr	r0, [pc, #36]	; (8001bc8 <HAL_TIM_IC_MspInit+0x9c>)
 8001ba2:	f002 fa17 	bl	8003fd4 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2100      	movs	r1, #0
 8001baa:	201d      	movs	r0, #29
 8001bac:	f001 fe21 	bl	80037f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001bb0:	201d      	movs	r0, #29
 8001bb2:	f001 fe3a 	bl	800382a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001bb6:	bf00      	nop
 8001bb8:	3728      	adds	r7, #40	; 0x28
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40000400 	.word	0x40000400
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	40020000 	.word	0x40020000

08001bcc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b088      	sub	sp, #32
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a42      	ldr	r2, [pc, #264]	; (8001ce4 <HAL_TIM_Base_MspInit+0x118>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d10e      	bne.n	8001bfc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	61fb      	str	r3, [r7, #28]
 8001be2:	4b41      	ldr	r3, [pc, #260]	; (8001ce8 <HAL_TIM_Base_MspInit+0x11c>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	4a40      	ldr	r2, [pc, #256]	; (8001ce8 <HAL_TIM_Base_MspInit+0x11c>)
 8001be8:	f043 0304 	orr.w	r3, r3, #4
 8001bec:	6413      	str	r3, [r2, #64]	; 0x40
 8001bee:	4b3e      	ldr	r3, [pc, #248]	; (8001ce8 <HAL_TIM_Base_MspInit+0x11c>)
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	f003 0304 	and.w	r3, r3, #4
 8001bf6:	61fb      	str	r3, [r7, #28]
 8001bf8:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001bfa:	e06e      	b.n	8001cda <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM5)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a3a      	ldr	r2, [pc, #232]	; (8001cec <HAL_TIM_Base_MspInit+0x120>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d116      	bne.n	8001c34 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	61bb      	str	r3, [r7, #24]
 8001c0a:	4b37      	ldr	r3, [pc, #220]	; (8001ce8 <HAL_TIM_Base_MspInit+0x11c>)
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0e:	4a36      	ldr	r2, [pc, #216]	; (8001ce8 <HAL_TIM_Base_MspInit+0x11c>)
 8001c10:	f043 0308 	orr.w	r3, r3, #8
 8001c14:	6413      	str	r3, [r2, #64]	; 0x40
 8001c16:	4b34      	ldr	r3, [pc, #208]	; (8001ce8 <HAL_TIM_Base_MspInit+0x11c>)
 8001c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1a:	f003 0308 	and.w	r3, r3, #8
 8001c1e:	61bb      	str	r3, [r7, #24]
 8001c20:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001c22:	2200      	movs	r2, #0
 8001c24:	2100      	movs	r1, #0
 8001c26:	2032      	movs	r0, #50	; 0x32
 8001c28:	f001 fde3 	bl	80037f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001c2c:	2032      	movs	r0, #50	; 0x32
 8001c2e:	f001 fdfc 	bl	800382a <HAL_NVIC_EnableIRQ>
}
 8001c32:	e052      	b.n	8001cda <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM9)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a2d      	ldr	r2, [pc, #180]	; (8001cf0 <HAL_TIM_Base_MspInit+0x124>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d116      	bne.n	8001c6c <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	617b      	str	r3, [r7, #20]
 8001c42:	4b29      	ldr	r3, [pc, #164]	; (8001ce8 <HAL_TIM_Base_MspInit+0x11c>)
 8001c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c46:	4a28      	ldr	r2, [pc, #160]	; (8001ce8 <HAL_TIM_Base_MspInit+0x11c>)
 8001c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c4e:	4b26      	ldr	r3, [pc, #152]	; (8001ce8 <HAL_TIM_Base_MspInit+0x11c>)
 8001c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c56:	617b      	str	r3, [r7, #20]
 8001c58:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	2018      	movs	r0, #24
 8001c60:	f001 fdc7 	bl	80037f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001c64:	2018      	movs	r0, #24
 8001c66:	f001 fde0 	bl	800382a <HAL_NVIC_EnableIRQ>
}
 8001c6a:	e036      	b.n	8001cda <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM10)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a20      	ldr	r2, [pc, #128]	; (8001cf4 <HAL_TIM_Base_MspInit+0x128>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d116      	bne.n	8001ca4 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	613b      	str	r3, [r7, #16]
 8001c7a:	4b1b      	ldr	r3, [pc, #108]	; (8001ce8 <HAL_TIM_Base_MspInit+0x11c>)
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7e:	4a1a      	ldr	r2, [pc, #104]	; (8001ce8 <HAL_TIM_Base_MspInit+0x11c>)
 8001c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c84:	6453      	str	r3, [r2, #68]	; 0x44
 8001c86:	4b18      	ldr	r3, [pc, #96]	; (8001ce8 <HAL_TIM_Base_MspInit+0x11c>)
 8001c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8e:	613b      	str	r3, [r7, #16]
 8001c90:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001c92:	2200      	movs	r2, #0
 8001c94:	2100      	movs	r1, #0
 8001c96:	2019      	movs	r0, #25
 8001c98:	f001 fdab 	bl	80037f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001c9c:	2019      	movs	r0, #25
 8001c9e:	f001 fdc4 	bl	800382a <HAL_NVIC_EnableIRQ>
}
 8001ca2:	e01a      	b.n	8001cda <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM11)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a13      	ldr	r2, [pc, #76]	; (8001cf8 <HAL_TIM_Base_MspInit+0x12c>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d115      	bne.n	8001cda <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	4b0d      	ldr	r3, [pc, #52]	; (8001ce8 <HAL_TIM_Base_MspInit+0x11c>)
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb6:	4a0c      	ldr	r2, [pc, #48]	; (8001ce8 <HAL_TIM_Base_MspInit+0x11c>)
 8001cb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cbe:	4b0a      	ldr	r3, [pc, #40]	; (8001ce8 <HAL_TIM_Base_MspInit+0x11c>)
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	2100      	movs	r1, #0
 8001cce:	201a      	movs	r0, #26
 8001cd0:	f001 fd8f 	bl	80037f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001cd4:	201a      	movs	r0, #26
 8001cd6:	f001 fda8 	bl	800382a <HAL_NVIC_EnableIRQ>
}
 8001cda:	bf00      	nop
 8001cdc:	3720      	adds	r7, #32
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40000800 	.word	0x40000800
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	40000c00 	.word	0x40000c00
 8001cf0:	40014000 	.word	0x40014000
 8001cf4:	40014400 	.word	0x40014400
 8001cf8:	40014800 	.word	0x40014800

08001cfc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b08c      	sub	sp, #48	; 0x30
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d04:	f107 031c 	add.w	r3, r7, #28
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	60da      	str	r2, [r3, #12]
 8001d12:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d1c:	d11e      	bne.n	8001d5c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61bb      	str	r3, [r7, #24]
 8001d22:	4b46      	ldr	r3, [pc, #280]	; (8001e3c <HAL_TIM_MspPostInit+0x140>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	4a45      	ldr	r2, [pc, #276]	; (8001e3c <HAL_TIM_MspPostInit+0x140>)
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2e:	4b43      	ldr	r3, [pc, #268]	; (8001e3c <HAL_TIM_MspPostInit+0x140>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	61bb      	str	r3, [r7, #24]
 8001d38:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001d3a:	2320      	movs	r3, #32
 8001d3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d42:	2300      	movs	r3, #0
 8001d44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d46:	2300      	movs	r3, #0
 8001d48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4e:	f107 031c 	add.w	r3, r7, #28
 8001d52:	4619      	mov	r1, r3
 8001d54:	483a      	ldr	r0, [pc, #232]	; (8001e40 <HAL_TIM_MspPostInit+0x144>)
 8001d56:	f002 f93d 	bl	8003fd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001d5a:	e06b      	b.n	8001e34 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM4)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a38      	ldr	r2, [pc, #224]	; (8001e44 <HAL_TIM_MspPostInit+0x148>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d11f      	bne.n	8001da6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	617b      	str	r3, [r7, #20]
 8001d6a:	4b34      	ldr	r3, [pc, #208]	; (8001e3c <HAL_TIM_MspPostInit+0x140>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	4a33      	ldr	r2, [pc, #204]	; (8001e3c <HAL_TIM_MspPostInit+0x140>)
 8001d70:	f043 0308 	orr.w	r3, r3, #8
 8001d74:	6313      	str	r3, [r2, #48]	; 0x30
 8001d76:	4b31      	ldr	r3, [pc, #196]	; (8001e3c <HAL_TIM_MspPostInit+0x140>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	f003 0308 	and.w	r3, r3, #8
 8001d7e:	617b      	str	r3, [r7, #20]
 8001d80:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d90:	2300      	movs	r3, #0
 8001d92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001d94:	2302      	movs	r3, #2
 8001d96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d98:	f107 031c 	add.w	r3, r7, #28
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	482a      	ldr	r0, [pc, #168]	; (8001e48 <HAL_TIM_MspPostInit+0x14c>)
 8001da0:	f002 f918 	bl	8003fd4 <HAL_GPIO_Init>
}
 8001da4:	e046      	b.n	8001e34 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM5)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a28      	ldr	r2, [pc, #160]	; (8001e4c <HAL_TIM_MspPostInit+0x150>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d11e      	bne.n	8001dee <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db0:	2300      	movs	r3, #0
 8001db2:	613b      	str	r3, [r7, #16]
 8001db4:	4b21      	ldr	r3, [pc, #132]	; (8001e3c <HAL_TIM_MspPostInit+0x140>)
 8001db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db8:	4a20      	ldr	r2, [pc, #128]	; (8001e3c <HAL_TIM_MspPostInit+0x140>)
 8001dba:	f043 0301 	orr.w	r3, r3, #1
 8001dbe:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc0:	4b1e      	ldr	r3, [pc, #120]	; (8001e3c <HAL_TIM_MspPostInit+0x140>)
 8001dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	613b      	str	r3, [r7, #16]
 8001dca:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = BUZZER_DEPRECATED_Pin;
 8001dcc:	2308      	movs	r3, #8
 8001dce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BUZZER_DEPRECATED_GPIO_Port, &GPIO_InitStruct);
 8001de0:	f107 031c 	add.w	r3, r7, #28
 8001de4:	4619      	mov	r1, r3
 8001de6:	4816      	ldr	r0, [pc, #88]	; (8001e40 <HAL_TIM_MspPostInit+0x144>)
 8001de8:	f002 f8f4 	bl	8003fd4 <HAL_GPIO_Init>
}
 8001dec:	e022      	b.n	8001e34 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM9)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a17      	ldr	r2, [pc, #92]	; (8001e50 <HAL_TIM_MspPostInit+0x154>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d11d      	bne.n	8001e34 <HAL_TIM_MspPostInit+0x138>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001df8:	2300      	movs	r3, #0
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	4b0f      	ldr	r3, [pc, #60]	; (8001e3c <HAL_TIM_MspPostInit+0x140>)
 8001dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e00:	4a0e      	ldr	r2, [pc, #56]	; (8001e3c <HAL_TIM_MspPostInit+0x140>)
 8001e02:	f043 0310 	orr.w	r3, r3, #16
 8001e06:	6313      	str	r3, [r2, #48]	; 0x30
 8001e08:	4b0c      	ldr	r3, [pc, #48]	; (8001e3c <HAL_TIM_MspPostInit+0x140>)
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0c:	f003 0310 	and.w	r3, r3, #16
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8001e14:	2320      	movs	r3, #32
 8001e16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e20:	2300      	movs	r3, #0
 8001e22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001e24:	2303      	movs	r3, #3
 8001e26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001e28:	f107 031c 	add.w	r3, r7, #28
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4809      	ldr	r0, [pc, #36]	; (8001e54 <HAL_TIM_MspPostInit+0x158>)
 8001e30:	f002 f8d0 	bl	8003fd4 <HAL_GPIO_Init>
}
 8001e34:	bf00      	nop
 8001e36:	3730      	adds	r7, #48	; 0x30
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	40020000 	.word	0x40020000
 8001e44:	40000800 	.word	0x40000800
 8001e48:	40020c00 	.word	0x40020c00
 8001e4c:	40000c00 	.word	0x40000c00
 8001e50:	40014000 	.word	0x40014000
 8001e54:	40021000 	.word	0x40021000

08001e58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b08c      	sub	sp, #48	; 0x30
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e60:	f107 031c 	add.w	r3, r7, #28
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	605a      	str	r2, [r3, #4]
 8001e6a:	609a      	str	r2, [r3, #8]
 8001e6c:	60da      	str	r2, [r3, #12]
 8001e6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a3a      	ldr	r2, [pc, #232]	; (8001f60 <HAL_UART_MspInit+0x108>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d135      	bne.n	8001ee6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	61bb      	str	r3, [r7, #24]
 8001e7e:	4b39      	ldr	r3, [pc, #228]	; (8001f64 <HAL_UART_MspInit+0x10c>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	4a38      	ldr	r2, [pc, #224]	; (8001f64 <HAL_UART_MspInit+0x10c>)
 8001e84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e88:	6413      	str	r3, [r2, #64]	; 0x40
 8001e8a:	4b36      	ldr	r3, [pc, #216]	; (8001f64 <HAL_UART_MspInit+0x10c>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e92:	61bb      	str	r3, [r7, #24]
 8001e94:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	617b      	str	r3, [r7, #20]
 8001e9a:	4b32      	ldr	r3, [pc, #200]	; (8001f64 <HAL_UART_MspInit+0x10c>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	4a31      	ldr	r2, [pc, #196]	; (8001f64 <HAL_UART_MspInit+0x10c>)
 8001ea0:	f043 0308 	orr.w	r3, r3, #8
 8001ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea6:	4b2f      	ldr	r3, [pc, #188]	; (8001f64 <HAL_UART_MspInit+0x10c>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	f003 0308 	and.w	r3, r3, #8
 8001eae:	617b      	str	r3, [r7, #20]
 8001eb0:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001eb2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001eb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb8:	2302      	movs	r3, #2
 8001eba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ec4:	2307      	movs	r3, #7
 8001ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ec8:	f107 031c 	add.w	r3, r7, #28
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4826      	ldr	r0, [pc, #152]	; (8001f68 <HAL_UART_MspInit+0x110>)
 8001ed0:	f002 f880 	bl	8003fd4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	2027      	movs	r0, #39	; 0x27
 8001eda:	f001 fc8a 	bl	80037f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001ede:	2027      	movs	r0, #39	; 0x27
 8001ee0:	f001 fca3 	bl	800382a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001ee4:	e038      	b.n	8001f58 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART6)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a20      	ldr	r2, [pc, #128]	; (8001f6c <HAL_UART_MspInit+0x114>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d133      	bne.n	8001f58 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	613b      	str	r3, [r7, #16]
 8001ef4:	4b1b      	ldr	r3, [pc, #108]	; (8001f64 <HAL_UART_MspInit+0x10c>)
 8001ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef8:	4a1a      	ldr	r2, [pc, #104]	; (8001f64 <HAL_UART_MspInit+0x10c>)
 8001efa:	f043 0320 	orr.w	r3, r3, #32
 8001efe:	6453      	str	r3, [r2, #68]	; 0x44
 8001f00:	4b18      	ldr	r3, [pc, #96]	; (8001f64 <HAL_UART_MspInit+0x10c>)
 8001f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f04:	f003 0320 	and.w	r3, r3, #32
 8001f08:	613b      	str	r3, [r7, #16]
 8001f0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	4b14      	ldr	r3, [pc, #80]	; (8001f64 <HAL_UART_MspInit+0x10c>)
 8001f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f14:	4a13      	ldr	r2, [pc, #76]	; (8001f64 <HAL_UART_MspInit+0x10c>)
 8001f16:	f043 0304 	orr.w	r3, r3, #4
 8001f1a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f1c:	4b11      	ldr	r3, [pc, #68]	; (8001f64 <HAL_UART_MspInit+0x10c>)
 8001f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f28:	23c0      	movs	r3, #192	; 0xc0
 8001f2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f30:	2300      	movs	r3, #0
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f34:	2303      	movs	r3, #3
 8001f36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001f38:	2308      	movs	r3, #8
 8001f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f3c:	f107 031c 	add.w	r3, r7, #28
 8001f40:	4619      	mov	r1, r3
 8001f42:	480b      	ldr	r0, [pc, #44]	; (8001f70 <HAL_UART_MspInit+0x118>)
 8001f44:	f002 f846 	bl	8003fd4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001f48:	2200      	movs	r2, #0
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	2047      	movs	r0, #71	; 0x47
 8001f4e:	f001 fc50 	bl	80037f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001f52:	2047      	movs	r0, #71	; 0x47
 8001f54:	f001 fc69 	bl	800382a <HAL_NVIC_EnableIRQ>
}
 8001f58:	bf00      	nop
 8001f5a:	3730      	adds	r7, #48	; 0x30
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40004800 	.word	0x40004800
 8001f64:	40023800 	.word	0x40023800
 8001f68:	40020c00 	.word	0x40020c00
 8001f6c:	40011400 	.word	0x40011400
 8001f70:	40020800 	.word	0x40020800

08001f74 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08a      	sub	sp, #40	; 0x28
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7c:	f107 0314 	add.w	r3, r7, #20
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f94:	d13f      	bne.n	8002016 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	613b      	str	r3, [r7, #16]
 8001f9a:	4b21      	ldr	r3, [pc, #132]	; (8002020 <HAL_PCD_MspInit+0xac>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	4a20      	ldr	r2, [pc, #128]	; (8002020 <HAL_PCD_MspInit+0xac>)
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa6:	4b1e      	ldr	r3, [pc, #120]	; (8002020 <HAL_PCD_MspInit+0xac>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	613b      	str	r3, [r7, #16]
 8001fb0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001fb2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001fb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb8:	2302      	movs	r3, #2
 8001fba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001fc4:	230a      	movs	r3, #10
 8001fc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc8:	f107 0314 	add.w	r3, r7, #20
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4815      	ldr	r0, [pc, #84]	; (8002024 <HAL_PCD_MspInit+0xb0>)
 8001fd0:	f002 f800 	bl	8003fd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001fd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001fe2:	f107 0314 	add.w	r3, r7, #20
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	480e      	ldr	r0, [pc, #56]	; (8002024 <HAL_PCD_MspInit+0xb0>)
 8001fea:	f001 fff3 	bl	8003fd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001fee:	4b0c      	ldr	r3, [pc, #48]	; (8002020 <HAL_PCD_MspInit+0xac>)
 8001ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ff2:	4a0b      	ldr	r2, [pc, #44]	; (8002020 <HAL_PCD_MspInit+0xac>)
 8001ff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ff8:	6353      	str	r3, [r2, #52]	; 0x34
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	4b08      	ldr	r3, [pc, #32]	; (8002020 <HAL_PCD_MspInit+0xac>)
 8002000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002002:	4a07      	ldr	r2, [pc, #28]	; (8002020 <HAL_PCD_MspInit+0xac>)
 8002004:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002008:	6453      	str	r3, [r2, #68]	; 0x44
 800200a:	4b05      	ldr	r3, [pc, #20]	; (8002020 <HAL_PCD_MspInit+0xac>)
 800200c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002016:	bf00      	nop
 8002018:	3728      	adds	r7, #40	; 0x28
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40023800 	.word	0x40023800
 8002024:	40020000 	.word	0x40020000

08002028 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800202c:	e7fe      	b.n	800202c <NMI_Handler+0x4>

0800202e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800202e:	b480      	push	{r7}
 8002030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002032:	e7fe      	b.n	8002032 <HardFault_Handler+0x4>

08002034 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002038:	e7fe      	b.n	8002038 <MemManage_Handler+0x4>

0800203a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800203a:	b480      	push	{r7}
 800203c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800203e:	e7fe      	b.n	800203e <BusFault_Handler+0x4>

08002040 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002044:	e7fe      	b.n	8002044 <UsageFault_Handler+0x4>

08002046 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002046:	b480      	push	{r7}
 8002048:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800204a:	bf00      	nop
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002058:	bf00      	nop
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002062:	b480      	push	{r7}
 8002064:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002066:	bf00      	nop
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002074:	f001 fa9e 	bl	80035b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_STSTICK_Handler(); // ADD_kenGwon_231017
 8002078:	f7fe fdfa 	bl	8000c70 <HAL_STSTICK_Handler>
  /* USER CODE END SysTick_IRQn 1 */
}
 800207c:	bf00      	nop
 800207e:	bd80      	pop	{r7, pc}

08002080 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8002084:	4802      	ldr	r0, [pc, #8]	; (8002090 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002086:	f004 fd23 	bl	8006ad0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	2000057c 	.word	0x2000057c

08002094 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002098:	4802      	ldr	r0, [pc, #8]	; (80020a4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800209a:	f004 fd19 	bl	8006ad0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	200005c4 	.word	0x200005c4

080020a8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80020ac:	4802      	ldr	r0, [pc, #8]	; (80020b8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80020ae:	f004 fd0f 	bl	8006ad0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	2000060c 	.word	0x2000060c

080020bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80020c0:	4802      	ldr	r0, [pc, #8]	; (80020cc <TIM2_IRQHandler+0x10>)
 80020c2:	f004 fd05 	bl	8006ad0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80020c6:	bf00      	nop
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	2000045c 	.word	0x2000045c

080020d0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80020d4:	4802      	ldr	r0, [pc, #8]	; (80020e0 <TIM3_IRQHandler+0x10>)
 80020d6:	f004 fcfb 	bl	8006ad0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80020da:	bf00      	nop
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	200004a4 	.word	0x200004a4

080020e4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80020e8:	4802      	ldr	r0, [pc, #8]	; (80020f4 <USART3_IRQHandler+0x10>)
 80020ea:	f005 fe5b 	bl	8007da4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80020ee:	bf00      	nop
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	20000654 	.word	0x20000654

080020f8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80020fc:	4802      	ldr	r0, [pc, #8]	; (8002108 <TIM5_IRQHandler+0x10>)
 80020fe:	f004 fce7 	bl	8006ad0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	20000534 	.word	0x20000534

0800210c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002110:	4802      	ldr	r0, [pc, #8]	; (800211c <USART6_IRQHandler+0x10>)
 8002112:	f005 fe47 	bl	8007da4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002116:	bf00      	nop
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	20000698 	.word	0x20000698

08002120 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800212c:	2300      	movs	r3, #0
 800212e:	617b      	str	r3, [r7, #20]
 8002130:	e00a      	b.n	8002148 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002132:	f3af 8000 	nop.w
 8002136:	4601      	mov	r1, r0
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	1c5a      	adds	r2, r3, #1
 800213c:	60ba      	str	r2, [r7, #8]
 800213e:	b2ca      	uxtb	r2, r1
 8002140:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	3301      	adds	r3, #1
 8002146:	617b      	str	r3, [r7, #20]
 8002148:	697a      	ldr	r2, [r7, #20]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	429a      	cmp	r2, r3
 800214e:	dbf0      	blt.n	8002132 <_read+0x12>
  }

  return len;
 8002150:	687b      	ldr	r3, [r7, #4]
}
 8002152:	4618      	mov	r0, r3
 8002154:	3718      	adds	r7, #24
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b086      	sub	sp, #24
 800215e:	af00      	add	r7, sp, #0
 8002160:	60f8      	str	r0, [r7, #12]
 8002162:	60b9      	str	r1, [r7, #8]
 8002164:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002166:	2300      	movs	r3, #0
 8002168:	617b      	str	r3, [r7, #20]
 800216a:	e009      	b.n	8002180 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	1c5a      	adds	r2, r3, #1
 8002170:	60ba      	str	r2, [r7, #8]
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	4618      	mov	r0, r3
 8002176:	f7fe fd89 	bl	8000c8c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	3301      	adds	r3, #1
 800217e:	617b      	str	r3, [r7, #20]
 8002180:	697a      	ldr	r2, [r7, #20]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	429a      	cmp	r2, r3
 8002186:	dbf1      	blt.n	800216c <_write+0x12>
  }
  return len;
 8002188:	687b      	ldr	r3, [r7, #4]
}
 800218a:	4618      	mov	r0, r3
 800218c:	3718      	adds	r7, #24
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <_close>:

int _close(int file)
{
 8002192:	b480      	push	{r7}
 8002194:	b083      	sub	sp, #12
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800219a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800219e:	4618      	mov	r0, r3
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021aa:	b480      	push	{r7}
 80021ac:	b083      	sub	sp, #12
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
 80021b2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021ba:	605a      	str	r2, [r3, #4]
  return 0;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr

080021ca <_isatty>:

int _isatty(int file)
{
 80021ca:	b480      	push	{r7}
 80021cc:	b083      	sub	sp, #12
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021d2:	2301      	movs	r3, #1
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3714      	adds	r7, #20
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
	...

080021fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002204:	4a14      	ldr	r2, [pc, #80]	; (8002258 <_sbrk+0x5c>)
 8002206:	4b15      	ldr	r3, [pc, #84]	; (800225c <_sbrk+0x60>)
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002210:	4b13      	ldr	r3, [pc, #76]	; (8002260 <_sbrk+0x64>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d102      	bne.n	800221e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002218:	4b11      	ldr	r3, [pc, #68]	; (8002260 <_sbrk+0x64>)
 800221a:	4a12      	ldr	r2, [pc, #72]	; (8002264 <_sbrk+0x68>)
 800221c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800221e:	4b10      	ldr	r3, [pc, #64]	; (8002260 <_sbrk+0x64>)
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4413      	add	r3, r2
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	429a      	cmp	r2, r3
 800222a:	d207      	bcs.n	800223c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800222c:	f007 f824 	bl	8009278 <__errno>
 8002230:	4603      	mov	r3, r0
 8002232:	220c      	movs	r2, #12
 8002234:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002236:	f04f 33ff 	mov.w	r3, #4294967295
 800223a:	e009      	b.n	8002250 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800223c:	4b08      	ldr	r3, [pc, #32]	; (8002260 <_sbrk+0x64>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002242:	4b07      	ldr	r3, [pc, #28]	; (8002260 <_sbrk+0x64>)
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4413      	add	r3, r2
 800224a:	4a05      	ldr	r2, [pc, #20]	; (8002260 <_sbrk+0x64>)
 800224c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800224e:	68fb      	ldr	r3, [r7, #12]
}
 8002250:	4618      	mov	r0, r3
 8002252:	3718      	adds	r7, #24
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	20030000 	.word	0x20030000
 800225c:	00000400 	.word	0x00000400
 8002260:	20000bf4 	.word	0x20000bf4
 8002264:	20001018 	.word	0x20001018

08002268 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800226c:	4b06      	ldr	r3, [pc, #24]	; (8002288 <SystemInit+0x20>)
 800226e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002272:	4a05      	ldr	r2, [pc, #20]	; (8002288 <SystemInit+0x20>)
 8002274:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002278:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800227c:	bf00      	nop
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	e000ed00 	.word	0xe000ed00

0800228c <HAL_TIM_PeriodElapsedCallback>:
/*
 * desc: 타이머가 counter period를 채울 때마다 콜백되는 함수이다.
 * param1: 타이머 구조체
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
	static uint8_t WM_forward_backward = 0;

	// 1MHz로 분주되어 있는 TIM10이 10000번의 counter period를 채울때마다 콜백되어 변수들을 1씩 증가시킨다.(즉 10ms 타이머 기능을 함)
	if (htim->Instance == TIM10)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a1f      	ldr	r2, [pc, #124]	; (8002318 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d136      	bne.n	800230c <HAL_TIM_PeriodElapsedCallback+0x80>
	{
		TIM10_10ms_counter_ledbar++;
 800229e:	4b1f      	ldr	r3, [pc, #124]	; (800231c <HAL_TIM_PeriodElapsedCallback+0x90>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	3301      	adds	r3, #1
 80022a4:	4a1d      	ldr	r2, [pc, #116]	; (800231c <HAL_TIM_PeriodElapsedCallback+0x90>)
 80022a6:	6013      	str	r3, [r2, #0]
		TIM10_10ms_counter_DHT11++;
 80022a8:	4b1d      	ldr	r3, [pc, #116]	; (8002320 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	3301      	adds	r3, #1
 80022ae:	4a1c      	ldr	r2, [pc, #112]	; (8002320 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80022b0:	6013      	str	r3, [r2, #0]
		TIM10_10ms_counter_ultrasonic++;
 80022b2:	4b1c      	ldr	r3, [pc, #112]	; (8002324 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	3301      	adds	r3, #1
 80022b8:	4a1a      	ldr	r2, [pc, #104]	; (8002324 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80022ba:	6013      	str	r3, [r2, #0]
		TIM10_10ms_fan_auto_mode_remain_time_decrease++;
 80022bc:	4b1a      	ldr	r3, [pc, #104]	; (8002328 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	3301      	adds	r3, #1
 80022c2:	4a19      	ldr	r2, [pc, #100]	; (8002328 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80022c4:	6013      	str	r3, [r2, #0]
		TIM10_10ms_fan_rotate_direction_led++;
 80022c6:	4b19      	ldr	r3, [pc, #100]	; (800232c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	3301      	adds	r3, #1
 80022cc:	4a17      	ldr	r2, [pc, #92]	; (800232c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80022ce:	6013      	str	r3, [r2, #0]
		TIM10_10ms_fan_lcd_display_clear++;
 80022d0:	4b17      	ldr	r3, [pc, #92]	; (8002330 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	3301      	adds	r3, #1
 80022d6:	4a16      	ldr	r2, [pc, #88]	; (8002330 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80022d8:	6013      	str	r3, [r2, #0]
		TIM10_10ms_dcmotor_activate_time++;
 80022da:	4b16      	ldr	r3, [pc, #88]	; (8002334 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	3301      	adds	r3, #1
 80022e0:	4a14      	ldr	r2, [pc, #80]	; (8002334 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80022e2:	6013      	str	r3, [r2, #0]

		TIM10_10ms_WM_wash_timer++;
 80022e4:	4b14      	ldr	r3, [pc, #80]	; (8002338 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	3301      	adds	r3, #1
 80022ea:	4a13      	ldr	r2, [pc, #76]	; (8002338 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80022ec:	6013      	str	r3, [r2, #0]
		TIM10_10ms_WM_rinse_timer++;
 80022ee:	4b13      	ldr	r3, [pc, #76]	; (800233c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	3301      	adds	r3, #1
 80022f4:	4a11      	ldr	r2, [pc, #68]	; (800233c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80022f6:	6013      	str	r3, [r2, #0]
		TIM10_10ms_WM_spin_timer++;
 80022f8:	4b11      	ldr	r3, [pc, #68]	; (8002340 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	3301      	adds	r3, #1
 80022fe:	4a10      	ldr	r2, [pc, #64]	; (8002340 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002300:	6013      	str	r3, [r2, #0]
		TIM10_10ms_WM_buzzer_timer++;
 8002302:	4b10      	ldr	r3, [pc, #64]	; (8002344 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	3301      	adds	r3, #1
 8002308:	4a0e      	ldr	r2, [pc, #56]	; (8002344 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800230a:	6013      	str	r3, [r2, #0]
	}
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	40014400 	.word	0x40014400
 800231c:	20000bf8 	.word	0x20000bf8
 8002320:	20000bfc 	.word	0x20000bfc
 8002324:	20000c00 	.word	0x20000c00
 8002328:	20000c04 	.word	0x20000c04
 800232c:	20000c08 	.word	0x20000c08
 8002330:	20000c0c 	.word	0x20000c0c
 8002334:	20000c10 	.word	0x20000c10
 8002338:	20000c14 	.word	0x20000c14
 800233c:	20000c18 	.word	0x20000c18
 8002340:	20000c1c 	.word	0x20000c1c
 8002344:	20000c20 	.word	0x20000c20

08002348 <HAL_TIM_IC_CaptureCallback>:
/*
 * desc: Input Capture direct mode로 동작하는 타이머가 각 조건에 맞는 완료할때마다 콜백되는 함수이다.
 * param1: 타이머 구조체
 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
	// 초음파 센서의 ECHO핀와 연결되어 있는 TIM6가 상승edge 또는 하강edge 인풋을 캡쳐할 때마다 아래 동작을 실행한다.
	if (htim->Instance == TIM3)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a13      	ldr	r2, [pc, #76]	; (80023a4 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d11f      	bne.n	800239a <HAL_TIM_IC_CaptureCallback+0x52>
	{
		if (rising_falling_edge_capture_flag == 0) // 상승엣지 때문에 콜백 펑션에 들어온 경우
 800235a:	4b13      	ldr	r3, [pc, #76]	; (80023a8 <HAL_TIM_IC_CaptureCallback+0x60>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	b2db      	uxtb	r3, r3
 8002360:	2b00      	cmp	r3, #0
 8002362:	d107      	bne.n	8002374 <HAL_TIM_IC_CaptureCallback+0x2c>
		{
			__HAL_TIM_SET_COUNTER(htim, 0); // 펄스를 셀 카운터를 초기화 하고 세기 시작하는 것이다.
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2200      	movs	r2, #0
 800236a:	625a      	str	r2, [r3, #36]	; 0x24
			rising_falling_edge_capture_flag = 1; // 다음에 콜백 펑선이 불릴 때는 당연히 하강 엣지일 때 일 것이므로 플래그변수를 1로 셋팅해준다.
 800236c:	4b0e      	ldr	r3, [pc, #56]	; (80023a8 <HAL_TIM_IC_CaptureCallback+0x60>)
 800236e:	2201      	movs	r2, #1
 8002370:	701a      	strb	r2, [r3, #0]
			rising_falling_edge_capture_flag = 0; // 이제 다음 펄스를 또 카운트 하기 위해서 플래그 변수를 초기화 해준다.
			ultrasonic_distance = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // 상승엣지부터 하강엣지까지 펄스가 몇번 카운트 되었는지 그 값을 읽어온다.
			one_cycle_capture_finish_flag = 1; // 초음파 측정완료
		}
	}
}
 8002372:	e012      	b.n	800239a <HAL_TIM_IC_CaptureCallback+0x52>
		else if (rising_falling_edge_capture_flag == 1) // 하강 엣지 때문에 콜백 펑션에 들어온 경우
 8002374:	4b0c      	ldr	r3, [pc, #48]	; (80023a8 <HAL_TIM_IC_CaptureCallback+0x60>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b01      	cmp	r3, #1
 800237c:	d10d      	bne.n	800239a <HAL_TIM_IC_CaptureCallback+0x52>
			rising_falling_edge_capture_flag = 0; // 이제 다음 펄스를 또 카운트 하기 위해서 플래그 변수를 초기화 해준다.
 800237e:	4b0a      	ldr	r3, [pc, #40]	; (80023a8 <HAL_TIM_IC_CaptureCallback+0x60>)
 8002380:	2200      	movs	r2, #0
 8002382:	701a      	strb	r2, [r3, #0]
			ultrasonic_distance = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // 상승엣지부터 하강엣지까지 펄스가 몇번 카운트 되었는지 그 값을 읽어온다.
 8002384:	2100      	movs	r1, #0
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f004 fed0 	bl	800712c <HAL_TIM_ReadCapturedValue>
 800238c:	4603      	mov	r3, r0
 800238e:	461a      	mov	r2, r3
 8002390:	4b06      	ldr	r3, [pc, #24]	; (80023ac <HAL_TIM_IC_CaptureCallback+0x64>)
 8002392:	601a      	str	r2, [r3, #0]
			one_cycle_capture_finish_flag = 1; // 초음파 측정완료
 8002394:	4b06      	ldr	r3, [pc, #24]	; (80023b0 <HAL_TIM_IC_CaptureCallback+0x68>)
 8002396:	2201      	movs	r2, #1
 8002398:	701a      	strb	r2, [r3, #0]
}
 800239a:	bf00      	nop
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40000400 	.word	0x40000400
 80023a8:	20000c29 	.word	0x20000c29
 80023ac:	20000c24 	.word	0x20000c24
 80023b0:	20000c28 	.word	0x20000c28

080023b4 <HAL_UART_RxCpltCallback>:
 * desc: UART통신으로 MCU의 RX가 외부기기의 TX로부터 1데이터 프레임(1바이트)를 수신할 때마다 HW 인터럽트를 통해 콜백되어 실행되는 함수이다.
 *       (HW와 SW의 만나는 약속장소 = call back function)
 * param1: UART 구조체
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80023b4:	b590      	push	{r4, r7, lr}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
	// ComPortMaster의 TX를 통해 "ledallon\n"이 UART 통신으로 MCU의 RX로 송신되면,
	// MCU단에서는 1데이터 프레임(1바이트) 단위로 콜백 펑션이 호출되기 때문에 l, e, d, a, l, l, o, n, \n 하나하나에 이 콜백 펑션이 호출되는 것이다.
	if (huart == &huart3) // PC의 ComPortMaster와 연결된 huart3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a4c      	ldr	r2, [pc, #304]	; (80024f0 <HAL_UART_RxCpltCallback+0x13c>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d160      	bne.n	8002486 <HAL_UART_RxCpltCallback+0xd2>
	{
		if ((queue_rear+1)%QUEUE_MAX != queue_front)
 80023c4:	4b4b      	ldr	r3, [pc, #300]	; (80024f4 <HAL_UART_RxCpltCallback+0x140>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	1c59      	adds	r1, r3, #1
 80023ca:	4b4b      	ldr	r3, [pc, #300]	; (80024f8 <HAL_UART_RxCpltCallback+0x144>)
 80023cc:	fb83 2301 	smull	r2, r3, r3, r1
 80023d0:	10da      	asrs	r2, r3, #3
 80023d2:	17cb      	asrs	r3, r1, #31
 80023d4:	1ad2      	subs	r2, r2, r3
 80023d6:	4613      	mov	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4413      	add	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	1aca      	subs	r2, r1, r3
 80023e0:	4b46      	ldr	r3, [pc, #280]	; (80024fc <HAL_UART_RxCpltCallback+0x148>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d049      	beq.n	800247c <HAL_UART_RxCpltCallback+0xc8>
		{
			if (rx_index < COMMAND_LENGTH)
 80023e8:	4b45      	ldr	r3, [pc, #276]	; (8002500 <HAL_UART_RxCpltCallback+0x14c>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2b27      	cmp	r3, #39	; 0x27
 80023ee:	dc3f      	bgt.n	8002470 <HAL_UART_RxCpltCallback+0xbc>
			{
				if (rx_data == '\n' || rx_data == '\r')
 80023f0:	4b44      	ldr	r3, [pc, #272]	; (8002504 <HAL_UART_RxCpltCallback+0x150>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	2b0a      	cmp	r3, #10
 80023f6:	d003      	beq.n	8002400 <HAL_UART_RxCpltCallback+0x4c>
 80023f8:	4b42      	ldr	r3, [pc, #264]	; (8002504 <HAL_UART_RxCpltCallback+0x150>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	2b0d      	cmp	r3, #13
 80023fe:	d124      	bne.n	800244a <HAL_UART_RxCpltCallback+0x96>
				{
					rx_buff[queue_rear][rx_index] = '\0';
 8002400:	4b3c      	ldr	r3, [pc, #240]	; (80024f4 <HAL_UART_RxCpltCallback+0x140>)
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	4b3e      	ldr	r3, [pc, #248]	; (8002500 <HAL_UART_RxCpltCallback+0x14c>)
 8002406:	6819      	ldr	r1, [r3, #0]
 8002408:	483f      	ldr	r0, [pc, #252]	; (8002508 <HAL_UART_RxCpltCallback+0x154>)
 800240a:	4613      	mov	r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	4413      	add	r3, r2
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	4403      	add	r3, r0
 8002414:	440b      	add	r3, r1
 8002416:	2200      	movs	r2, #0
 8002418:	701a      	strb	r2, [r3, #0]
					rx_index = 0;
 800241a:	4b39      	ldr	r3, [pc, #228]	; (8002500 <HAL_UART_RxCpltCallback+0x14c>)
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]
					queue_rear++;
 8002420:	4b34      	ldr	r3, [pc, #208]	; (80024f4 <HAL_UART_RxCpltCallback+0x140>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	3301      	adds	r3, #1
 8002426:	4a33      	ldr	r2, [pc, #204]	; (80024f4 <HAL_UART_RxCpltCallback+0x140>)
 8002428:	6013      	str	r3, [r2, #0]
					queue_rear %= QUEUE_MAX;
 800242a:	4b32      	ldr	r3, [pc, #200]	; (80024f4 <HAL_UART_RxCpltCallback+0x140>)
 800242c:	6819      	ldr	r1, [r3, #0]
 800242e:	4b32      	ldr	r3, [pc, #200]	; (80024f8 <HAL_UART_RxCpltCallback+0x144>)
 8002430:	fb83 2301 	smull	r2, r3, r3, r1
 8002434:	10da      	asrs	r2, r3, #3
 8002436:	17cb      	asrs	r3, r1, #31
 8002438:	1ad2      	subs	r2, r2, r3
 800243a:	4613      	mov	r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	4413      	add	r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	1aca      	subs	r2, r1, r3
 8002444:	4b2b      	ldr	r3, [pc, #172]	; (80024f4 <HAL_UART_RxCpltCallback+0x140>)
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	e018      	b.n	800247c <HAL_UART_RxCpltCallback+0xc8>
				}
				else
				{
					rx_buff[queue_rear][rx_index++] = rx_data;
 800244a:	4b2a      	ldr	r3, [pc, #168]	; (80024f4 <HAL_UART_RxCpltCallback+0x140>)
 800244c:	6819      	ldr	r1, [r3, #0]
 800244e:	4b2c      	ldr	r3, [pc, #176]	; (8002500 <HAL_UART_RxCpltCallback+0x14c>)
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	1c53      	adds	r3, r2, #1
 8002454:	482a      	ldr	r0, [pc, #168]	; (8002500 <HAL_UART_RxCpltCallback+0x14c>)
 8002456:	6003      	str	r3, [r0, #0]
 8002458:	4b2a      	ldr	r3, [pc, #168]	; (8002504 <HAL_UART_RxCpltCallback+0x150>)
 800245a:	781c      	ldrb	r4, [r3, #0]
 800245c:	482a      	ldr	r0, [pc, #168]	; (8002508 <HAL_UART_RxCpltCallback+0x154>)
 800245e:	460b      	mov	r3, r1
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	440b      	add	r3, r1
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	4403      	add	r3, r0
 8002468:	4413      	add	r3, r2
 800246a:	4622      	mov	r2, r4
 800246c:	701a      	strb	r2, [r3, #0]
 800246e:	e005      	b.n	800247c <HAL_UART_RxCpltCallback+0xc8>
				}
			}
			else
			{
				rx_index = 0;
 8002470:	4b23      	ldr	r3, [pc, #140]	; (8002500 <HAL_UART_RxCpltCallback+0x14c>)
 8002472:	2200      	movs	r2, #0
 8002474:	601a      	str	r2, [r3, #0]
				printf("Message Overflow !!!\n");
 8002476:	4825      	ldr	r0, [pc, #148]	; (800250c <HAL_UART_RxCpltCallback+0x158>)
 8002478:	f006 ff9e 	bl	80093b8 <puts>
		{

		}

		// 주의: 반드시 HAL_UART_Receive_IT() 함수를 call 해줘야 다음 인터럽트가 이어서 발생이 가능해진다.
		HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 800247c:	2201      	movs	r2, #1
 800247e:	4921      	ldr	r1, [pc, #132]	; (8002504 <HAL_UART_RxCpltCallback+0x150>)
 8002480:	481b      	ldr	r0, [pc, #108]	; (80024f0 <HAL_UART_RxCpltCallback+0x13c>)
 8002482:	f005 fc5e 	bl	8007d42 <HAL_UART_Receive_IT>
	}

	if (huart == &huart6) // Bluetooth와 연결된 huart6
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a21      	ldr	r2, [pc, #132]	; (8002510 <HAL_UART_RxCpltCallback+0x15c>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d12c      	bne.n	80024e8 <HAL_UART_RxCpltCallback+0x134>
	{
		if (bt_rx_index < COMMAND_LENGTH) // 현재까지 들어온 byte가 40byte를 넘지 않으면
 800248e:	4b21      	ldr	r3, [pc, #132]	; (8002514 <HAL_UART_RxCpltCallback+0x160>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2b27      	cmp	r3, #39	; 0x27
 8002494:	dc1d      	bgt.n	80024d2 <HAL_UART_RxCpltCallback+0x11e>
		{
			if(bt_rx_data == '\n' || bt_rx_data == '\r')
 8002496:	4b20      	ldr	r3, [pc, #128]	; (8002518 <HAL_UART_RxCpltCallback+0x164>)
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	2b0a      	cmp	r3, #10
 800249c:	d003      	beq.n	80024a6 <HAL_UART_RxCpltCallback+0xf2>
 800249e:	4b1e      	ldr	r3, [pc, #120]	; (8002518 <HAL_UART_RxCpltCallback+0x164>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	2b0d      	cmp	r3, #13
 80024a4:	d10b      	bne.n	80024be <HAL_UART_RxCpltCallback+0x10a>
			{
				bt_rx_buff[bt_rx_index] = 0; // '\0'
 80024a6:	4b1b      	ldr	r3, [pc, #108]	; (8002514 <HAL_UART_RxCpltCallback+0x160>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a1c      	ldr	r2, [pc, #112]	; (800251c <HAL_UART_RxCpltCallback+0x168>)
 80024ac:	2100      	movs	r1, #0
 80024ae:	54d1      	strb	r1, [r2, r3]
				bt_newline_detect_flag = 1;
 80024b0:	4b1b      	ldr	r3, [pc, #108]	; (8002520 <HAL_UART_RxCpltCallback+0x16c>)
 80024b2:	2201      	movs	r2, #1
 80024b4:	701a      	strb	r2, [r3, #0]
				bt_rx_index = 0; // 다음 메시지 저장을 위해서 rx_index값을 0으로 한다.
 80024b6:	4b17      	ldr	r3, [pc, #92]	; (8002514 <HAL_UART_RxCpltCallback+0x160>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	e00f      	b.n	80024de <HAL_UART_RxCpltCallback+0x12a>
			}
			else
			{
				bt_rx_buff[bt_rx_index++] = bt_rx_data;
 80024be:	4b15      	ldr	r3, [pc, #84]	; (8002514 <HAL_UART_RxCpltCallback+0x160>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	1c5a      	adds	r2, r3, #1
 80024c4:	4913      	ldr	r1, [pc, #76]	; (8002514 <HAL_UART_RxCpltCallback+0x160>)
 80024c6:	600a      	str	r2, [r1, #0]
 80024c8:	4a13      	ldr	r2, [pc, #76]	; (8002518 <HAL_UART_RxCpltCallback+0x164>)
 80024ca:	7811      	ldrb	r1, [r2, #0]
 80024cc:	4a13      	ldr	r2, [pc, #76]	; (800251c <HAL_UART_RxCpltCallback+0x168>)
 80024ce:	54d1      	strb	r1, [r2, r3]
 80024d0:	e005      	b.n	80024de <HAL_UART_RxCpltCallback+0x12a>
			}
		}
		else
		{
			bt_rx_index = 0;
 80024d2:	4b10      	ldr	r3, [pc, #64]	; (8002514 <HAL_UART_RxCpltCallback+0x160>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
			printf("Message Overflow !!!\n");
 80024d8:	480c      	ldr	r0, [pc, #48]	; (800250c <HAL_UART_RxCpltCallback+0x158>)
 80024da:	f006 ff6d 	bl	80093b8 <puts>
		}

		// 주의: 반드시 HAL_UART_Receive_IT() 함수를 call 해줘야 다음 인터럽트가 이어서 발생이 가능해진다.
		HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1);
 80024de:	2201      	movs	r2, #1
 80024e0:	490d      	ldr	r1, [pc, #52]	; (8002518 <HAL_UART_RxCpltCallback+0x164>)
 80024e2:	480b      	ldr	r0, [pc, #44]	; (8002510 <HAL_UART_RxCpltCallback+0x15c>)
 80024e4:	f005 fc2d 	bl	8007d42 <HAL_UART_Receive_IT>
	}
}
 80024e8:	bf00      	nop
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd90      	pop	{r4, r7, pc}
 80024f0:	20000654 	.word	0x20000654
 80024f4:	20000f50 	.word	0x20000f50
 80024f8:	66666667 	.word	0x66666667
 80024fc:	20000f4c 	.word	0x20000f4c
 8002500:	20000f54 	.word	0x20000f54
 8002504:	20000f85 	.word	0x20000f85
 8002508:	20000c2c 	.word	0x20000c2c
 800250c:	0800a3e0 	.word	0x0800a3e0
 8002510:	20000698 	.word	0x20000698
 8002514:	20000f80 	.word	0x20000f80
 8002518:	20000f86 	.word	0x20000f86
 800251c:	20000f58 	.word	0x20000f58
 8002520:	20000f84 	.word	0x20000f84

08002524 <WashingMachine_Init>:

/*
 * desc: 세탁기 프로그램 구동에 필요한 H/W를 켠다.
 */
void WashingMachine_Init(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // 세탁기 뚜껑 개폐용 SERVO motor 구동하기 위해 필요
 8002528:	2100      	movs	r1, #0
 800252a:	4814      	ldr	r0, [pc, #80]	; (800257c <WashingMachine_Init+0x58>)
 800252c:	f003 ff7a 	bl	8006424 <HAL_TIM_PWM_Start>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1); // 세탁기 뚜껑 개폐 상태 확인하는 초음파센서 활용하기 위해 필요
 8002530:	2100      	movs	r1, #0
 8002532:	4813      	ldr	r0, [pc, #76]	; (8002580 <WashingMachine_Init+0x5c>)
 8002534:	f004 f9a4 	bl	8006880 <HAL_TIM_IC_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1); // 드럼통 동작용 DC motor 구동하기 위해 필요
 8002538:	2100      	movs	r1, #0
 800253a:	4812      	ldr	r0, [pc, #72]	; (8002584 <WashingMachine_Init+0x60>)
 800253c:	f004 f83a 	bl	80065b4 <HAL_TIM_PWM_Start_IT>
//	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4); // 세탁, 헹굼, 탈수 동작완료 안내 부저 작동을 위해 필요
	HAL_TIM_Base_Start_IT(&htim10); // 다수의 10ms 타이머 활옹하기 위해 필요
 8002540:	4811      	ldr	r0, [pc, #68]	; (8002588 <WashingMachine_Init+0x64>)
 8002542:	f003 feaf 	bl	80062a4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim11); // DHT11센서에서 delay_us() 함수가 올바르게 작동해야 하므로 필요
 8002546:	4811      	ldr	r0, [pc, #68]	; (800258c <WashingMachine_Init+0x68>)
 8002548:	f003 feac 	bl	80062a4 <HAL_TIM_Base_Start_IT>
	DHT11_Init(); // 탈수 완료 여부 확인하는 온습도 센서 활용하기 위해 필요
 800254c:	f7fe f822 	bl	8000594 <DHT11_Init>
	I2C_LCD_Init(); // 세탁기 상태 보여주는 LCD 활용하기 위해 필요
 8002550:	f7fe f898 	bl	8000684 <I2C_LCD_Init>

	HAL_UART_Receive_IT(&huart3, &rx_data, 1); // activate interrupt from RX huart3
 8002554:	2201      	movs	r2, #1
 8002556:	490e      	ldr	r1, [pc, #56]	; (8002590 <WashingMachine_Init+0x6c>)
 8002558:	480e      	ldr	r0, [pc, #56]	; (8002594 <WashingMachine_Init+0x70>)
 800255a:	f005 fbf2 	bl	8007d42 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1); // activate interrupt from RX huart6
 800255e:	2201      	movs	r2, #1
 8002560:	490d      	ldr	r1, [pc, #52]	; (8002598 <WashingMachine_Init+0x74>)
 8002562:	480e      	ldr	r0, [pc, #56]	; (800259c <WashingMachine_Init+0x78>)
 8002564:	f005 fbed 	bl	8007d42 <HAL_UART_Receive_IT>

	HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1); // 완료 부저 작동 위해 필요
 8002568:	2100      	movs	r1, #0
 800256a:	480d      	ldr	r0, [pc, #52]	; (80025a0 <WashingMachine_Init+0x7c>)
 800256c:	f003 ff5a 	bl	8006424 <HAL_TIM_PWM_Start>
	Buzzer_Turn_Off(); // 최초에 부저 소리 안나게
 8002570:	f7fe f912 	bl	8000798 <Buzzer_Turn_Off>

	Idle_Mode_Display(); // 최초에 idle 모드 I2C LED 화면 출력 위해 필요
 8002574:	f000 fdda 	bl	800312c <Idle_Mode_Display>
}
 8002578:	bf00      	nop
 800257a:	bd80      	pop	{r7, pc}
 800257c:	2000045c 	.word	0x2000045c
 8002580:	200004a4 	.word	0x200004a4
 8002584:	200004ec 	.word	0x200004ec
 8002588:	200005c4 	.word	0x200005c4
 800258c:	2000060c 	.word	0x2000060c
 8002590:	20000f85 	.word	0x20000f85
 8002594:	20000654 	.word	0x20000654
 8002598:	20000f86 	.word	0x20000f86
 800259c:	20000698 	.word	0x20000698
 80025a0:	2000057c 	.word	0x2000057c

080025a4 <WashingMachine_Processing>:

/*
 * desc: 세탁기 프로그램의 메인 동작을 결정하는 함수이다.
 */
void WashingMachine_Processing(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
	switch (WashingMachine_curr_status)
 80025a8:	4b0f      	ldr	r3, [pc, #60]	; (80025e8 <WashingMachine_Processing+0x44>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b03      	cmp	r3, #3
 80025ae:	d817      	bhi.n	80025e0 <WashingMachine_Processing+0x3c>
 80025b0:	a201      	add	r2, pc, #4	; (adr r2, 80025b8 <WashingMachine_Processing+0x14>)
 80025b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b6:	bf00      	nop
 80025b8:	080025c9 	.word	0x080025c9
 80025bc:	080025cf 	.word	0x080025cf
 80025c0:	080025d5 	.word	0x080025d5
 80025c4:	080025db 	.word	0x080025db
	{
		case IDLE_MODE:
			Idle_Mode_Laundry();
 80025c8:	f000 f810 	bl	80025ec <Idle_Mode_Laundry>
			break;
 80025cc:	e009      	b.n	80025e2 <WashingMachine_Processing+0x3e>

		case WASH_MODE:
			Wash_Mode_Laundry();
 80025ce:	f000 f83d 	bl	800264c <Wash_Mode_Laundry>
			break;
 80025d2:	e006      	b.n	80025e2 <WashingMachine_Processing+0x3e>

		case RINSE_MODE:
			Rinse_Mode_Laundry();
 80025d4:	f000 fa10 	bl	80029f8 <Rinse_Mode_Laundry>
			break;
 80025d8:	e003      	b.n	80025e2 <WashingMachine_Processing+0x3e>

		case SPIN_MODE:
			Spin_Mode_Laundry();
 80025da:	f000 fbc9 	bl	8002d70 <Spin_Mode_Laundry>
			break;
 80025de:	e000      	b.n	80025e2 <WashingMachine_Processing+0x3e>

		default:
			break;
 80025e0:	bf00      	nop
	}
}
 80025e2:	bf00      	nop
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	20000f88 	.word	0x20000f88

080025ec <Idle_Mode_Laundry>:

/*
 * desc:
 */
static void Idle_Mode_Laundry(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
	open_WashingMachine_Lid();
 80025f0:	f7ff f8fa 	bl	80017e8 <open_WashingMachine_Lid>
	Mode_Complete_Alarm(); // 이걸 여기서도 불르고 있어야 로직이 맞게 작동함..
 80025f4:	f7fe f8dc 	bl	80007b0 <Mode_Complete_Alarm>

	DCmotor_Break();
 80025f8:	f7fe f95a 	bl	80008b0 <DCmotor_Break>
	LEDbar_All_Off();
 80025fc:	f7fe faa4 	bl	8000b48 <LEDbar_All_Off>
	FND4digit_off();
 8002600:	f7fe f97a 	bl	80008f8 <FND4digit_off>

	Idle_Mode_Display(); // 아이들 모드일때는 fnd 안쓰고 있기 때문에 led가 핑글핑글 돌면서 시간 표시해줘도 됨
 8002604:	f000 fd92 	bl	800312c <Idle_Mode_Display>

	if (Get_Button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)
 8002608:	2200      	movs	r2, #0
 800260a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800260e:	480d      	ldr	r0, [pc, #52]	; (8002644 <Idle_Mode_Laundry+0x58>)
 8002610:	f7fe f87e 	bl	8000710 <Get_Button>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d111      	bne.n	800263e <Idle_Mode_Laundry+0x52>
	{
		WashingMachine_curr_status++;
 800261a:	4b0b      	ldr	r3, [pc, #44]	; (8002648 <Idle_Mode_Laundry+0x5c>)
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	3301      	adds	r3, #1
 8002620:	b2da      	uxtb	r2, r3
 8002622:	4b09      	ldr	r3, [pc, #36]	; (8002648 <Idle_Mode_Laundry+0x5c>)
 8002624:	701a      	strb	r2, [r3, #0]
		WashingMachine_curr_status %= 4;
 8002626:	4b08      	ldr	r3, [pc, #32]	; (8002648 <Idle_Mode_Laundry+0x5c>)
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	f003 0303 	and.w	r3, r3, #3
 800262e:	b2da      	uxtb	r2, r3
 8002630:	4b05      	ldr	r3, [pc, #20]	; (8002648 <Idle_Mode_Laundry+0x5c>)
 8002632:	701a      	strb	r2, [r3, #0]
		LCD_Command(CLEAR_DISPLAY); // 버튼을 누르는 순간마다 clear display해줘서 쓰레기값 방지
 8002634:	2001      	movs	r0, #1
 8002636:	f7fd ffbd 	bl	80005b4 <LCD_Command>
		Wash_Mode_Setting_display(); // 순환식 구조의 다음인 세탁모드를 출력
 800263a:	f000 fdd1 	bl	80031e0 <Wash_Mode_Setting_display>
	}
}
 800263e:	bf00      	nop
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	40021000 	.word	0x40021000
 8002648:	20000f88 	.word	0x20000f88

0800264c <Wash_Mode_Laundry>:
/*
 * desc: "세탁/헹굼/탈수" 중 "세탁"에 관련된 동작을 실행하는 함수이다.
 *       세탁모드에서 드럼통 모터는 70%의 고정 duty cycle 출력으로 작동한다.
 */
static void Wash_Mode_Laundry(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af02      	add	r7, sp, #8
	static uint8_t wash_mode_start_stop_flag = STOP;
	static uint8_t dcmotor_forward_backward_flag = FORWARD;


	/************************BEGIN 기본 동작 부분************************/
	close_WashingMachine_Lid();
 8002652:	f7ff f8d7 	bl	8001804 <close_WashingMachine_Lid>
	Mode_Complete_Alarm();
 8002656:	f7fe f8ab 	bl	80007b0 <Mode_Complete_Alarm>

	// 뚜껑이 열려있으면 동작을 중지하고 idle 화면으로 이동
	if (Check_Lid_Open())
 800265a:	f000 fd5f 	bl	800311c <Check_Lid_Open>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00a      	beq.n	800267a <Wash_Mode_Laundry+0x2e>
	{
		mode_complete_alarm_stop_start_flag = STOP;
 8002664:	4b27      	ldr	r3, [pc, #156]	; (8002704 <Wash_Mode_Laundry+0xb8>)
 8002666:	2200      	movs	r2, #0
 8002668:	701a      	strb	r2, [r3, #0]
		WashingMachine_curr_status = 0;
 800266a:	4b27      	ldr	r3, [pc, #156]	; (8002708 <Wash_Mode_Laundry+0xbc>)
 800266c:	2200      	movs	r2, #0
 800266e:	701a      	strb	r2, [r3, #0]
		LCD_Command(CLEAR_DISPLAY);
 8002670:	2001      	movs	r0, #1
 8002672:	f7fd ff9f 	bl	80005b4 <LCD_Command>
		Idle_Mode_Display();
 8002676:	f000 fd59 	bl	800312c <Idle_Mode_Display>
	}


	if (wash_mode_start_stop_flag == STOP)
 800267a:	4b24      	ldr	r3, [pc, #144]	; (800270c <Wash_Mode_Laundry+0xc0>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d106      	bne.n	8002690 <Wash_Mode_Laundry+0x44>
	{
		DCmotor_Break();
 8002682:	f7fe f915 	bl	80008b0 <DCmotor_Break>
		LEDbar_All_Off();
 8002686:	f7fe fa5f 	bl	8000b48 <LEDbar_All_Off>
		FND4digit_off();
 800268a:	f7fe f935 	bl	80008f8 <FND4digit_off>
 800268e:	e056      	b.n	800273e <Wash_Mode_Laundry+0xf2>
	}
	else if (wash_mode_start_stop_flag == START && wash_remain_time > 0)
 8002690:	4b1e      	ldr	r3, [pc, #120]	; (800270c <Wash_Mode_Laundry+0xc0>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d141      	bne.n	800271c <Wash_Mode_Laundry+0xd0>
 8002698:	4b1d      	ldr	r3, [pc, #116]	; (8002710 <Wash_Mode_Laundry+0xc4>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2b00      	cmp	r3, #0
 800269e:	dd3d      	ble.n	800271c <Wash_Mode_Laundry+0xd0>
	{
		// 완료부저가 실행중이더라도, 다시 모드가 시작되면 당연히 부저는 꺼져야함
		mode_complete_alarm_stop_start_flag = STOP;
 80026a0:	4b18      	ldr	r3, [pc, #96]	; (8002704 <Wash_Mode_Laundry+0xb8>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	701a      	strb	r2, [r3, #0]

		// 남은시간은 자동으로 1초씩 감소
		if (TIM10_10ms_WM_wash_timer > 100)
 80026a6:	4b1b      	ldr	r3, [pc, #108]	; (8002714 <Wash_Mode_Laundry+0xc8>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2b64      	cmp	r3, #100	; 0x64
 80026ac:	d919      	bls.n	80026e2 <Wash_Mode_Laundry+0x96>
		{
			TIM10_10ms_WM_wash_timer = 0;
 80026ae:	4b19      	ldr	r3, [pc, #100]	; (8002714 <Wash_Mode_Laundry+0xc8>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
			wash_remain_time--;
 80026b4:	4b16      	ldr	r3, [pc, #88]	; (8002710 <Wash_Mode_Laundry+0xc4>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	3b01      	subs	r3, #1
 80026ba:	4a15      	ldr	r2, [pc, #84]	; (8002710 <Wash_Mode_Laundry+0xc4>)
 80026bc:	6013      	str	r3, [r2, #0]
			if (wash_remain_time < 0) {wash_remain_time = 0;}
 80026be:	4b14      	ldr	r3, [pc, #80]	; (8002710 <Wash_Mode_Laundry+0xc4>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	da02      	bge.n	80026cc <Wash_Mode_Laundry+0x80>
 80026c6:	4b12      	ldr	r3, [pc, #72]	; (8002710 <Wash_Mode_Laundry+0xc4>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]

			if (dcmotor_forward_backward_flag == FORWARD)
 80026cc:	4b12      	ldr	r3, [pc, #72]	; (8002718 <Wash_Mode_Laundry+0xcc>)
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d103      	bne.n	80026dc <Wash_Mode_Laundry+0x90>
			{
				dcmotor_forward_backward_flag = BACKWARD;
 80026d4:	4b10      	ldr	r3, [pc, #64]	; (8002718 <Wash_Mode_Laundry+0xcc>)
 80026d6:	2201      	movs	r2, #1
 80026d8:	701a      	strb	r2, [r3, #0]
 80026da:	e002      	b.n	80026e2 <Wash_Mode_Laundry+0x96>
			}
			else
			{
				dcmotor_forward_backward_flag = FORWARD;
 80026dc:	4b0e      	ldr	r3, [pc, #56]	; (8002718 <Wash_Mode_Laundry+0xcc>)
 80026de:	2200      	movs	r2, #0
 80026e0:	701a      	strb	r2, [r3, #0]
			}
		}

		// 세탁모드에서 드럼통을 앞뒤로 흔들어주기 위해서..
		if (dcmotor_forward_backward_flag == 0)
 80026e2:	4b0d      	ldr	r3, [pc, #52]	; (8002718 <Wash_Mode_Laundry+0xcc>)
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d102      	bne.n	80026f0 <Wash_Mode_Laundry+0xa4>
		{
			DCmotor_Forward_Rotate();
 80026ea:	f7fe f8bd 	bl	8000868 <DCmotor_Forward_Rotate>
 80026ee:	e001      	b.n	80026f4 <Wash_Mode_Laundry+0xa8>
		}
		else
		{
			DCmotor_Backward_Rotate();
 80026f0:	f7fe f8cc 	bl	800088c <DCmotor_Backward_Rotate>
		}

		LEDbar_Flower_On();
 80026f4:	f7fe fa86 	bl	8000c04 <LEDbar_Flower_On>
		FND4digit_time_display(wash_remain_time);
 80026f8:	4b05      	ldr	r3, [pc, #20]	; (8002710 <Wash_Mode_Laundry+0xc4>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7fe f98f 	bl	8000a20 <FND4digit_time_display>
 8002702:	e01c      	b.n	800273e <Wash_Mode_Laundry+0xf2>
 8002704:	20000f87 	.word	0x20000f87
 8002708:	20000f88 	.word	0x20000f88
 800270c:	20001000 	.word	0x20001000
 8002710:	20000fb8 	.word	0x20000fb8
 8002714:	20000c14 	.word	0x20000c14
 8002718:	20001001 	.word	0x20001001
	}
	else // 플래그는 start이지만 남은시간이 0이하가 된 경우 여기로 빠짐
	{
		mode_complete_alarm_stop_start_flag = START;
 800271c:	4bab      	ldr	r3, [pc, #684]	; (80029cc <Wash_Mode_Laundry+0x380>)
 800271e:	2201      	movs	r2, #1
 8002720:	701a      	strb	r2, [r3, #0]
		wash_mode_start_stop_flag = STOP;
 8002722:	4bab      	ldr	r3, [pc, #684]	; (80029d0 <Wash_Mode_Laundry+0x384>)
 8002724:	2200      	movs	r2, #0
 8002726:	701a      	strb	r2, [r3, #0]

		DCmotor_Break();
 8002728:	f7fe f8c2 	bl	80008b0 <DCmotor_Break>
		LEDbar_All_Off();
 800272c:	f7fe fa0c 	bl	8000b48 <LEDbar_All_Off>
		FND4digit_off();
 8002730:	f7fe f8e2 	bl	80008f8 <FND4digit_off>

		// 완료가 되었다면 그냥 세탁 셋팅 화면을 다시 출력
		LCD_Command(CLEAR_DISPLAY);
 8002734:	2001      	movs	r0, #1
 8002736:	f7fd ff3d 	bl	80005b4 <LCD_Command>
		Wash_Mode_Setting_display();
 800273a:	f000 fd51 	bl	80031e0 <Wash_Mode_Setting_display>
	}
	/************************END 기본 동작 부분************************/

	/************************BEGIN 버튼 입력 인터럽트 부분************************/
	// 세탁 모드 상태를 기억한 상태로 다음 모드로 이동
	if (Get_Button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)
 800273e:	2200      	movs	r2, #0
 8002740:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002744:	48a3      	ldr	r0, [pc, #652]	; (80029d4 <Wash_Mode_Laundry+0x388>)
 8002746:	f7fd ffe3 	bl	8000710 <Get_Button>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d114      	bne.n	800277a <Wash_Mode_Laundry+0x12e>
	{
		mode_complete_alarm_stop_start_flag = STOP; // 완료 부저가 진행중일 경우 아예 꺼버리는게 논리적으로 맞음
 8002750:	4b9e      	ldr	r3, [pc, #632]	; (80029cc <Wash_Mode_Laundry+0x380>)
 8002752:	2200      	movs	r2, #0
 8002754:	701a      	strb	r2, [r3, #0]

		WashingMachine_curr_status++;
 8002756:	4ba0      	ldr	r3, [pc, #640]	; (80029d8 <Wash_Mode_Laundry+0x38c>)
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	3301      	adds	r3, #1
 800275c:	b2da      	uxtb	r2, r3
 800275e:	4b9e      	ldr	r3, [pc, #632]	; (80029d8 <Wash_Mode_Laundry+0x38c>)
 8002760:	701a      	strb	r2, [r3, #0]
		WashingMachine_curr_status %= 4;
 8002762:	4b9d      	ldr	r3, [pc, #628]	; (80029d8 <Wash_Mode_Laundry+0x38c>)
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	f003 0303 	and.w	r3, r3, #3
 800276a:	b2da      	uxtb	r2, r3
 800276c:	4b9a      	ldr	r3, [pc, #616]	; (80029d8 <Wash_Mode_Laundry+0x38c>)
 800276e:	701a      	strb	r2, [r3, #0]
		LCD_Command(CLEAR_DISPLAY); // 버튼을 누르는 순간마다 clear display해줘서 쓰레기값 방지
 8002770:	2001      	movs	r0, #1
 8002772:	f7fd ff1f 	bl	80005b4 <LCD_Command>
		Rinse_Mode_Setting_display();
 8002776:	f000 fdad 	bl	80032d4 <Rinse_Mode_Setting_display>
	}

	// 세탁 횟수를 1회 증가시킨다(1회는 10초로 간주)
	if (Get_Button(BUTTON1_GPIO_Port, BUTTON1_Pin, 1) == BUTTON_PRESS)
 800277a:	2201      	movs	r2, #1
 800277c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002780:	4894      	ldr	r0, [pc, #592]	; (80029d4 <Wash_Mode_Laundry+0x388>)
 8002782:	f7fd ffc5 	bl	8000710 <Get_Button>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d109      	bne.n	80027a0 <Wash_Mode_Laundry+0x154>
	{
		wash_remain_time += 10;
 800278c:	4b93      	ldr	r3, [pc, #588]	; (80029dc <Wash_Mode_Laundry+0x390>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	330a      	adds	r3, #10
 8002792:	4a92      	ldr	r2, [pc, #584]	; (80029dc <Wash_Mode_Laundry+0x390>)
 8002794:	6013      	str	r3, [r2, #0]
		LCD_Command(CLEAR_DISPLAY); // 버튼을 누르는 순간마다 clear display해줘서 쓰레기값 방지
 8002796:	2001      	movs	r0, #1
 8002798:	f7fd ff0c 	bl	80005b4 <LCD_Command>
		Wash_Mode_Setting_display();
 800279c:	f000 fd20 	bl	80031e0 <Wash_Mode_Setting_display>
	}

	// 세탁 횟수를 1회 감소시킨다.(1회는 10초로 간주)
	if (Get_Button(BUTTON2_GPIO_Port, BUTTON2_Pin, 2) == BUTTON_PRESS)
 80027a0:	2202      	movs	r2, #2
 80027a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027a6:	488b      	ldr	r0, [pc, #556]	; (80029d4 <Wash_Mode_Laundry+0x388>)
 80027a8:	f7fd ffb2 	bl	8000710 <Get_Button>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d110      	bne.n	80027d4 <Wash_Mode_Laundry+0x188>
	{
		wash_remain_time -= 10;
 80027b2:	4b8a      	ldr	r3, [pc, #552]	; (80029dc <Wash_Mode_Laundry+0x390>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	3b0a      	subs	r3, #10
 80027b8:	4a88      	ldr	r2, [pc, #544]	; (80029dc <Wash_Mode_Laundry+0x390>)
 80027ba:	6013      	str	r3, [r2, #0]
		if (wash_remain_time < 0) {wash_remain_time = 0;}
 80027bc:	4b87      	ldr	r3, [pc, #540]	; (80029dc <Wash_Mode_Laundry+0x390>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	da02      	bge.n	80027ca <Wash_Mode_Laundry+0x17e>
 80027c4:	4b85      	ldr	r3, [pc, #532]	; (80029dc <Wash_Mode_Laundry+0x390>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	601a      	str	r2, [r3, #0]
		LCD_Command(CLEAR_DISPLAY); // 버튼을 누르는 순간마다 clear display해줘서 쓰레기값 방지
 80027ca:	2001      	movs	r0, #1
 80027cc:	f7fd fef2 	bl	80005b4 <LCD_Command>
		Wash_Mode_Setting_display();
 80027d0:	f000 fd06 	bl	80031e0 <Wash_Mode_Setting_display>
	}

	// 동작 시간을 설정 완료했다면, 세탁기 구동을 시작한다.
	if (Get_Button(BUTTON3_GPIO_Port, BUTTON3_Pin, 3) == BUTTON_PRESS)
 80027d4:	2203      	movs	r2, #3
 80027d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027da:	487e      	ldr	r0, [pc, #504]	; (80029d4 <Wash_Mode_Laundry+0x388>)
 80027dc:	f7fd ff98 	bl	8000710 <Get_Button>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f040 80bc 	bne.w	8002960 <Wash_Mode_Laundry+0x314>
	{
		wash_mode_start_stop_flag = START;
 80027e8:	4b79      	ldr	r3, [pc, #484]	; (80029d0 <Wash_Mode_Laundry+0x384>)
 80027ea:	2201      	movs	r2, #1
 80027ec:	701a      	strb	r2, [r3, #0]

		HAL_RTC_GetTime(&hrtc, &wash_complete_time, RTC_FORMAT_BCD);
 80027ee:	2201      	movs	r2, #1
 80027f0:	497b      	ldr	r1, [pc, #492]	; (80029e0 <Wash_Mode_Laundry+0x394>)
 80027f2:	487c      	ldr	r0, [pc, #496]	; (80029e4 <Wash_Mode_Laundry+0x398>)
 80027f4:	f003 fb18 	bl	8005e28 <HAL_RTC_GetTime>
		wash_complete_time.Hours += dec2bcd(wash_remain_time / 3600);
 80027f8:	4b78      	ldr	r3, [pc, #480]	; (80029dc <Wash_Mode_Laundry+0x390>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a7a      	ldr	r2, [pc, #488]	; (80029e8 <Wash_Mode_Laundry+0x39c>)
 80027fe:	fb82 1203 	smull	r1, r2, r2, r3
 8002802:	441a      	add	r2, r3
 8002804:	12d2      	asrs	r2, r2, #11
 8002806:	17db      	asrs	r3, r3, #31
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	b2db      	uxtb	r3, r3
 800280c:	4618      	mov	r0, r3
 800280e:	f7fe f977 	bl	8000b00 <dec2bcd>
 8002812:	4603      	mov	r3, r0
 8002814:	461a      	mov	r2, r3
 8002816:	4b72      	ldr	r3, [pc, #456]	; (80029e0 <Wash_Mode_Laundry+0x394>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	4413      	add	r3, r2
 800281c:	b2da      	uxtb	r2, r3
 800281e:	4b70      	ldr	r3, [pc, #448]	; (80029e0 <Wash_Mode_Laundry+0x394>)
 8002820:	701a      	strb	r2, [r3, #0]
		wash_complete_time.Minutes += dec2bcd((wash_remain_time % 3600) / 60);
 8002822:	4b6e      	ldr	r3, [pc, #440]	; (80029dc <Wash_Mode_Laundry+0x390>)
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	4b70      	ldr	r3, [pc, #448]	; (80029e8 <Wash_Mode_Laundry+0x39c>)
 8002828:	fb83 1302 	smull	r1, r3, r3, r2
 800282c:	4413      	add	r3, r2
 800282e:	12d9      	asrs	r1, r3, #11
 8002830:	17d3      	asrs	r3, r2, #31
 8002832:	1acb      	subs	r3, r1, r3
 8002834:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002838:	fb01 f303 	mul.w	r3, r1, r3
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	4a6b      	ldr	r2, [pc, #428]	; (80029ec <Wash_Mode_Laundry+0x3a0>)
 8002840:	fb82 1203 	smull	r1, r2, r2, r3
 8002844:	441a      	add	r2, r3
 8002846:	1152      	asrs	r2, r2, #5
 8002848:	17db      	asrs	r3, r3, #31
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	b2db      	uxtb	r3, r3
 800284e:	4618      	mov	r0, r3
 8002850:	f7fe f956 	bl	8000b00 <dec2bcd>
 8002854:	4603      	mov	r3, r0
 8002856:	461a      	mov	r2, r3
 8002858:	4b61      	ldr	r3, [pc, #388]	; (80029e0 <Wash_Mode_Laundry+0x394>)
 800285a:	785b      	ldrb	r3, [r3, #1]
 800285c:	4413      	add	r3, r2
 800285e:	b2da      	uxtb	r2, r3
 8002860:	4b5f      	ldr	r3, [pc, #380]	; (80029e0 <Wash_Mode_Laundry+0x394>)
 8002862:	705a      	strb	r2, [r3, #1]
		wash_complete_time.Seconds += dec2bcd((wash_remain_time % 3600) % 60);
 8002864:	4b5d      	ldr	r3, [pc, #372]	; (80029dc <Wash_Mode_Laundry+0x390>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a5f      	ldr	r2, [pc, #380]	; (80029e8 <Wash_Mode_Laundry+0x39c>)
 800286a:	fb82 1203 	smull	r1, r2, r2, r3
 800286e:	441a      	add	r2, r3
 8002870:	12d1      	asrs	r1, r2, #11
 8002872:	17da      	asrs	r2, r3, #31
 8002874:	1a8a      	subs	r2, r1, r2
 8002876:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800287a:	fb01 f202 	mul.w	r2, r1, r2
 800287e:	1a9a      	subs	r2, r3, r2
 8002880:	4b5a      	ldr	r3, [pc, #360]	; (80029ec <Wash_Mode_Laundry+0x3a0>)
 8002882:	fb83 1302 	smull	r1, r3, r3, r2
 8002886:	4413      	add	r3, r2
 8002888:	1159      	asrs	r1, r3, #5
 800288a:	17d3      	asrs	r3, r2, #31
 800288c:	1ac9      	subs	r1, r1, r3
 800288e:	460b      	mov	r3, r1
 8002890:	011b      	lsls	r3, r3, #4
 8002892:	1a5b      	subs	r3, r3, r1
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	1ad1      	subs	r1, r2, r3
 8002898:	b2cb      	uxtb	r3, r1
 800289a:	4618      	mov	r0, r3
 800289c:	f7fe f930 	bl	8000b00 <dec2bcd>
 80028a0:	4603      	mov	r3, r0
 80028a2:	461a      	mov	r2, r3
 80028a4:	4b4e      	ldr	r3, [pc, #312]	; (80029e0 <Wash_Mode_Laundry+0x394>)
 80028a6:	789b      	ldrb	r3, [r3, #2]
 80028a8:	4413      	add	r3, r2
 80028aa:	b2da      	uxtb	r2, r3
 80028ac:	4b4c      	ldr	r3, [pc, #304]	; (80029e0 <Wash_Mode_Laundry+0x394>)
 80028ae:	709a      	strb	r2, [r3, #2]

		if (bcd2dec(wash_complete_time.Seconds) >= 60)
 80028b0:	4b4b      	ldr	r3, [pc, #300]	; (80029e0 <Wash_Mode_Laundry+0x394>)
 80028b2:	789b      	ldrb	r3, [r3, #2]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7fe f907 	bl	8000ac8 <bcd2dec>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b3b      	cmp	r3, #59	; 0x3b
 80028be:	d915      	bls.n	80028ec <Wash_Mode_Laundry+0x2a0>
		{
			wash_complete_time.Minutes += dec2bcd(1);
 80028c0:	2001      	movs	r0, #1
 80028c2:	f7fe f91d 	bl	8000b00 <dec2bcd>
 80028c6:	4603      	mov	r3, r0
 80028c8:	461a      	mov	r2, r3
 80028ca:	4b45      	ldr	r3, [pc, #276]	; (80029e0 <Wash_Mode_Laundry+0x394>)
 80028cc:	785b      	ldrb	r3, [r3, #1]
 80028ce:	4413      	add	r3, r2
 80028d0:	b2da      	uxtb	r2, r3
 80028d2:	4b43      	ldr	r3, [pc, #268]	; (80029e0 <Wash_Mode_Laundry+0x394>)
 80028d4:	705a      	strb	r2, [r3, #1]
			wash_complete_time.Seconds -= dec2bcd(60);
 80028d6:	203c      	movs	r0, #60	; 0x3c
 80028d8:	f7fe f912 	bl	8000b00 <dec2bcd>
 80028dc:	4603      	mov	r3, r0
 80028de:	461a      	mov	r2, r3
 80028e0:	4b3f      	ldr	r3, [pc, #252]	; (80029e0 <Wash_Mode_Laundry+0x394>)
 80028e2:	789b      	ldrb	r3, [r3, #2]
 80028e4:	1a9b      	subs	r3, r3, r2
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	4b3d      	ldr	r3, [pc, #244]	; (80029e0 <Wash_Mode_Laundry+0x394>)
 80028ea:	709a      	strb	r2, [r3, #2]
		}
		if (bcd2dec(wash_complete_time.Minutes) >= 60)
 80028ec:	4b3c      	ldr	r3, [pc, #240]	; (80029e0 <Wash_Mode_Laundry+0x394>)
 80028ee:	785b      	ldrb	r3, [r3, #1]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7fe f8e9 	bl	8000ac8 <bcd2dec>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b3b      	cmp	r3, #59	; 0x3b
 80028fa:	d915      	bls.n	8002928 <Wash_Mode_Laundry+0x2dc>
		{
			wash_complete_time.Hours += dec2bcd(1);
 80028fc:	2001      	movs	r0, #1
 80028fe:	f7fe f8ff 	bl	8000b00 <dec2bcd>
 8002902:	4603      	mov	r3, r0
 8002904:	461a      	mov	r2, r3
 8002906:	4b36      	ldr	r3, [pc, #216]	; (80029e0 <Wash_Mode_Laundry+0x394>)
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	4413      	add	r3, r2
 800290c:	b2da      	uxtb	r2, r3
 800290e:	4b34      	ldr	r3, [pc, #208]	; (80029e0 <Wash_Mode_Laundry+0x394>)
 8002910:	701a      	strb	r2, [r3, #0]
			wash_complete_time.Minutes -= dec2bcd(60);
 8002912:	203c      	movs	r0, #60	; 0x3c
 8002914:	f7fe f8f4 	bl	8000b00 <dec2bcd>
 8002918:	4603      	mov	r3, r0
 800291a:	461a      	mov	r2, r3
 800291c:	4b30      	ldr	r3, [pc, #192]	; (80029e0 <Wash_Mode_Laundry+0x394>)
 800291e:	785b      	ldrb	r3, [r3, #1]
 8002920:	1a9b      	subs	r3, r3, r2
 8002922:	b2da      	uxtb	r2, r3
 8002924:	4b2e      	ldr	r3, [pc, #184]	; (80029e0 <Wash_Mode_Laundry+0x394>)
 8002926:	705a      	strb	r2, [r3, #1]
		}
		if (bcd2dec(wash_complete_time.Hours) >= 24)
 8002928:	4b2d      	ldr	r3, [pc, #180]	; (80029e0 <Wash_Mode_Laundry+0x394>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	4618      	mov	r0, r3
 800292e:	f7fe f8cb 	bl	8000ac8 <bcd2dec>
 8002932:	4603      	mov	r3, r0
 8002934:	2b17      	cmp	r3, #23
 8002936:	d90a      	bls.n	800294e <Wash_Mode_Laundry+0x302>
		{
			// DATE를 1 올려야 하지만, 현재 해당 프로그램에서 date는 고려하고 있지 않음
			wash_complete_time.Hours -= dec2bcd(24);
 8002938:	2018      	movs	r0, #24
 800293a:	f7fe f8e1 	bl	8000b00 <dec2bcd>
 800293e:	4603      	mov	r3, r0
 8002940:	461a      	mov	r2, r3
 8002942:	4b27      	ldr	r3, [pc, #156]	; (80029e0 <Wash_Mode_Laundry+0x394>)
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	1a9b      	subs	r3, r3, r2
 8002948:	b2da      	uxtb	r2, r3
 800294a:	4b25      	ldr	r3, [pc, #148]	; (80029e0 <Wash_Mode_Laundry+0x394>)
 800294c:	701a      	strb	r2, [r3, #0]
		}

		LCD_Command(CLEAR_DISPLAY); // 버튼을 누르는 순간마다 clear display해줘서 쓰레기값 방지
 800294e:	2001      	movs	r0, #1
 8002950:	f7fd fe30 	bl	80005b4 <LCD_Command>
		Wash_Mode_Running_display(wash_complete_time);
 8002954:	4b22      	ldr	r3, [pc, #136]	; (80029e0 <Wash_Mode_Laundry+0x394>)
 8002956:	691a      	ldr	r2, [r3, #16]
 8002958:	9200      	str	r2, [sp, #0]
 800295a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800295c:	f000 fc74 	bl	8003248 <Wash_Mode_Running_display>
	}

	// 세탁 모드를 즉시 중지하고 세탁모드를 초기화해준다.
	if (Get_Button(BUTTON4_GPIO_Port, BUTTON4_Pin, 4) == BUTTON_PRESS)
 8002960:	2204      	movs	r2, #4
 8002962:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002966:	4822      	ldr	r0, [pc, #136]	; (80029f0 <Wash_Mode_Laundry+0x3a4>)
 8002968:	f7fd fed2 	bl	8000710 <Get_Button>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d128      	bne.n	80029c4 <Wash_Mode_Laundry+0x378>
	{
		mode_complete_alarm_stop_start_flag = STOP; // 완료 부저가 진행중일 경우 아예 꺼버리는게 논리적으로 맞음
 8002972:	4b16      	ldr	r3, [pc, #88]	; (80029cc <Wash_Mode_Laundry+0x380>)
 8002974:	2200      	movs	r2, #0
 8002976:	701a      	strb	r2, [r3, #0]

		WashingMachine_curr_status = IDLE_MODE;
 8002978:	4b17      	ldr	r3, [pc, #92]	; (80029d8 <Wash_Mode_Laundry+0x38c>)
 800297a:	2200      	movs	r2, #0
 800297c:	701a      	strb	r2, [r3, #0]
		wash_mode_start_stop_flag = STOP;
 800297e:	4b14      	ldr	r3, [pc, #80]	; (80029d0 <Wash_Mode_Laundry+0x384>)
 8002980:	2200      	movs	r2, #0
 8002982:	701a      	strb	r2, [r3, #0]
		dcmotor_forward_backward_flag = 0;
 8002984:	4b1b      	ldr	r3, [pc, #108]	; (80029f4 <Wash_Mode_Laundry+0x3a8>)
 8002986:	2200      	movs	r2, #0
 8002988:	701a      	strb	r2, [r3, #0]
		wash_remain_time = 0;
 800298a:	4b14      	ldr	r3, [pc, #80]	; (80029dc <Wash_Mode_Laundry+0x390>)
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]
		wash_complete_time.Hours = dec2bcd(0);
 8002990:	2000      	movs	r0, #0
 8002992:	f7fe f8b5 	bl	8000b00 <dec2bcd>
 8002996:	4603      	mov	r3, r0
 8002998:	461a      	mov	r2, r3
 800299a:	4b11      	ldr	r3, [pc, #68]	; (80029e0 <Wash_Mode_Laundry+0x394>)
 800299c:	701a      	strb	r2, [r3, #0]
		wash_complete_time.Minutes = dec2bcd(0);
 800299e:	2000      	movs	r0, #0
 80029a0:	f7fe f8ae 	bl	8000b00 <dec2bcd>
 80029a4:	4603      	mov	r3, r0
 80029a6:	461a      	mov	r2, r3
 80029a8:	4b0d      	ldr	r3, [pc, #52]	; (80029e0 <Wash_Mode_Laundry+0x394>)
 80029aa:	705a      	strb	r2, [r3, #1]
		wash_complete_time.Seconds = dec2bcd(0);
 80029ac:	2000      	movs	r0, #0
 80029ae:	f7fe f8a7 	bl	8000b00 <dec2bcd>
 80029b2:	4603      	mov	r3, r0
 80029b4:	461a      	mov	r2, r3
 80029b6:	4b0a      	ldr	r3, [pc, #40]	; (80029e0 <Wash_Mode_Laundry+0x394>)
 80029b8:	709a      	strb	r2, [r3, #2]

		LCD_Command(CLEAR_DISPLAY); // 버튼을 누르는 순간마다 clear display해줘서 쓰레기값 방지
 80029ba:	2001      	movs	r0, #1
 80029bc:	f7fd fdfa 	bl	80005b4 <LCD_Command>
		Idle_Mode_Display(); // idle모드 화면으로 이동한다.
 80029c0:	f000 fbb4 	bl	800312c <Idle_Mode_Display>
	}
	/************************END 버튼 입력 인터럽트 부분************************/
}
 80029c4:	bf00      	nop
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	20000f87 	.word	0x20000f87
 80029d0:	20001000 	.word	0x20001000
 80029d4:	40021000 	.word	0x40021000
 80029d8:	20000f88 	.word	0x20000f88
 80029dc:	20000fb8 	.word	0x20000fb8
 80029e0:	20000fc4 	.word	0x20000fc4
 80029e4:	2000043c 	.word	0x2000043c
 80029e8:	91a2b3c5 	.word	0x91a2b3c5
 80029ec:	88888889 	.word	0x88888889
 80029f0:	40020400 	.word	0x40020400
 80029f4:	20001001 	.word	0x20001001

080029f8 <Rinse_Mode_Laundry>:

/*
 * desc: "세탁/헹굼/탈수" 중 "헹굼"에 관련된 동작을 실행하는 함수이다.
 */
static void Rinse_Mode_Laundry(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af02      	add	r7, sp, #8
	static uint8_t rinse_mode_start_stop_flag = STOP;

	/************************BEGIN 기본 동작 부분************************/
	close_WashingMachine_Lid();
 80029fe:	f7fe ff01 	bl	8001804 <close_WashingMachine_Lid>
	Mode_Complete_Alarm();
 8002a02:	f7fd fed5 	bl	80007b0 <Mode_Complete_Alarm>


	// 뚜껑이 열려있으면 동작을 중지하고 idle 화면으로 이동
	if (Check_Lid_Open())
 8002a06:	f000 fb89 	bl	800311c <Check_Lid_Open>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00a      	beq.n	8002a26 <Rinse_Mode_Laundry+0x2e>
	{
		mode_complete_alarm_stop_start_flag = STOP;
 8002a10:	4b1e      	ldr	r3, [pc, #120]	; (8002a8c <Rinse_Mode_Laundry+0x94>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	701a      	strb	r2, [r3, #0]
		WashingMachine_curr_status = 0;
 8002a16:	4b1e      	ldr	r3, [pc, #120]	; (8002a90 <Rinse_Mode_Laundry+0x98>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	701a      	strb	r2, [r3, #0]
		LCD_Command(CLEAR_DISPLAY);
 8002a1c:	2001      	movs	r0, #1
 8002a1e:	f7fd fdc9 	bl	80005b4 <LCD_Command>
		Idle_Mode_Display();
 8002a22:	f000 fb83 	bl	800312c <Idle_Mode_Display>
	}


	if (rinse_mode_start_stop_flag == STOP)
 8002a26:	4b1b      	ldr	r3, [pc, #108]	; (8002a94 <Rinse_Mode_Laundry+0x9c>)
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d106      	bne.n	8002a3c <Rinse_Mode_Laundry+0x44>
	{
		DCmotor_Break();
 8002a2e:	f7fd ff3f 	bl	80008b0 <DCmotor_Break>
		LEDbar_All_Off();
 8002a32:	f7fe f889 	bl	8000b48 <LEDbar_All_Off>
		FND4digit_off();
 8002a36:	f7fd ff5f 	bl	80008f8 <FND4digit_off>
 8002a3a:	e042      	b.n	8002ac2 <Rinse_Mode_Laundry+0xca>

	}
	else if (rinse_mode_start_stop_flag == START && rinse_remain_time > 0)
 8002a3c:	4b15      	ldr	r3, [pc, #84]	; (8002a94 <Rinse_Mode_Laundry+0x9c>)
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d12d      	bne.n	8002aa0 <Rinse_Mode_Laundry+0xa8>
 8002a44:	4b14      	ldr	r3, [pc, #80]	; (8002a98 <Rinse_Mode_Laundry+0xa0>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	dd29      	ble.n	8002aa0 <Rinse_Mode_Laundry+0xa8>
	{
		// 완료부저가 실행중이더라도, 다시 모드가 시작되면 당연히 부저는 꺼져야함
		mode_complete_alarm_stop_start_flag = STOP;
 8002a4c:	4b0f      	ldr	r3, [pc, #60]	; (8002a8c <Rinse_Mode_Laundry+0x94>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	701a      	strb	r2, [r3, #0]

		// 남은시간은 자동으로 1초씩 감소
		if (TIM10_10ms_WM_rinse_timer > 100)
 8002a52:	4b12      	ldr	r3, [pc, #72]	; (8002a9c <Rinse_Mode_Laundry+0xa4>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2b64      	cmp	r3, #100	; 0x64
 8002a58:	d90e      	bls.n	8002a78 <Rinse_Mode_Laundry+0x80>
		{
			TIM10_10ms_WM_rinse_timer = 0;
 8002a5a:	4b10      	ldr	r3, [pc, #64]	; (8002a9c <Rinse_Mode_Laundry+0xa4>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]
			rinse_remain_time--;
 8002a60:	4b0d      	ldr	r3, [pc, #52]	; (8002a98 <Rinse_Mode_Laundry+0xa0>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	3b01      	subs	r3, #1
 8002a66:	4a0c      	ldr	r2, [pc, #48]	; (8002a98 <Rinse_Mode_Laundry+0xa0>)
 8002a68:	6013      	str	r3, [r2, #0]
			if (rinse_remain_time < 0) {rinse_remain_time = 0;}
 8002a6a:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <Rinse_Mode_Laundry+0xa0>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	da02      	bge.n	8002a78 <Rinse_Mode_Laundry+0x80>
 8002a72:	4b09      	ldr	r3, [pc, #36]	; (8002a98 <Rinse_Mode_Laundry+0xa0>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]
		}

		DCmotor_Forward_Rotate();
 8002a78:	f7fd fef6 	bl	8000868 <DCmotor_Forward_Rotate>

		LEDbar_On_Up();
 8002a7c:	f7fe f870 	bl	8000b60 <LEDbar_On_Up>
		FND4digit_time_display(rinse_remain_time);
 8002a80:	4b05      	ldr	r3, [pc, #20]	; (8002a98 <Rinse_Mode_Laundry+0xa0>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7fd ffcb 	bl	8000a20 <FND4digit_time_display>
 8002a8a:	e01a      	b.n	8002ac2 <Rinse_Mode_Laundry+0xca>
 8002a8c:	20000f87 	.word	0x20000f87
 8002a90:	20000f88 	.word	0x20000f88
 8002a94:	20001002 	.word	0x20001002
 8002a98:	20000fbc 	.word	0x20000fbc
 8002a9c:	20000c18 	.word	0x20000c18
	}
	else // 플래그는 start이지만 남은시간이 0이하가 된 경우 여기로 빠짐
	{
		mode_complete_alarm_stop_start_flag = START;
 8002aa0:	4ba9      	ldr	r3, [pc, #676]	; (8002d48 <Rinse_Mode_Laundry+0x350>)
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	701a      	strb	r2, [r3, #0]
		rinse_mode_start_stop_flag = STOP;
 8002aa6:	4ba9      	ldr	r3, [pc, #676]	; (8002d4c <Rinse_Mode_Laundry+0x354>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	701a      	strb	r2, [r3, #0]

		DCmotor_Break();
 8002aac:	f7fd ff00 	bl	80008b0 <DCmotor_Break>
		LEDbar_All_Off();
 8002ab0:	f7fe f84a 	bl	8000b48 <LEDbar_All_Off>
		FND4digit_off();
 8002ab4:	f7fd ff20 	bl	80008f8 <FND4digit_off>

		// 완료가 되었다면 그냥 헹굼 셋팅 화면을 다시 출력
		LCD_Command(CLEAR_DISPLAY);
 8002ab8:	2001      	movs	r0, #1
 8002aba:	f7fd fd7b 	bl	80005b4 <LCD_Command>
		Rinse_Mode_Setting_display();
 8002abe:	f000 fc09 	bl	80032d4 <Rinse_Mode_Setting_display>
	}
	/************************END 기본 동작 부분************************/

	/************************BEGIN 버튼 입력 인터럽트 부분************************/
	if (Get_Button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ac8:	48a1      	ldr	r0, [pc, #644]	; (8002d50 <Rinse_Mode_Laundry+0x358>)
 8002aca:	f7fd fe21 	bl	8000710 <Get_Button>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d114      	bne.n	8002afe <Rinse_Mode_Laundry+0x106>
	{
		mode_complete_alarm_stop_start_flag = STOP; // 완료 부저가 진행중일 경우 아예 꺼버리는게 논리적으로 맞음
 8002ad4:	4b9c      	ldr	r3, [pc, #624]	; (8002d48 <Rinse_Mode_Laundry+0x350>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	701a      	strb	r2, [r3, #0]

		WashingMachine_curr_status++;
 8002ada:	4b9e      	ldr	r3, [pc, #632]	; (8002d54 <Rinse_Mode_Laundry+0x35c>)
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	3301      	adds	r3, #1
 8002ae0:	b2da      	uxtb	r2, r3
 8002ae2:	4b9c      	ldr	r3, [pc, #624]	; (8002d54 <Rinse_Mode_Laundry+0x35c>)
 8002ae4:	701a      	strb	r2, [r3, #0]
		WashingMachine_curr_status %= 4;
 8002ae6:	4b9b      	ldr	r3, [pc, #620]	; (8002d54 <Rinse_Mode_Laundry+0x35c>)
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	f003 0303 	and.w	r3, r3, #3
 8002aee:	b2da      	uxtb	r2, r3
 8002af0:	4b98      	ldr	r3, [pc, #608]	; (8002d54 <Rinse_Mode_Laundry+0x35c>)
 8002af2:	701a      	strb	r2, [r3, #0]
		LCD_Command(CLEAR_DISPLAY); // 버튼을 누르는 순간마다 clear display해줘서 쓰레기값 방지
 8002af4:	2001      	movs	r0, #1
 8002af6:	f7fd fd5d 	bl	80005b4 <LCD_Command>
		Spin_Mode_Setting_display();
 8002afa:	f000 fc65 	bl	80033c8 <Spin_Mode_Setting_display>
	}

	// 헹굼 횟수를 1회 증가시킨다(1회는 7초로 간주)
	if (Get_Button(BUTTON1_GPIO_Port, BUTTON1_Pin, 1) == BUTTON_PRESS)
 8002afe:	2201      	movs	r2, #1
 8002b00:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b04:	4892      	ldr	r0, [pc, #584]	; (8002d50 <Rinse_Mode_Laundry+0x358>)
 8002b06:	f7fd fe03 	bl	8000710 <Get_Button>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d109      	bne.n	8002b24 <Rinse_Mode_Laundry+0x12c>
	{
		rinse_remain_time += 7;
 8002b10:	4b91      	ldr	r3, [pc, #580]	; (8002d58 <Rinse_Mode_Laundry+0x360>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	3307      	adds	r3, #7
 8002b16:	4a90      	ldr	r2, [pc, #576]	; (8002d58 <Rinse_Mode_Laundry+0x360>)
 8002b18:	6013      	str	r3, [r2, #0]
		LCD_Command(CLEAR_DISPLAY); // 버튼을 누르는 순간마다 clear display해줘서 쓰레기값 방지
 8002b1a:	2001      	movs	r0, #1
 8002b1c:	f7fd fd4a 	bl	80005b4 <LCD_Command>
		Rinse_Mode_Setting_display();
 8002b20:	f000 fbd8 	bl	80032d4 <Rinse_Mode_Setting_display>
	}

	// 헹굼 횟수를 1회 감소시킨다(1회는 7초로 간주)
	if (Get_Button(BUTTON2_GPIO_Port, BUTTON2_Pin, 2) == BUTTON_PRESS)
 8002b24:	2202      	movs	r2, #2
 8002b26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b2a:	4889      	ldr	r0, [pc, #548]	; (8002d50 <Rinse_Mode_Laundry+0x358>)
 8002b2c:	f7fd fdf0 	bl	8000710 <Get_Button>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d110      	bne.n	8002b58 <Rinse_Mode_Laundry+0x160>
	{
		rinse_remain_time -= 7;
 8002b36:	4b88      	ldr	r3, [pc, #544]	; (8002d58 <Rinse_Mode_Laundry+0x360>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	3b07      	subs	r3, #7
 8002b3c:	4a86      	ldr	r2, [pc, #536]	; (8002d58 <Rinse_Mode_Laundry+0x360>)
 8002b3e:	6013      	str	r3, [r2, #0]
		if (rinse_remain_time < 0) {rinse_remain_time = 0;}
 8002b40:	4b85      	ldr	r3, [pc, #532]	; (8002d58 <Rinse_Mode_Laundry+0x360>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	da02      	bge.n	8002b4e <Rinse_Mode_Laundry+0x156>
 8002b48:	4b83      	ldr	r3, [pc, #524]	; (8002d58 <Rinse_Mode_Laundry+0x360>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	601a      	str	r2, [r3, #0]
		LCD_Command(CLEAR_DISPLAY); // 버튼을 누르는 순간마다 clear display해줘서 쓰레기값 방지
 8002b4e:	2001      	movs	r0, #1
 8002b50:	f7fd fd30 	bl	80005b4 <LCD_Command>
		Rinse_Mode_Setting_display();
 8002b54:	f000 fbbe 	bl	80032d4 <Rinse_Mode_Setting_display>
	}

	// 동작 시간을 설정 완료했다면, 세탁기 구동을 시작한다.
	if (Get_Button(BUTTON3_GPIO_Port, BUTTON3_Pin, 3) == BUTTON_PRESS)
 8002b58:	2203      	movs	r2, #3
 8002b5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b5e:	487c      	ldr	r0, [pc, #496]	; (8002d50 <Rinse_Mode_Laundry+0x358>)
 8002b60:	f7fd fdd6 	bl	8000710 <Get_Button>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f040 80bc 	bne.w	8002ce4 <Rinse_Mode_Laundry+0x2ec>
	{
		rinse_mode_start_stop_flag = START;
 8002b6c:	4b77      	ldr	r3, [pc, #476]	; (8002d4c <Rinse_Mode_Laundry+0x354>)
 8002b6e:	2201      	movs	r2, #1
 8002b70:	701a      	strb	r2, [r3, #0]

		HAL_RTC_GetTime(&hrtc, &rinse_complete_time, RTC_FORMAT_BCD);
 8002b72:	2201      	movs	r2, #1
 8002b74:	4979      	ldr	r1, [pc, #484]	; (8002d5c <Rinse_Mode_Laundry+0x364>)
 8002b76:	487a      	ldr	r0, [pc, #488]	; (8002d60 <Rinse_Mode_Laundry+0x368>)
 8002b78:	f003 f956 	bl	8005e28 <HAL_RTC_GetTime>
		rinse_complete_time.Hours += dec2bcd(rinse_remain_time / 3600);
 8002b7c:	4b76      	ldr	r3, [pc, #472]	; (8002d58 <Rinse_Mode_Laundry+0x360>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a78      	ldr	r2, [pc, #480]	; (8002d64 <Rinse_Mode_Laundry+0x36c>)
 8002b82:	fb82 1203 	smull	r1, r2, r2, r3
 8002b86:	441a      	add	r2, r3
 8002b88:	12d2      	asrs	r2, r2, #11
 8002b8a:	17db      	asrs	r3, r3, #31
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7fd ffb5 	bl	8000b00 <dec2bcd>
 8002b96:	4603      	mov	r3, r0
 8002b98:	461a      	mov	r2, r3
 8002b9a:	4b70      	ldr	r3, [pc, #448]	; (8002d5c <Rinse_Mode_Laundry+0x364>)
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	b2da      	uxtb	r2, r3
 8002ba2:	4b6e      	ldr	r3, [pc, #440]	; (8002d5c <Rinse_Mode_Laundry+0x364>)
 8002ba4:	701a      	strb	r2, [r3, #0]
		rinse_complete_time.Minutes += dec2bcd((rinse_remain_time % 3600) / 60);
 8002ba6:	4b6c      	ldr	r3, [pc, #432]	; (8002d58 <Rinse_Mode_Laundry+0x360>)
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	4b6e      	ldr	r3, [pc, #440]	; (8002d64 <Rinse_Mode_Laundry+0x36c>)
 8002bac:	fb83 1302 	smull	r1, r3, r3, r2
 8002bb0:	4413      	add	r3, r2
 8002bb2:	12d9      	asrs	r1, r3, #11
 8002bb4:	17d3      	asrs	r3, r2, #31
 8002bb6:	1acb      	subs	r3, r1, r3
 8002bb8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002bbc:	fb01 f303 	mul.w	r3, r1, r3
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	4a69      	ldr	r2, [pc, #420]	; (8002d68 <Rinse_Mode_Laundry+0x370>)
 8002bc4:	fb82 1203 	smull	r1, r2, r2, r3
 8002bc8:	441a      	add	r2, r3
 8002bca:	1152      	asrs	r2, r2, #5
 8002bcc:	17db      	asrs	r3, r3, #31
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7fd ff94 	bl	8000b00 <dec2bcd>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	461a      	mov	r2, r3
 8002bdc:	4b5f      	ldr	r3, [pc, #380]	; (8002d5c <Rinse_Mode_Laundry+0x364>)
 8002bde:	785b      	ldrb	r3, [r3, #1]
 8002be0:	4413      	add	r3, r2
 8002be2:	b2da      	uxtb	r2, r3
 8002be4:	4b5d      	ldr	r3, [pc, #372]	; (8002d5c <Rinse_Mode_Laundry+0x364>)
 8002be6:	705a      	strb	r2, [r3, #1]
		rinse_complete_time.Seconds += dec2bcd((rinse_remain_time % 3600) % 60);
 8002be8:	4b5b      	ldr	r3, [pc, #364]	; (8002d58 <Rinse_Mode_Laundry+0x360>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a5d      	ldr	r2, [pc, #372]	; (8002d64 <Rinse_Mode_Laundry+0x36c>)
 8002bee:	fb82 1203 	smull	r1, r2, r2, r3
 8002bf2:	441a      	add	r2, r3
 8002bf4:	12d1      	asrs	r1, r2, #11
 8002bf6:	17da      	asrs	r2, r3, #31
 8002bf8:	1a8a      	subs	r2, r1, r2
 8002bfa:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002bfe:	fb01 f202 	mul.w	r2, r1, r2
 8002c02:	1a9a      	subs	r2, r3, r2
 8002c04:	4b58      	ldr	r3, [pc, #352]	; (8002d68 <Rinse_Mode_Laundry+0x370>)
 8002c06:	fb83 1302 	smull	r1, r3, r3, r2
 8002c0a:	4413      	add	r3, r2
 8002c0c:	1159      	asrs	r1, r3, #5
 8002c0e:	17d3      	asrs	r3, r2, #31
 8002c10:	1ac9      	subs	r1, r1, r3
 8002c12:	460b      	mov	r3, r1
 8002c14:	011b      	lsls	r3, r3, #4
 8002c16:	1a5b      	subs	r3, r3, r1
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	1ad1      	subs	r1, r2, r3
 8002c1c:	b2cb      	uxtb	r3, r1
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7fd ff6e 	bl	8000b00 <dec2bcd>
 8002c24:	4603      	mov	r3, r0
 8002c26:	461a      	mov	r2, r3
 8002c28:	4b4c      	ldr	r3, [pc, #304]	; (8002d5c <Rinse_Mode_Laundry+0x364>)
 8002c2a:	789b      	ldrb	r3, [r3, #2]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	b2da      	uxtb	r2, r3
 8002c30:	4b4a      	ldr	r3, [pc, #296]	; (8002d5c <Rinse_Mode_Laundry+0x364>)
 8002c32:	709a      	strb	r2, [r3, #2]

		if (bcd2dec(rinse_complete_time.Seconds) >= 60)
 8002c34:	4b49      	ldr	r3, [pc, #292]	; (8002d5c <Rinse_Mode_Laundry+0x364>)
 8002c36:	789b      	ldrb	r3, [r3, #2]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7fd ff45 	bl	8000ac8 <bcd2dec>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b3b      	cmp	r3, #59	; 0x3b
 8002c42:	d915      	bls.n	8002c70 <Rinse_Mode_Laundry+0x278>
		{
			rinse_complete_time.Minutes += dec2bcd(1);
 8002c44:	2001      	movs	r0, #1
 8002c46:	f7fd ff5b 	bl	8000b00 <dec2bcd>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	4b43      	ldr	r3, [pc, #268]	; (8002d5c <Rinse_Mode_Laundry+0x364>)
 8002c50:	785b      	ldrb	r3, [r3, #1]
 8002c52:	4413      	add	r3, r2
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	4b41      	ldr	r3, [pc, #260]	; (8002d5c <Rinse_Mode_Laundry+0x364>)
 8002c58:	705a      	strb	r2, [r3, #1]
			rinse_complete_time.Seconds -= dec2bcd(60);
 8002c5a:	203c      	movs	r0, #60	; 0x3c
 8002c5c:	f7fd ff50 	bl	8000b00 <dec2bcd>
 8002c60:	4603      	mov	r3, r0
 8002c62:	461a      	mov	r2, r3
 8002c64:	4b3d      	ldr	r3, [pc, #244]	; (8002d5c <Rinse_Mode_Laundry+0x364>)
 8002c66:	789b      	ldrb	r3, [r3, #2]
 8002c68:	1a9b      	subs	r3, r3, r2
 8002c6a:	b2da      	uxtb	r2, r3
 8002c6c:	4b3b      	ldr	r3, [pc, #236]	; (8002d5c <Rinse_Mode_Laundry+0x364>)
 8002c6e:	709a      	strb	r2, [r3, #2]
		}
		if (bcd2dec(rinse_complete_time.Minutes) >= 60)
 8002c70:	4b3a      	ldr	r3, [pc, #232]	; (8002d5c <Rinse_Mode_Laundry+0x364>)
 8002c72:	785b      	ldrb	r3, [r3, #1]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7fd ff27 	bl	8000ac8 <bcd2dec>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b3b      	cmp	r3, #59	; 0x3b
 8002c7e:	d915      	bls.n	8002cac <Rinse_Mode_Laundry+0x2b4>
		{
			rinse_complete_time.Hours += dec2bcd(1);
 8002c80:	2001      	movs	r0, #1
 8002c82:	f7fd ff3d 	bl	8000b00 <dec2bcd>
 8002c86:	4603      	mov	r3, r0
 8002c88:	461a      	mov	r2, r3
 8002c8a:	4b34      	ldr	r3, [pc, #208]	; (8002d5c <Rinse_Mode_Laundry+0x364>)
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	4413      	add	r3, r2
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	4b32      	ldr	r3, [pc, #200]	; (8002d5c <Rinse_Mode_Laundry+0x364>)
 8002c94:	701a      	strb	r2, [r3, #0]
			rinse_complete_time.Minutes -= dec2bcd(60);
 8002c96:	203c      	movs	r0, #60	; 0x3c
 8002c98:	f7fd ff32 	bl	8000b00 <dec2bcd>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	4b2e      	ldr	r3, [pc, #184]	; (8002d5c <Rinse_Mode_Laundry+0x364>)
 8002ca2:	785b      	ldrb	r3, [r3, #1]
 8002ca4:	1a9b      	subs	r3, r3, r2
 8002ca6:	b2da      	uxtb	r2, r3
 8002ca8:	4b2c      	ldr	r3, [pc, #176]	; (8002d5c <Rinse_Mode_Laundry+0x364>)
 8002caa:	705a      	strb	r2, [r3, #1]
		}
		if (bcd2dec(rinse_complete_time.Hours) >= 24)
 8002cac:	4b2b      	ldr	r3, [pc, #172]	; (8002d5c <Rinse_Mode_Laundry+0x364>)
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7fd ff09 	bl	8000ac8 <bcd2dec>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b17      	cmp	r3, #23
 8002cba:	d90a      	bls.n	8002cd2 <Rinse_Mode_Laundry+0x2da>
		{
			// DATE를 1 올려야 하지만, 현재 해당 프로그램에서 date는 고려하고 있지 않음
			rinse_complete_time.Hours -= dec2bcd(24);
 8002cbc:	2018      	movs	r0, #24
 8002cbe:	f7fd ff1f 	bl	8000b00 <dec2bcd>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	4b25      	ldr	r3, [pc, #148]	; (8002d5c <Rinse_Mode_Laundry+0x364>)
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	1a9b      	subs	r3, r3, r2
 8002ccc:	b2da      	uxtb	r2, r3
 8002cce:	4b23      	ldr	r3, [pc, #140]	; (8002d5c <Rinse_Mode_Laundry+0x364>)
 8002cd0:	701a      	strb	r2, [r3, #0]
		}

		LCD_Command(CLEAR_DISPLAY); // 버튼을 누르는 순간마다 clear display해줘서 쓰레기값 방지
 8002cd2:	2001      	movs	r0, #1
 8002cd4:	f7fd fc6e 	bl	80005b4 <LCD_Command>
		Rinse_Mode_Running_display(rinse_complete_time);
 8002cd8:	4b20      	ldr	r3, [pc, #128]	; (8002d5c <Rinse_Mode_Laundry+0x364>)
 8002cda:	691a      	ldr	r2, [r3, #16]
 8002cdc:	9200      	str	r2, [sp, #0]
 8002cde:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ce0:	f000 fb2c 	bl	800333c <Rinse_Mode_Running_display>
	}

	// 헹굼 모드를 즉시 중지하고 세탁모드를 초기화해준다.
	if (Get_Button(BUTTON4_GPIO_Port, BUTTON4_Pin, 4) == BUTTON_PRESS)
 8002ce4:	2204      	movs	r2, #4
 8002ce6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002cea:	4820      	ldr	r0, [pc, #128]	; (8002d6c <Rinse_Mode_Laundry+0x374>)
 8002cec:	f7fd fd10 	bl	8000710 <Get_Button>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d125      	bne.n	8002d42 <Rinse_Mode_Laundry+0x34a>
	{
		mode_complete_alarm_stop_start_flag = STOP; // 완료 부저가 진행중일 경우 아예 꺼버리는게 논리적으로 맞음
 8002cf6:	4b14      	ldr	r3, [pc, #80]	; (8002d48 <Rinse_Mode_Laundry+0x350>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	701a      	strb	r2, [r3, #0]

		WashingMachine_curr_status = IDLE_MODE;
 8002cfc:	4b15      	ldr	r3, [pc, #84]	; (8002d54 <Rinse_Mode_Laundry+0x35c>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	701a      	strb	r2, [r3, #0]
		rinse_mode_start_stop_flag = STOP;
 8002d02:	4b12      	ldr	r3, [pc, #72]	; (8002d4c <Rinse_Mode_Laundry+0x354>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	701a      	strb	r2, [r3, #0]
		rinse_remain_time = 0;
 8002d08:	4b13      	ldr	r3, [pc, #76]	; (8002d58 <Rinse_Mode_Laundry+0x360>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	601a      	str	r2, [r3, #0]
		rinse_complete_time.Hours = dec2bcd(0);
 8002d0e:	2000      	movs	r0, #0
 8002d10:	f7fd fef6 	bl	8000b00 <dec2bcd>
 8002d14:	4603      	mov	r3, r0
 8002d16:	461a      	mov	r2, r3
 8002d18:	4b10      	ldr	r3, [pc, #64]	; (8002d5c <Rinse_Mode_Laundry+0x364>)
 8002d1a:	701a      	strb	r2, [r3, #0]
		rinse_complete_time.Minutes = dec2bcd(0);
 8002d1c:	2000      	movs	r0, #0
 8002d1e:	f7fd feef 	bl	8000b00 <dec2bcd>
 8002d22:	4603      	mov	r3, r0
 8002d24:	461a      	mov	r2, r3
 8002d26:	4b0d      	ldr	r3, [pc, #52]	; (8002d5c <Rinse_Mode_Laundry+0x364>)
 8002d28:	705a      	strb	r2, [r3, #1]
		rinse_complete_time.Seconds = dec2bcd(0);
 8002d2a:	2000      	movs	r0, #0
 8002d2c:	f7fd fee8 	bl	8000b00 <dec2bcd>
 8002d30:	4603      	mov	r3, r0
 8002d32:	461a      	mov	r2, r3
 8002d34:	4b09      	ldr	r3, [pc, #36]	; (8002d5c <Rinse_Mode_Laundry+0x364>)
 8002d36:	709a      	strb	r2, [r3, #2]

		LCD_Command(CLEAR_DISPLAY); // 버튼을 누르는 순간마다 clear display해줘서 쓰레기값 방지
 8002d38:	2001      	movs	r0, #1
 8002d3a:	f7fd fc3b 	bl	80005b4 <LCD_Command>
		Idle_Mode_Display(); // idle모드 화면으로 이동한다.
 8002d3e:	f000 f9f5 	bl	800312c <Idle_Mode_Display>
	}
	/************************END 버튼 입력 인터럽트 부분************************/
}
 8002d42:	bf00      	nop
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	20000f87 	.word	0x20000f87
 8002d4c:	20001002 	.word	0x20001002
 8002d50:	40021000 	.word	0x40021000
 8002d54:	20000f88 	.word	0x20000f88
 8002d58:	20000fbc 	.word	0x20000fbc
 8002d5c:	20000fd8 	.word	0x20000fd8
 8002d60:	2000043c 	.word	0x2000043c
 8002d64:	91a2b3c5 	.word	0x91a2b3c5
 8002d68:	88888889 	.word	0x88888889
 8002d6c:	40020400 	.word	0x40020400

08002d70 <Spin_Mode_Laundry>:

/*
 * desc: "세탁/헹굼/탈수" 중 "탈수"에 관련된 동작을 실행하는 함수이다.
 */
static void Spin_Mode_Laundry(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af02      	add	r7, sp, #8
	static uint8_t spin_mode_start_stop_flag = STOP;
	static uint16_t dcmotor_duty_cycle = 30;


	/************************BEGIN 기본 동작 부분************************/
	close_WashingMachine_Lid();
 8002d76:	f7fe fd45 	bl	8001804 <close_WashingMachine_Lid>
	Mode_Complete_Alarm();
 8002d7a:	f7fd fd19 	bl	80007b0 <Mode_Complete_Alarm>

	// 뚜껑이 열려있으면 동작을 중지하고 idle 화면으로 이동
	if (Check_Lid_Open())
 8002d7e:	f000 f9cd 	bl	800311c <Check_Lid_Open>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d007      	beq.n	8002d98 <Spin_Mode_Laundry+0x28>
	{
		WashingMachine_curr_status = 0;
 8002d88:	4b26      	ldr	r3, [pc, #152]	; (8002e24 <Spin_Mode_Laundry+0xb4>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	701a      	strb	r2, [r3, #0]
		LCD_Command(CLEAR_DISPLAY);
 8002d8e:	2001      	movs	r0, #1
 8002d90:	f7fd fc10 	bl	80005b4 <LCD_Command>
		Idle_Mode_Display();
 8002d94:	f000 f9ca 	bl	800312c <Idle_Mode_Display>
	}


	if (spin_mode_start_stop_flag == STOP)
 8002d98:	4b23      	ldr	r3, [pc, #140]	; (8002e28 <Spin_Mode_Laundry+0xb8>)
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d106      	bne.n	8002dae <Spin_Mode_Laundry+0x3e>
	{
		DCmotor_Break();
 8002da0:	f7fd fd86 	bl	80008b0 <DCmotor_Break>
		LEDbar_All_Off();
 8002da4:	f7fd fed0 	bl	8000b48 <LEDbar_All_Off>
		FND4digit_off();
 8002da8:	f7fd fda6 	bl	80008f8 <FND4digit_off>
 8002dac:	e05a      	b.n	8002e64 <Spin_Mode_Laundry+0xf4>
	}
	else if (spin_mode_start_stop_flag == START && spin_remain_time > 0)
 8002dae:	4b1e      	ldr	r3, [pc, #120]	; (8002e28 <Spin_Mode_Laundry+0xb8>)
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d142      	bne.n	8002e3c <Spin_Mode_Laundry+0xcc>
 8002db6:	4b1d      	ldr	r3, [pc, #116]	; (8002e2c <Spin_Mode_Laundry+0xbc>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	dd3e      	ble.n	8002e3c <Spin_Mode_Laundry+0xcc>
	{
		// 완료부저가 실행중이더라도, 다시 모드가 시작되면 당연히 부저는 꺼져야함
		mode_complete_alarm_stop_start_flag = STOP;
 8002dbe:	4b1c      	ldr	r3, [pc, #112]	; (8002e30 <Spin_Mode_Laundry+0xc0>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	701a      	strb	r2, [r3, #0]

		// 남은시간은 자동으로 1초씩 감소
		if (TIM10_10ms_WM_spin_timer > 100)
 8002dc4:	4b1b      	ldr	r3, [pc, #108]	; (8002e34 <Spin_Mode_Laundry+0xc4>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2b64      	cmp	r3, #100	; 0x64
 8002dca:	d920      	bls.n	8002e0e <Spin_Mode_Laundry+0x9e>
		{
			TIM10_10ms_WM_spin_timer = 0;
 8002dcc:	4b19      	ldr	r3, [pc, #100]	; (8002e34 <Spin_Mode_Laundry+0xc4>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	601a      	str	r2, [r3, #0]
			spin_remain_time--;
 8002dd2:	4b16      	ldr	r3, [pc, #88]	; (8002e2c <Spin_Mode_Laundry+0xbc>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	4a14      	ldr	r2, [pc, #80]	; (8002e2c <Spin_Mode_Laundry+0xbc>)
 8002dda:	6013      	str	r3, [r2, #0]
			if (spin_remain_time < 0) {spin_remain_time = 0;}
 8002ddc:	4b13      	ldr	r3, [pc, #76]	; (8002e2c <Spin_Mode_Laundry+0xbc>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	da02      	bge.n	8002dea <Spin_Mode_Laundry+0x7a>
 8002de4:	4b11      	ldr	r3, [pc, #68]	; (8002e2c <Spin_Mode_Laundry+0xbc>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	601a      	str	r2, [r3, #0]

			dcmotor_duty_cycle += 3;
 8002dea:	4b13      	ldr	r3, [pc, #76]	; (8002e38 <Spin_Mode_Laundry+0xc8>)
 8002dec:	881b      	ldrh	r3, [r3, #0]
 8002dee:	3303      	adds	r3, #3
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	4b11      	ldr	r3, [pc, #68]	; (8002e38 <Spin_Mode_Laundry+0xc8>)
 8002df4:	801a      	strh	r2, [r3, #0]
			if (dcmotor_duty_cycle > 100)
 8002df6:	4b10      	ldr	r3, [pc, #64]	; (8002e38 <Spin_Mode_Laundry+0xc8>)
 8002df8:	881b      	ldrh	r3, [r3, #0]
 8002dfa:	2b64      	cmp	r3, #100	; 0x64
 8002dfc:	d902      	bls.n	8002e04 <Spin_Mode_Laundry+0x94>
			{
				dcmotor_duty_cycle = 100;
 8002dfe:	4b0e      	ldr	r3, [pc, #56]	; (8002e38 <Spin_Mode_Laundry+0xc8>)
 8002e00:	2264      	movs	r2, #100	; 0x64
 8002e02:	801a      	strh	r2, [r3, #0]
			}

			DCmotor_Set_DutyCycle(dcmotor_duty_cycle);
 8002e04:	4b0c      	ldr	r3, [pc, #48]	; (8002e38 <Spin_Mode_Laundry+0xc8>)
 8002e06:	881b      	ldrh	r3, [r3, #0]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7fd fd63 	bl	80008d4 <DCmotor_Set_DutyCycle>
		}

		DCmotor_Forward_Rotate();
 8002e0e:	f7fd fd2b 	bl	8000868 <DCmotor_Forward_Rotate>

		LEDbar_Keepon_Up();
 8002e12:	f7fd fecf 	bl	8000bb4 <LEDbar_Keepon_Up>
		FND4digit_time_display(spin_remain_time);
 8002e16:	4b05      	ldr	r3, [pc, #20]	; (8002e2c <Spin_Mode_Laundry+0xbc>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7fd fe00 	bl	8000a20 <FND4digit_time_display>
 8002e20:	e020      	b.n	8002e64 <Spin_Mode_Laundry+0xf4>
 8002e22:	bf00      	nop
 8002e24:	20000f88 	.word	0x20000f88
 8002e28:	20001003 	.word	0x20001003
 8002e2c:	20000fc0 	.word	0x20000fc0
 8002e30:	20000f87 	.word	0x20000f87
 8002e34:	20000c1c 	.word	0x20000c1c
 8002e38:	20000114 	.word	0x20000114
	}
	else // 플래그는 start이지만 남은시간이 0이하가 된 경우 여기로 빠짐
	{
		mode_complete_alarm_stop_start_flag = START;
 8002e3c:	4bac      	ldr	r3, [pc, #688]	; (80030f0 <Spin_Mode_Laundry+0x380>)
 8002e3e:	2201      	movs	r2, #1
 8002e40:	701a      	strb	r2, [r3, #0]
		spin_mode_start_stop_flag = STOP;
 8002e42:	4bac      	ldr	r3, [pc, #688]	; (80030f4 <Spin_Mode_Laundry+0x384>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	701a      	strb	r2, [r3, #0]
		dcmotor_duty_cycle = 30;
 8002e48:	4bab      	ldr	r3, [pc, #684]	; (80030f8 <Spin_Mode_Laundry+0x388>)
 8002e4a:	221e      	movs	r2, #30
 8002e4c:	801a      	strh	r2, [r3, #0]

		DCmotor_Break();
 8002e4e:	f7fd fd2f 	bl	80008b0 <DCmotor_Break>
		LEDbar_All_Off();
 8002e52:	f7fd fe79 	bl	8000b48 <LEDbar_All_Off>
		FND4digit_off();
 8002e56:	f7fd fd4f 	bl	80008f8 <FND4digit_off>

		// 완료가 되었다면 그냥 탈수 셋팅 화면을 다시 출력
		LCD_Command(CLEAR_DISPLAY);
 8002e5a:	2001      	movs	r0, #1
 8002e5c:	f7fd fbaa 	bl	80005b4 <LCD_Command>
		Spin_Mode_Setting_display();
 8002e60:	f000 fab2 	bl	80033c8 <Spin_Mode_Setting_display>
//		Mode_Complete_Alarm();
	}
	/************************END 기본 동작 부분************************/

	/************************BEGIN 버튼 입력 인터럽트 부분************************/
	if (Get_Button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)
 8002e64:	2200      	movs	r2, #0
 8002e66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e6a:	48a4      	ldr	r0, [pc, #656]	; (80030fc <Spin_Mode_Laundry+0x38c>)
 8002e6c:	f7fd fc50 	bl	8000710 <Get_Button>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d114      	bne.n	8002ea0 <Spin_Mode_Laundry+0x130>
	{
		mode_complete_alarm_stop_start_flag = STOP; // 완료 부저가 진행중일 경우 아예 꺼버리는게 논리적으로 맞음
 8002e76:	4b9e      	ldr	r3, [pc, #632]	; (80030f0 <Spin_Mode_Laundry+0x380>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	701a      	strb	r2, [r3, #0]

		WashingMachine_curr_status++;
 8002e7c:	4ba0      	ldr	r3, [pc, #640]	; (8003100 <Spin_Mode_Laundry+0x390>)
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	3301      	adds	r3, #1
 8002e82:	b2da      	uxtb	r2, r3
 8002e84:	4b9e      	ldr	r3, [pc, #632]	; (8003100 <Spin_Mode_Laundry+0x390>)
 8002e86:	701a      	strb	r2, [r3, #0]
		WashingMachine_curr_status %= 4;
 8002e88:	4b9d      	ldr	r3, [pc, #628]	; (8003100 <Spin_Mode_Laundry+0x390>)
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	f003 0303 	and.w	r3, r3, #3
 8002e90:	b2da      	uxtb	r2, r3
 8002e92:	4b9b      	ldr	r3, [pc, #620]	; (8003100 <Spin_Mode_Laundry+0x390>)
 8002e94:	701a      	strb	r2, [r3, #0]
		LCD_Command(CLEAR_DISPLAY); // 버튼을 누르는 순간마다 clear display해줘서 쓰레기값 방지
 8002e96:	2001      	movs	r0, #1
 8002e98:	f7fd fb8c 	bl	80005b4 <LCD_Command>
		Idle_Mode_Display();
 8002e9c:	f000 f946 	bl	800312c <Idle_Mode_Display>
	}

	// 탈수 횟수를 1회 증가시킨다(1회는 7초로 간주)
	if (Get_Button(BUTTON1_GPIO_Port, BUTTON1_Pin, 1) == BUTTON_PRESS)
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ea6:	4895      	ldr	r0, [pc, #596]	; (80030fc <Spin_Mode_Laundry+0x38c>)
 8002ea8:	f7fd fc32 	bl	8000710 <Get_Button>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d109      	bne.n	8002ec6 <Spin_Mode_Laundry+0x156>
	{
		spin_remain_time += 7;
 8002eb2:	4b94      	ldr	r3, [pc, #592]	; (8003104 <Spin_Mode_Laundry+0x394>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	3307      	adds	r3, #7
 8002eb8:	4a92      	ldr	r2, [pc, #584]	; (8003104 <Spin_Mode_Laundry+0x394>)
 8002eba:	6013      	str	r3, [r2, #0]
		LCD_Command(CLEAR_DISPLAY); // 버튼을 누르는 순간마다 clear display해줘서 쓰레기값 방지
 8002ebc:	2001      	movs	r0, #1
 8002ebe:	f7fd fb79 	bl	80005b4 <LCD_Command>
		Spin_Mode_Setting_display();
 8002ec2:	f000 fa81 	bl	80033c8 <Spin_Mode_Setting_display>
	}

	// 헹굼 횟수를 1회 감소시킨다(1회는 7초로 간주)
	if (Get_Button(BUTTON2_GPIO_Port, BUTTON2_Pin, 2) == BUTTON_PRESS)
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ecc:	488b      	ldr	r0, [pc, #556]	; (80030fc <Spin_Mode_Laundry+0x38c>)
 8002ece:	f7fd fc1f 	bl	8000710 <Get_Button>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d110      	bne.n	8002efa <Spin_Mode_Laundry+0x18a>
	{
		spin_remain_time -= 7;
 8002ed8:	4b8a      	ldr	r3, [pc, #552]	; (8003104 <Spin_Mode_Laundry+0x394>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	3b07      	subs	r3, #7
 8002ede:	4a89      	ldr	r2, [pc, #548]	; (8003104 <Spin_Mode_Laundry+0x394>)
 8002ee0:	6013      	str	r3, [r2, #0]
		if (spin_remain_time < 0) {spin_remain_time = 0;}
 8002ee2:	4b88      	ldr	r3, [pc, #544]	; (8003104 <Spin_Mode_Laundry+0x394>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	da02      	bge.n	8002ef0 <Spin_Mode_Laundry+0x180>
 8002eea:	4b86      	ldr	r3, [pc, #536]	; (8003104 <Spin_Mode_Laundry+0x394>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]
		LCD_Command(CLEAR_DISPLAY); // 버튼을 누르는 순간마다 clear display해줘서 쓰레기값 방지
 8002ef0:	2001      	movs	r0, #1
 8002ef2:	f7fd fb5f 	bl	80005b4 <LCD_Command>
		Spin_Mode_Setting_display();
 8002ef6:	f000 fa67 	bl	80033c8 <Spin_Mode_Setting_display>
	}

	// 동작 시간을 설정 완료했다면, 세탁기 구동을 시작한다.
	if (Get_Button(BUTTON3_GPIO_Port, BUTTON3_Pin, 3) == BUTTON_PRESS)
 8002efa:	2203      	movs	r2, #3
 8002efc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f00:	487e      	ldr	r0, [pc, #504]	; (80030fc <Spin_Mode_Laundry+0x38c>)
 8002f02:	f7fd fc05 	bl	8000710 <Get_Button>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f040 80bc 	bne.w	8003086 <Spin_Mode_Laundry+0x316>
	{
		spin_mode_start_stop_flag = START;
 8002f0e:	4b79      	ldr	r3, [pc, #484]	; (80030f4 <Spin_Mode_Laundry+0x384>)
 8002f10:	2201      	movs	r2, #1
 8002f12:	701a      	strb	r2, [r3, #0]

		HAL_RTC_GetTime(&hrtc, &spin_complete_time, RTC_FORMAT_BCD);
 8002f14:	2201      	movs	r2, #1
 8002f16:	497c      	ldr	r1, [pc, #496]	; (8003108 <Spin_Mode_Laundry+0x398>)
 8002f18:	487c      	ldr	r0, [pc, #496]	; (800310c <Spin_Mode_Laundry+0x39c>)
 8002f1a:	f002 ff85 	bl	8005e28 <HAL_RTC_GetTime>
		spin_complete_time.Hours += dec2bcd(spin_remain_time / 3600);
 8002f1e:	4b79      	ldr	r3, [pc, #484]	; (8003104 <Spin_Mode_Laundry+0x394>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a7b      	ldr	r2, [pc, #492]	; (8003110 <Spin_Mode_Laundry+0x3a0>)
 8002f24:	fb82 1203 	smull	r1, r2, r2, r3
 8002f28:	441a      	add	r2, r3
 8002f2a:	12d2      	asrs	r2, r2, #11
 8002f2c:	17db      	asrs	r3, r3, #31
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7fd fde4 	bl	8000b00 <dec2bcd>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	4b72      	ldr	r3, [pc, #456]	; (8003108 <Spin_Mode_Laundry+0x398>)
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	4413      	add	r3, r2
 8002f42:	b2da      	uxtb	r2, r3
 8002f44:	4b70      	ldr	r3, [pc, #448]	; (8003108 <Spin_Mode_Laundry+0x398>)
 8002f46:	701a      	strb	r2, [r3, #0]
		spin_complete_time.Minutes += dec2bcd((spin_remain_time % 3600) / 60);
 8002f48:	4b6e      	ldr	r3, [pc, #440]	; (8003104 <Spin_Mode_Laundry+0x394>)
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	4b70      	ldr	r3, [pc, #448]	; (8003110 <Spin_Mode_Laundry+0x3a0>)
 8002f4e:	fb83 1302 	smull	r1, r3, r3, r2
 8002f52:	4413      	add	r3, r2
 8002f54:	12d9      	asrs	r1, r3, #11
 8002f56:	17d3      	asrs	r3, r2, #31
 8002f58:	1acb      	subs	r3, r1, r3
 8002f5a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002f5e:	fb01 f303 	mul.w	r3, r1, r3
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	4a6b      	ldr	r2, [pc, #428]	; (8003114 <Spin_Mode_Laundry+0x3a4>)
 8002f66:	fb82 1203 	smull	r1, r2, r2, r3
 8002f6a:	441a      	add	r2, r3
 8002f6c:	1152      	asrs	r2, r2, #5
 8002f6e:	17db      	asrs	r3, r3, #31
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7fd fdc3 	bl	8000b00 <dec2bcd>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	4b62      	ldr	r3, [pc, #392]	; (8003108 <Spin_Mode_Laundry+0x398>)
 8002f80:	785b      	ldrb	r3, [r3, #1]
 8002f82:	4413      	add	r3, r2
 8002f84:	b2da      	uxtb	r2, r3
 8002f86:	4b60      	ldr	r3, [pc, #384]	; (8003108 <Spin_Mode_Laundry+0x398>)
 8002f88:	705a      	strb	r2, [r3, #1]
		spin_complete_time.Seconds += dec2bcd((spin_remain_time % 3600) % 60);
 8002f8a:	4b5e      	ldr	r3, [pc, #376]	; (8003104 <Spin_Mode_Laundry+0x394>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a60      	ldr	r2, [pc, #384]	; (8003110 <Spin_Mode_Laundry+0x3a0>)
 8002f90:	fb82 1203 	smull	r1, r2, r2, r3
 8002f94:	441a      	add	r2, r3
 8002f96:	12d1      	asrs	r1, r2, #11
 8002f98:	17da      	asrs	r2, r3, #31
 8002f9a:	1a8a      	subs	r2, r1, r2
 8002f9c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002fa0:	fb01 f202 	mul.w	r2, r1, r2
 8002fa4:	1a9a      	subs	r2, r3, r2
 8002fa6:	4b5b      	ldr	r3, [pc, #364]	; (8003114 <Spin_Mode_Laundry+0x3a4>)
 8002fa8:	fb83 1302 	smull	r1, r3, r3, r2
 8002fac:	4413      	add	r3, r2
 8002fae:	1159      	asrs	r1, r3, #5
 8002fb0:	17d3      	asrs	r3, r2, #31
 8002fb2:	1ac9      	subs	r1, r1, r3
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	011b      	lsls	r3, r3, #4
 8002fb8:	1a5b      	subs	r3, r3, r1
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	1ad1      	subs	r1, r2, r3
 8002fbe:	b2cb      	uxtb	r3, r1
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7fd fd9d 	bl	8000b00 <dec2bcd>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	461a      	mov	r2, r3
 8002fca:	4b4f      	ldr	r3, [pc, #316]	; (8003108 <Spin_Mode_Laundry+0x398>)
 8002fcc:	789b      	ldrb	r3, [r3, #2]
 8002fce:	4413      	add	r3, r2
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	4b4d      	ldr	r3, [pc, #308]	; (8003108 <Spin_Mode_Laundry+0x398>)
 8002fd4:	709a      	strb	r2, [r3, #2]

		if (bcd2dec(spin_complete_time.Seconds) >= 60)
 8002fd6:	4b4c      	ldr	r3, [pc, #304]	; (8003108 <Spin_Mode_Laundry+0x398>)
 8002fd8:	789b      	ldrb	r3, [r3, #2]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fd fd74 	bl	8000ac8 <bcd2dec>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b3b      	cmp	r3, #59	; 0x3b
 8002fe4:	d915      	bls.n	8003012 <Spin_Mode_Laundry+0x2a2>
		{
			spin_complete_time.Minutes += dec2bcd(1);
 8002fe6:	2001      	movs	r0, #1
 8002fe8:	f7fd fd8a 	bl	8000b00 <dec2bcd>
 8002fec:	4603      	mov	r3, r0
 8002fee:	461a      	mov	r2, r3
 8002ff0:	4b45      	ldr	r3, [pc, #276]	; (8003108 <Spin_Mode_Laundry+0x398>)
 8002ff2:	785b      	ldrb	r3, [r3, #1]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	b2da      	uxtb	r2, r3
 8002ff8:	4b43      	ldr	r3, [pc, #268]	; (8003108 <Spin_Mode_Laundry+0x398>)
 8002ffa:	705a      	strb	r2, [r3, #1]
			spin_complete_time.Seconds -= dec2bcd(60);
 8002ffc:	203c      	movs	r0, #60	; 0x3c
 8002ffe:	f7fd fd7f 	bl	8000b00 <dec2bcd>
 8003002:	4603      	mov	r3, r0
 8003004:	461a      	mov	r2, r3
 8003006:	4b40      	ldr	r3, [pc, #256]	; (8003108 <Spin_Mode_Laundry+0x398>)
 8003008:	789b      	ldrb	r3, [r3, #2]
 800300a:	1a9b      	subs	r3, r3, r2
 800300c:	b2da      	uxtb	r2, r3
 800300e:	4b3e      	ldr	r3, [pc, #248]	; (8003108 <Spin_Mode_Laundry+0x398>)
 8003010:	709a      	strb	r2, [r3, #2]
		}
		if (bcd2dec(spin_complete_time.Minutes) >= 60)
 8003012:	4b3d      	ldr	r3, [pc, #244]	; (8003108 <Spin_Mode_Laundry+0x398>)
 8003014:	785b      	ldrb	r3, [r3, #1]
 8003016:	4618      	mov	r0, r3
 8003018:	f7fd fd56 	bl	8000ac8 <bcd2dec>
 800301c:	4603      	mov	r3, r0
 800301e:	2b3b      	cmp	r3, #59	; 0x3b
 8003020:	d915      	bls.n	800304e <Spin_Mode_Laundry+0x2de>
		{
			spin_complete_time.Hours += dec2bcd(1);
 8003022:	2001      	movs	r0, #1
 8003024:	f7fd fd6c 	bl	8000b00 <dec2bcd>
 8003028:	4603      	mov	r3, r0
 800302a:	461a      	mov	r2, r3
 800302c:	4b36      	ldr	r3, [pc, #216]	; (8003108 <Spin_Mode_Laundry+0x398>)
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	4413      	add	r3, r2
 8003032:	b2da      	uxtb	r2, r3
 8003034:	4b34      	ldr	r3, [pc, #208]	; (8003108 <Spin_Mode_Laundry+0x398>)
 8003036:	701a      	strb	r2, [r3, #0]
			spin_complete_time.Minutes -= dec2bcd(60);
 8003038:	203c      	movs	r0, #60	; 0x3c
 800303a:	f7fd fd61 	bl	8000b00 <dec2bcd>
 800303e:	4603      	mov	r3, r0
 8003040:	461a      	mov	r2, r3
 8003042:	4b31      	ldr	r3, [pc, #196]	; (8003108 <Spin_Mode_Laundry+0x398>)
 8003044:	785b      	ldrb	r3, [r3, #1]
 8003046:	1a9b      	subs	r3, r3, r2
 8003048:	b2da      	uxtb	r2, r3
 800304a:	4b2f      	ldr	r3, [pc, #188]	; (8003108 <Spin_Mode_Laundry+0x398>)
 800304c:	705a      	strb	r2, [r3, #1]
		}
		if (bcd2dec(spin_complete_time.Hours) >= 24)
 800304e:	4b2e      	ldr	r3, [pc, #184]	; (8003108 <Spin_Mode_Laundry+0x398>)
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f7fd fd38 	bl	8000ac8 <bcd2dec>
 8003058:	4603      	mov	r3, r0
 800305a:	2b17      	cmp	r3, #23
 800305c:	d90a      	bls.n	8003074 <Spin_Mode_Laundry+0x304>
		{
			// DATE를 1 올려야 하지만, 현재 해당 프로그램에서 date는 고려하고 있지 않음
			spin_complete_time.Hours -= dec2bcd(24);
 800305e:	2018      	movs	r0, #24
 8003060:	f7fd fd4e 	bl	8000b00 <dec2bcd>
 8003064:	4603      	mov	r3, r0
 8003066:	461a      	mov	r2, r3
 8003068:	4b27      	ldr	r3, [pc, #156]	; (8003108 <Spin_Mode_Laundry+0x398>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	1a9b      	subs	r3, r3, r2
 800306e:	b2da      	uxtb	r2, r3
 8003070:	4b25      	ldr	r3, [pc, #148]	; (8003108 <Spin_Mode_Laundry+0x398>)
 8003072:	701a      	strb	r2, [r3, #0]
		}

		LCD_Command(CLEAR_DISPLAY); // 버튼을 누르는 순간마다 clear display해줘서 쓰레기값 방지
 8003074:	2001      	movs	r0, #1
 8003076:	f7fd fa9d 	bl	80005b4 <LCD_Command>
		Spin_Mode_Running_display(spin_complete_time);
 800307a:	4b23      	ldr	r3, [pc, #140]	; (8003108 <Spin_Mode_Laundry+0x398>)
 800307c:	691a      	ldr	r2, [r3, #16]
 800307e:	9200      	str	r2, [sp, #0]
 8003080:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003082:	f000 f9d5 	bl	8003430 <Spin_Mode_Running_display>
	}

	// 탈수 모드를 즉시 중지하고 세탁모드를 초기화해준다.
	if (Get_Button(BUTTON4_GPIO_Port, BUTTON4_Pin, 4) == BUTTON_PRESS)
 8003086:	2204      	movs	r2, #4
 8003088:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800308c:	4822      	ldr	r0, [pc, #136]	; (8003118 <Spin_Mode_Laundry+0x3a8>)
 800308e:	f7fd fb3f 	bl	8000710 <Get_Button>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d128      	bne.n	80030ea <Spin_Mode_Laundry+0x37a>
	{
		mode_complete_alarm_stop_start_flag = STOP; // 완료 부저가 진행중일 경우 아예 꺼버리는게 논리적으로 맞음
 8003098:	4b15      	ldr	r3, [pc, #84]	; (80030f0 <Spin_Mode_Laundry+0x380>)
 800309a:	2200      	movs	r2, #0
 800309c:	701a      	strb	r2, [r3, #0]

		WashingMachine_curr_status = IDLE_MODE;
 800309e:	4b18      	ldr	r3, [pc, #96]	; (8003100 <Spin_Mode_Laundry+0x390>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	701a      	strb	r2, [r3, #0]
		spin_mode_start_stop_flag = STOP;
 80030a4:	4b13      	ldr	r3, [pc, #76]	; (80030f4 <Spin_Mode_Laundry+0x384>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	701a      	strb	r2, [r3, #0]
		dcmotor_duty_cycle = 30;
 80030aa:	4b13      	ldr	r3, [pc, #76]	; (80030f8 <Spin_Mode_Laundry+0x388>)
 80030ac:	221e      	movs	r2, #30
 80030ae:	801a      	strh	r2, [r3, #0]
		spin_remain_time = 0;
 80030b0:	4b14      	ldr	r3, [pc, #80]	; (8003104 <Spin_Mode_Laundry+0x394>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	601a      	str	r2, [r3, #0]
		spin_complete_time.Hours = dec2bcd(0);
 80030b6:	2000      	movs	r0, #0
 80030b8:	f7fd fd22 	bl	8000b00 <dec2bcd>
 80030bc:	4603      	mov	r3, r0
 80030be:	461a      	mov	r2, r3
 80030c0:	4b11      	ldr	r3, [pc, #68]	; (8003108 <Spin_Mode_Laundry+0x398>)
 80030c2:	701a      	strb	r2, [r3, #0]
		spin_complete_time.Minutes = dec2bcd(0);
 80030c4:	2000      	movs	r0, #0
 80030c6:	f7fd fd1b 	bl	8000b00 <dec2bcd>
 80030ca:	4603      	mov	r3, r0
 80030cc:	461a      	mov	r2, r3
 80030ce:	4b0e      	ldr	r3, [pc, #56]	; (8003108 <Spin_Mode_Laundry+0x398>)
 80030d0:	705a      	strb	r2, [r3, #1]
		spin_complete_time.Seconds = dec2bcd(0);
 80030d2:	2000      	movs	r0, #0
 80030d4:	f7fd fd14 	bl	8000b00 <dec2bcd>
 80030d8:	4603      	mov	r3, r0
 80030da:	461a      	mov	r2, r3
 80030dc:	4b0a      	ldr	r3, [pc, #40]	; (8003108 <Spin_Mode_Laundry+0x398>)
 80030de:	709a      	strb	r2, [r3, #2]
		LCD_Command(CLEAR_DISPLAY); // 버튼을 누르는 순간마다 clear display해줘서 쓰레기값 방지
 80030e0:	2001      	movs	r0, #1
 80030e2:	f7fd fa67 	bl	80005b4 <LCD_Command>
		Idle_Mode_Display();
 80030e6:	f000 f821 	bl	800312c <Idle_Mode_Display>
	}
	/************************END 버튼 입력 인터럽트 부분************************/
}
 80030ea:	bf00      	nop
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	20000f87 	.word	0x20000f87
 80030f4:	20001003 	.word	0x20001003
 80030f8:	20000114 	.word	0x20000114
 80030fc:	40021000 	.word	0x40021000
 8003100:	20000f88 	.word	0x20000f88
 8003104:	20000fc0 	.word	0x20000fc0
 8003108:	20000fec 	.word	0x20000fec
 800310c:	2000043c 	.word	0x2000043c
 8003110:	91a2b3c5 	.word	0x91a2b3c5
 8003114:	88888889 	.word	0x88888889
 8003118:	40020400 	.word	0x40020400

0800311c <Check_Lid_Open>:
 * desc: 세탁기의 뚜껑이 열린상태인지 닫힌 상태인지 파악한다. 뚜껑의 개폐 상태는 1초에 한번씩 체크한다.
 *       초음파센서와 뚜껑의 거리가 10cm 이하이면 닫힌 것으로 간주하고, 10cm 초과이면 열린 것으로 간주한다.
 * return: True(뚜껑이 열려있음) False(뚜껑이 닫혀있음)
 */
static bool Check_Lid_Open(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
		return false;
	}

#else

	return false;
 8003120:	2300      	movs	r3, #0

#endif
}
 8003122:	4618      	mov	r0, r3
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <Idle_Mode_Display>:

/*
 * desc: 세탁기가 IDLE 모드 일때의 화면을 I2C_LCD에 출력한다.
 */
static void Idle_Mode_Display(void)
{
 800312c:	b5b0      	push	{r4, r5, r7, lr}
 800312e:	b08c      	sub	sp, #48	; 0x30
 8003130:	af02      	add	r7, sp, #8
	uint8_t lcd_buff_1[20], lcd_buff_2[20];

	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BCD);
 8003132:	2201      	movs	r2, #1
 8003134:	4924      	ldr	r1, [pc, #144]	; (80031c8 <Idle_Mode_Display+0x9c>)
 8003136:	4825      	ldr	r0, [pc, #148]	; (80031cc <Idle_Mode_Display+0xa0>)
 8003138:	f002 fe76 	bl	8005e28 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BCD);
 800313c:	2201      	movs	r2, #1
 800313e:	4924      	ldr	r1, [pc, #144]	; (80031d0 <Idle_Mode_Display+0xa4>)
 8003140:	4822      	ldr	r0, [pc, #136]	; (80031cc <Idle_Mode_Display+0xa0>)
 8003142:	f002 ff53 	bl	8005fec <HAL_RTC_GetDate>

	sprintf(lcd_buff_1, "select [MODE]");
 8003146:	f107 0314 	add.w	r3, r7, #20
 800314a:	4922      	ldr	r1, [pc, #136]	; (80031d4 <Idle_Mode_Display+0xa8>)
 800314c:	4618      	mov	r0, r3
 800314e:	f006 f93b 	bl	80093c8 <siprintf>
	Move_Cursor(0, 0);
 8003152:	2100      	movs	r1, #0
 8003154:	2000      	movs	r0, #0
 8003156:	f7fd fac3 	bl	80006e0 <Move_Cursor>
	LCD_String(lcd_buff_1);
 800315a:	f107 0314 	add.w	r3, r7, #20
 800315e:	4618      	mov	r0, r3
 8003160:	f7fd faa9 	bl	80006b6 <LCD_String>

	if (old_time.Seconds != current_time.Seconds)
 8003164:	4b1c      	ldr	r3, [pc, #112]	; (80031d8 <Idle_Mode_Display+0xac>)
 8003166:	789a      	ldrb	r2, [r3, #2]
 8003168:	4b17      	ldr	r3, [pc, #92]	; (80031c8 <Idle_Mode_Display+0x9c>)
 800316a:	789b      	ldrb	r3, [r3, #2]
 800316c:	429a      	cmp	r2, r3
 800316e:	d022      	beq.n	80031b6 <Idle_Mode_Display+0x8a>
	{
		sprintf(lcd_buff_2, "Now>> %02d:%02d:%02d", bcd2dec(current_time.Hours), bcd2dec(current_time.Minutes), bcd2dec(current_time.Seconds));
 8003170:	4b15      	ldr	r3, [pc, #84]	; (80031c8 <Idle_Mode_Display+0x9c>)
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	4618      	mov	r0, r3
 8003176:	f7fd fca7 	bl	8000ac8 <bcd2dec>
 800317a:	4603      	mov	r3, r0
 800317c:	461c      	mov	r4, r3
 800317e:	4b12      	ldr	r3, [pc, #72]	; (80031c8 <Idle_Mode_Display+0x9c>)
 8003180:	785b      	ldrb	r3, [r3, #1]
 8003182:	4618      	mov	r0, r3
 8003184:	f7fd fca0 	bl	8000ac8 <bcd2dec>
 8003188:	4603      	mov	r3, r0
 800318a:	461d      	mov	r5, r3
 800318c:	4b0e      	ldr	r3, [pc, #56]	; (80031c8 <Idle_Mode_Display+0x9c>)
 800318e:	789b      	ldrb	r3, [r3, #2]
 8003190:	4618      	mov	r0, r3
 8003192:	f7fd fc99 	bl	8000ac8 <bcd2dec>
 8003196:	4603      	mov	r3, r0
 8003198:	4638      	mov	r0, r7
 800319a:	9300      	str	r3, [sp, #0]
 800319c:	462b      	mov	r3, r5
 800319e:	4622      	mov	r2, r4
 80031a0:	490e      	ldr	r1, [pc, #56]	; (80031dc <Idle_Mode_Display+0xb0>)
 80031a2:	f006 f911 	bl	80093c8 <siprintf>
		Move_Cursor(1, 0);
 80031a6:	2100      	movs	r1, #0
 80031a8:	2001      	movs	r0, #1
 80031aa:	f7fd fa99 	bl	80006e0 <Move_Cursor>
		LCD_String(lcd_buff_2);
 80031ae:	463b      	mov	r3, r7
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7fd fa80 	bl	80006b6 <LCD_String>
	}
	old_time.Seconds = current_time.Seconds;
 80031b6:	4b04      	ldr	r3, [pc, #16]	; (80031c8 <Idle_Mode_Display+0x9c>)
 80031b8:	789a      	ldrb	r2, [r3, #2]
 80031ba:	4b07      	ldr	r3, [pc, #28]	; (80031d8 <Idle_Mode_Display+0xac>)
 80031bc:	709a      	strb	r2, [r3, #2]
}
 80031be:	bf00      	nop
 80031c0:	3728      	adds	r7, #40	; 0x28
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bdb0      	pop	{r4, r5, r7, pc}
 80031c6:	bf00      	nop
 80031c8:	20000fa0 	.word	0x20000fa0
 80031cc:	2000043c 	.word	0x2000043c
 80031d0:	20000fb4 	.word	0x20000fb4
 80031d4:	0800a4b0 	.word	0x0800a4b0
 80031d8:	20000f8c 	.word	0x20000f8c
 80031dc:	0800a4c0 	.word	0x0800a4c0

080031e0 <Wash_Mode_Setting_display>:

/*
 * desc: 세탁기가 세탁모드 일때, 세탁을 몇회 시행할 예정인지 대한 정보를 I2C_LCD에 출력한다.
 */
static void Wash_Mode_Setting_display(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b08a      	sub	sp, #40	; 0x28
 80031e4:	af00      	add	r7, sp, #0
	uint8_t lcd_buff_1[20], lcd_buff_2[20];

	sprintf(lcd_buff_1, "  Manual [Wash]");
 80031e6:	f107 0314 	add.w	r3, r7, #20
 80031ea:	4913      	ldr	r1, [pc, #76]	; (8003238 <Wash_Mode_Setting_display+0x58>)
 80031ec:	4618      	mov	r0, r3
 80031ee:	f006 f8eb 	bl	80093c8 <siprintf>
	Move_Cursor(0, 0);
 80031f2:	2100      	movs	r1, #0
 80031f4:	2000      	movs	r0, #0
 80031f6:	f7fd fa73 	bl	80006e0 <Move_Cursor>
	LCD_String(lcd_buff_1);
 80031fa:	f107 0314 	add.w	r3, r7, #20
 80031fe:	4618      	mov	r0, r3
 8003200:	f7fd fa59 	bl	80006b6 <LCD_String>

	sprintf(lcd_buff_2, "Repeat [%d]times", wash_remain_time / 10);
 8003204:	4b0d      	ldr	r3, [pc, #52]	; (800323c <Wash_Mode_Setting_display+0x5c>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a0d      	ldr	r2, [pc, #52]	; (8003240 <Wash_Mode_Setting_display+0x60>)
 800320a:	fb82 1203 	smull	r1, r2, r2, r3
 800320e:	1092      	asrs	r2, r2, #2
 8003210:	17db      	asrs	r3, r3, #31
 8003212:	1ad2      	subs	r2, r2, r3
 8003214:	463b      	mov	r3, r7
 8003216:	490b      	ldr	r1, [pc, #44]	; (8003244 <Wash_Mode_Setting_display+0x64>)
 8003218:	4618      	mov	r0, r3
 800321a:	f006 f8d5 	bl	80093c8 <siprintf>
	Move_Cursor(1, 0);
 800321e:	2100      	movs	r1, #0
 8003220:	2001      	movs	r0, #1
 8003222:	f7fd fa5d 	bl	80006e0 <Move_Cursor>
	LCD_String(lcd_buff_2);
 8003226:	463b      	mov	r3, r7
 8003228:	4618      	mov	r0, r3
 800322a:	f7fd fa44 	bl	80006b6 <LCD_String>
}
 800322e:	bf00      	nop
 8003230:	3728      	adds	r7, #40	; 0x28
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	0800a4d8 	.word	0x0800a4d8
 800323c:	20000fb8 	.word	0x20000fb8
 8003240:	66666667 	.word	0x66666667
 8003244:	0800a4e8 	.word	0x0800a4e8

08003248 <Wash_Mode_Running_display>:
/*
 * desc: 세탁기가 세탁모드 일때, 예정된 세탁을 모두 시행할 경우 예상 완료시간이 언제인지에 대한 정보를 I2C_LCD에 출력한다.
 * param1: 예상 완료시간에 대한 정보를 담고 있는 RTC_Time 구조체
 */
static void Wash_Mode_Running_display(RTC_TimeTypeDef complete_time)
{
 8003248:	b084      	sub	sp, #16
 800324a:	b5b0      	push	{r4, r5, r7, lr}
 800324c:	b08c      	sub	sp, #48	; 0x30
 800324e:	af02      	add	r7, sp, #8
 8003250:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8003254:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t lcd_buff_1[20], lcd_buff_2[20];

	sprintf(lcd_buff_1, "  Manual [Wash]");
 8003258:	f107 0314 	add.w	r3, r7, #20
 800325c:	491b      	ldr	r1, [pc, #108]	; (80032cc <Wash_Mode_Running_display+0x84>)
 800325e:	4618      	mov	r0, r3
 8003260:	f006 f8b2 	bl	80093c8 <siprintf>
	Move_Cursor(0, 0);
 8003264:	2100      	movs	r1, #0
 8003266:	2000      	movs	r0, #0
 8003268:	f7fd fa3a 	bl	80006e0 <Move_Cursor>
	LCD_String(lcd_buff_1);
 800326c:	f107 0314 	add.w	r3, r7, #20
 8003270:	4618      	mov	r0, r3
 8003272:	f7fd fa20 	bl	80006b6 <LCD_String>

	sprintf(lcd_buff_2, "Cplt>> %02d:%02d:%02d", bcd2dec(complete_time.Hours), bcd2dec(complete_time.Minutes), bcd2dec(complete_time.Seconds));
 8003276:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800327a:	4618      	mov	r0, r3
 800327c:	f7fd fc24 	bl	8000ac8 <bcd2dec>
 8003280:	4603      	mov	r3, r0
 8003282:	461c      	mov	r4, r3
 8003284:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8003288:	4618      	mov	r0, r3
 800328a:	f7fd fc1d 	bl	8000ac8 <bcd2dec>
 800328e:	4603      	mov	r3, r0
 8003290:	461d      	mov	r5, r3
 8003292:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8003296:	4618      	mov	r0, r3
 8003298:	f7fd fc16 	bl	8000ac8 <bcd2dec>
 800329c:	4603      	mov	r3, r0
 800329e:	4638      	mov	r0, r7
 80032a0:	9300      	str	r3, [sp, #0]
 80032a2:	462b      	mov	r3, r5
 80032a4:	4622      	mov	r2, r4
 80032a6:	490a      	ldr	r1, [pc, #40]	; (80032d0 <Wash_Mode_Running_display+0x88>)
 80032a8:	f006 f88e 	bl	80093c8 <siprintf>
	Move_Cursor(1, 0);
 80032ac:	2100      	movs	r1, #0
 80032ae:	2001      	movs	r0, #1
 80032b0:	f7fd fa16 	bl	80006e0 <Move_Cursor>
	LCD_String(lcd_buff_2);
 80032b4:	463b      	mov	r3, r7
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7fd f9fd 	bl	80006b6 <LCD_String>
}
 80032bc:	bf00      	nop
 80032be:	3728      	adds	r7, #40	; 0x28
 80032c0:	46bd      	mov	sp, r7
 80032c2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80032c6:	b004      	add	sp, #16
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	0800a4d8 	.word	0x0800a4d8
 80032d0:	0800a4fc 	.word	0x0800a4fc

080032d4 <Rinse_Mode_Setting_display>:

/*
 * desc: 세탁기가 헹굼모드 일때, 헹굼을 몇회 시행할 예정인지 대한 정보를 I2C_LCD에 출력한다.
 */
static void Rinse_Mode_Setting_display(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b08a      	sub	sp, #40	; 0x28
 80032d8:	af00      	add	r7, sp, #0
	uint8_t lcd_buff_1[20], lcd_buff_2[20];

	sprintf(lcd_buff_1, "  Manual [Rinse]");
 80032da:	f107 0314 	add.w	r3, r7, #20
 80032de:	4913      	ldr	r1, [pc, #76]	; (800332c <Rinse_Mode_Setting_display+0x58>)
 80032e0:	4618      	mov	r0, r3
 80032e2:	f006 f871 	bl	80093c8 <siprintf>
	Move_Cursor(0, 0);
 80032e6:	2100      	movs	r1, #0
 80032e8:	2000      	movs	r0, #0
 80032ea:	f7fd f9f9 	bl	80006e0 <Move_Cursor>
	LCD_String(lcd_buff_1);
 80032ee:	f107 0314 	add.w	r3, r7, #20
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7fd f9df 	bl	80006b6 <LCD_String>

	sprintf(lcd_buff_2, "Repeat [%d]times", rinse_remain_time / 10);
 80032f8:	4b0d      	ldr	r3, [pc, #52]	; (8003330 <Rinse_Mode_Setting_display+0x5c>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a0d      	ldr	r2, [pc, #52]	; (8003334 <Rinse_Mode_Setting_display+0x60>)
 80032fe:	fb82 1203 	smull	r1, r2, r2, r3
 8003302:	1092      	asrs	r2, r2, #2
 8003304:	17db      	asrs	r3, r3, #31
 8003306:	1ad2      	subs	r2, r2, r3
 8003308:	463b      	mov	r3, r7
 800330a:	490b      	ldr	r1, [pc, #44]	; (8003338 <Rinse_Mode_Setting_display+0x64>)
 800330c:	4618      	mov	r0, r3
 800330e:	f006 f85b 	bl	80093c8 <siprintf>
	Move_Cursor(1, 0);
 8003312:	2100      	movs	r1, #0
 8003314:	2001      	movs	r0, #1
 8003316:	f7fd f9e3 	bl	80006e0 <Move_Cursor>
	LCD_String(lcd_buff_2);
 800331a:	463b      	mov	r3, r7
 800331c:	4618      	mov	r0, r3
 800331e:	f7fd f9ca 	bl	80006b6 <LCD_String>
}
 8003322:	bf00      	nop
 8003324:	3728      	adds	r7, #40	; 0x28
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	0800a514 	.word	0x0800a514
 8003330:	20000fbc 	.word	0x20000fbc
 8003334:	66666667 	.word	0x66666667
 8003338:	0800a4e8 	.word	0x0800a4e8

0800333c <Rinse_Mode_Running_display>:
/*
 * desc: 세탁기가 헹굼모드 일때, 예정된 헹굼을 모두 시행할 경우 예상 완료시간이 언제인지에 대한 정보를 I2C_LCD에 출력한다.
 * param1: 예상 완료시간에 대한 정보를 담고 있는 RTC_Time 구조체
 */
static void Rinse_Mode_Running_display(RTC_TimeTypeDef complete_time)
{
 800333c:	b084      	sub	sp, #16
 800333e:	b5b0      	push	{r4, r5, r7, lr}
 8003340:	b08c      	sub	sp, #48	; 0x30
 8003342:	af02      	add	r7, sp, #8
 8003344:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8003348:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t lcd_buff_1[20], lcd_buff_2[20];

	sprintf(lcd_buff_1, "  Manual [Rinse]");
 800334c:	f107 0314 	add.w	r3, r7, #20
 8003350:	491b      	ldr	r1, [pc, #108]	; (80033c0 <Rinse_Mode_Running_display+0x84>)
 8003352:	4618      	mov	r0, r3
 8003354:	f006 f838 	bl	80093c8 <siprintf>
	Move_Cursor(0, 0);
 8003358:	2100      	movs	r1, #0
 800335a:	2000      	movs	r0, #0
 800335c:	f7fd f9c0 	bl	80006e0 <Move_Cursor>
	LCD_String(lcd_buff_1);
 8003360:	f107 0314 	add.w	r3, r7, #20
 8003364:	4618      	mov	r0, r3
 8003366:	f7fd f9a6 	bl	80006b6 <LCD_String>

	sprintf(lcd_buff_2, "Cplt>> %02d:%02d:%02d", bcd2dec(complete_time.Hours), bcd2dec(complete_time.Minutes), bcd2dec(complete_time.Seconds));
 800336a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800336e:	4618      	mov	r0, r3
 8003370:	f7fd fbaa 	bl	8000ac8 <bcd2dec>
 8003374:	4603      	mov	r3, r0
 8003376:	461c      	mov	r4, r3
 8003378:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800337c:	4618      	mov	r0, r3
 800337e:	f7fd fba3 	bl	8000ac8 <bcd2dec>
 8003382:	4603      	mov	r3, r0
 8003384:	461d      	mov	r5, r3
 8003386:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800338a:	4618      	mov	r0, r3
 800338c:	f7fd fb9c 	bl	8000ac8 <bcd2dec>
 8003390:	4603      	mov	r3, r0
 8003392:	4638      	mov	r0, r7
 8003394:	9300      	str	r3, [sp, #0]
 8003396:	462b      	mov	r3, r5
 8003398:	4622      	mov	r2, r4
 800339a:	490a      	ldr	r1, [pc, #40]	; (80033c4 <Rinse_Mode_Running_display+0x88>)
 800339c:	f006 f814 	bl	80093c8 <siprintf>
	Move_Cursor(1, 0);
 80033a0:	2100      	movs	r1, #0
 80033a2:	2001      	movs	r0, #1
 80033a4:	f7fd f99c 	bl	80006e0 <Move_Cursor>
	LCD_String(lcd_buff_2);
 80033a8:	463b      	mov	r3, r7
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7fd f983 	bl	80006b6 <LCD_String>
}
 80033b0:	bf00      	nop
 80033b2:	3728      	adds	r7, #40	; 0x28
 80033b4:	46bd      	mov	sp, r7
 80033b6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80033ba:	b004      	add	sp, #16
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	0800a514 	.word	0x0800a514
 80033c4:	0800a4fc 	.word	0x0800a4fc

080033c8 <Spin_Mode_Setting_display>:

/*
 * desc: 세탁기가 탈수모드 일때, 탈수를 몇회 시행할 예정인지 대한 정보를 I2C_LCD에 출력한다.
 */
static void Spin_Mode_Setting_display(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b08a      	sub	sp, #40	; 0x28
 80033cc:	af00      	add	r7, sp, #0
	uint8_t lcd_buff_1[20], lcd_buff_2[20];

	sprintf(lcd_buff_1, "  Manual [Spin]");
 80033ce:	f107 0314 	add.w	r3, r7, #20
 80033d2:	4913      	ldr	r1, [pc, #76]	; (8003420 <Spin_Mode_Setting_display+0x58>)
 80033d4:	4618      	mov	r0, r3
 80033d6:	f005 fff7 	bl	80093c8 <siprintf>
	Move_Cursor(0, 0);
 80033da:	2100      	movs	r1, #0
 80033dc:	2000      	movs	r0, #0
 80033de:	f7fd f97f 	bl	80006e0 <Move_Cursor>
	LCD_String(lcd_buff_1);
 80033e2:	f107 0314 	add.w	r3, r7, #20
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7fd f965 	bl	80006b6 <LCD_String>

	sprintf(lcd_buff_2, "Repeat [%d]times", spin_remain_time / 10);
 80033ec:	4b0d      	ldr	r3, [pc, #52]	; (8003424 <Spin_Mode_Setting_display+0x5c>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a0d      	ldr	r2, [pc, #52]	; (8003428 <Spin_Mode_Setting_display+0x60>)
 80033f2:	fb82 1203 	smull	r1, r2, r2, r3
 80033f6:	1092      	asrs	r2, r2, #2
 80033f8:	17db      	asrs	r3, r3, #31
 80033fa:	1ad2      	subs	r2, r2, r3
 80033fc:	463b      	mov	r3, r7
 80033fe:	490b      	ldr	r1, [pc, #44]	; (800342c <Spin_Mode_Setting_display+0x64>)
 8003400:	4618      	mov	r0, r3
 8003402:	f005 ffe1 	bl	80093c8 <siprintf>
	Move_Cursor(1, 0);
 8003406:	2100      	movs	r1, #0
 8003408:	2001      	movs	r0, #1
 800340a:	f7fd f969 	bl	80006e0 <Move_Cursor>
	LCD_String(lcd_buff_2);
 800340e:	463b      	mov	r3, r7
 8003410:	4618      	mov	r0, r3
 8003412:	f7fd f950 	bl	80006b6 <LCD_String>
}
 8003416:	bf00      	nop
 8003418:	3728      	adds	r7, #40	; 0x28
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	0800a528 	.word	0x0800a528
 8003424:	20000fc0 	.word	0x20000fc0
 8003428:	66666667 	.word	0x66666667
 800342c:	0800a4e8 	.word	0x0800a4e8

08003430 <Spin_Mode_Running_display>:
/*
 * desc: 세탁기가 탈수모드 일때, 예정된 탈수를 모두 시행할 경우 예상 완료시간이 언제인지에 대한 정보를 I2C_LCD에 출력한다.
 * param1: 예상 완료시간에 대한 정보를 담고 있는 RTC_Time 구조체
 */
static void Spin_Mode_Running_display(RTC_TimeTypeDef complete_time)
{
 8003430:	b084      	sub	sp, #16
 8003432:	b5b0      	push	{r4, r5, r7, lr}
 8003434:	b08c      	sub	sp, #48	; 0x30
 8003436:	af02      	add	r7, sp, #8
 8003438:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800343c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t lcd_buff_1[20], lcd_buff_2[20];

	sprintf(lcd_buff_1, "  Manual [Spin]");
 8003440:	f107 0314 	add.w	r3, r7, #20
 8003444:	491b      	ldr	r1, [pc, #108]	; (80034b4 <Spin_Mode_Running_display+0x84>)
 8003446:	4618      	mov	r0, r3
 8003448:	f005 ffbe 	bl	80093c8 <siprintf>
	Move_Cursor(0, 0);
 800344c:	2100      	movs	r1, #0
 800344e:	2000      	movs	r0, #0
 8003450:	f7fd f946 	bl	80006e0 <Move_Cursor>
	LCD_String(lcd_buff_1);
 8003454:	f107 0314 	add.w	r3, r7, #20
 8003458:	4618      	mov	r0, r3
 800345a:	f7fd f92c 	bl	80006b6 <LCD_String>

	sprintf(lcd_buff_2, "Cplt>> %02d:%02d:%02d", bcd2dec(complete_time.Hours), bcd2dec(complete_time.Minutes), bcd2dec(complete_time.Seconds));
 800345e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8003462:	4618      	mov	r0, r3
 8003464:	f7fd fb30 	bl	8000ac8 <bcd2dec>
 8003468:	4603      	mov	r3, r0
 800346a:	461c      	mov	r4, r3
 800346c:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8003470:	4618      	mov	r0, r3
 8003472:	f7fd fb29 	bl	8000ac8 <bcd2dec>
 8003476:	4603      	mov	r3, r0
 8003478:	461d      	mov	r5, r3
 800347a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800347e:	4618      	mov	r0, r3
 8003480:	f7fd fb22 	bl	8000ac8 <bcd2dec>
 8003484:	4603      	mov	r3, r0
 8003486:	4638      	mov	r0, r7
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	462b      	mov	r3, r5
 800348c:	4622      	mov	r2, r4
 800348e:	490a      	ldr	r1, [pc, #40]	; (80034b8 <Spin_Mode_Running_display+0x88>)
 8003490:	f005 ff9a 	bl	80093c8 <siprintf>
	Move_Cursor(1, 0);
 8003494:	2100      	movs	r1, #0
 8003496:	2001      	movs	r0, #1
 8003498:	f7fd f922 	bl	80006e0 <Move_Cursor>
	LCD_String(lcd_buff_2);
 800349c:	463b      	mov	r3, r7
 800349e:	4618      	mov	r0, r3
 80034a0:	f7fd f909 	bl	80006b6 <LCD_String>
}
 80034a4:	bf00      	nop
 80034a6:	3728      	adds	r7, #40	; 0x28
 80034a8:	46bd      	mov	sp, r7
 80034aa:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80034ae:	b004      	add	sp, #16
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	0800a528 	.word	0x0800a528
 80034b8:	0800a4fc 	.word	0x0800a4fc

080034bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80034bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80034f4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80034c0:	480d      	ldr	r0, [pc, #52]	; (80034f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80034c2:	490e      	ldr	r1, [pc, #56]	; (80034fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80034c4:	4a0e      	ldr	r2, [pc, #56]	; (8003500 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80034c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034c8:	e002      	b.n	80034d0 <LoopCopyDataInit>

080034ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034ce:	3304      	adds	r3, #4

080034d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034d4:	d3f9      	bcc.n	80034ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034d6:	4a0b      	ldr	r2, [pc, #44]	; (8003504 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80034d8:	4c0b      	ldr	r4, [pc, #44]	; (8003508 <LoopFillZerobss+0x26>)
  movs r3, #0
 80034da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034dc:	e001      	b.n	80034e2 <LoopFillZerobss>

080034de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034e0:	3204      	adds	r2, #4

080034e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034e4:	d3fb      	bcc.n	80034de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80034e6:	f7fe febf 	bl	8002268 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80034ea:	f005 fecb 	bl	8009284 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80034ee:	f7fd fbdf 	bl	8000cb0 <main>
  bx  lr    
 80034f2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80034f4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80034f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034fc:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8003500:	0800a5f8 	.word	0x0800a5f8
  ldr r2, =_sbss
 8003504:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8003508:	20001018 	.word	0x20001018

0800350c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800350c:	e7fe      	b.n	800350c <ADC_IRQHandler>
	...

08003510 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003514:	4b0e      	ldr	r3, [pc, #56]	; (8003550 <HAL_Init+0x40>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a0d      	ldr	r2, [pc, #52]	; (8003550 <HAL_Init+0x40>)
 800351a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800351e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003520:	4b0b      	ldr	r3, [pc, #44]	; (8003550 <HAL_Init+0x40>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a0a      	ldr	r2, [pc, #40]	; (8003550 <HAL_Init+0x40>)
 8003526:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800352a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800352c:	4b08      	ldr	r3, [pc, #32]	; (8003550 <HAL_Init+0x40>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a07      	ldr	r2, [pc, #28]	; (8003550 <HAL_Init+0x40>)
 8003532:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003536:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003538:	2003      	movs	r0, #3
 800353a:	f000 f94f 	bl	80037dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800353e:	2000      	movs	r0, #0
 8003540:	f000 f808 	bl	8003554 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003544:	f7fe f96c 	bl	8001820 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	40023c00 	.word	0x40023c00

08003554 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800355c:	4b12      	ldr	r3, [pc, #72]	; (80035a8 <HAL_InitTick+0x54>)
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	4b12      	ldr	r3, [pc, #72]	; (80035ac <HAL_InitTick+0x58>)
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	4619      	mov	r1, r3
 8003566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800356a:	fbb3 f3f1 	udiv	r3, r3, r1
 800356e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003572:	4618      	mov	r0, r3
 8003574:	f000 f967 	bl	8003846 <HAL_SYSTICK_Config>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e00e      	b.n	80035a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2b0f      	cmp	r3, #15
 8003586:	d80a      	bhi.n	800359e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003588:	2200      	movs	r2, #0
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	f04f 30ff 	mov.w	r0, #4294967295
 8003590:	f000 f92f 	bl	80037f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003594:	4a06      	ldr	r2, [pc, #24]	; (80035b0 <HAL_InitTick+0x5c>)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800359a:	2300      	movs	r3, #0
 800359c:	e000      	b.n	80035a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3708      	adds	r7, #8
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	20000110 	.word	0x20000110
 80035ac:	2000011c 	.word	0x2000011c
 80035b0:	20000118 	.word	0x20000118

080035b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035b8:	4b06      	ldr	r3, [pc, #24]	; (80035d4 <HAL_IncTick+0x20>)
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	461a      	mov	r2, r3
 80035be:	4b06      	ldr	r3, [pc, #24]	; (80035d8 <HAL_IncTick+0x24>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4413      	add	r3, r2
 80035c4:	4a04      	ldr	r2, [pc, #16]	; (80035d8 <HAL_IncTick+0x24>)
 80035c6:	6013      	str	r3, [r2, #0]
}
 80035c8:	bf00      	nop
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	2000011c 	.word	0x2000011c
 80035d8:	20001004 	.word	0x20001004

080035dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0
  return uwTick;
 80035e0:	4b03      	ldr	r3, [pc, #12]	; (80035f0 <HAL_GetTick+0x14>)
 80035e2:	681b      	ldr	r3, [r3, #0]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	20001004 	.word	0x20001004

080035f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035fc:	f7ff ffee 	bl	80035dc <HAL_GetTick>
 8003600:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800360c:	d005      	beq.n	800361a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800360e:	4b0a      	ldr	r3, [pc, #40]	; (8003638 <HAL_Delay+0x44>)
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	461a      	mov	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	4413      	add	r3, r2
 8003618:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800361a:	bf00      	nop
 800361c:	f7ff ffde 	bl	80035dc <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	429a      	cmp	r2, r3
 800362a:	d8f7      	bhi.n	800361c <HAL_Delay+0x28>
  {
  }
}
 800362c:	bf00      	nop
 800362e:	bf00      	nop
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	2000011c 	.word	0x2000011c

0800363c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f003 0307 	and.w	r3, r3, #7
 800364a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800364c:	4b0c      	ldr	r3, [pc, #48]	; (8003680 <__NVIC_SetPriorityGrouping+0x44>)
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003652:	68ba      	ldr	r2, [r7, #8]
 8003654:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003658:	4013      	ands	r3, r2
 800365a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003664:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800366c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800366e:	4a04      	ldr	r2, [pc, #16]	; (8003680 <__NVIC_SetPriorityGrouping+0x44>)
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	60d3      	str	r3, [r2, #12]
}
 8003674:	bf00      	nop
 8003676:	3714      	adds	r7, #20
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr
 8003680:	e000ed00 	.word	0xe000ed00

08003684 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003684:	b480      	push	{r7}
 8003686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003688:	4b04      	ldr	r3, [pc, #16]	; (800369c <__NVIC_GetPriorityGrouping+0x18>)
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	0a1b      	lsrs	r3, r3, #8
 800368e:	f003 0307 	and.w	r3, r3, #7
}
 8003692:	4618      	mov	r0, r3
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr
 800369c:	e000ed00 	.word	0xe000ed00

080036a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	4603      	mov	r3, r0
 80036a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	db0b      	blt.n	80036ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036b2:	79fb      	ldrb	r3, [r7, #7]
 80036b4:	f003 021f 	and.w	r2, r3, #31
 80036b8:	4907      	ldr	r1, [pc, #28]	; (80036d8 <__NVIC_EnableIRQ+0x38>)
 80036ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036be:	095b      	lsrs	r3, r3, #5
 80036c0:	2001      	movs	r0, #1
 80036c2:	fa00 f202 	lsl.w	r2, r0, r2
 80036c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80036ca:	bf00      	nop
 80036cc:	370c      	adds	r7, #12
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	e000e100 	.word	0xe000e100

080036dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	4603      	mov	r3, r0
 80036e4:	6039      	str	r1, [r7, #0]
 80036e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	db0a      	blt.n	8003706 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	b2da      	uxtb	r2, r3
 80036f4:	490c      	ldr	r1, [pc, #48]	; (8003728 <__NVIC_SetPriority+0x4c>)
 80036f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036fa:	0112      	lsls	r2, r2, #4
 80036fc:	b2d2      	uxtb	r2, r2
 80036fe:	440b      	add	r3, r1
 8003700:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003704:	e00a      	b.n	800371c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	b2da      	uxtb	r2, r3
 800370a:	4908      	ldr	r1, [pc, #32]	; (800372c <__NVIC_SetPriority+0x50>)
 800370c:	79fb      	ldrb	r3, [r7, #7]
 800370e:	f003 030f 	and.w	r3, r3, #15
 8003712:	3b04      	subs	r3, #4
 8003714:	0112      	lsls	r2, r2, #4
 8003716:	b2d2      	uxtb	r2, r2
 8003718:	440b      	add	r3, r1
 800371a:	761a      	strb	r2, [r3, #24]
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr
 8003728:	e000e100 	.word	0xe000e100
 800372c:	e000ed00 	.word	0xe000ed00

08003730 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003730:	b480      	push	{r7}
 8003732:	b089      	sub	sp, #36	; 0x24
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f003 0307 	and.w	r3, r3, #7
 8003742:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	f1c3 0307 	rsb	r3, r3, #7
 800374a:	2b04      	cmp	r3, #4
 800374c:	bf28      	it	cs
 800374e:	2304      	movcs	r3, #4
 8003750:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	3304      	adds	r3, #4
 8003756:	2b06      	cmp	r3, #6
 8003758:	d902      	bls.n	8003760 <NVIC_EncodePriority+0x30>
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	3b03      	subs	r3, #3
 800375e:	e000      	b.n	8003762 <NVIC_EncodePriority+0x32>
 8003760:	2300      	movs	r3, #0
 8003762:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003764:	f04f 32ff 	mov.w	r2, #4294967295
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	fa02 f303 	lsl.w	r3, r2, r3
 800376e:	43da      	mvns	r2, r3
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	401a      	ands	r2, r3
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003778:	f04f 31ff 	mov.w	r1, #4294967295
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	fa01 f303 	lsl.w	r3, r1, r3
 8003782:	43d9      	mvns	r1, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003788:	4313      	orrs	r3, r2
         );
}
 800378a:	4618      	mov	r0, r3
 800378c:	3724      	adds	r7, #36	; 0x24
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
	...

08003798 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	3b01      	subs	r3, #1
 80037a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037a8:	d301      	bcc.n	80037ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037aa:	2301      	movs	r3, #1
 80037ac:	e00f      	b.n	80037ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037ae:	4a0a      	ldr	r2, [pc, #40]	; (80037d8 <SysTick_Config+0x40>)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3b01      	subs	r3, #1
 80037b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037b6:	210f      	movs	r1, #15
 80037b8:	f04f 30ff 	mov.w	r0, #4294967295
 80037bc:	f7ff ff8e 	bl	80036dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037c0:	4b05      	ldr	r3, [pc, #20]	; (80037d8 <SysTick_Config+0x40>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037c6:	4b04      	ldr	r3, [pc, #16]	; (80037d8 <SysTick_Config+0x40>)
 80037c8:	2207      	movs	r2, #7
 80037ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3708      	adds	r7, #8
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	e000e010 	.word	0xe000e010

080037dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f7ff ff29 	bl	800363c <__NVIC_SetPriorityGrouping>
}
 80037ea:	bf00      	nop
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b086      	sub	sp, #24
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	4603      	mov	r3, r0
 80037fa:	60b9      	str	r1, [r7, #8]
 80037fc:	607a      	str	r2, [r7, #4]
 80037fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003800:	2300      	movs	r3, #0
 8003802:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003804:	f7ff ff3e 	bl	8003684 <__NVIC_GetPriorityGrouping>
 8003808:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	68b9      	ldr	r1, [r7, #8]
 800380e:	6978      	ldr	r0, [r7, #20]
 8003810:	f7ff ff8e 	bl	8003730 <NVIC_EncodePriority>
 8003814:	4602      	mov	r2, r0
 8003816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800381a:	4611      	mov	r1, r2
 800381c:	4618      	mov	r0, r3
 800381e:	f7ff ff5d 	bl	80036dc <__NVIC_SetPriority>
}
 8003822:	bf00      	nop
 8003824:	3718      	adds	r7, #24
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800382a:	b580      	push	{r7, lr}
 800382c:	b082      	sub	sp, #8
 800382e:	af00      	add	r7, sp, #0
 8003830:	4603      	mov	r3, r0
 8003832:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003838:	4618      	mov	r0, r3
 800383a:	f7ff ff31 	bl	80036a0 <__NVIC_EnableIRQ>
}
 800383e:	bf00      	nop
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b082      	sub	sp, #8
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7ff ffa2 	bl	8003798 <SysTick_Config>
 8003854:	4603      	mov	r3, r0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3708      	adds	r7, #8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800385e:	b580      	push	{r7, lr}
 8003860:	b084      	sub	sp, #16
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800386a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800386c:	f7ff feb6 	bl	80035dc <HAL_GetTick>
 8003870:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b02      	cmp	r3, #2
 800387c:	d008      	beq.n	8003890 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2280      	movs	r2, #128	; 0x80
 8003882:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e052      	b.n	8003936 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f022 0216 	bic.w	r2, r2, #22
 800389e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	695a      	ldr	r2, [r3, #20]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038ae:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d103      	bne.n	80038c0 <HAL_DMA_Abort+0x62>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d007      	beq.n	80038d0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f022 0208 	bic.w	r2, r2, #8
 80038ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f022 0201 	bic.w	r2, r2, #1
 80038de:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038e0:	e013      	b.n	800390a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038e2:	f7ff fe7b 	bl	80035dc <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b05      	cmp	r3, #5
 80038ee:	d90c      	bls.n	800390a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2220      	movs	r2, #32
 80038f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2203      	movs	r2, #3
 80038fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e015      	b.n	8003936 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0301 	and.w	r3, r3, #1
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1e4      	bne.n	80038e2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800391c:	223f      	movs	r2, #63	; 0x3f
 800391e:	409a      	lsls	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800393e:	b480      	push	{r7}
 8003940:	b083      	sub	sp, #12
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b02      	cmp	r3, #2
 8003950:	d004      	beq.n	800395c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2280      	movs	r2, #128	; 0x80
 8003956:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e00c      	b.n	8003976 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2205      	movs	r2, #5
 8003960:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f022 0201 	bic.w	r2, r2, #1
 8003972:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
	...

08003984 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d101      	bne.n	8003996 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e06c      	b.n	8003a70 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800399c:	2b00      	cmp	r3, #0
 800399e:	d106      	bne.n	80039ae <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2223      	movs	r2, #35	; 0x23
 80039a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f7fd ff61 	bl	8001870 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039ae:	2300      	movs	r3, #0
 80039b0:	60bb      	str	r3, [r7, #8]
 80039b2:	4b31      	ldr	r3, [pc, #196]	; (8003a78 <HAL_ETH_Init+0xf4>)
 80039b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b6:	4a30      	ldr	r2, [pc, #192]	; (8003a78 <HAL_ETH_Init+0xf4>)
 80039b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039bc:	6453      	str	r3, [r2, #68]	; 0x44
 80039be:	4b2e      	ldr	r3, [pc, #184]	; (8003a78 <HAL_ETH_Init+0xf4>)
 80039c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039c6:	60bb      	str	r3, [r7, #8]
 80039c8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80039ca:	4b2c      	ldr	r3, [pc, #176]	; (8003a7c <HAL_ETH_Init+0xf8>)
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	4a2b      	ldr	r2, [pc, #172]	; (8003a7c <HAL_ETH_Init+0xf8>)
 80039d0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80039d4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80039d6:	4b29      	ldr	r3, [pc, #164]	; (8003a7c <HAL_ETH_Init+0xf8>)
 80039d8:	685a      	ldr	r2, [r3, #4]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	4927      	ldr	r1, [pc, #156]	; (8003a7c <HAL_ETH_Init+0xf8>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80039e4:	4b25      	ldr	r3, [pc, #148]	; (8003a7c <HAL_ETH_Init+0xf8>)
 80039e6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	6812      	ldr	r2, [r2, #0]
 80039f6:	f043 0301 	orr.w	r3, r3, #1
 80039fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80039fe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a00:	f7ff fdec 	bl	80035dc <HAL_GetTick>
 8003a04:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003a06:	e011      	b.n	8003a2c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003a08:	f7ff fde8 	bl	80035dc <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003a16:	d909      	bls.n	8003a2c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2204      	movs	r2, #4
 8003a1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	22e0      	movs	r2, #224	; 0xe0
 8003a24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e021      	b.n	8003a70 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1e4      	bne.n	8003a08 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 f958 	bl	8003cf4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f000 f9ff 	bl	8003e48 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 fa55 	bl	8003efa <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	461a      	mov	r2, r3
 8003a56:	2100      	movs	r1, #0
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 f9bd 	bl	8003dd8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2210      	movs	r2, #16
 8003a6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	40023800 	.word	0x40023800
 8003a7c:	40013800 	.word	0x40013800

08003a80 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	4b51      	ldr	r3, [pc, #324]	; (8003bdc <ETH_SetMACConfig+0x15c>)
 8003a96:	4013      	ands	r3, r2
 8003a98:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	7c1b      	ldrb	r3, [r3, #16]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d102      	bne.n	8003aa8 <ETH_SetMACConfig+0x28>
 8003aa2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003aa6:	e000      	b.n	8003aaa <ETH_SetMACConfig+0x2a>
 8003aa8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	7c5b      	ldrb	r3, [r3, #17]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d102      	bne.n	8003ab8 <ETH_SetMACConfig+0x38>
 8003ab2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003ab6:	e000      	b.n	8003aba <ETH_SetMACConfig+0x3a>
 8003ab8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003aba:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003ac0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	7fdb      	ldrb	r3, [r3, #31]
 8003ac6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003ac8:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003ace:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003ad0:	683a      	ldr	r2, [r7, #0]
 8003ad2:	7f92      	ldrb	r2, [r2, #30]
 8003ad4:	2a00      	cmp	r2, #0
 8003ad6:	d102      	bne.n	8003ade <ETH_SetMACConfig+0x5e>
 8003ad8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003adc:	e000      	b.n	8003ae0 <ETH_SetMACConfig+0x60>
 8003ade:	2200      	movs	r2, #0
                        macconf->Speed |
 8003ae0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	7f1b      	ldrb	r3, [r3, #28]
 8003ae6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003ae8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003aee:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	791b      	ldrb	r3, [r3, #4]
 8003af4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003af6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003af8:	683a      	ldr	r2, [r7, #0]
 8003afa:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003afe:	2a00      	cmp	r2, #0
 8003b00:	d102      	bne.n	8003b08 <ETH_SetMACConfig+0x88>
 8003b02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b06:	e000      	b.n	8003b0a <ETH_SetMACConfig+0x8a>
 8003b08:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003b0a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	7bdb      	ldrb	r3, [r3, #15]
 8003b10:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003b12:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003b18:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b20:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003b22:	4313      	orrs	r3, r2
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b3a:	2001      	movs	r0, #1
 8003b3c:	f7ff fd5a 	bl	80035f4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003b56:	4013      	ands	r3, r2
 8003b58:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b5e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003b66:	2a00      	cmp	r2, #0
 8003b68:	d101      	bne.n	8003b6e <ETH_SetMACConfig+0xee>
 8003b6a:	2280      	movs	r2, #128	; 0x80
 8003b6c:	e000      	b.n	8003b70 <ETH_SetMACConfig+0xf0>
 8003b6e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003b70:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003b76:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003b78:	683a      	ldr	r2, [r7, #0]
 8003b7a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8003b7e:	2a01      	cmp	r2, #1
 8003b80:	d101      	bne.n	8003b86 <ETH_SetMACConfig+0x106>
 8003b82:	2208      	movs	r2, #8
 8003b84:	e000      	b.n	8003b88 <ETH_SetMACConfig+0x108>
 8003b86:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003b88:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003b8a:	683a      	ldr	r2, [r7, #0]
 8003b8c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003b90:	2a01      	cmp	r2, #1
 8003b92:	d101      	bne.n	8003b98 <ETH_SetMACConfig+0x118>
 8003b94:	2204      	movs	r2, #4
 8003b96:	e000      	b.n	8003b9a <ETH_SetMACConfig+0x11a>
 8003b98:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003b9a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003b9c:	683a      	ldr	r2, [r7, #0]
 8003b9e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003ba2:	2a01      	cmp	r2, #1
 8003ba4:	d101      	bne.n	8003baa <ETH_SetMACConfig+0x12a>
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	e000      	b.n	8003bac <ETH_SetMACConfig+0x12c>
 8003baa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003bac:	4313      	orrs	r3, r2
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003bc4:	2001      	movs	r0, #1
 8003bc6:	f7ff fd15 	bl	80035f4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	619a      	str	r2, [r3, #24]
}
 8003bd2:	bf00      	nop
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	ff20810f 	.word	0xff20810f

08003be0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	4b3d      	ldr	r3, [pc, #244]	; (8003cf0 <ETH_SetDMAConfig+0x110>)
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	7b1b      	ldrb	r3, [r3, #12]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d102      	bne.n	8003c0c <ETH_SetDMAConfig+0x2c>
 8003c06:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003c0a:	e000      	b.n	8003c0e <ETH_SetDMAConfig+0x2e>
 8003c0c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	7b5b      	ldrb	r3, [r3, #13]
 8003c12:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003c14:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003c16:	683a      	ldr	r2, [r7, #0]
 8003c18:	7f52      	ldrb	r2, [r2, #29]
 8003c1a:	2a00      	cmp	r2, #0
 8003c1c:	d102      	bne.n	8003c24 <ETH_SetDMAConfig+0x44>
 8003c1e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003c22:	e000      	b.n	8003c26 <ETH_SetDMAConfig+0x46>
 8003c24:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003c26:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	7b9b      	ldrb	r3, [r3, #14]
 8003c2c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003c2e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003c34:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	7f1b      	ldrb	r3, [r3, #28]
 8003c3a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003c3c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	7f9b      	ldrb	r3, [r3, #30]
 8003c42:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003c44:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003c4a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c52:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003c54:	4313      	orrs	r3, r2
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c64:	461a      	mov	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c76:	2001      	movs	r0, #1
 8003c78:	f7ff fcbc 	bl	80035f4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c84:	461a      	mov	r2, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	791b      	ldrb	r3, [r3, #4]
 8003c8e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003c94:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003c9a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003ca0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003ca8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003caa:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003cb2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003cb8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	6812      	ldr	r2, [r2, #0]
 8003cbe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003cc2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003cc6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003cd4:	2001      	movs	r0, #1
 8003cd6:	f7ff fc8d 	bl	80035f4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6013      	str	r3, [r2, #0]
}
 8003ce8:	bf00      	nop
 8003cea:	3710      	adds	r7, #16
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	f8de3f23 	.word	0xf8de3f23

08003cf4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b0a6      	sub	sp, #152	; 0x98
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003d02:	2301      	movs	r3, #1
 8003d04:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003d12:	2301      	movs	r3, #1
 8003d14:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003d24:	2300      	movs	r3, #0
 8003d26:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003d30:	2300      	movs	r3, #0
 8003d32:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003d34:	2300      	movs	r3, #0
 8003d36:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003d44:	2300      	movs	r3, #0
 8003d46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003d50:	2300      	movs	r3, #0
 8003d52:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003d56:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d5a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003d5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003d60:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003d62:	2300      	movs	r3, #0
 8003d64:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003d68:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7ff fe86 	bl	8003a80 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003d74:	2301      	movs	r3, #1
 8003d76:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003d82:	2301      	movs	r3, #1
 8003d84:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003d86:	2300      	movs	r3, #0
 8003d88:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003d90:	2300      	movs	r3, #0
 8003d92:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003d96:	2300      	movs	r3, #0
 8003d98:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003da0:	2301      	movs	r3, #1
 8003da2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003da4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003da8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003daa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003dae:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003db0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003db4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003db6:	2301      	movs	r3, #1
 8003db8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003dc4:	f107 0308 	add.w	r3, r7, #8
 8003dc8:	4619      	mov	r1, r3
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7ff ff08 	bl	8003be0 <ETH_SetDMAConfig>
}
 8003dd0:	bf00      	nop
 8003dd2:	3798      	adds	r7, #152	; 0x98
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b087      	sub	sp, #28
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	3305      	adds	r3, #5
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	021b      	lsls	r3, r3, #8
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	3204      	adds	r2, #4
 8003df0:	7812      	ldrb	r2, [r2, #0]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003df6:	68ba      	ldr	r2, [r7, #8]
 8003df8:	4b11      	ldr	r3, [pc, #68]	; (8003e40 <ETH_MACAddressConfig+0x68>)
 8003dfa:	4413      	add	r3, r2
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	3303      	adds	r3, #3
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	061a      	lsls	r2, r3, #24
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	3302      	adds	r3, #2
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	041b      	lsls	r3, r3, #16
 8003e12:	431a      	orrs	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	3301      	adds	r3, #1
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	021b      	lsls	r3, r3, #8
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	7812      	ldrb	r2, [r2, #0]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003e26:	68ba      	ldr	r2, [r7, #8]
 8003e28:	4b06      	ldr	r3, [pc, #24]	; (8003e44 <ETH_MACAddressConfig+0x6c>)
 8003e2a:	4413      	add	r3, r2
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	6013      	str	r3, [r2, #0]
}
 8003e32:	bf00      	nop
 8003e34:	371c      	adds	r7, #28
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	40028040 	.word	0x40028040
 8003e44:	40028044 	.word	0x40028044

08003e48 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003e50:	2300      	movs	r3, #0
 8003e52:	60fb      	str	r3, [r7, #12]
 8003e54:	e03e      	b.n	8003ed4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	68d9      	ldr	r1, [r3, #12]
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	4413      	add	r3, r2
 8003e62:	00db      	lsls	r3, r3, #3
 8003e64:	440b      	add	r3, r1
 8003e66:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	2200      	movs	r2, #0
 8003e72:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	2200      	movs	r2, #0
 8003e78:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003e80:	68b9      	ldr	r1, [r7, #8]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	3206      	adds	r2, #6
 8003e88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d80c      	bhi.n	8003eb8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	68d9      	ldr	r1, [r3, #12]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	1c5a      	adds	r2, r3, #1
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	4413      	add	r3, r2
 8003eac:	00db      	lsls	r3, r3, #3
 8003eae:	440b      	add	r3, r1
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	60da      	str	r2, [r3, #12]
 8003eb6:	e004      	b.n	8003ec2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	60fb      	str	r3, [r7, #12]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2b03      	cmp	r3, #3
 8003ed8:	d9bd      	bls.n	8003e56 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	68da      	ldr	r2, [r3, #12]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003eec:	611a      	str	r2, [r3, #16]
}
 8003eee:	bf00      	nop
 8003ef0:	3714      	adds	r7, #20
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr

08003efa <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003efa:	b480      	push	{r7}
 8003efc:	b085      	sub	sp, #20
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003f02:	2300      	movs	r3, #0
 8003f04:	60fb      	str	r3, [r7, #12]
 8003f06:	e046      	b.n	8003f96 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6919      	ldr	r1, [r3, #16]
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	4413      	add	r3, r2
 8003f14:	00db      	lsls	r3, r3, #3
 8003f16:	440b      	add	r3, r1
 8003f18:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	2200      	movs	r2, #0
 8003f24:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	2200      	movs	r2, #0
 8003f36:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003f44:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003f4c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003f5a:	68b9      	ldr	r1, [r7, #8]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	3212      	adds	r2, #18
 8003f62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d80c      	bhi.n	8003f86 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6919      	ldr	r1, [r3, #16]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	1c5a      	adds	r2, r3, #1
 8003f74:	4613      	mov	r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	4413      	add	r3, r2
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	440b      	add	r3, r1
 8003f7e:	461a      	mov	r2, r3
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	60da      	str	r2, [r3, #12]
 8003f84:	e004      	b.n	8003f90 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	3301      	adds	r3, #1
 8003f94:	60fb      	str	r3, [r7, #12]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2b03      	cmp	r3, #3
 8003f9a:	d9b5      	bls.n	8003f08 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	691a      	ldr	r2, [r3, #16]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fc6:	60da      	str	r2, [r3, #12]
}
 8003fc8:	bf00      	nop
 8003fca:	3714      	adds	r7, #20
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b089      	sub	sp, #36	; 0x24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fea:	2300      	movs	r3, #0
 8003fec:	61fb      	str	r3, [r7, #28]
 8003fee:	e177      	b.n	80042e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	4013      	ands	r3, r2
 8004002:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	429a      	cmp	r2, r3
 800400a:	f040 8166 	bne.w	80042da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f003 0303 	and.w	r3, r3, #3
 8004016:	2b01      	cmp	r3, #1
 8004018:	d005      	beq.n	8004026 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004022:	2b02      	cmp	r3, #2
 8004024:	d130      	bne.n	8004088 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	005b      	lsls	r3, r3, #1
 8004030:	2203      	movs	r2, #3
 8004032:	fa02 f303 	lsl.w	r3, r2, r3
 8004036:	43db      	mvns	r3, r3
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	4013      	ands	r3, r2
 800403c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	68da      	ldr	r2, [r3, #12]
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	005b      	lsls	r3, r3, #1
 8004046:	fa02 f303 	lsl.w	r3, r2, r3
 800404a:	69ba      	ldr	r2, [r7, #24]
 800404c:	4313      	orrs	r3, r2
 800404e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	69ba      	ldr	r2, [r7, #24]
 8004054:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800405c:	2201      	movs	r2, #1
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	fa02 f303 	lsl.w	r3, r2, r3
 8004064:	43db      	mvns	r3, r3
 8004066:	69ba      	ldr	r2, [r7, #24]
 8004068:	4013      	ands	r3, r2
 800406a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	091b      	lsrs	r3, r3, #4
 8004072:	f003 0201 	and.w	r2, r3, #1
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	fa02 f303 	lsl.w	r3, r2, r3
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	4313      	orrs	r3, r2
 8004080:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f003 0303 	and.w	r3, r3, #3
 8004090:	2b03      	cmp	r3, #3
 8004092:	d017      	beq.n	80040c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	005b      	lsls	r3, r3, #1
 800409e:	2203      	movs	r2, #3
 80040a0:	fa02 f303 	lsl.w	r3, r2, r3
 80040a4:	43db      	mvns	r3, r3
 80040a6:	69ba      	ldr	r2, [r7, #24]
 80040a8:	4013      	ands	r3, r2
 80040aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	689a      	ldr	r2, [r3, #8]
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	005b      	lsls	r3, r3, #1
 80040b4:	fa02 f303 	lsl.w	r3, r2, r3
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f003 0303 	and.w	r3, r3, #3
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d123      	bne.n	8004118 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	08da      	lsrs	r2, r3, #3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	3208      	adds	r2, #8
 80040d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	f003 0307 	and.w	r3, r3, #7
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	220f      	movs	r2, #15
 80040e8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ec:	43db      	mvns	r3, r3
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	4013      	ands	r3, r2
 80040f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	691a      	ldr	r2, [r3, #16]
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	f003 0307 	and.w	r3, r3, #7
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	fa02 f303 	lsl.w	r3, r2, r3
 8004104:	69ba      	ldr	r2, [r7, #24]
 8004106:	4313      	orrs	r3, r2
 8004108:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	08da      	lsrs	r2, r3, #3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	3208      	adds	r2, #8
 8004112:	69b9      	ldr	r1, [r7, #24]
 8004114:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	005b      	lsls	r3, r3, #1
 8004122:	2203      	movs	r2, #3
 8004124:	fa02 f303 	lsl.w	r3, r2, r3
 8004128:	43db      	mvns	r3, r3
 800412a:	69ba      	ldr	r2, [r7, #24]
 800412c:	4013      	ands	r3, r2
 800412e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f003 0203 	and.w	r2, r3, #3
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	005b      	lsls	r3, r3, #1
 800413c:	fa02 f303 	lsl.w	r3, r2, r3
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	4313      	orrs	r3, r2
 8004144:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	69ba      	ldr	r2, [r7, #24]
 800414a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004154:	2b00      	cmp	r3, #0
 8004156:	f000 80c0 	beq.w	80042da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800415a:	2300      	movs	r3, #0
 800415c:	60fb      	str	r3, [r7, #12]
 800415e:	4b66      	ldr	r3, [pc, #408]	; (80042f8 <HAL_GPIO_Init+0x324>)
 8004160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004162:	4a65      	ldr	r2, [pc, #404]	; (80042f8 <HAL_GPIO_Init+0x324>)
 8004164:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004168:	6453      	str	r3, [r2, #68]	; 0x44
 800416a:	4b63      	ldr	r3, [pc, #396]	; (80042f8 <HAL_GPIO_Init+0x324>)
 800416c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800416e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004172:	60fb      	str	r3, [r7, #12]
 8004174:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004176:	4a61      	ldr	r2, [pc, #388]	; (80042fc <HAL_GPIO_Init+0x328>)
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	089b      	lsrs	r3, r3, #2
 800417c:	3302      	adds	r3, #2
 800417e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004182:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	f003 0303 	and.w	r3, r3, #3
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	220f      	movs	r2, #15
 800418e:	fa02 f303 	lsl.w	r3, r2, r3
 8004192:	43db      	mvns	r3, r3
 8004194:	69ba      	ldr	r2, [r7, #24]
 8004196:	4013      	ands	r3, r2
 8004198:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a58      	ldr	r2, [pc, #352]	; (8004300 <HAL_GPIO_Init+0x32c>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d037      	beq.n	8004212 <HAL_GPIO_Init+0x23e>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a57      	ldr	r2, [pc, #348]	; (8004304 <HAL_GPIO_Init+0x330>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d031      	beq.n	800420e <HAL_GPIO_Init+0x23a>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a56      	ldr	r2, [pc, #344]	; (8004308 <HAL_GPIO_Init+0x334>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d02b      	beq.n	800420a <HAL_GPIO_Init+0x236>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a55      	ldr	r2, [pc, #340]	; (800430c <HAL_GPIO_Init+0x338>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d025      	beq.n	8004206 <HAL_GPIO_Init+0x232>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a54      	ldr	r2, [pc, #336]	; (8004310 <HAL_GPIO_Init+0x33c>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d01f      	beq.n	8004202 <HAL_GPIO_Init+0x22e>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a53      	ldr	r2, [pc, #332]	; (8004314 <HAL_GPIO_Init+0x340>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d019      	beq.n	80041fe <HAL_GPIO_Init+0x22a>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a52      	ldr	r2, [pc, #328]	; (8004318 <HAL_GPIO_Init+0x344>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d013      	beq.n	80041fa <HAL_GPIO_Init+0x226>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a51      	ldr	r2, [pc, #324]	; (800431c <HAL_GPIO_Init+0x348>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d00d      	beq.n	80041f6 <HAL_GPIO_Init+0x222>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a50      	ldr	r2, [pc, #320]	; (8004320 <HAL_GPIO_Init+0x34c>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d007      	beq.n	80041f2 <HAL_GPIO_Init+0x21e>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a4f      	ldr	r2, [pc, #316]	; (8004324 <HAL_GPIO_Init+0x350>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d101      	bne.n	80041ee <HAL_GPIO_Init+0x21a>
 80041ea:	2309      	movs	r3, #9
 80041ec:	e012      	b.n	8004214 <HAL_GPIO_Init+0x240>
 80041ee:	230a      	movs	r3, #10
 80041f0:	e010      	b.n	8004214 <HAL_GPIO_Init+0x240>
 80041f2:	2308      	movs	r3, #8
 80041f4:	e00e      	b.n	8004214 <HAL_GPIO_Init+0x240>
 80041f6:	2307      	movs	r3, #7
 80041f8:	e00c      	b.n	8004214 <HAL_GPIO_Init+0x240>
 80041fa:	2306      	movs	r3, #6
 80041fc:	e00a      	b.n	8004214 <HAL_GPIO_Init+0x240>
 80041fe:	2305      	movs	r3, #5
 8004200:	e008      	b.n	8004214 <HAL_GPIO_Init+0x240>
 8004202:	2304      	movs	r3, #4
 8004204:	e006      	b.n	8004214 <HAL_GPIO_Init+0x240>
 8004206:	2303      	movs	r3, #3
 8004208:	e004      	b.n	8004214 <HAL_GPIO_Init+0x240>
 800420a:	2302      	movs	r3, #2
 800420c:	e002      	b.n	8004214 <HAL_GPIO_Init+0x240>
 800420e:	2301      	movs	r3, #1
 8004210:	e000      	b.n	8004214 <HAL_GPIO_Init+0x240>
 8004212:	2300      	movs	r3, #0
 8004214:	69fa      	ldr	r2, [r7, #28]
 8004216:	f002 0203 	and.w	r2, r2, #3
 800421a:	0092      	lsls	r2, r2, #2
 800421c:	4093      	lsls	r3, r2
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	4313      	orrs	r3, r2
 8004222:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004224:	4935      	ldr	r1, [pc, #212]	; (80042fc <HAL_GPIO_Init+0x328>)
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	089b      	lsrs	r3, r3, #2
 800422a:	3302      	adds	r3, #2
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004232:	4b3d      	ldr	r3, [pc, #244]	; (8004328 <HAL_GPIO_Init+0x354>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	43db      	mvns	r3, r3
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	4013      	ands	r3, r2
 8004240:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d003      	beq.n	8004256 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800424e:	69ba      	ldr	r2, [r7, #24]
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	4313      	orrs	r3, r2
 8004254:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004256:	4a34      	ldr	r2, [pc, #208]	; (8004328 <HAL_GPIO_Init+0x354>)
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800425c:	4b32      	ldr	r3, [pc, #200]	; (8004328 <HAL_GPIO_Init+0x354>)
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	43db      	mvns	r3, r3
 8004266:	69ba      	ldr	r2, [r7, #24]
 8004268:	4013      	ands	r3, r2
 800426a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d003      	beq.n	8004280 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004278:	69ba      	ldr	r2, [r7, #24]
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	4313      	orrs	r3, r2
 800427e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004280:	4a29      	ldr	r2, [pc, #164]	; (8004328 <HAL_GPIO_Init+0x354>)
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004286:	4b28      	ldr	r3, [pc, #160]	; (8004328 <HAL_GPIO_Init+0x354>)
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	43db      	mvns	r3, r3
 8004290:	69ba      	ldr	r2, [r7, #24]
 8004292:	4013      	ands	r3, r2
 8004294:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d003      	beq.n	80042aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80042a2:	69ba      	ldr	r2, [r7, #24]
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80042aa:	4a1f      	ldr	r2, [pc, #124]	; (8004328 <HAL_GPIO_Init+0x354>)
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80042b0:	4b1d      	ldr	r3, [pc, #116]	; (8004328 <HAL_GPIO_Init+0x354>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	43db      	mvns	r3, r3
 80042ba:	69ba      	ldr	r2, [r7, #24]
 80042bc:	4013      	ands	r3, r2
 80042be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d003      	beq.n	80042d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80042d4:	4a14      	ldr	r2, [pc, #80]	; (8004328 <HAL_GPIO_Init+0x354>)
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	3301      	adds	r3, #1
 80042de:	61fb      	str	r3, [r7, #28]
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	2b0f      	cmp	r3, #15
 80042e4:	f67f ae84 	bls.w	8003ff0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80042e8:	bf00      	nop
 80042ea:	bf00      	nop
 80042ec:	3724      	adds	r7, #36	; 0x24
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	40023800 	.word	0x40023800
 80042fc:	40013800 	.word	0x40013800
 8004300:	40020000 	.word	0x40020000
 8004304:	40020400 	.word	0x40020400
 8004308:	40020800 	.word	0x40020800
 800430c:	40020c00 	.word	0x40020c00
 8004310:	40021000 	.word	0x40021000
 8004314:	40021400 	.word	0x40021400
 8004318:	40021800 	.word	0x40021800
 800431c:	40021c00 	.word	0x40021c00
 8004320:	40022000 	.word	0x40022000
 8004324:	40022400 	.word	0x40022400
 8004328:	40013c00 	.word	0x40013c00

0800432c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800432c:	b480      	push	{r7}
 800432e:	b085      	sub	sp, #20
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	460b      	mov	r3, r1
 8004336:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	691a      	ldr	r2, [r3, #16]
 800433c:	887b      	ldrh	r3, [r7, #2]
 800433e:	4013      	ands	r3, r2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d002      	beq.n	800434a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004344:	2301      	movs	r3, #1
 8004346:	73fb      	strb	r3, [r7, #15]
 8004348:	e001      	b.n	800434e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800434a:	2300      	movs	r3, #0
 800434c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800434e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004350:	4618      	mov	r0, r3
 8004352:	3714      	adds	r7, #20
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	460b      	mov	r3, r1
 8004366:	807b      	strh	r3, [r7, #2]
 8004368:	4613      	mov	r3, r2
 800436a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800436c:	787b      	ldrb	r3, [r7, #1]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d003      	beq.n	800437a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004372:	887a      	ldrh	r2, [r7, #2]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004378:	e003      	b.n	8004382 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800437a:	887b      	ldrh	r3, [r7, #2]
 800437c:	041a      	lsls	r2, r3, #16
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	619a      	str	r2, [r3, #24]
}
 8004382:	bf00      	nop
 8004384:	370c      	adds	r7, #12
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
	...

08004390 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d101      	bne.n	80043a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e12b      	b.n	80045fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d106      	bne.n	80043bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f7fd fb20 	bl	80019fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2224      	movs	r2, #36	; 0x24
 80043c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f022 0201 	bic.w	r2, r2, #1
 80043d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80043f4:	f001 fa20 	bl	8005838 <HAL_RCC_GetPCLK1Freq>
 80043f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	4a81      	ldr	r2, [pc, #516]	; (8004604 <HAL_I2C_Init+0x274>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d807      	bhi.n	8004414 <HAL_I2C_Init+0x84>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	4a80      	ldr	r2, [pc, #512]	; (8004608 <HAL_I2C_Init+0x278>)
 8004408:	4293      	cmp	r3, r2
 800440a:	bf94      	ite	ls
 800440c:	2301      	movls	r3, #1
 800440e:	2300      	movhi	r3, #0
 8004410:	b2db      	uxtb	r3, r3
 8004412:	e006      	b.n	8004422 <HAL_I2C_Init+0x92>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	4a7d      	ldr	r2, [pc, #500]	; (800460c <HAL_I2C_Init+0x27c>)
 8004418:	4293      	cmp	r3, r2
 800441a:	bf94      	ite	ls
 800441c:	2301      	movls	r3, #1
 800441e:	2300      	movhi	r3, #0
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e0e7      	b.n	80045fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	4a78      	ldr	r2, [pc, #480]	; (8004610 <HAL_I2C_Init+0x280>)
 800442e:	fba2 2303 	umull	r2, r3, r2, r3
 8004432:	0c9b      	lsrs	r3, r3, #18
 8004434:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68ba      	ldr	r2, [r7, #8]
 8004446:	430a      	orrs	r2, r1
 8004448:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	6a1b      	ldr	r3, [r3, #32]
 8004450:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	4a6a      	ldr	r2, [pc, #424]	; (8004604 <HAL_I2C_Init+0x274>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d802      	bhi.n	8004464 <HAL_I2C_Init+0xd4>
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	3301      	adds	r3, #1
 8004462:	e009      	b.n	8004478 <HAL_I2C_Init+0xe8>
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800446a:	fb02 f303 	mul.w	r3, r2, r3
 800446e:	4a69      	ldr	r2, [pc, #420]	; (8004614 <HAL_I2C_Init+0x284>)
 8004470:	fba2 2303 	umull	r2, r3, r2, r3
 8004474:	099b      	lsrs	r3, r3, #6
 8004476:	3301      	adds	r3, #1
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	6812      	ldr	r2, [r2, #0]
 800447c:	430b      	orrs	r3, r1
 800447e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	69db      	ldr	r3, [r3, #28]
 8004486:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800448a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	495c      	ldr	r1, [pc, #368]	; (8004604 <HAL_I2C_Init+0x274>)
 8004494:	428b      	cmp	r3, r1
 8004496:	d819      	bhi.n	80044cc <HAL_I2C_Init+0x13c>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	1e59      	subs	r1, r3, #1
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	005b      	lsls	r3, r3, #1
 80044a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80044a6:	1c59      	adds	r1, r3, #1
 80044a8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80044ac:	400b      	ands	r3, r1
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00a      	beq.n	80044c8 <HAL_I2C_Init+0x138>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	1e59      	subs	r1, r3, #1
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	005b      	lsls	r3, r3, #1
 80044bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80044c0:	3301      	adds	r3, #1
 80044c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044c6:	e051      	b.n	800456c <HAL_I2C_Init+0x1dc>
 80044c8:	2304      	movs	r3, #4
 80044ca:	e04f      	b.n	800456c <HAL_I2C_Init+0x1dc>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d111      	bne.n	80044f8 <HAL_I2C_Init+0x168>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	1e58      	subs	r0, r3, #1
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6859      	ldr	r1, [r3, #4]
 80044dc:	460b      	mov	r3, r1
 80044de:	005b      	lsls	r3, r3, #1
 80044e0:	440b      	add	r3, r1
 80044e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80044e6:	3301      	adds	r3, #1
 80044e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	bf0c      	ite	eq
 80044f0:	2301      	moveq	r3, #1
 80044f2:	2300      	movne	r3, #0
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	e012      	b.n	800451e <HAL_I2C_Init+0x18e>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	1e58      	subs	r0, r3, #1
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6859      	ldr	r1, [r3, #4]
 8004500:	460b      	mov	r3, r1
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	440b      	add	r3, r1
 8004506:	0099      	lsls	r1, r3, #2
 8004508:	440b      	add	r3, r1
 800450a:	fbb0 f3f3 	udiv	r3, r0, r3
 800450e:	3301      	adds	r3, #1
 8004510:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004514:	2b00      	cmp	r3, #0
 8004516:	bf0c      	ite	eq
 8004518:	2301      	moveq	r3, #1
 800451a:	2300      	movne	r3, #0
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <HAL_I2C_Init+0x196>
 8004522:	2301      	movs	r3, #1
 8004524:	e022      	b.n	800456c <HAL_I2C_Init+0x1dc>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d10e      	bne.n	800454c <HAL_I2C_Init+0x1bc>
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	1e58      	subs	r0, r3, #1
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6859      	ldr	r1, [r3, #4]
 8004536:	460b      	mov	r3, r1
 8004538:	005b      	lsls	r3, r3, #1
 800453a:	440b      	add	r3, r1
 800453c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004540:	3301      	adds	r3, #1
 8004542:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004546:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800454a:	e00f      	b.n	800456c <HAL_I2C_Init+0x1dc>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	1e58      	subs	r0, r3, #1
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6859      	ldr	r1, [r3, #4]
 8004554:	460b      	mov	r3, r1
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	440b      	add	r3, r1
 800455a:	0099      	lsls	r1, r3, #2
 800455c:	440b      	add	r3, r1
 800455e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004562:	3301      	adds	r3, #1
 8004564:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004568:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800456c:	6879      	ldr	r1, [r7, #4]
 800456e:	6809      	ldr	r1, [r1, #0]
 8004570:	4313      	orrs	r3, r2
 8004572:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	69da      	ldr	r2, [r3, #28]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	431a      	orrs	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	430a      	orrs	r2, r1
 800458e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800459a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	6911      	ldr	r1, [r2, #16]
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	68d2      	ldr	r2, [r2, #12]
 80045a6:	4311      	orrs	r1, r2
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	6812      	ldr	r2, [r2, #0]
 80045ac:	430b      	orrs	r3, r1
 80045ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	695a      	ldr	r2, [r3, #20]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	431a      	orrs	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	430a      	orrs	r2, r1
 80045ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f042 0201 	orr.w	r2, r2, #1
 80045da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2220      	movs	r2, #32
 80045e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	000186a0 	.word	0x000186a0
 8004608:	001e847f 	.word	0x001e847f
 800460c:	003d08ff 	.word	0x003d08ff
 8004610:	431bde83 	.word	0x431bde83
 8004614:	10624dd3 	.word	0x10624dd3

08004618 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b088      	sub	sp, #32
 800461c:	af02      	add	r7, sp, #8
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	607a      	str	r2, [r7, #4]
 8004622:	461a      	mov	r2, r3
 8004624:	460b      	mov	r3, r1
 8004626:	817b      	strh	r3, [r7, #10]
 8004628:	4613      	mov	r3, r2
 800462a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800462c:	f7fe ffd6 	bl	80035dc <HAL_GetTick>
 8004630:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004638:	b2db      	uxtb	r3, r3
 800463a:	2b20      	cmp	r3, #32
 800463c:	f040 80e0 	bne.w	8004800 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	2319      	movs	r3, #25
 8004646:	2201      	movs	r2, #1
 8004648:	4970      	ldr	r1, [pc, #448]	; (800480c <HAL_I2C_Master_Transmit+0x1f4>)
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	f000 f964 	bl	8004918 <I2C_WaitOnFlagUntilTimeout>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d001      	beq.n	800465a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004656:	2302      	movs	r3, #2
 8004658:	e0d3      	b.n	8004802 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004660:	2b01      	cmp	r3, #1
 8004662:	d101      	bne.n	8004668 <HAL_I2C_Master_Transmit+0x50>
 8004664:	2302      	movs	r3, #2
 8004666:	e0cc      	b.n	8004802 <HAL_I2C_Master_Transmit+0x1ea>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0301 	and.w	r3, r3, #1
 800467a:	2b01      	cmp	r3, #1
 800467c:	d007      	beq.n	800468e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f042 0201 	orr.w	r2, r2, #1
 800468c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800469c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2221      	movs	r2, #33	; 0x21
 80046a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2210      	movs	r2, #16
 80046aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	893a      	ldrh	r2, [r7, #8]
 80046be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c4:	b29a      	uxth	r2, r3
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	4a50      	ldr	r2, [pc, #320]	; (8004810 <HAL_I2C_Master_Transmit+0x1f8>)
 80046ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80046d0:	8979      	ldrh	r1, [r7, #10]
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	6a3a      	ldr	r2, [r7, #32]
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	f000 f89c 	bl	8004814 <I2C_MasterRequestWrite>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d001      	beq.n	80046e6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e08d      	b.n	8004802 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046e6:	2300      	movs	r3, #0
 80046e8:	613b      	str	r3, [r7, #16]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	695b      	ldr	r3, [r3, #20]
 80046f0:	613b      	str	r3, [r7, #16]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	613b      	str	r3, [r7, #16]
 80046fa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80046fc:	e066      	b.n	80047cc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	6a39      	ldr	r1, [r7, #32]
 8004702:	68f8      	ldr	r0, [r7, #12]
 8004704:	f000 f9de 	bl	8004ac4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00d      	beq.n	800472a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004712:	2b04      	cmp	r3, #4
 8004714:	d107      	bne.n	8004726 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004724:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e06b      	b.n	8004802 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472e:	781a      	ldrb	r2, [r3, #0]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473a:	1c5a      	adds	r2, r3, #1
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004744:	b29b      	uxth	r3, r3
 8004746:	3b01      	subs	r3, #1
 8004748:	b29a      	uxth	r2, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004752:	3b01      	subs	r3, #1
 8004754:	b29a      	uxth	r2, r3
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	695b      	ldr	r3, [r3, #20]
 8004760:	f003 0304 	and.w	r3, r3, #4
 8004764:	2b04      	cmp	r3, #4
 8004766:	d11b      	bne.n	80047a0 <HAL_I2C_Master_Transmit+0x188>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800476c:	2b00      	cmp	r3, #0
 800476e:	d017      	beq.n	80047a0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004774:	781a      	ldrb	r2, [r3, #0]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004780:	1c5a      	adds	r2, r3, #1
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800478a:	b29b      	uxth	r3, r3
 800478c:	3b01      	subs	r3, #1
 800478e:	b29a      	uxth	r2, r3
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004798:	3b01      	subs	r3, #1
 800479a:	b29a      	uxth	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047a0:	697a      	ldr	r2, [r7, #20]
 80047a2:	6a39      	ldr	r1, [r7, #32]
 80047a4:	68f8      	ldr	r0, [r7, #12]
 80047a6:	f000 f9ce 	bl	8004b46 <I2C_WaitOnBTFFlagUntilTimeout>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00d      	beq.n	80047cc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b4:	2b04      	cmp	r3, #4
 80047b6:	d107      	bne.n	80047c8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047c6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e01a      	b.n	8004802 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d194      	bne.n	80046fe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2220      	movs	r2, #32
 80047e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80047fc:	2300      	movs	r3, #0
 80047fe:	e000      	b.n	8004802 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004800:	2302      	movs	r3, #2
  }
}
 8004802:	4618      	mov	r0, r3
 8004804:	3718      	adds	r7, #24
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	00100002 	.word	0x00100002
 8004810:	ffff0000 	.word	0xffff0000

08004814 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b088      	sub	sp, #32
 8004818:	af02      	add	r7, sp, #8
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	607a      	str	r2, [r7, #4]
 800481e:	603b      	str	r3, [r7, #0]
 8004820:	460b      	mov	r3, r1
 8004822:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004828:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	2b08      	cmp	r3, #8
 800482e:	d006      	beq.n	800483e <I2C_MasterRequestWrite+0x2a>
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d003      	beq.n	800483e <I2C_MasterRequestWrite+0x2a>
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800483c:	d108      	bne.n	8004850 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800484c:	601a      	str	r2, [r3, #0]
 800484e:	e00b      	b.n	8004868 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004854:	2b12      	cmp	r3, #18
 8004856:	d107      	bne.n	8004868 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004866:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	9300      	str	r3, [sp, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f000 f84f 	bl	8004918 <I2C_WaitOnFlagUntilTimeout>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d00d      	beq.n	800489c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800488a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800488e:	d103      	bne.n	8004898 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004896:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e035      	b.n	8004908 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048a4:	d108      	bne.n	80048b8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80048a6:	897b      	ldrh	r3, [r7, #10]
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	461a      	mov	r2, r3
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80048b4:	611a      	str	r2, [r3, #16]
 80048b6:	e01b      	b.n	80048f0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80048b8:	897b      	ldrh	r3, [r7, #10]
 80048ba:	11db      	asrs	r3, r3, #7
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	f003 0306 	and.w	r3, r3, #6
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	f063 030f 	orn	r3, r3, #15
 80048c8:	b2da      	uxtb	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	490e      	ldr	r1, [pc, #56]	; (8004910 <I2C_MasterRequestWrite+0xfc>)
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	f000 f875 	bl	80049c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e010      	b.n	8004908 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80048e6:	897b      	ldrh	r3, [r7, #10]
 80048e8:	b2da      	uxtb	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	4907      	ldr	r1, [pc, #28]	; (8004914 <I2C_MasterRequestWrite+0x100>)
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f000 f865 	bl	80049c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d001      	beq.n	8004906 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e000      	b.n	8004908 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3718      	adds	r7, #24
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}
 8004910:	00010008 	.word	0x00010008
 8004914:	00010002 	.word	0x00010002

08004918 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	603b      	str	r3, [r7, #0]
 8004924:	4613      	mov	r3, r2
 8004926:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004928:	e025      	b.n	8004976 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004930:	d021      	beq.n	8004976 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004932:	f7fe fe53 	bl	80035dc <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	683a      	ldr	r2, [r7, #0]
 800493e:	429a      	cmp	r2, r3
 8004940:	d302      	bcc.n	8004948 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d116      	bne.n	8004976 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2220      	movs	r2, #32
 8004952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004962:	f043 0220 	orr.w	r2, r3, #32
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e023      	b.n	80049be <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	0c1b      	lsrs	r3, r3, #16
 800497a:	b2db      	uxtb	r3, r3
 800497c:	2b01      	cmp	r3, #1
 800497e:	d10d      	bne.n	800499c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	43da      	mvns	r2, r3
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	4013      	ands	r3, r2
 800498c:	b29b      	uxth	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	bf0c      	ite	eq
 8004992:	2301      	moveq	r3, #1
 8004994:	2300      	movne	r3, #0
 8004996:	b2db      	uxtb	r3, r3
 8004998:	461a      	mov	r2, r3
 800499a:	e00c      	b.n	80049b6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	699b      	ldr	r3, [r3, #24]
 80049a2:	43da      	mvns	r2, r3
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	4013      	ands	r3, r2
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	bf0c      	ite	eq
 80049ae:	2301      	moveq	r3, #1
 80049b0:	2300      	movne	r3, #0
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	461a      	mov	r2, r3
 80049b6:	79fb      	ldrb	r3, [r7, #7]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d0b6      	beq.n	800492a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b084      	sub	sp, #16
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	60f8      	str	r0, [r7, #12]
 80049ce:	60b9      	str	r1, [r7, #8]
 80049d0:	607a      	str	r2, [r7, #4]
 80049d2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049d4:	e051      	b.n	8004a7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	695b      	ldr	r3, [r3, #20]
 80049dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049e4:	d123      	bne.n	8004a2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049f4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80049fe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2220      	movs	r2, #32
 8004a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1a:	f043 0204 	orr.w	r2, r3, #4
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e046      	b.n	8004abc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a34:	d021      	beq.n	8004a7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a36:	f7fe fdd1 	bl	80035dc <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d302      	bcc.n	8004a4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d116      	bne.n	8004a7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2220      	movs	r2, #32
 8004a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a66:	f043 0220 	orr.w	r2, r3, #32
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e020      	b.n	8004abc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	0c1b      	lsrs	r3, r3, #16
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d10c      	bne.n	8004a9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	43da      	mvns	r2, r3
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	4013      	ands	r3, r2
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	bf14      	ite	ne
 8004a96:	2301      	movne	r3, #1
 8004a98:	2300      	moveq	r3, #0
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	e00b      	b.n	8004ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	43da      	mvns	r2, r3
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	bf14      	ite	ne
 8004ab0:	2301      	movne	r3, #1
 8004ab2:	2300      	moveq	r3, #0
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d18d      	bne.n	80049d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3710      	adds	r7, #16
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ad0:	e02d      	b.n	8004b2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ad2:	68f8      	ldr	r0, [r7, #12]
 8004ad4:	f000 f878 	bl	8004bc8 <I2C_IsAcknowledgeFailed>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d001      	beq.n	8004ae2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e02d      	b.n	8004b3e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae8:	d021      	beq.n	8004b2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aea:	f7fe fd77 	bl	80035dc <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	68ba      	ldr	r2, [r7, #8]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d302      	bcc.n	8004b00 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d116      	bne.n	8004b2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2220      	movs	r2, #32
 8004b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1a:	f043 0220 	orr.w	r2, r3, #32
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e007      	b.n	8004b3e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	695b      	ldr	r3, [r3, #20]
 8004b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b38:	2b80      	cmp	r3, #128	; 0x80
 8004b3a:	d1ca      	bne.n	8004ad2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b084      	sub	sp, #16
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	60f8      	str	r0, [r7, #12]
 8004b4e:	60b9      	str	r1, [r7, #8]
 8004b50:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b52:	e02d      	b.n	8004bb0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b54:	68f8      	ldr	r0, [r7, #12]
 8004b56:	f000 f837 	bl	8004bc8 <I2C_IsAcknowledgeFailed>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d001      	beq.n	8004b64 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e02d      	b.n	8004bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b6a:	d021      	beq.n	8004bb0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b6c:	f7fe fd36 	bl	80035dc <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	68ba      	ldr	r2, [r7, #8]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d302      	bcc.n	8004b82 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d116      	bne.n	8004bb0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2220      	movs	r2, #32
 8004b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9c:	f043 0220 	orr.w	r2, r3, #32
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e007      	b.n	8004bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	f003 0304 	and.w	r3, r3, #4
 8004bba:	2b04      	cmp	r3, #4
 8004bbc:	d1ca      	bne.n	8004b54 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3710      	adds	r7, #16
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bde:	d11b      	bne.n	8004c18 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004be8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2220      	movs	r2, #32
 8004bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c04:	f043 0204 	orr.w	r2, r3, #4
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e000      	b.n	8004c1a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	370c      	adds	r7, #12
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr

08004c26 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004c26:	b480      	push	{r7}
 8004c28:	b083      	sub	sp, #12
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
 8004c2e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	2b20      	cmp	r3, #32
 8004c3a:	d129      	bne.n	8004c90 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2224      	movs	r2, #36	; 0x24
 8004c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f022 0201 	bic.w	r2, r2, #1
 8004c52:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f022 0210 	bic.w	r2, r2, #16
 8004c62:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	683a      	ldr	r2, [r7, #0]
 8004c70:	430a      	orrs	r2, r1
 8004c72:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f042 0201 	orr.w	r2, r2, #1
 8004c82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2220      	movs	r2, #32
 8004c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	e000      	b.n	8004c92 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004c90:	2302      	movs	r3, #2
  }
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	370c      	adds	r7, #12
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr

08004c9e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	b085      	sub	sp, #20
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
 8004ca6:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	2b20      	cmp	r3, #32
 8004cb6:	d12a      	bne.n	8004d0e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2224      	movs	r2, #36	; 0x24
 8004cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f022 0201 	bic.w	r2, r2, #1
 8004cce:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd6:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004cd8:	89fb      	ldrh	r3, [r7, #14]
 8004cda:	f023 030f 	bic.w	r3, r3, #15
 8004cde:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	b29a      	uxth	r2, r3
 8004ce4:	89fb      	ldrh	r3, [r7, #14]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	89fa      	ldrh	r2, [r7, #14]
 8004cf0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f042 0201 	orr.w	r2, r2, #1
 8004d00:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2220      	movs	r2, #32
 8004d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	e000      	b.n	8004d10 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004d0e:	2302      	movs	r3, #2
  }
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3714      	adds	r7, #20
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d1e:	b08f      	sub	sp, #60	; 0x3c
 8004d20:	af0a      	add	r7, sp, #40	; 0x28
 8004d22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d101      	bne.n	8004d2e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e10f      	b.n	8004f4e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d106      	bne.n	8004d4e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f7fd f913 	bl	8001f74 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2203      	movs	r2, #3
 8004d52:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d102      	bne.n	8004d68 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f003 ffe2 	bl	8008d36 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	603b      	str	r3, [r7, #0]
 8004d78:	687e      	ldr	r6, [r7, #4]
 8004d7a:	466d      	mov	r5, sp
 8004d7c:	f106 0410 	add.w	r4, r6, #16
 8004d80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d88:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004d8c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004d90:	1d33      	adds	r3, r6, #4
 8004d92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d94:	6838      	ldr	r0, [r7, #0]
 8004d96:	f003 ff6d 	bl	8008c74 <USB_CoreInit>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d005      	beq.n	8004dac <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2202      	movs	r2, #2
 8004da4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e0d0      	b.n	8004f4e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2100      	movs	r1, #0
 8004db2:	4618      	mov	r0, r3
 8004db4:	f003 ffd0 	bl	8008d58 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004db8:	2300      	movs	r3, #0
 8004dba:	73fb      	strb	r3, [r7, #15]
 8004dbc:	e04a      	b.n	8004e54 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004dbe:	7bfa      	ldrb	r2, [r7, #15]
 8004dc0:	6879      	ldr	r1, [r7, #4]
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	00db      	lsls	r3, r3, #3
 8004dc6:	4413      	add	r3, r2
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	440b      	add	r3, r1
 8004dcc:	333d      	adds	r3, #61	; 0x3d
 8004dce:	2201      	movs	r2, #1
 8004dd0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004dd2:	7bfa      	ldrb	r2, [r7, #15]
 8004dd4:	6879      	ldr	r1, [r7, #4]
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	00db      	lsls	r3, r3, #3
 8004dda:	4413      	add	r3, r2
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	440b      	add	r3, r1
 8004de0:	333c      	adds	r3, #60	; 0x3c
 8004de2:	7bfa      	ldrb	r2, [r7, #15]
 8004de4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004de6:	7bfa      	ldrb	r2, [r7, #15]
 8004de8:	7bfb      	ldrb	r3, [r7, #15]
 8004dea:	b298      	uxth	r0, r3
 8004dec:	6879      	ldr	r1, [r7, #4]
 8004dee:	4613      	mov	r3, r2
 8004df0:	00db      	lsls	r3, r3, #3
 8004df2:	4413      	add	r3, r2
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	440b      	add	r3, r1
 8004df8:	3344      	adds	r3, #68	; 0x44
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004dfe:	7bfa      	ldrb	r2, [r7, #15]
 8004e00:	6879      	ldr	r1, [r7, #4]
 8004e02:	4613      	mov	r3, r2
 8004e04:	00db      	lsls	r3, r3, #3
 8004e06:	4413      	add	r3, r2
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	440b      	add	r3, r1
 8004e0c:	3340      	adds	r3, #64	; 0x40
 8004e0e:	2200      	movs	r2, #0
 8004e10:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004e12:	7bfa      	ldrb	r2, [r7, #15]
 8004e14:	6879      	ldr	r1, [r7, #4]
 8004e16:	4613      	mov	r3, r2
 8004e18:	00db      	lsls	r3, r3, #3
 8004e1a:	4413      	add	r3, r2
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	440b      	add	r3, r1
 8004e20:	3348      	adds	r3, #72	; 0x48
 8004e22:	2200      	movs	r2, #0
 8004e24:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004e26:	7bfa      	ldrb	r2, [r7, #15]
 8004e28:	6879      	ldr	r1, [r7, #4]
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	00db      	lsls	r3, r3, #3
 8004e2e:	4413      	add	r3, r2
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	440b      	add	r3, r1
 8004e34:	334c      	adds	r3, #76	; 0x4c
 8004e36:	2200      	movs	r2, #0
 8004e38:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004e3a:	7bfa      	ldrb	r2, [r7, #15]
 8004e3c:	6879      	ldr	r1, [r7, #4]
 8004e3e:	4613      	mov	r3, r2
 8004e40:	00db      	lsls	r3, r3, #3
 8004e42:	4413      	add	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	440b      	add	r3, r1
 8004e48:	3354      	adds	r3, #84	; 0x54
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e4e:	7bfb      	ldrb	r3, [r7, #15]
 8004e50:	3301      	adds	r3, #1
 8004e52:	73fb      	strb	r3, [r7, #15]
 8004e54:	7bfa      	ldrb	r2, [r7, #15]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d3af      	bcc.n	8004dbe <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e5e:	2300      	movs	r3, #0
 8004e60:	73fb      	strb	r3, [r7, #15]
 8004e62:	e044      	b.n	8004eee <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004e64:	7bfa      	ldrb	r2, [r7, #15]
 8004e66:	6879      	ldr	r1, [r7, #4]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	00db      	lsls	r3, r3, #3
 8004e6c:	4413      	add	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	440b      	add	r3, r1
 8004e72:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004e76:	2200      	movs	r2, #0
 8004e78:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004e7a:	7bfa      	ldrb	r2, [r7, #15]
 8004e7c:	6879      	ldr	r1, [r7, #4]
 8004e7e:	4613      	mov	r3, r2
 8004e80:	00db      	lsls	r3, r3, #3
 8004e82:	4413      	add	r3, r2
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	440b      	add	r3, r1
 8004e88:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004e8c:	7bfa      	ldrb	r2, [r7, #15]
 8004e8e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004e90:	7bfa      	ldrb	r2, [r7, #15]
 8004e92:	6879      	ldr	r1, [r7, #4]
 8004e94:	4613      	mov	r3, r2
 8004e96:	00db      	lsls	r3, r3, #3
 8004e98:	4413      	add	r3, r2
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	440b      	add	r3, r1
 8004e9e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004ea6:	7bfa      	ldrb	r2, [r7, #15]
 8004ea8:	6879      	ldr	r1, [r7, #4]
 8004eaa:	4613      	mov	r3, r2
 8004eac:	00db      	lsls	r3, r3, #3
 8004eae:	4413      	add	r3, r2
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	440b      	add	r3, r1
 8004eb4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004eb8:	2200      	movs	r2, #0
 8004eba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004ebc:	7bfa      	ldrb	r2, [r7, #15]
 8004ebe:	6879      	ldr	r1, [r7, #4]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	00db      	lsls	r3, r3, #3
 8004ec4:	4413      	add	r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	440b      	add	r3, r1
 8004eca:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004ece:	2200      	movs	r2, #0
 8004ed0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004ed2:	7bfa      	ldrb	r2, [r7, #15]
 8004ed4:	6879      	ldr	r1, [r7, #4]
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	00db      	lsls	r3, r3, #3
 8004eda:	4413      	add	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	440b      	add	r3, r1
 8004ee0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ee8:	7bfb      	ldrb	r3, [r7, #15]
 8004eea:	3301      	adds	r3, #1
 8004eec:	73fb      	strb	r3, [r7, #15]
 8004eee:	7bfa      	ldrb	r2, [r7, #15]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d3b5      	bcc.n	8004e64 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	603b      	str	r3, [r7, #0]
 8004efe:	687e      	ldr	r6, [r7, #4]
 8004f00:	466d      	mov	r5, sp
 8004f02:	f106 0410 	add.w	r4, r6, #16
 8004f06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f0e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004f12:	e885 0003 	stmia.w	r5, {r0, r1}
 8004f16:	1d33      	adds	r3, r6, #4
 8004f18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f1a:	6838      	ldr	r0, [r7, #0]
 8004f1c:	f003 ff68 	bl	8008df0 <USB_DevInit>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d005      	beq.n	8004f32 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2202      	movs	r2, #2
 8004f2a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e00d      	b.n	8004f4e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f004 f933 	bl	80091b2 <USB_DevDisconnect>

  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3714      	adds	r7, #20
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004f58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b086      	sub	sp, #24
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d101      	bne.n	8004f6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e267      	b.n	800543a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0301 	and.w	r3, r3, #1
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d075      	beq.n	8005062 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f76:	4b88      	ldr	r3, [pc, #544]	; (8005198 <HAL_RCC_OscConfig+0x240>)
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f003 030c 	and.w	r3, r3, #12
 8004f7e:	2b04      	cmp	r3, #4
 8004f80:	d00c      	beq.n	8004f9c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f82:	4b85      	ldr	r3, [pc, #532]	; (8005198 <HAL_RCC_OscConfig+0x240>)
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f8a:	2b08      	cmp	r3, #8
 8004f8c:	d112      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f8e:	4b82      	ldr	r3, [pc, #520]	; (8005198 <HAL_RCC_OscConfig+0x240>)
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f9a:	d10b      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f9c:	4b7e      	ldr	r3, [pc, #504]	; (8005198 <HAL_RCC_OscConfig+0x240>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d05b      	beq.n	8005060 <HAL_RCC_OscConfig+0x108>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d157      	bne.n	8005060 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e242      	b.n	800543a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fbc:	d106      	bne.n	8004fcc <HAL_RCC_OscConfig+0x74>
 8004fbe:	4b76      	ldr	r3, [pc, #472]	; (8005198 <HAL_RCC_OscConfig+0x240>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a75      	ldr	r2, [pc, #468]	; (8005198 <HAL_RCC_OscConfig+0x240>)
 8004fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fc8:	6013      	str	r3, [r2, #0]
 8004fca:	e01d      	b.n	8005008 <HAL_RCC_OscConfig+0xb0>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fd4:	d10c      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x98>
 8004fd6:	4b70      	ldr	r3, [pc, #448]	; (8005198 <HAL_RCC_OscConfig+0x240>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a6f      	ldr	r2, [pc, #444]	; (8005198 <HAL_RCC_OscConfig+0x240>)
 8004fdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fe0:	6013      	str	r3, [r2, #0]
 8004fe2:	4b6d      	ldr	r3, [pc, #436]	; (8005198 <HAL_RCC_OscConfig+0x240>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a6c      	ldr	r2, [pc, #432]	; (8005198 <HAL_RCC_OscConfig+0x240>)
 8004fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fec:	6013      	str	r3, [r2, #0]
 8004fee:	e00b      	b.n	8005008 <HAL_RCC_OscConfig+0xb0>
 8004ff0:	4b69      	ldr	r3, [pc, #420]	; (8005198 <HAL_RCC_OscConfig+0x240>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a68      	ldr	r2, [pc, #416]	; (8005198 <HAL_RCC_OscConfig+0x240>)
 8004ff6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ffa:	6013      	str	r3, [r2, #0]
 8004ffc:	4b66      	ldr	r3, [pc, #408]	; (8005198 <HAL_RCC_OscConfig+0x240>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a65      	ldr	r2, [pc, #404]	; (8005198 <HAL_RCC_OscConfig+0x240>)
 8005002:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005006:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d013      	beq.n	8005038 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005010:	f7fe fae4 	bl	80035dc <HAL_GetTick>
 8005014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005016:	e008      	b.n	800502a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005018:	f7fe fae0 	bl	80035dc <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	2b64      	cmp	r3, #100	; 0x64
 8005024:	d901      	bls.n	800502a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e207      	b.n	800543a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800502a:	4b5b      	ldr	r3, [pc, #364]	; (8005198 <HAL_RCC_OscConfig+0x240>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d0f0      	beq.n	8005018 <HAL_RCC_OscConfig+0xc0>
 8005036:	e014      	b.n	8005062 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005038:	f7fe fad0 	bl	80035dc <HAL_GetTick>
 800503c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800503e:	e008      	b.n	8005052 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005040:	f7fe facc 	bl	80035dc <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	2b64      	cmp	r3, #100	; 0x64
 800504c:	d901      	bls.n	8005052 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e1f3      	b.n	800543a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005052:	4b51      	ldr	r3, [pc, #324]	; (8005198 <HAL_RCC_OscConfig+0x240>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1f0      	bne.n	8005040 <HAL_RCC_OscConfig+0xe8>
 800505e:	e000      	b.n	8005062 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005060:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0302 	and.w	r3, r3, #2
 800506a:	2b00      	cmp	r3, #0
 800506c:	d063      	beq.n	8005136 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800506e:	4b4a      	ldr	r3, [pc, #296]	; (8005198 <HAL_RCC_OscConfig+0x240>)
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	f003 030c 	and.w	r3, r3, #12
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00b      	beq.n	8005092 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800507a:	4b47      	ldr	r3, [pc, #284]	; (8005198 <HAL_RCC_OscConfig+0x240>)
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005082:	2b08      	cmp	r3, #8
 8005084:	d11c      	bne.n	80050c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005086:	4b44      	ldr	r3, [pc, #272]	; (8005198 <HAL_RCC_OscConfig+0x240>)
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d116      	bne.n	80050c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005092:	4b41      	ldr	r3, [pc, #260]	; (8005198 <HAL_RCC_OscConfig+0x240>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	2b00      	cmp	r3, #0
 800509c:	d005      	beq.n	80050aa <HAL_RCC_OscConfig+0x152>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d001      	beq.n	80050aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e1c7      	b.n	800543a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050aa:	4b3b      	ldr	r3, [pc, #236]	; (8005198 <HAL_RCC_OscConfig+0x240>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	00db      	lsls	r3, r3, #3
 80050b8:	4937      	ldr	r1, [pc, #220]	; (8005198 <HAL_RCC_OscConfig+0x240>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050be:	e03a      	b.n	8005136 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d020      	beq.n	800510a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050c8:	4b34      	ldr	r3, [pc, #208]	; (800519c <HAL_RCC_OscConfig+0x244>)
 80050ca:	2201      	movs	r2, #1
 80050cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ce:	f7fe fa85 	bl	80035dc <HAL_GetTick>
 80050d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050d4:	e008      	b.n	80050e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050d6:	f7fe fa81 	bl	80035dc <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d901      	bls.n	80050e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e1a8      	b.n	800543a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050e8:	4b2b      	ldr	r3, [pc, #172]	; (8005198 <HAL_RCC_OscConfig+0x240>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0302 	and.w	r3, r3, #2
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d0f0      	beq.n	80050d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050f4:	4b28      	ldr	r3, [pc, #160]	; (8005198 <HAL_RCC_OscConfig+0x240>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	00db      	lsls	r3, r3, #3
 8005102:	4925      	ldr	r1, [pc, #148]	; (8005198 <HAL_RCC_OscConfig+0x240>)
 8005104:	4313      	orrs	r3, r2
 8005106:	600b      	str	r3, [r1, #0]
 8005108:	e015      	b.n	8005136 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800510a:	4b24      	ldr	r3, [pc, #144]	; (800519c <HAL_RCC_OscConfig+0x244>)
 800510c:	2200      	movs	r2, #0
 800510e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005110:	f7fe fa64 	bl	80035dc <HAL_GetTick>
 8005114:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005116:	e008      	b.n	800512a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005118:	f7fe fa60 	bl	80035dc <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	2b02      	cmp	r3, #2
 8005124:	d901      	bls.n	800512a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e187      	b.n	800543a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800512a:	4b1b      	ldr	r3, [pc, #108]	; (8005198 <HAL_RCC_OscConfig+0x240>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0302 	and.w	r3, r3, #2
 8005132:	2b00      	cmp	r3, #0
 8005134:	d1f0      	bne.n	8005118 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0308 	and.w	r3, r3, #8
 800513e:	2b00      	cmp	r3, #0
 8005140:	d036      	beq.n	80051b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d016      	beq.n	8005178 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800514a:	4b15      	ldr	r3, [pc, #84]	; (80051a0 <HAL_RCC_OscConfig+0x248>)
 800514c:	2201      	movs	r2, #1
 800514e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005150:	f7fe fa44 	bl	80035dc <HAL_GetTick>
 8005154:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005156:	e008      	b.n	800516a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005158:	f7fe fa40 	bl	80035dc <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	2b02      	cmp	r3, #2
 8005164:	d901      	bls.n	800516a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e167      	b.n	800543a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800516a:	4b0b      	ldr	r3, [pc, #44]	; (8005198 <HAL_RCC_OscConfig+0x240>)
 800516c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800516e:	f003 0302 	and.w	r3, r3, #2
 8005172:	2b00      	cmp	r3, #0
 8005174:	d0f0      	beq.n	8005158 <HAL_RCC_OscConfig+0x200>
 8005176:	e01b      	b.n	80051b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005178:	4b09      	ldr	r3, [pc, #36]	; (80051a0 <HAL_RCC_OscConfig+0x248>)
 800517a:	2200      	movs	r2, #0
 800517c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800517e:	f7fe fa2d 	bl	80035dc <HAL_GetTick>
 8005182:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005184:	e00e      	b.n	80051a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005186:	f7fe fa29 	bl	80035dc <HAL_GetTick>
 800518a:	4602      	mov	r2, r0
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	2b02      	cmp	r3, #2
 8005192:	d907      	bls.n	80051a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e150      	b.n	800543a <HAL_RCC_OscConfig+0x4e2>
 8005198:	40023800 	.word	0x40023800
 800519c:	42470000 	.word	0x42470000
 80051a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051a4:	4b88      	ldr	r3, [pc, #544]	; (80053c8 <HAL_RCC_OscConfig+0x470>)
 80051a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051a8:	f003 0302 	and.w	r3, r3, #2
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d1ea      	bne.n	8005186 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 0304 	and.w	r3, r3, #4
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	f000 8097 	beq.w	80052ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051be:	2300      	movs	r3, #0
 80051c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051c2:	4b81      	ldr	r3, [pc, #516]	; (80053c8 <HAL_RCC_OscConfig+0x470>)
 80051c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d10f      	bne.n	80051ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051ce:	2300      	movs	r3, #0
 80051d0:	60bb      	str	r3, [r7, #8]
 80051d2:	4b7d      	ldr	r3, [pc, #500]	; (80053c8 <HAL_RCC_OscConfig+0x470>)
 80051d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d6:	4a7c      	ldr	r2, [pc, #496]	; (80053c8 <HAL_RCC_OscConfig+0x470>)
 80051d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051dc:	6413      	str	r3, [r2, #64]	; 0x40
 80051de:	4b7a      	ldr	r3, [pc, #488]	; (80053c8 <HAL_RCC_OscConfig+0x470>)
 80051e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051e6:	60bb      	str	r3, [r7, #8]
 80051e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051ea:	2301      	movs	r3, #1
 80051ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051ee:	4b77      	ldr	r3, [pc, #476]	; (80053cc <HAL_RCC_OscConfig+0x474>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d118      	bne.n	800522c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051fa:	4b74      	ldr	r3, [pc, #464]	; (80053cc <HAL_RCC_OscConfig+0x474>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a73      	ldr	r2, [pc, #460]	; (80053cc <HAL_RCC_OscConfig+0x474>)
 8005200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005204:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005206:	f7fe f9e9 	bl	80035dc <HAL_GetTick>
 800520a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800520c:	e008      	b.n	8005220 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800520e:	f7fe f9e5 	bl	80035dc <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	2b02      	cmp	r3, #2
 800521a:	d901      	bls.n	8005220 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e10c      	b.n	800543a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005220:	4b6a      	ldr	r3, [pc, #424]	; (80053cc <HAL_RCC_OscConfig+0x474>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005228:	2b00      	cmp	r3, #0
 800522a:	d0f0      	beq.n	800520e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	2b01      	cmp	r3, #1
 8005232:	d106      	bne.n	8005242 <HAL_RCC_OscConfig+0x2ea>
 8005234:	4b64      	ldr	r3, [pc, #400]	; (80053c8 <HAL_RCC_OscConfig+0x470>)
 8005236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005238:	4a63      	ldr	r2, [pc, #396]	; (80053c8 <HAL_RCC_OscConfig+0x470>)
 800523a:	f043 0301 	orr.w	r3, r3, #1
 800523e:	6713      	str	r3, [r2, #112]	; 0x70
 8005240:	e01c      	b.n	800527c <HAL_RCC_OscConfig+0x324>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	2b05      	cmp	r3, #5
 8005248:	d10c      	bne.n	8005264 <HAL_RCC_OscConfig+0x30c>
 800524a:	4b5f      	ldr	r3, [pc, #380]	; (80053c8 <HAL_RCC_OscConfig+0x470>)
 800524c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800524e:	4a5e      	ldr	r2, [pc, #376]	; (80053c8 <HAL_RCC_OscConfig+0x470>)
 8005250:	f043 0304 	orr.w	r3, r3, #4
 8005254:	6713      	str	r3, [r2, #112]	; 0x70
 8005256:	4b5c      	ldr	r3, [pc, #368]	; (80053c8 <HAL_RCC_OscConfig+0x470>)
 8005258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800525a:	4a5b      	ldr	r2, [pc, #364]	; (80053c8 <HAL_RCC_OscConfig+0x470>)
 800525c:	f043 0301 	orr.w	r3, r3, #1
 8005260:	6713      	str	r3, [r2, #112]	; 0x70
 8005262:	e00b      	b.n	800527c <HAL_RCC_OscConfig+0x324>
 8005264:	4b58      	ldr	r3, [pc, #352]	; (80053c8 <HAL_RCC_OscConfig+0x470>)
 8005266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005268:	4a57      	ldr	r2, [pc, #348]	; (80053c8 <HAL_RCC_OscConfig+0x470>)
 800526a:	f023 0301 	bic.w	r3, r3, #1
 800526e:	6713      	str	r3, [r2, #112]	; 0x70
 8005270:	4b55      	ldr	r3, [pc, #340]	; (80053c8 <HAL_RCC_OscConfig+0x470>)
 8005272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005274:	4a54      	ldr	r2, [pc, #336]	; (80053c8 <HAL_RCC_OscConfig+0x470>)
 8005276:	f023 0304 	bic.w	r3, r3, #4
 800527a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d015      	beq.n	80052b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005284:	f7fe f9aa 	bl	80035dc <HAL_GetTick>
 8005288:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800528a:	e00a      	b.n	80052a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800528c:	f7fe f9a6 	bl	80035dc <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	f241 3288 	movw	r2, #5000	; 0x1388
 800529a:	4293      	cmp	r3, r2
 800529c:	d901      	bls.n	80052a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e0cb      	b.n	800543a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052a2:	4b49      	ldr	r3, [pc, #292]	; (80053c8 <HAL_RCC_OscConfig+0x470>)
 80052a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052a6:	f003 0302 	and.w	r3, r3, #2
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d0ee      	beq.n	800528c <HAL_RCC_OscConfig+0x334>
 80052ae:	e014      	b.n	80052da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052b0:	f7fe f994 	bl	80035dc <HAL_GetTick>
 80052b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052b6:	e00a      	b.n	80052ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052b8:	f7fe f990 	bl	80035dc <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d901      	bls.n	80052ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e0b5      	b.n	800543a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052ce:	4b3e      	ldr	r3, [pc, #248]	; (80053c8 <HAL_RCC_OscConfig+0x470>)
 80052d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052d2:	f003 0302 	and.w	r3, r3, #2
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1ee      	bne.n	80052b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052da:	7dfb      	ldrb	r3, [r7, #23]
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d105      	bne.n	80052ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052e0:	4b39      	ldr	r3, [pc, #228]	; (80053c8 <HAL_RCC_OscConfig+0x470>)
 80052e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e4:	4a38      	ldr	r2, [pc, #224]	; (80053c8 <HAL_RCC_OscConfig+0x470>)
 80052e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	699b      	ldr	r3, [r3, #24]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	f000 80a1 	beq.w	8005438 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052f6:	4b34      	ldr	r3, [pc, #208]	; (80053c8 <HAL_RCC_OscConfig+0x470>)
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	f003 030c 	and.w	r3, r3, #12
 80052fe:	2b08      	cmp	r3, #8
 8005300:	d05c      	beq.n	80053bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	699b      	ldr	r3, [r3, #24]
 8005306:	2b02      	cmp	r3, #2
 8005308:	d141      	bne.n	800538e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800530a:	4b31      	ldr	r3, [pc, #196]	; (80053d0 <HAL_RCC_OscConfig+0x478>)
 800530c:	2200      	movs	r2, #0
 800530e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005310:	f7fe f964 	bl	80035dc <HAL_GetTick>
 8005314:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005316:	e008      	b.n	800532a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005318:	f7fe f960 	bl	80035dc <HAL_GetTick>
 800531c:	4602      	mov	r2, r0
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	2b02      	cmp	r3, #2
 8005324:	d901      	bls.n	800532a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	e087      	b.n	800543a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800532a:	4b27      	ldr	r3, [pc, #156]	; (80053c8 <HAL_RCC_OscConfig+0x470>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005332:	2b00      	cmp	r3, #0
 8005334:	d1f0      	bne.n	8005318 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	69da      	ldr	r2, [r3, #28]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	431a      	orrs	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005344:	019b      	lsls	r3, r3, #6
 8005346:	431a      	orrs	r2, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800534c:	085b      	lsrs	r3, r3, #1
 800534e:	3b01      	subs	r3, #1
 8005350:	041b      	lsls	r3, r3, #16
 8005352:	431a      	orrs	r2, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005358:	061b      	lsls	r3, r3, #24
 800535a:	491b      	ldr	r1, [pc, #108]	; (80053c8 <HAL_RCC_OscConfig+0x470>)
 800535c:	4313      	orrs	r3, r2
 800535e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005360:	4b1b      	ldr	r3, [pc, #108]	; (80053d0 <HAL_RCC_OscConfig+0x478>)
 8005362:	2201      	movs	r2, #1
 8005364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005366:	f7fe f939 	bl	80035dc <HAL_GetTick>
 800536a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800536c:	e008      	b.n	8005380 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800536e:	f7fe f935 	bl	80035dc <HAL_GetTick>
 8005372:	4602      	mov	r2, r0
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	2b02      	cmp	r3, #2
 800537a:	d901      	bls.n	8005380 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800537c:	2303      	movs	r3, #3
 800537e:	e05c      	b.n	800543a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005380:	4b11      	ldr	r3, [pc, #68]	; (80053c8 <HAL_RCC_OscConfig+0x470>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005388:	2b00      	cmp	r3, #0
 800538a:	d0f0      	beq.n	800536e <HAL_RCC_OscConfig+0x416>
 800538c:	e054      	b.n	8005438 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800538e:	4b10      	ldr	r3, [pc, #64]	; (80053d0 <HAL_RCC_OscConfig+0x478>)
 8005390:	2200      	movs	r2, #0
 8005392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005394:	f7fe f922 	bl	80035dc <HAL_GetTick>
 8005398:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800539a:	e008      	b.n	80053ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800539c:	f7fe f91e 	bl	80035dc <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d901      	bls.n	80053ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e045      	b.n	800543a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053ae:	4b06      	ldr	r3, [pc, #24]	; (80053c8 <HAL_RCC_OscConfig+0x470>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d1f0      	bne.n	800539c <HAL_RCC_OscConfig+0x444>
 80053ba:	e03d      	b.n	8005438 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	699b      	ldr	r3, [r3, #24]
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d107      	bne.n	80053d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e038      	b.n	800543a <HAL_RCC_OscConfig+0x4e2>
 80053c8:	40023800 	.word	0x40023800
 80053cc:	40007000 	.word	0x40007000
 80053d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80053d4:	4b1b      	ldr	r3, [pc, #108]	; (8005444 <HAL_RCC_OscConfig+0x4ec>)
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d028      	beq.n	8005434 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d121      	bne.n	8005434 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d11a      	bne.n	8005434 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005404:	4013      	ands	r3, r2
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800540a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800540c:	4293      	cmp	r3, r2
 800540e:	d111      	bne.n	8005434 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800541a:	085b      	lsrs	r3, r3, #1
 800541c:	3b01      	subs	r3, #1
 800541e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005420:	429a      	cmp	r2, r3
 8005422:	d107      	bne.n	8005434 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800542e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005430:	429a      	cmp	r2, r3
 8005432:	d001      	beq.n	8005438 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e000      	b.n	800543a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3718      	adds	r7, #24
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	40023800 	.word	0x40023800

08005448 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d101      	bne.n	800545c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e0cc      	b.n	80055f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800545c:	4b68      	ldr	r3, [pc, #416]	; (8005600 <HAL_RCC_ClockConfig+0x1b8>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 030f 	and.w	r3, r3, #15
 8005464:	683a      	ldr	r2, [r7, #0]
 8005466:	429a      	cmp	r2, r3
 8005468:	d90c      	bls.n	8005484 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800546a:	4b65      	ldr	r3, [pc, #404]	; (8005600 <HAL_RCC_ClockConfig+0x1b8>)
 800546c:	683a      	ldr	r2, [r7, #0]
 800546e:	b2d2      	uxtb	r2, r2
 8005470:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005472:	4b63      	ldr	r3, [pc, #396]	; (8005600 <HAL_RCC_ClockConfig+0x1b8>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 030f 	and.w	r3, r3, #15
 800547a:	683a      	ldr	r2, [r7, #0]
 800547c:	429a      	cmp	r2, r3
 800547e:	d001      	beq.n	8005484 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e0b8      	b.n	80055f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0302 	and.w	r3, r3, #2
 800548c:	2b00      	cmp	r3, #0
 800548e:	d020      	beq.n	80054d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0304 	and.w	r3, r3, #4
 8005498:	2b00      	cmp	r3, #0
 800549a:	d005      	beq.n	80054a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800549c:	4b59      	ldr	r3, [pc, #356]	; (8005604 <HAL_RCC_ClockConfig+0x1bc>)
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	4a58      	ldr	r2, [pc, #352]	; (8005604 <HAL_RCC_ClockConfig+0x1bc>)
 80054a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80054a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0308 	and.w	r3, r3, #8
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d005      	beq.n	80054c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054b4:	4b53      	ldr	r3, [pc, #332]	; (8005604 <HAL_RCC_ClockConfig+0x1bc>)
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	4a52      	ldr	r2, [pc, #328]	; (8005604 <HAL_RCC_ClockConfig+0x1bc>)
 80054ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80054be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054c0:	4b50      	ldr	r3, [pc, #320]	; (8005604 <HAL_RCC_ClockConfig+0x1bc>)
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	494d      	ldr	r1, [pc, #308]	; (8005604 <HAL_RCC_ClockConfig+0x1bc>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d044      	beq.n	8005568 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d107      	bne.n	80054f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054e6:	4b47      	ldr	r3, [pc, #284]	; (8005604 <HAL_RCC_ClockConfig+0x1bc>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d119      	bne.n	8005526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e07f      	b.n	80055f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d003      	beq.n	8005506 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005502:	2b03      	cmp	r3, #3
 8005504:	d107      	bne.n	8005516 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005506:	4b3f      	ldr	r3, [pc, #252]	; (8005604 <HAL_RCC_ClockConfig+0x1bc>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d109      	bne.n	8005526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e06f      	b.n	80055f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005516:	4b3b      	ldr	r3, [pc, #236]	; (8005604 <HAL_RCC_ClockConfig+0x1bc>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0302 	and.w	r3, r3, #2
 800551e:	2b00      	cmp	r3, #0
 8005520:	d101      	bne.n	8005526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e067      	b.n	80055f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005526:	4b37      	ldr	r3, [pc, #220]	; (8005604 <HAL_RCC_ClockConfig+0x1bc>)
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	f023 0203 	bic.w	r2, r3, #3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	4934      	ldr	r1, [pc, #208]	; (8005604 <HAL_RCC_ClockConfig+0x1bc>)
 8005534:	4313      	orrs	r3, r2
 8005536:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005538:	f7fe f850 	bl	80035dc <HAL_GetTick>
 800553c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800553e:	e00a      	b.n	8005556 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005540:	f7fe f84c 	bl	80035dc <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	f241 3288 	movw	r2, #5000	; 0x1388
 800554e:	4293      	cmp	r3, r2
 8005550:	d901      	bls.n	8005556 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e04f      	b.n	80055f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005556:	4b2b      	ldr	r3, [pc, #172]	; (8005604 <HAL_RCC_ClockConfig+0x1bc>)
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	f003 020c 	and.w	r2, r3, #12
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	429a      	cmp	r2, r3
 8005566:	d1eb      	bne.n	8005540 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005568:	4b25      	ldr	r3, [pc, #148]	; (8005600 <HAL_RCC_ClockConfig+0x1b8>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 030f 	and.w	r3, r3, #15
 8005570:	683a      	ldr	r2, [r7, #0]
 8005572:	429a      	cmp	r2, r3
 8005574:	d20c      	bcs.n	8005590 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005576:	4b22      	ldr	r3, [pc, #136]	; (8005600 <HAL_RCC_ClockConfig+0x1b8>)
 8005578:	683a      	ldr	r2, [r7, #0]
 800557a:	b2d2      	uxtb	r2, r2
 800557c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800557e:	4b20      	ldr	r3, [pc, #128]	; (8005600 <HAL_RCC_ClockConfig+0x1b8>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 030f 	and.w	r3, r3, #15
 8005586:	683a      	ldr	r2, [r7, #0]
 8005588:	429a      	cmp	r2, r3
 800558a:	d001      	beq.n	8005590 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e032      	b.n	80055f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0304 	and.w	r3, r3, #4
 8005598:	2b00      	cmp	r3, #0
 800559a:	d008      	beq.n	80055ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800559c:	4b19      	ldr	r3, [pc, #100]	; (8005604 <HAL_RCC_ClockConfig+0x1bc>)
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	4916      	ldr	r1, [pc, #88]	; (8005604 <HAL_RCC_ClockConfig+0x1bc>)
 80055aa:	4313      	orrs	r3, r2
 80055ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0308 	and.w	r3, r3, #8
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d009      	beq.n	80055ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055ba:	4b12      	ldr	r3, [pc, #72]	; (8005604 <HAL_RCC_ClockConfig+0x1bc>)
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	00db      	lsls	r3, r3, #3
 80055c8:	490e      	ldr	r1, [pc, #56]	; (8005604 <HAL_RCC_ClockConfig+0x1bc>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80055ce:	f000 f821 	bl	8005614 <HAL_RCC_GetSysClockFreq>
 80055d2:	4602      	mov	r2, r0
 80055d4:	4b0b      	ldr	r3, [pc, #44]	; (8005604 <HAL_RCC_ClockConfig+0x1bc>)
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	091b      	lsrs	r3, r3, #4
 80055da:	f003 030f 	and.w	r3, r3, #15
 80055de:	490a      	ldr	r1, [pc, #40]	; (8005608 <HAL_RCC_ClockConfig+0x1c0>)
 80055e0:	5ccb      	ldrb	r3, [r1, r3]
 80055e2:	fa22 f303 	lsr.w	r3, r2, r3
 80055e6:	4a09      	ldr	r2, [pc, #36]	; (800560c <HAL_RCC_ClockConfig+0x1c4>)
 80055e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80055ea:	4b09      	ldr	r3, [pc, #36]	; (8005610 <HAL_RCC_ClockConfig+0x1c8>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4618      	mov	r0, r3
 80055f0:	f7fd ffb0 	bl	8003554 <HAL_InitTick>

  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3710      	adds	r7, #16
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop
 8005600:	40023c00 	.word	0x40023c00
 8005604:	40023800 	.word	0x40023800
 8005608:	0800a538 	.word	0x0800a538
 800560c:	20000110 	.word	0x20000110
 8005610:	20000118 	.word	0x20000118

08005614 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005614:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005618:	b094      	sub	sp, #80	; 0x50
 800561a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800561c:	2300      	movs	r3, #0
 800561e:	647b      	str	r3, [r7, #68]	; 0x44
 8005620:	2300      	movs	r3, #0
 8005622:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005624:	2300      	movs	r3, #0
 8005626:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005628:	2300      	movs	r3, #0
 800562a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800562c:	4b79      	ldr	r3, [pc, #484]	; (8005814 <HAL_RCC_GetSysClockFreq+0x200>)
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	f003 030c 	and.w	r3, r3, #12
 8005634:	2b08      	cmp	r3, #8
 8005636:	d00d      	beq.n	8005654 <HAL_RCC_GetSysClockFreq+0x40>
 8005638:	2b08      	cmp	r3, #8
 800563a:	f200 80e1 	bhi.w	8005800 <HAL_RCC_GetSysClockFreq+0x1ec>
 800563e:	2b00      	cmp	r3, #0
 8005640:	d002      	beq.n	8005648 <HAL_RCC_GetSysClockFreq+0x34>
 8005642:	2b04      	cmp	r3, #4
 8005644:	d003      	beq.n	800564e <HAL_RCC_GetSysClockFreq+0x3a>
 8005646:	e0db      	b.n	8005800 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005648:	4b73      	ldr	r3, [pc, #460]	; (8005818 <HAL_RCC_GetSysClockFreq+0x204>)
 800564a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800564c:	e0db      	b.n	8005806 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800564e:	4b73      	ldr	r3, [pc, #460]	; (800581c <HAL_RCC_GetSysClockFreq+0x208>)
 8005650:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005652:	e0d8      	b.n	8005806 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005654:	4b6f      	ldr	r3, [pc, #444]	; (8005814 <HAL_RCC_GetSysClockFreq+0x200>)
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800565c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800565e:	4b6d      	ldr	r3, [pc, #436]	; (8005814 <HAL_RCC_GetSysClockFreq+0x200>)
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d063      	beq.n	8005732 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800566a:	4b6a      	ldr	r3, [pc, #424]	; (8005814 <HAL_RCC_GetSysClockFreq+0x200>)
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	099b      	lsrs	r3, r3, #6
 8005670:	2200      	movs	r2, #0
 8005672:	63bb      	str	r3, [r7, #56]	; 0x38
 8005674:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005678:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800567c:	633b      	str	r3, [r7, #48]	; 0x30
 800567e:	2300      	movs	r3, #0
 8005680:	637b      	str	r3, [r7, #52]	; 0x34
 8005682:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005686:	4622      	mov	r2, r4
 8005688:	462b      	mov	r3, r5
 800568a:	f04f 0000 	mov.w	r0, #0
 800568e:	f04f 0100 	mov.w	r1, #0
 8005692:	0159      	lsls	r1, r3, #5
 8005694:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005698:	0150      	lsls	r0, r2, #5
 800569a:	4602      	mov	r2, r0
 800569c:	460b      	mov	r3, r1
 800569e:	4621      	mov	r1, r4
 80056a0:	1a51      	subs	r1, r2, r1
 80056a2:	6139      	str	r1, [r7, #16]
 80056a4:	4629      	mov	r1, r5
 80056a6:	eb63 0301 	sbc.w	r3, r3, r1
 80056aa:	617b      	str	r3, [r7, #20]
 80056ac:	f04f 0200 	mov.w	r2, #0
 80056b0:	f04f 0300 	mov.w	r3, #0
 80056b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056b8:	4659      	mov	r1, fp
 80056ba:	018b      	lsls	r3, r1, #6
 80056bc:	4651      	mov	r1, sl
 80056be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80056c2:	4651      	mov	r1, sl
 80056c4:	018a      	lsls	r2, r1, #6
 80056c6:	4651      	mov	r1, sl
 80056c8:	ebb2 0801 	subs.w	r8, r2, r1
 80056cc:	4659      	mov	r1, fp
 80056ce:	eb63 0901 	sbc.w	r9, r3, r1
 80056d2:	f04f 0200 	mov.w	r2, #0
 80056d6:	f04f 0300 	mov.w	r3, #0
 80056da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056e6:	4690      	mov	r8, r2
 80056e8:	4699      	mov	r9, r3
 80056ea:	4623      	mov	r3, r4
 80056ec:	eb18 0303 	adds.w	r3, r8, r3
 80056f0:	60bb      	str	r3, [r7, #8]
 80056f2:	462b      	mov	r3, r5
 80056f4:	eb49 0303 	adc.w	r3, r9, r3
 80056f8:	60fb      	str	r3, [r7, #12]
 80056fa:	f04f 0200 	mov.w	r2, #0
 80056fe:	f04f 0300 	mov.w	r3, #0
 8005702:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005706:	4629      	mov	r1, r5
 8005708:	024b      	lsls	r3, r1, #9
 800570a:	4621      	mov	r1, r4
 800570c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005710:	4621      	mov	r1, r4
 8005712:	024a      	lsls	r2, r1, #9
 8005714:	4610      	mov	r0, r2
 8005716:	4619      	mov	r1, r3
 8005718:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800571a:	2200      	movs	r2, #0
 800571c:	62bb      	str	r3, [r7, #40]	; 0x28
 800571e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005720:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005724:	f7fa fdb4 	bl	8000290 <__aeabi_uldivmod>
 8005728:	4602      	mov	r2, r0
 800572a:	460b      	mov	r3, r1
 800572c:	4613      	mov	r3, r2
 800572e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005730:	e058      	b.n	80057e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005732:	4b38      	ldr	r3, [pc, #224]	; (8005814 <HAL_RCC_GetSysClockFreq+0x200>)
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	099b      	lsrs	r3, r3, #6
 8005738:	2200      	movs	r2, #0
 800573a:	4618      	mov	r0, r3
 800573c:	4611      	mov	r1, r2
 800573e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005742:	623b      	str	r3, [r7, #32]
 8005744:	2300      	movs	r3, #0
 8005746:	627b      	str	r3, [r7, #36]	; 0x24
 8005748:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800574c:	4642      	mov	r2, r8
 800574e:	464b      	mov	r3, r9
 8005750:	f04f 0000 	mov.w	r0, #0
 8005754:	f04f 0100 	mov.w	r1, #0
 8005758:	0159      	lsls	r1, r3, #5
 800575a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800575e:	0150      	lsls	r0, r2, #5
 8005760:	4602      	mov	r2, r0
 8005762:	460b      	mov	r3, r1
 8005764:	4641      	mov	r1, r8
 8005766:	ebb2 0a01 	subs.w	sl, r2, r1
 800576a:	4649      	mov	r1, r9
 800576c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005770:	f04f 0200 	mov.w	r2, #0
 8005774:	f04f 0300 	mov.w	r3, #0
 8005778:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800577c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005780:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005784:	ebb2 040a 	subs.w	r4, r2, sl
 8005788:	eb63 050b 	sbc.w	r5, r3, fp
 800578c:	f04f 0200 	mov.w	r2, #0
 8005790:	f04f 0300 	mov.w	r3, #0
 8005794:	00eb      	lsls	r3, r5, #3
 8005796:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800579a:	00e2      	lsls	r2, r4, #3
 800579c:	4614      	mov	r4, r2
 800579e:	461d      	mov	r5, r3
 80057a0:	4643      	mov	r3, r8
 80057a2:	18e3      	adds	r3, r4, r3
 80057a4:	603b      	str	r3, [r7, #0]
 80057a6:	464b      	mov	r3, r9
 80057a8:	eb45 0303 	adc.w	r3, r5, r3
 80057ac:	607b      	str	r3, [r7, #4]
 80057ae:	f04f 0200 	mov.w	r2, #0
 80057b2:	f04f 0300 	mov.w	r3, #0
 80057b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80057ba:	4629      	mov	r1, r5
 80057bc:	028b      	lsls	r3, r1, #10
 80057be:	4621      	mov	r1, r4
 80057c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80057c4:	4621      	mov	r1, r4
 80057c6:	028a      	lsls	r2, r1, #10
 80057c8:	4610      	mov	r0, r2
 80057ca:	4619      	mov	r1, r3
 80057cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057ce:	2200      	movs	r2, #0
 80057d0:	61bb      	str	r3, [r7, #24]
 80057d2:	61fa      	str	r2, [r7, #28]
 80057d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057d8:	f7fa fd5a 	bl	8000290 <__aeabi_uldivmod>
 80057dc:	4602      	mov	r2, r0
 80057de:	460b      	mov	r3, r1
 80057e0:	4613      	mov	r3, r2
 80057e2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80057e4:	4b0b      	ldr	r3, [pc, #44]	; (8005814 <HAL_RCC_GetSysClockFreq+0x200>)
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	0c1b      	lsrs	r3, r3, #16
 80057ea:	f003 0303 	and.w	r3, r3, #3
 80057ee:	3301      	adds	r3, #1
 80057f0:	005b      	lsls	r3, r3, #1
 80057f2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80057f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80057f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80057fe:	e002      	b.n	8005806 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005800:	4b05      	ldr	r3, [pc, #20]	; (8005818 <HAL_RCC_GetSysClockFreq+0x204>)
 8005802:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005804:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005806:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005808:	4618      	mov	r0, r3
 800580a:	3750      	adds	r7, #80	; 0x50
 800580c:	46bd      	mov	sp, r7
 800580e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005812:	bf00      	nop
 8005814:	40023800 	.word	0x40023800
 8005818:	00f42400 	.word	0x00f42400
 800581c:	007a1200 	.word	0x007a1200

08005820 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005820:	b480      	push	{r7}
 8005822:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005824:	4b03      	ldr	r3, [pc, #12]	; (8005834 <HAL_RCC_GetHCLKFreq+0x14>)
 8005826:	681b      	ldr	r3, [r3, #0]
}
 8005828:	4618      	mov	r0, r3
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	20000110 	.word	0x20000110

08005838 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800583c:	f7ff fff0 	bl	8005820 <HAL_RCC_GetHCLKFreq>
 8005840:	4602      	mov	r2, r0
 8005842:	4b05      	ldr	r3, [pc, #20]	; (8005858 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	0a9b      	lsrs	r3, r3, #10
 8005848:	f003 0307 	and.w	r3, r3, #7
 800584c:	4903      	ldr	r1, [pc, #12]	; (800585c <HAL_RCC_GetPCLK1Freq+0x24>)
 800584e:	5ccb      	ldrb	r3, [r1, r3]
 8005850:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005854:	4618      	mov	r0, r3
 8005856:	bd80      	pop	{r7, pc}
 8005858:	40023800 	.word	0x40023800
 800585c:	0800a548 	.word	0x0800a548

08005860 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005864:	f7ff ffdc 	bl	8005820 <HAL_RCC_GetHCLKFreq>
 8005868:	4602      	mov	r2, r0
 800586a:	4b05      	ldr	r3, [pc, #20]	; (8005880 <HAL_RCC_GetPCLK2Freq+0x20>)
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	0b5b      	lsrs	r3, r3, #13
 8005870:	f003 0307 	and.w	r3, r3, #7
 8005874:	4903      	ldr	r1, [pc, #12]	; (8005884 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005876:	5ccb      	ldrb	r3, [r1, r3]
 8005878:	fa22 f303 	lsr.w	r3, r2, r3
}
 800587c:	4618      	mov	r0, r3
 800587e:	bd80      	pop	{r7, pc}
 8005880:	40023800 	.word	0x40023800
 8005884:	0800a548 	.word	0x0800a548

08005888 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b086      	sub	sp, #24
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005890:	2300      	movs	r3, #0
 8005892:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005894:	2300      	movs	r3, #0
 8005896:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0301 	and.w	r3, r3, #1
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d10b      	bne.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d105      	bne.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d075      	beq.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80058bc:	4b91      	ldr	r3, [pc, #580]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80058be:	2200      	movs	r2, #0
 80058c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80058c2:	f7fd fe8b 	bl	80035dc <HAL_GetTick>
 80058c6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80058c8:	e008      	b.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80058ca:	f7fd fe87 	bl	80035dc <HAL_GetTick>
 80058ce:	4602      	mov	r2, r0
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	1ad3      	subs	r3, r2, r3
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d901      	bls.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058d8:	2303      	movs	r3, #3
 80058da:	e189      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80058dc:	4b8a      	ldr	r3, [pc, #552]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d1f0      	bne.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 0301 	and.w	r3, r3, #1
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d009      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	019a      	lsls	r2, r3, #6
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	071b      	lsls	r3, r3, #28
 8005900:	4981      	ldr	r1, [pc, #516]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005902:	4313      	orrs	r3, r2
 8005904:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0302 	and.w	r3, r3, #2
 8005910:	2b00      	cmp	r3, #0
 8005912:	d01f      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005914:	4b7c      	ldr	r3, [pc, #496]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005916:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800591a:	0f1b      	lsrs	r3, r3, #28
 800591c:	f003 0307 	and.w	r3, r3, #7
 8005920:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	019a      	lsls	r2, r3, #6
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	061b      	lsls	r3, r3, #24
 800592e:	431a      	orrs	r2, r3
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	071b      	lsls	r3, r3, #28
 8005934:	4974      	ldr	r1, [pc, #464]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005936:	4313      	orrs	r3, r2
 8005938:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800593c:	4b72      	ldr	r3, [pc, #456]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800593e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005942:	f023 021f 	bic.w	r2, r3, #31
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	69db      	ldr	r3, [r3, #28]
 800594a:	3b01      	subs	r3, #1
 800594c:	496e      	ldr	r1, [pc, #440]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800594e:	4313      	orrs	r3, r2
 8005950:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800595c:	2b00      	cmp	r3, #0
 800595e:	d00d      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	019a      	lsls	r2, r3, #6
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	061b      	lsls	r3, r3, #24
 800596c:	431a      	orrs	r2, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	071b      	lsls	r3, r3, #28
 8005974:	4964      	ldr	r1, [pc, #400]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005976:	4313      	orrs	r3, r2
 8005978:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800597c:	4b61      	ldr	r3, [pc, #388]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800597e:	2201      	movs	r2, #1
 8005980:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005982:	f7fd fe2b 	bl	80035dc <HAL_GetTick>
 8005986:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005988:	e008      	b.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800598a:	f7fd fe27 	bl	80035dc <HAL_GetTick>
 800598e:	4602      	mov	r2, r0
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	2b02      	cmp	r3, #2
 8005996:	d901      	bls.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005998:	2303      	movs	r3, #3
 800599a:	e129      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800599c:	4b5a      	ldr	r3, [pc, #360]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d0f0      	beq.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 0304 	and.w	r3, r3, #4
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d105      	bne.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d079      	beq.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80059c0:	4b52      	ldr	r3, [pc, #328]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80059c2:	2200      	movs	r2, #0
 80059c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80059c6:	f7fd fe09 	bl	80035dc <HAL_GetTick>
 80059ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80059cc:	e008      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80059ce:	f7fd fe05 	bl	80035dc <HAL_GetTick>
 80059d2:	4602      	mov	r2, r0
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	1ad3      	subs	r3, r2, r3
 80059d8:	2b02      	cmp	r3, #2
 80059da:	d901      	bls.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059dc:	2303      	movs	r3, #3
 80059de:	e107      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80059e0:	4b49      	ldr	r3, [pc, #292]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059ec:	d0ef      	beq.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 0304 	and.w	r3, r3, #4
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d020      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80059fa:	4b43      	ldr	r3, [pc, #268]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a00:	0f1b      	lsrs	r3, r3, #28
 8005a02:	f003 0307 	and.w	r3, r3, #7
 8005a06:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	019a      	lsls	r2, r3, #6
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	061b      	lsls	r3, r3, #24
 8005a14:	431a      	orrs	r2, r3
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	071b      	lsls	r3, r3, #28
 8005a1a:	493b      	ldr	r1, [pc, #236]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005a22:	4b39      	ldr	r3, [pc, #228]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a28:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a1b      	ldr	r3, [r3, #32]
 8005a30:	3b01      	subs	r3, #1
 8005a32:	021b      	lsls	r3, r3, #8
 8005a34:	4934      	ldr	r1, [pc, #208]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a36:	4313      	orrs	r3, r2
 8005a38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 0308 	and.w	r3, r3, #8
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d01e      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005a48:	4b2f      	ldr	r3, [pc, #188]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a4e:	0e1b      	lsrs	r3, r3, #24
 8005a50:	f003 030f 	and.w	r3, r3, #15
 8005a54:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	019a      	lsls	r2, r3, #6
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	061b      	lsls	r3, r3, #24
 8005a60:	431a      	orrs	r2, r3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	699b      	ldr	r3, [r3, #24]
 8005a66:	071b      	lsls	r3, r3, #28
 8005a68:	4927      	ldr	r1, [pc, #156]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005a70:	4b25      	ldr	r3, [pc, #148]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a76:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7e:	4922      	ldr	r1, [pc, #136]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a80:	4313      	orrs	r3, r2
 8005a82:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005a86:	4b21      	ldr	r3, [pc, #132]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005a88:	2201      	movs	r2, #1
 8005a8a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a8c:	f7fd fda6 	bl	80035dc <HAL_GetTick>
 8005a90:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005a92:	e008      	b.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005a94:	f7fd fda2 	bl	80035dc <HAL_GetTick>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d901      	bls.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	e0a4      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005aa6:	4b18      	ldr	r3, [pc, #96]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005aae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ab2:	d1ef      	bne.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 0320 	and.w	r3, r3, #32
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f000 808b 	beq.w	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	60fb      	str	r3, [r7, #12]
 8005ac6:	4b10      	ldr	r3, [pc, #64]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aca:	4a0f      	ldr	r2, [pc, #60]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8005ad2:	4b0d      	ldr	r3, [pc, #52]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ada:	60fb      	str	r3, [r7, #12]
 8005adc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005ade:	4b0c      	ldr	r3, [pc, #48]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a0b      	ldr	r2, [pc, #44]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ae8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005aea:	f7fd fd77 	bl	80035dc <HAL_GetTick>
 8005aee:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005af0:	e010      	b.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005af2:	f7fd fd73 	bl	80035dc <HAL_GetTick>
 8005af6:	4602      	mov	r2, r0
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	1ad3      	subs	r3, r2, r3
 8005afc:	2b02      	cmp	r3, #2
 8005afe:	d909      	bls.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005b00:	2303      	movs	r3, #3
 8005b02:	e075      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005b04:	42470068 	.word	0x42470068
 8005b08:	40023800 	.word	0x40023800
 8005b0c:	42470070 	.word	0x42470070
 8005b10:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005b14:	4b38      	ldr	r3, [pc, #224]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d0e8      	beq.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005b20:	4b36      	ldr	r3, [pc, #216]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b28:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d02f      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b38:	693a      	ldr	r2, [r7, #16]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d028      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b3e:	4b2f      	ldr	r3, [pc, #188]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b46:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b48:	4b2d      	ldr	r3, [pc, #180]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b4e:	4b2c      	ldr	r3, [pc, #176]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005b50:	2200      	movs	r2, #0
 8005b52:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005b54:	4a29      	ldr	r2, [pc, #164]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005b5a:	4b28      	ldr	r3, [pc, #160]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b5e:	f003 0301 	and.w	r3, r3, #1
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d114      	bne.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005b66:	f7fd fd39 	bl	80035dc <HAL_GetTick>
 8005b6a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b6c:	e00a      	b.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b6e:	f7fd fd35 	bl	80035dc <HAL_GetTick>
 8005b72:	4602      	mov	r2, r0
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d901      	bls.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e035      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b84:	4b1d      	ldr	r3, [pc, #116]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b88:	f003 0302 	and.w	r3, r3, #2
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d0ee      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b9c:	d10d      	bne.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005b9e:	4b17      	ldr	r3, [pc, #92]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005baa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005bae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bb2:	4912      	ldr	r1, [pc, #72]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	608b      	str	r3, [r1, #8]
 8005bb8:	e005      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005bba:	4b10      	ldr	r3, [pc, #64]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	4a0f      	ldr	r2, [pc, #60]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005bc0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005bc4:	6093      	str	r3, [r2, #8]
 8005bc6:	4b0d      	ldr	r3, [pc, #52]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005bc8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bd2:	490a      	ldr	r1, [pc, #40]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 0310 	and.w	r3, r3, #16
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d004      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005bea:	4b06      	ldr	r3, [pc, #24]	; (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005bec:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005bee:	2300      	movs	r3, #0
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3718      	adds	r7, #24
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}
 8005bf8:	40007000 	.word	0x40007000
 8005bfc:	40023800 	.word	0x40023800
 8005c00:	42470e40 	.word	0x42470e40
 8005c04:	424711e0 	.word	0x424711e0

08005c08 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d101      	bne.n	8005c1e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e066      	b.n	8005cec <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	7f5b      	ldrb	r3, [r3, #29]
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d105      	bne.n	8005c34 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f7fb ff2c 	bl	8001a8c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2202      	movs	r2, #2
 8005c38:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	22ca      	movs	r2, #202	; 0xca
 8005c40:	625a      	str	r2, [r3, #36]	; 0x24
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	2253      	movs	r2, #83	; 0x53
 8005c48:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 fa45 	bl	80060da <RTC_EnterInitMode>
 8005c50:	4603      	mov	r3, r0
 8005c52:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005c54:	7bfb      	ldrb	r3, [r7, #15]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d12c      	bne.n	8005cb4 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	6812      	ldr	r2, [r2, #0]
 8005c64:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005c68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c6c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	6899      	ldr	r1, [r3, #8]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	685a      	ldr	r2, [r3, #4]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	431a      	orrs	r2, r3
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	695b      	ldr	r3, [r3, #20]
 8005c82:	431a      	orrs	r2, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	430a      	orrs	r2, r1
 8005c8a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	68d2      	ldr	r2, [r2, #12]
 8005c94:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	6919      	ldr	r1, [r3, #16]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	041a      	lsls	r2, r3, #16
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	430a      	orrs	r2, r1
 8005ca8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 fa4c 	bl	8006148 <RTC_ExitInitMode>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005cb4:	7bfb      	ldrb	r3, [r7, #15]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d113      	bne.n	8005ce2 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005cc8:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	699a      	ldr	r2, [r3, #24]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	430a      	orrs	r2, r1
 8005cda:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	22ff      	movs	r2, #255	; 0xff
 8005ce8:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3710      	adds	r7, #16
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005cf4:	b590      	push	{r4, r7, lr}
 8005cf6:	b087      	sub	sp, #28
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005d00:	2300      	movs	r3, #0
 8005d02:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	7f1b      	ldrb	r3, [r3, #28]
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d101      	bne.n	8005d10 <HAL_RTC_SetTime+0x1c>
 8005d0c:	2302      	movs	r3, #2
 8005d0e:	e087      	b.n	8005e20 <HAL_RTC_SetTime+0x12c>
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2201      	movs	r2, #1
 8005d14:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2202      	movs	r2, #2
 8005d1a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d126      	bne.n	8005d70 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d102      	bne.n	8005d36 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	2200      	movs	r2, #0
 8005d34:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f000 fa29 	bl	8006192 <RTC_ByteToBcd2>
 8005d40:	4603      	mov	r3, r0
 8005d42:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	785b      	ldrb	r3, [r3, #1]
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f000 fa22 	bl	8006192 <RTC_ByteToBcd2>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005d52:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	789b      	ldrb	r3, [r3, #2]
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f000 fa1a 	bl	8006192 <RTC_ByteToBcd2>
 8005d5e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005d60:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	78db      	ldrb	r3, [r3, #3]
 8005d68:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	617b      	str	r3, [r7, #20]
 8005d6e:	e018      	b.n	8005da2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d102      	bne.n	8005d84 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	2200      	movs	r2, #0
 8005d82:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	785b      	ldrb	r3, [r3, #1]
 8005d8e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005d90:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005d92:	68ba      	ldr	r2, [r7, #8]
 8005d94:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005d96:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	78db      	ldrb	r3, [r3, #3]
 8005d9c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	22ca      	movs	r2, #202	; 0xca
 8005da8:	625a      	str	r2, [r3, #36]	; 0x24
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2253      	movs	r2, #83	; 0x53
 8005db0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005db2:	68f8      	ldr	r0, [r7, #12]
 8005db4:	f000 f991 	bl	80060da <RTC_EnterInitMode>
 8005db8:	4603      	mov	r3, r0
 8005dba:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005dbc:	7cfb      	ldrb	r3, [r7, #19]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d120      	bne.n	8005e04 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005dcc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005dd0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	689a      	ldr	r2, [r3, #8]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005de0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	6899      	ldr	r1, [r3, #8]
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	68da      	ldr	r2, [r3, #12]
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	431a      	orrs	r2, r3
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	430a      	orrs	r2, r1
 8005df8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005dfa:	68f8      	ldr	r0, [r7, #12]
 8005dfc:	f000 f9a4 	bl	8006148 <RTC_ExitInitMode>
 8005e00:	4603      	mov	r3, r0
 8005e02:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005e04:	7cfb      	ldrb	r3, [r7, #19]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d102      	bne.n	8005e10 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	22ff      	movs	r2, #255	; 0xff
 8005e16:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	771a      	strb	r2, [r3, #28]

  return status;
 8005e1e:	7cfb      	ldrb	r3, [r7, #19]
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	371c      	adds	r7, #28
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd90      	pop	{r4, r7, pc}

08005e28 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b086      	sub	sp, #24
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005e34:	2300      	movs	r3, #0
 8005e36:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	691b      	ldr	r3, [r3, #16]
 8005e48:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005e5a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005e5e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	0c1b      	lsrs	r3, r3, #16
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e6a:	b2da      	uxtb	r2, r3
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	0a1b      	lsrs	r3, r3, #8
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e7a:	b2da      	uxtb	r2, r3
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e88:	b2da      	uxtb	r2, r3
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	0d9b      	lsrs	r3, r3, #22
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	f003 0301 	and.w	r3, r3, #1
 8005e98:	b2da      	uxtb	r2, r3
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d11a      	bne.n	8005eda <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f000 f98f 	bl	80061cc <RTC_Bcd2ToByte>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	785b      	ldrb	r3, [r3, #1]
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f000 f986 	bl	80061cc <RTC_Bcd2ToByte>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	789b      	ldrb	r3, [r3, #2]
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f000 f97d 	bl	80061cc <RTC_Bcd2ToByte>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005eda:	2300      	movs	r3, #0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3718      	adds	r7, #24
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005ee4:	b590      	push	{r4, r7, lr}
 8005ee6:	b087      	sub	sp, #28
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	7f1b      	ldrb	r3, [r3, #28]
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d101      	bne.n	8005f00 <HAL_RTC_SetDate+0x1c>
 8005efc:	2302      	movs	r3, #2
 8005efe:	e071      	b.n	8005fe4 <HAL_RTC_SetDate+0x100>
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2201      	movs	r2, #1
 8005f04:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2202      	movs	r2, #2
 8005f0a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d10e      	bne.n	8005f30 <HAL_RTC_SetDate+0x4c>
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	785b      	ldrb	r3, [r3, #1]
 8005f16:	f003 0310 	and.w	r3, r3, #16
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d008      	beq.n	8005f30 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	785b      	ldrb	r3, [r3, #1]
 8005f22:	f023 0310 	bic.w	r3, r3, #16
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	330a      	adds	r3, #10
 8005f2a:	b2da      	uxtb	r2, r3
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d11c      	bne.n	8005f70 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	78db      	ldrb	r3, [r3, #3]
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f000 f929 	bl	8006192 <RTC_ByteToBcd2>
 8005f40:	4603      	mov	r3, r0
 8005f42:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	785b      	ldrb	r3, [r3, #1]
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f000 f922 	bl	8006192 <RTC_ByteToBcd2>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005f52:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	789b      	ldrb	r3, [r3, #2]
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f000 f91a 	bl	8006192 <RTC_ByteToBcd2>
 8005f5e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005f60:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	617b      	str	r3, [r7, #20]
 8005f6e:	e00e      	b.n	8005f8e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	78db      	ldrb	r3, [r3, #3]
 8005f74:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	785b      	ldrb	r3, [r3, #1]
 8005f7a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005f7c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005f7e:	68ba      	ldr	r2, [r7, #8]
 8005f80:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005f82:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	22ca      	movs	r2, #202	; 0xca
 8005f94:	625a      	str	r2, [r3, #36]	; 0x24
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2253      	movs	r2, #83	; 0x53
 8005f9c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005f9e:	68f8      	ldr	r0, [r7, #12]
 8005fa0:	f000 f89b 	bl	80060da <RTC_EnterInitMode>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005fa8:	7cfb      	ldrb	r3, [r7, #19]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d10c      	bne.n	8005fc8 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005fb8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005fbc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	f000 f8c2 	bl	8006148 <RTC_ExitInitMode>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005fc8:	7cfb      	ldrb	r3, [r7, #19]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d102      	bne.n	8005fd4 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	22ff      	movs	r2, #255	; 0xff
 8005fda:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	771a      	strb	r2, [r3, #28]

  return status;
 8005fe2:	7cfb      	ldrb	r3, [r7, #19]
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	371c      	adds	r7, #28
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd90      	pop	{r4, r7, pc}

08005fec <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b086      	sub	sp, #24
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006006:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800600a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	0c1b      	lsrs	r3, r3, #16
 8006010:	b2da      	uxtb	r2, r3
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	0a1b      	lsrs	r3, r3, #8
 800601a:	b2db      	uxtb	r3, r3
 800601c:	f003 031f 	and.w	r3, r3, #31
 8006020:	b2da      	uxtb	r2, r3
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	b2db      	uxtb	r3, r3
 800602a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800602e:	b2da      	uxtb	r2, r3
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	0b5b      	lsrs	r3, r3, #13
 8006038:	b2db      	uxtb	r3, r3
 800603a:	f003 0307 	and.w	r3, r3, #7
 800603e:	b2da      	uxtb	r2, r3
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d11a      	bne.n	8006080 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	78db      	ldrb	r3, [r3, #3]
 800604e:	4618      	mov	r0, r3
 8006050:	f000 f8bc 	bl	80061cc <RTC_Bcd2ToByte>
 8006054:	4603      	mov	r3, r0
 8006056:	461a      	mov	r2, r3
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	785b      	ldrb	r3, [r3, #1]
 8006060:	4618      	mov	r0, r3
 8006062:	f000 f8b3 	bl	80061cc <RTC_Bcd2ToByte>
 8006066:	4603      	mov	r3, r0
 8006068:	461a      	mov	r2, r3
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	789b      	ldrb	r3, [r3, #2]
 8006072:	4618      	mov	r0, r3
 8006074:	f000 f8aa 	bl	80061cc <RTC_Bcd2ToByte>
 8006078:	4603      	mov	r3, r0
 800607a:	461a      	mov	r2, r3
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3718      	adds	r7, #24
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}

0800608a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800608a:	b580      	push	{r7, lr}
 800608c:	b084      	sub	sp, #16
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006092:	2300      	movs	r3, #0
 8006094:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68da      	ldr	r2, [r3, #12]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80060a4:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80060a6:	f7fd fa99 	bl	80035dc <HAL_GetTick>
 80060aa:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80060ac:	e009      	b.n	80060c2 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80060ae:	f7fd fa95 	bl	80035dc <HAL_GetTick>
 80060b2:	4602      	mov	r2, r0
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	1ad3      	subs	r3, r2, r3
 80060b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060bc:	d901      	bls.n	80060c2 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	e007      	b.n	80060d2 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	f003 0320 	and.w	r3, r3, #32
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d0ee      	beq.n	80060ae <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3710      	adds	r7, #16
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}

080060da <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80060da:	b580      	push	{r7, lr}
 80060dc:	b084      	sub	sp, #16
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80060e2:	2300      	movs	r3, #0
 80060e4:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80060e6:	2300      	movs	r3, #0
 80060e8:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d122      	bne.n	800613e <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68da      	ldr	r2, [r3, #12]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006106:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006108:	f7fd fa68 	bl	80035dc <HAL_GetTick>
 800610c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800610e:	e00c      	b.n	800612a <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006110:	f7fd fa64 	bl	80035dc <HAL_GetTick>
 8006114:	4602      	mov	r2, r0
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	1ad3      	subs	r3, r2, r3
 800611a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800611e:	d904      	bls.n	800612a <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2204      	movs	r2, #4
 8006124:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006134:	2b00      	cmp	r3, #0
 8006136:	d102      	bne.n	800613e <RTC_EnterInitMode+0x64>
 8006138:	7bfb      	ldrb	r3, [r7, #15]
 800613a:	2b01      	cmp	r3, #1
 800613c:	d1e8      	bne.n	8006110 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800613e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006140:	4618      	mov	r0, r3
 8006142:	3710      	adds	r7, #16
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006150:	2300      	movs	r3, #0
 8006152:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68da      	ldr	r2, [r3, #12]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006162:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	f003 0320 	and.w	r3, r3, #32
 800616e:	2b00      	cmp	r3, #0
 8006170:	d10a      	bne.n	8006188 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f7ff ff89 	bl	800608a <HAL_RTC_WaitForSynchro>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d004      	beq.n	8006188 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2204      	movs	r2, #4
 8006182:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006188:	7bfb      	ldrb	r3, [r7, #15]
}
 800618a:	4618      	mov	r0, r3
 800618c:	3710      	adds	r7, #16
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}

08006192 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006192:	b480      	push	{r7}
 8006194:	b085      	sub	sp, #20
 8006196:	af00      	add	r7, sp, #0
 8006198:	4603      	mov	r3, r0
 800619a:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800619c:	2300      	movs	r3, #0
 800619e:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80061a0:	e005      	b.n	80061ae <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80061a2:	7bfb      	ldrb	r3, [r7, #15]
 80061a4:	3301      	adds	r3, #1
 80061a6:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80061a8:	79fb      	ldrb	r3, [r7, #7]
 80061aa:	3b0a      	subs	r3, #10
 80061ac:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80061ae:	79fb      	ldrb	r3, [r7, #7]
 80061b0:	2b09      	cmp	r3, #9
 80061b2:	d8f6      	bhi.n	80061a2 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80061b4:	7bfb      	ldrb	r3, [r7, #15]
 80061b6:	011b      	lsls	r3, r3, #4
 80061b8:	b2da      	uxtb	r2, r3
 80061ba:	79fb      	ldrb	r3, [r7, #7]
 80061bc:	4313      	orrs	r3, r2
 80061be:	b2db      	uxtb	r3, r3
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3714      	adds	r7, #20
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b085      	sub	sp, #20
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	4603      	mov	r3, r0
 80061d4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80061d6:	2300      	movs	r3, #0
 80061d8:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80061da:	79fb      	ldrb	r3, [r7, #7]
 80061dc:	091b      	lsrs	r3, r3, #4
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	461a      	mov	r2, r3
 80061e2:	0092      	lsls	r2, r2, #2
 80061e4:	4413      	add	r3, r2
 80061e6:	005b      	lsls	r3, r3, #1
 80061e8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80061ea:	79fb      	ldrb	r3, [r7, #7]
 80061ec:	f003 030f 	and.w	r3, r3, #15
 80061f0:	b2da      	uxtb	r2, r3
 80061f2:	7bfb      	ldrb	r3, [r7, #15]
 80061f4:	4413      	add	r3, r2
 80061f6:	b2db      	uxtb	r3, r3
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3714      	adds	r7, #20
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d101      	bne.n	8006216 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e041      	b.n	800629a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800621c:	b2db      	uxtb	r3, r3
 800621e:	2b00      	cmp	r3, #0
 8006220:	d106      	bne.n	8006230 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f7fb fcce 	bl	8001bcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2202      	movs	r2, #2
 8006234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	3304      	adds	r3, #4
 8006240:	4619      	mov	r1, r3
 8006242:	4610      	mov	r0, r2
 8006244:	f000 ffd4 	bl	80071f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2201      	movs	r2, #1
 800625c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	3708      	adds	r7, #8
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
	...

080062a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b085      	sub	sp, #20
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d001      	beq.n	80062bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e04e      	b.n	800635a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2202      	movs	r2, #2
 80062c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68da      	ldr	r2, [r3, #12]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f042 0201 	orr.w	r2, r2, #1
 80062d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a23      	ldr	r2, [pc, #140]	; (8006368 <HAL_TIM_Base_Start_IT+0xc4>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d022      	beq.n	8006324 <HAL_TIM_Base_Start_IT+0x80>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062e6:	d01d      	beq.n	8006324 <HAL_TIM_Base_Start_IT+0x80>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a1f      	ldr	r2, [pc, #124]	; (800636c <HAL_TIM_Base_Start_IT+0xc8>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d018      	beq.n	8006324 <HAL_TIM_Base_Start_IT+0x80>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a1e      	ldr	r2, [pc, #120]	; (8006370 <HAL_TIM_Base_Start_IT+0xcc>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d013      	beq.n	8006324 <HAL_TIM_Base_Start_IT+0x80>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a1c      	ldr	r2, [pc, #112]	; (8006374 <HAL_TIM_Base_Start_IT+0xd0>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d00e      	beq.n	8006324 <HAL_TIM_Base_Start_IT+0x80>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a1b      	ldr	r2, [pc, #108]	; (8006378 <HAL_TIM_Base_Start_IT+0xd4>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d009      	beq.n	8006324 <HAL_TIM_Base_Start_IT+0x80>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a19      	ldr	r2, [pc, #100]	; (800637c <HAL_TIM_Base_Start_IT+0xd8>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d004      	beq.n	8006324 <HAL_TIM_Base_Start_IT+0x80>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a18      	ldr	r2, [pc, #96]	; (8006380 <HAL_TIM_Base_Start_IT+0xdc>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d111      	bne.n	8006348 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	f003 0307 	and.w	r3, r3, #7
 800632e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2b06      	cmp	r3, #6
 8006334:	d010      	beq.n	8006358 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f042 0201 	orr.w	r2, r2, #1
 8006344:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006346:	e007      	b.n	8006358 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f042 0201 	orr.w	r2, r2, #1
 8006356:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3714      	adds	r7, #20
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop
 8006368:	40010000 	.word	0x40010000
 800636c:	40000400 	.word	0x40000400
 8006370:	40000800 	.word	0x40000800
 8006374:	40000c00 	.word	0x40000c00
 8006378:	40010400 	.word	0x40010400
 800637c:	40014000 	.word	0x40014000
 8006380:	40001800 	.word	0x40001800

08006384 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b082      	sub	sp, #8
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d101      	bne.n	8006396 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	e041      	b.n	800641a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800639c:	b2db      	uxtb	r3, r3
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d106      	bne.n	80063b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f7fb fb98 	bl	8001ae0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2202      	movs	r2, #2
 80063b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	3304      	adds	r3, #4
 80063c0:	4619      	mov	r1, r3
 80063c2:	4610      	mov	r0, r2
 80063c4:	f000 ff14 	bl	80071f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2201      	movs	r2, #1
 80063dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006418:	2300      	movs	r3, #0
}
 800641a:	4618      	mov	r0, r3
 800641c:	3708      	adds	r7, #8
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
	...

08006424 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d109      	bne.n	8006448 <HAL_TIM_PWM_Start+0x24>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800643a:	b2db      	uxtb	r3, r3
 800643c:	2b01      	cmp	r3, #1
 800643e:	bf14      	ite	ne
 8006440:	2301      	movne	r3, #1
 8006442:	2300      	moveq	r3, #0
 8006444:	b2db      	uxtb	r3, r3
 8006446:	e022      	b.n	800648e <HAL_TIM_PWM_Start+0x6a>
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	2b04      	cmp	r3, #4
 800644c:	d109      	bne.n	8006462 <HAL_TIM_PWM_Start+0x3e>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006454:	b2db      	uxtb	r3, r3
 8006456:	2b01      	cmp	r3, #1
 8006458:	bf14      	ite	ne
 800645a:	2301      	movne	r3, #1
 800645c:	2300      	moveq	r3, #0
 800645e:	b2db      	uxtb	r3, r3
 8006460:	e015      	b.n	800648e <HAL_TIM_PWM_Start+0x6a>
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	2b08      	cmp	r3, #8
 8006466:	d109      	bne.n	800647c <HAL_TIM_PWM_Start+0x58>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800646e:	b2db      	uxtb	r3, r3
 8006470:	2b01      	cmp	r3, #1
 8006472:	bf14      	ite	ne
 8006474:	2301      	movne	r3, #1
 8006476:	2300      	moveq	r3, #0
 8006478:	b2db      	uxtb	r3, r3
 800647a:	e008      	b.n	800648e <HAL_TIM_PWM_Start+0x6a>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006482:	b2db      	uxtb	r3, r3
 8006484:	2b01      	cmp	r3, #1
 8006486:	bf14      	ite	ne
 8006488:	2301      	movne	r3, #1
 800648a:	2300      	moveq	r3, #0
 800648c:	b2db      	uxtb	r3, r3
 800648e:	2b00      	cmp	r3, #0
 8006490:	d001      	beq.n	8006496 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e07c      	b.n	8006590 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d104      	bne.n	80064a6 <HAL_TIM_PWM_Start+0x82>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2202      	movs	r2, #2
 80064a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064a4:	e013      	b.n	80064ce <HAL_TIM_PWM_Start+0xaa>
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	2b04      	cmp	r3, #4
 80064aa:	d104      	bne.n	80064b6 <HAL_TIM_PWM_Start+0x92>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2202      	movs	r2, #2
 80064b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064b4:	e00b      	b.n	80064ce <HAL_TIM_PWM_Start+0xaa>
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	2b08      	cmp	r3, #8
 80064ba:	d104      	bne.n	80064c6 <HAL_TIM_PWM_Start+0xa2>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2202      	movs	r2, #2
 80064c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064c4:	e003      	b.n	80064ce <HAL_TIM_PWM_Start+0xaa>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2202      	movs	r2, #2
 80064ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2201      	movs	r2, #1
 80064d4:	6839      	ldr	r1, [r7, #0]
 80064d6:	4618      	mov	r0, r3
 80064d8:	f001 fa9e 	bl	8007a18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a2d      	ldr	r2, [pc, #180]	; (8006598 <HAL_TIM_PWM_Start+0x174>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d004      	beq.n	80064f0 <HAL_TIM_PWM_Start+0xcc>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a2c      	ldr	r2, [pc, #176]	; (800659c <HAL_TIM_PWM_Start+0x178>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d101      	bne.n	80064f4 <HAL_TIM_PWM_Start+0xd0>
 80064f0:	2301      	movs	r3, #1
 80064f2:	e000      	b.n	80064f6 <HAL_TIM_PWM_Start+0xd2>
 80064f4:	2300      	movs	r3, #0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d007      	beq.n	800650a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006508:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a22      	ldr	r2, [pc, #136]	; (8006598 <HAL_TIM_PWM_Start+0x174>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d022      	beq.n	800655a <HAL_TIM_PWM_Start+0x136>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800651c:	d01d      	beq.n	800655a <HAL_TIM_PWM_Start+0x136>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a1f      	ldr	r2, [pc, #124]	; (80065a0 <HAL_TIM_PWM_Start+0x17c>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d018      	beq.n	800655a <HAL_TIM_PWM_Start+0x136>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a1d      	ldr	r2, [pc, #116]	; (80065a4 <HAL_TIM_PWM_Start+0x180>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d013      	beq.n	800655a <HAL_TIM_PWM_Start+0x136>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a1c      	ldr	r2, [pc, #112]	; (80065a8 <HAL_TIM_PWM_Start+0x184>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d00e      	beq.n	800655a <HAL_TIM_PWM_Start+0x136>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a16      	ldr	r2, [pc, #88]	; (800659c <HAL_TIM_PWM_Start+0x178>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d009      	beq.n	800655a <HAL_TIM_PWM_Start+0x136>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a18      	ldr	r2, [pc, #96]	; (80065ac <HAL_TIM_PWM_Start+0x188>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d004      	beq.n	800655a <HAL_TIM_PWM_Start+0x136>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a16      	ldr	r2, [pc, #88]	; (80065b0 <HAL_TIM_PWM_Start+0x18c>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d111      	bne.n	800657e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	f003 0307 	and.w	r3, r3, #7
 8006564:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2b06      	cmp	r3, #6
 800656a:	d010      	beq.n	800658e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f042 0201 	orr.w	r2, r2, #1
 800657a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800657c:	e007      	b.n	800658e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f042 0201 	orr.w	r2, r2, #1
 800658c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800658e:	2300      	movs	r3, #0
}
 8006590:	4618      	mov	r0, r3
 8006592:	3710      	adds	r7, #16
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}
 8006598:	40010000 	.word	0x40010000
 800659c:	40010400 	.word	0x40010400
 80065a0:	40000400 	.word	0x40000400
 80065a4:	40000800 	.word	0x40000800
 80065a8:	40000c00 	.word	0x40000c00
 80065ac:	40014000 	.word	0x40014000
 80065b0:	40001800 	.word	0x40001800

080065b4 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065be:	2300      	movs	r3, #0
 80065c0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d109      	bne.n	80065dc <HAL_TIM_PWM_Start_IT+0x28>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	bf14      	ite	ne
 80065d4:	2301      	movne	r3, #1
 80065d6:	2300      	moveq	r3, #0
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	e022      	b.n	8006622 <HAL_TIM_PWM_Start_IT+0x6e>
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	2b04      	cmp	r3, #4
 80065e0:	d109      	bne.n	80065f6 <HAL_TIM_PWM_Start_IT+0x42>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	bf14      	ite	ne
 80065ee:	2301      	movne	r3, #1
 80065f0:	2300      	moveq	r3, #0
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	e015      	b.n	8006622 <HAL_TIM_PWM_Start_IT+0x6e>
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	2b08      	cmp	r3, #8
 80065fa:	d109      	bne.n	8006610 <HAL_TIM_PWM_Start_IT+0x5c>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006602:	b2db      	uxtb	r3, r3
 8006604:	2b01      	cmp	r3, #1
 8006606:	bf14      	ite	ne
 8006608:	2301      	movne	r3, #1
 800660a:	2300      	moveq	r3, #0
 800660c:	b2db      	uxtb	r3, r3
 800660e:	e008      	b.n	8006622 <HAL_TIM_PWM_Start_IT+0x6e>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006616:	b2db      	uxtb	r3, r3
 8006618:	2b01      	cmp	r3, #1
 800661a:	bf14      	ite	ne
 800661c:	2301      	movne	r3, #1
 800661e:	2300      	moveq	r3, #0
 8006620:	b2db      	uxtb	r3, r3
 8006622:	2b00      	cmp	r3, #0
 8006624:	d001      	beq.n	800662a <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e0c7      	b.n	80067ba <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d104      	bne.n	800663a <HAL_TIM_PWM_Start_IT+0x86>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2202      	movs	r2, #2
 8006634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006638:	e013      	b.n	8006662 <HAL_TIM_PWM_Start_IT+0xae>
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	2b04      	cmp	r3, #4
 800663e:	d104      	bne.n	800664a <HAL_TIM_PWM_Start_IT+0x96>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2202      	movs	r2, #2
 8006644:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006648:	e00b      	b.n	8006662 <HAL_TIM_PWM_Start_IT+0xae>
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	2b08      	cmp	r3, #8
 800664e:	d104      	bne.n	800665a <HAL_TIM_PWM_Start_IT+0xa6>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2202      	movs	r2, #2
 8006654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006658:	e003      	b.n	8006662 <HAL_TIM_PWM_Start_IT+0xae>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2202      	movs	r2, #2
 800665e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	2b0c      	cmp	r3, #12
 8006666:	d841      	bhi.n	80066ec <HAL_TIM_PWM_Start_IT+0x138>
 8006668:	a201      	add	r2, pc, #4	; (adr r2, 8006670 <HAL_TIM_PWM_Start_IT+0xbc>)
 800666a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800666e:	bf00      	nop
 8006670:	080066a5 	.word	0x080066a5
 8006674:	080066ed 	.word	0x080066ed
 8006678:	080066ed 	.word	0x080066ed
 800667c:	080066ed 	.word	0x080066ed
 8006680:	080066b7 	.word	0x080066b7
 8006684:	080066ed 	.word	0x080066ed
 8006688:	080066ed 	.word	0x080066ed
 800668c:	080066ed 	.word	0x080066ed
 8006690:	080066c9 	.word	0x080066c9
 8006694:	080066ed 	.word	0x080066ed
 8006698:	080066ed 	.word	0x080066ed
 800669c:	080066ed 	.word	0x080066ed
 80066a0:	080066db 	.word	0x080066db
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68da      	ldr	r2, [r3, #12]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f042 0202 	orr.w	r2, r2, #2
 80066b2:	60da      	str	r2, [r3, #12]
      break;
 80066b4:	e01d      	b.n	80066f2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68da      	ldr	r2, [r3, #12]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f042 0204 	orr.w	r2, r2, #4
 80066c4:	60da      	str	r2, [r3, #12]
      break;
 80066c6:	e014      	b.n	80066f2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68da      	ldr	r2, [r3, #12]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f042 0208 	orr.w	r2, r2, #8
 80066d6:	60da      	str	r2, [r3, #12]
      break;
 80066d8:	e00b      	b.n	80066f2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	68da      	ldr	r2, [r3, #12]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f042 0210 	orr.w	r2, r2, #16
 80066e8:	60da      	str	r2, [r3, #12]
      break;
 80066ea:	e002      	b.n	80066f2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	73fb      	strb	r3, [r7, #15]
      break;
 80066f0:	bf00      	nop
  }

  if (status == HAL_OK)
 80066f2:	7bfb      	ldrb	r3, [r7, #15]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d15f      	bne.n	80067b8 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2201      	movs	r2, #1
 80066fe:	6839      	ldr	r1, [r7, #0]
 8006700:	4618      	mov	r0, r3
 8006702:	f001 f989 	bl	8007a18 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a2e      	ldr	r2, [pc, #184]	; (80067c4 <HAL_TIM_PWM_Start_IT+0x210>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d004      	beq.n	800671a <HAL_TIM_PWM_Start_IT+0x166>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a2c      	ldr	r2, [pc, #176]	; (80067c8 <HAL_TIM_PWM_Start_IT+0x214>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d101      	bne.n	800671e <HAL_TIM_PWM_Start_IT+0x16a>
 800671a:	2301      	movs	r3, #1
 800671c:	e000      	b.n	8006720 <HAL_TIM_PWM_Start_IT+0x16c>
 800671e:	2300      	movs	r3, #0
 8006720:	2b00      	cmp	r3, #0
 8006722:	d007      	beq.n	8006734 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006732:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a22      	ldr	r2, [pc, #136]	; (80067c4 <HAL_TIM_PWM_Start_IT+0x210>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d022      	beq.n	8006784 <HAL_TIM_PWM_Start_IT+0x1d0>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006746:	d01d      	beq.n	8006784 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a1f      	ldr	r2, [pc, #124]	; (80067cc <HAL_TIM_PWM_Start_IT+0x218>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d018      	beq.n	8006784 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a1e      	ldr	r2, [pc, #120]	; (80067d0 <HAL_TIM_PWM_Start_IT+0x21c>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d013      	beq.n	8006784 <HAL_TIM_PWM_Start_IT+0x1d0>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a1c      	ldr	r2, [pc, #112]	; (80067d4 <HAL_TIM_PWM_Start_IT+0x220>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d00e      	beq.n	8006784 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a17      	ldr	r2, [pc, #92]	; (80067c8 <HAL_TIM_PWM_Start_IT+0x214>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d009      	beq.n	8006784 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a18      	ldr	r2, [pc, #96]	; (80067d8 <HAL_TIM_PWM_Start_IT+0x224>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d004      	beq.n	8006784 <HAL_TIM_PWM_Start_IT+0x1d0>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a17      	ldr	r2, [pc, #92]	; (80067dc <HAL_TIM_PWM_Start_IT+0x228>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d111      	bne.n	80067a8 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	f003 0307 	and.w	r3, r3, #7
 800678e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	2b06      	cmp	r3, #6
 8006794:	d010      	beq.n	80067b8 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f042 0201 	orr.w	r2, r2, #1
 80067a4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067a6:	e007      	b.n	80067b8 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f042 0201 	orr.w	r2, r2, #1
 80067b6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80067b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3710      	adds	r7, #16
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	40010000 	.word	0x40010000
 80067c8:	40010400 	.word	0x40010400
 80067cc:	40000400 	.word	0x40000400
 80067d0:	40000800 	.word	0x40000800
 80067d4:	40000c00 	.word	0x40000c00
 80067d8:	40014000 	.word	0x40014000
 80067dc:	40001800 	.word	0x40001800

080067e0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b082      	sub	sp, #8
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d101      	bne.n	80067f2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	e041      	b.n	8006876 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d106      	bne.n	800680c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f7fb f990 	bl	8001b2c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2202      	movs	r2, #2
 8006810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	3304      	adds	r3, #4
 800681c:	4619      	mov	r1, r3
 800681e:	4610      	mov	r0, r2
 8006820:	f000 fce6 	bl	80071f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006874:	2300      	movs	r3, #0
}
 8006876:	4618      	mov	r0, r3
 8006878:	3708      	adds	r7, #8
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
	...

08006880 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800688a:	2300      	movs	r3, #0
 800688c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d104      	bne.n	800689e <HAL_TIM_IC_Start_IT+0x1e>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800689a:	b2db      	uxtb	r3, r3
 800689c:	e013      	b.n	80068c6 <HAL_TIM_IC_Start_IT+0x46>
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	2b04      	cmp	r3, #4
 80068a2:	d104      	bne.n	80068ae <HAL_TIM_IC_Start_IT+0x2e>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	e00b      	b.n	80068c6 <HAL_TIM_IC_Start_IT+0x46>
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	2b08      	cmp	r3, #8
 80068b2:	d104      	bne.n	80068be <HAL_TIM_IC_Start_IT+0x3e>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	e003      	b.n	80068c6 <HAL_TIM_IC_Start_IT+0x46>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d104      	bne.n	80068d8 <HAL_TIM_IC_Start_IT+0x58>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	e013      	b.n	8006900 <HAL_TIM_IC_Start_IT+0x80>
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	2b04      	cmp	r3, #4
 80068dc:	d104      	bne.n	80068e8 <HAL_TIM_IC_Start_IT+0x68>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	e00b      	b.n	8006900 <HAL_TIM_IC_Start_IT+0x80>
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	2b08      	cmp	r3, #8
 80068ec:	d104      	bne.n	80068f8 <HAL_TIM_IC_Start_IT+0x78>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	e003      	b.n	8006900 <HAL_TIM_IC_Start_IT+0x80>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006902:	7bbb      	ldrb	r3, [r7, #14]
 8006904:	2b01      	cmp	r3, #1
 8006906:	d102      	bne.n	800690e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006908:	7b7b      	ldrb	r3, [r7, #13]
 800690a:	2b01      	cmp	r3, #1
 800690c:	d001      	beq.n	8006912 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e0cc      	b.n	8006aac <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d104      	bne.n	8006922 <HAL_TIM_IC_Start_IT+0xa2>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2202      	movs	r2, #2
 800691c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006920:	e013      	b.n	800694a <HAL_TIM_IC_Start_IT+0xca>
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	2b04      	cmp	r3, #4
 8006926:	d104      	bne.n	8006932 <HAL_TIM_IC_Start_IT+0xb2>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2202      	movs	r2, #2
 800692c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006930:	e00b      	b.n	800694a <HAL_TIM_IC_Start_IT+0xca>
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	2b08      	cmp	r3, #8
 8006936:	d104      	bne.n	8006942 <HAL_TIM_IC_Start_IT+0xc2>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2202      	movs	r2, #2
 800693c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006940:	e003      	b.n	800694a <HAL_TIM_IC_Start_IT+0xca>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2202      	movs	r2, #2
 8006946:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d104      	bne.n	800695a <HAL_TIM_IC_Start_IT+0xda>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2202      	movs	r2, #2
 8006954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006958:	e013      	b.n	8006982 <HAL_TIM_IC_Start_IT+0x102>
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	2b04      	cmp	r3, #4
 800695e:	d104      	bne.n	800696a <HAL_TIM_IC_Start_IT+0xea>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2202      	movs	r2, #2
 8006964:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006968:	e00b      	b.n	8006982 <HAL_TIM_IC_Start_IT+0x102>
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	2b08      	cmp	r3, #8
 800696e:	d104      	bne.n	800697a <HAL_TIM_IC_Start_IT+0xfa>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2202      	movs	r2, #2
 8006974:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006978:	e003      	b.n	8006982 <HAL_TIM_IC_Start_IT+0x102>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2202      	movs	r2, #2
 800697e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	2b0c      	cmp	r3, #12
 8006986:	d841      	bhi.n	8006a0c <HAL_TIM_IC_Start_IT+0x18c>
 8006988:	a201      	add	r2, pc, #4	; (adr r2, 8006990 <HAL_TIM_IC_Start_IT+0x110>)
 800698a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800698e:	bf00      	nop
 8006990:	080069c5 	.word	0x080069c5
 8006994:	08006a0d 	.word	0x08006a0d
 8006998:	08006a0d 	.word	0x08006a0d
 800699c:	08006a0d 	.word	0x08006a0d
 80069a0:	080069d7 	.word	0x080069d7
 80069a4:	08006a0d 	.word	0x08006a0d
 80069a8:	08006a0d 	.word	0x08006a0d
 80069ac:	08006a0d 	.word	0x08006a0d
 80069b0:	080069e9 	.word	0x080069e9
 80069b4:	08006a0d 	.word	0x08006a0d
 80069b8:	08006a0d 	.word	0x08006a0d
 80069bc:	08006a0d 	.word	0x08006a0d
 80069c0:	080069fb 	.word	0x080069fb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	68da      	ldr	r2, [r3, #12]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f042 0202 	orr.w	r2, r2, #2
 80069d2:	60da      	str	r2, [r3, #12]
      break;
 80069d4:	e01d      	b.n	8006a12 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	68da      	ldr	r2, [r3, #12]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f042 0204 	orr.w	r2, r2, #4
 80069e4:	60da      	str	r2, [r3, #12]
      break;
 80069e6:	e014      	b.n	8006a12 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	68da      	ldr	r2, [r3, #12]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f042 0208 	orr.w	r2, r2, #8
 80069f6:	60da      	str	r2, [r3, #12]
      break;
 80069f8:	e00b      	b.n	8006a12 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	68da      	ldr	r2, [r3, #12]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f042 0210 	orr.w	r2, r2, #16
 8006a08:	60da      	str	r2, [r3, #12]
      break;
 8006a0a:	e002      	b.n	8006a12 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	73fb      	strb	r3, [r7, #15]
      break;
 8006a10:	bf00      	nop
  }

  if (status == HAL_OK)
 8006a12:	7bfb      	ldrb	r3, [r7, #15]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d148      	bne.n	8006aaa <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	6839      	ldr	r1, [r7, #0]
 8006a20:	4618      	mov	r0, r3
 8006a22:	f000 fff9 	bl	8007a18 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a22      	ldr	r2, [pc, #136]	; (8006ab4 <HAL_TIM_IC_Start_IT+0x234>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d022      	beq.n	8006a76 <HAL_TIM_IC_Start_IT+0x1f6>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a38:	d01d      	beq.n	8006a76 <HAL_TIM_IC_Start_IT+0x1f6>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a1e      	ldr	r2, [pc, #120]	; (8006ab8 <HAL_TIM_IC_Start_IT+0x238>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d018      	beq.n	8006a76 <HAL_TIM_IC_Start_IT+0x1f6>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a1c      	ldr	r2, [pc, #112]	; (8006abc <HAL_TIM_IC_Start_IT+0x23c>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d013      	beq.n	8006a76 <HAL_TIM_IC_Start_IT+0x1f6>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a1b      	ldr	r2, [pc, #108]	; (8006ac0 <HAL_TIM_IC_Start_IT+0x240>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d00e      	beq.n	8006a76 <HAL_TIM_IC_Start_IT+0x1f6>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a19      	ldr	r2, [pc, #100]	; (8006ac4 <HAL_TIM_IC_Start_IT+0x244>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d009      	beq.n	8006a76 <HAL_TIM_IC_Start_IT+0x1f6>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a18      	ldr	r2, [pc, #96]	; (8006ac8 <HAL_TIM_IC_Start_IT+0x248>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d004      	beq.n	8006a76 <HAL_TIM_IC_Start_IT+0x1f6>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a16      	ldr	r2, [pc, #88]	; (8006acc <HAL_TIM_IC_Start_IT+0x24c>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d111      	bne.n	8006a9a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	f003 0307 	and.w	r3, r3, #7
 8006a80:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	2b06      	cmp	r3, #6
 8006a86:	d010      	beq.n	8006aaa <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f042 0201 	orr.w	r2, r2, #1
 8006a96:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a98:	e007      	b.n	8006aaa <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f042 0201 	orr.w	r2, r2, #1
 8006aa8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3710      	adds	r7, #16
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}
 8006ab4:	40010000 	.word	0x40010000
 8006ab8:	40000400 	.word	0x40000400
 8006abc:	40000800 	.word	0x40000800
 8006ac0:	40000c00 	.word	0x40000c00
 8006ac4:	40010400 	.word	0x40010400
 8006ac8:	40014000 	.word	0x40014000
 8006acc:	40001800 	.word	0x40001800

08006ad0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b082      	sub	sp, #8
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	f003 0302 	and.w	r3, r3, #2
 8006ae2:	2b02      	cmp	r3, #2
 8006ae4:	d122      	bne.n	8006b2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	f003 0302 	and.w	r3, r3, #2
 8006af0:	2b02      	cmp	r3, #2
 8006af2:	d11b      	bne.n	8006b2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f06f 0202 	mvn.w	r2, #2
 8006afc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2201      	movs	r2, #1
 8006b02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	699b      	ldr	r3, [r3, #24]
 8006b0a:	f003 0303 	and.w	r3, r3, #3
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d003      	beq.n	8006b1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f7fb fc18 	bl	8002348 <HAL_TIM_IC_CaptureCallback>
 8006b18:	e005      	b.n	8006b26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 fb4a 	bl	80071b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 fb51 	bl	80071c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	691b      	ldr	r3, [r3, #16]
 8006b32:	f003 0304 	and.w	r3, r3, #4
 8006b36:	2b04      	cmp	r3, #4
 8006b38:	d122      	bne.n	8006b80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	f003 0304 	and.w	r3, r3, #4
 8006b44:	2b04      	cmp	r3, #4
 8006b46:	d11b      	bne.n	8006b80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f06f 0204 	mvn.w	r2, #4
 8006b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2202      	movs	r2, #2
 8006b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	699b      	ldr	r3, [r3, #24]
 8006b5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d003      	beq.n	8006b6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f7fb fbee 	bl	8002348 <HAL_TIM_IC_CaptureCallback>
 8006b6c:	e005      	b.n	8006b7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 fb20 	bl	80071b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 fb27 	bl	80071c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	691b      	ldr	r3, [r3, #16]
 8006b86:	f003 0308 	and.w	r3, r3, #8
 8006b8a:	2b08      	cmp	r3, #8
 8006b8c:	d122      	bne.n	8006bd4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	f003 0308 	and.w	r3, r3, #8
 8006b98:	2b08      	cmp	r3, #8
 8006b9a:	d11b      	bne.n	8006bd4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f06f 0208 	mvn.w	r2, #8
 8006ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2204      	movs	r2, #4
 8006baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	69db      	ldr	r3, [r3, #28]
 8006bb2:	f003 0303 	and.w	r3, r3, #3
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d003      	beq.n	8006bc2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f7fb fbc4 	bl	8002348 <HAL_TIM_IC_CaptureCallback>
 8006bc0:	e005      	b.n	8006bce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 faf6 	bl	80071b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f000 fafd 	bl	80071c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	691b      	ldr	r3, [r3, #16]
 8006bda:	f003 0310 	and.w	r3, r3, #16
 8006bde:	2b10      	cmp	r3, #16
 8006be0:	d122      	bne.n	8006c28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	68db      	ldr	r3, [r3, #12]
 8006be8:	f003 0310 	and.w	r3, r3, #16
 8006bec:	2b10      	cmp	r3, #16
 8006bee:	d11b      	bne.n	8006c28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f06f 0210 	mvn.w	r2, #16
 8006bf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2208      	movs	r2, #8
 8006bfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	69db      	ldr	r3, [r3, #28]
 8006c06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d003      	beq.n	8006c16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f7fb fb9a 	bl	8002348 <HAL_TIM_IC_CaptureCallback>
 8006c14:	e005      	b.n	8006c22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 facc 	bl	80071b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 fad3 	bl	80071c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	f003 0301 	and.w	r3, r3, #1
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d10e      	bne.n	8006c54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	f003 0301 	and.w	r3, r3, #1
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d107      	bne.n	8006c54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f06f 0201 	mvn.w	r2, #1
 8006c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f7fb fb1c 	bl	800228c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c5e:	2b80      	cmp	r3, #128	; 0x80
 8006c60:	d10e      	bne.n	8006c80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c6c:	2b80      	cmp	r3, #128	; 0x80
 8006c6e:	d107      	bne.n	8006c80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 ff78 	bl	8007b70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c8a:	2b40      	cmp	r3, #64	; 0x40
 8006c8c:	d10e      	bne.n	8006cac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c98:	2b40      	cmp	r3, #64	; 0x40
 8006c9a:	d107      	bne.n	8006cac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 fa98 	bl	80071dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	691b      	ldr	r3, [r3, #16]
 8006cb2:	f003 0320 	and.w	r3, r3, #32
 8006cb6:	2b20      	cmp	r3, #32
 8006cb8:	d10e      	bne.n	8006cd8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	f003 0320 	and.w	r3, r3, #32
 8006cc4:	2b20      	cmp	r3, #32
 8006cc6:	d107      	bne.n	8006cd8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f06f 0220 	mvn.w	r2, #32
 8006cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 ff42 	bl	8007b5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006cd8:	bf00      	nop
 8006cda:	3708      	adds	r7, #8
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b086      	sub	sp, #24
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006cec:	2300      	movs	r3, #0
 8006cee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d101      	bne.n	8006cfe <HAL_TIM_IC_ConfigChannel+0x1e>
 8006cfa:	2302      	movs	r3, #2
 8006cfc:	e088      	b.n	8006e10 <HAL_TIM_IC_ConfigChannel+0x130>
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2201      	movs	r2, #1
 8006d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d11b      	bne.n	8006d44 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6818      	ldr	r0, [r3, #0]
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	6819      	ldr	r1, [r3, #0]
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	685a      	ldr	r2, [r3, #4]
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	f000 fcb8 	bl	8007690 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	699a      	ldr	r2, [r3, #24]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f022 020c 	bic.w	r2, r2, #12
 8006d2e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	6999      	ldr	r1, [r3, #24]
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	689a      	ldr	r2, [r3, #8]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	430a      	orrs	r2, r1
 8006d40:	619a      	str	r2, [r3, #24]
 8006d42:	e060      	b.n	8006e06 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2b04      	cmp	r3, #4
 8006d48:	d11c      	bne.n	8006d84 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6818      	ldr	r0, [r3, #0]
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	6819      	ldr	r1, [r3, #0]
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	685a      	ldr	r2, [r3, #4]
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	f000 fd3c 	bl	80077d6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	699a      	ldr	r2, [r3, #24]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006d6c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	6999      	ldr	r1, [r3, #24]
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	021a      	lsls	r2, r3, #8
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	430a      	orrs	r2, r1
 8006d80:	619a      	str	r2, [r3, #24]
 8006d82:	e040      	b.n	8006e06 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2b08      	cmp	r3, #8
 8006d88:	d11b      	bne.n	8006dc2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6818      	ldr	r0, [r3, #0]
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	6819      	ldr	r1, [r3, #0]
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	685a      	ldr	r2, [r3, #4]
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	68db      	ldr	r3, [r3, #12]
 8006d9a:	f000 fd89 	bl	80078b0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	69da      	ldr	r2, [r3, #28]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f022 020c 	bic.w	r2, r2, #12
 8006dac:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	69d9      	ldr	r1, [r3, #28]
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	689a      	ldr	r2, [r3, #8]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	430a      	orrs	r2, r1
 8006dbe:	61da      	str	r2, [r3, #28]
 8006dc0:	e021      	b.n	8006e06 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2b0c      	cmp	r3, #12
 8006dc6:	d11c      	bne.n	8006e02 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6818      	ldr	r0, [r3, #0]
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	6819      	ldr	r1, [r3, #0]
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	685a      	ldr	r2, [r3, #4]
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	f000 fda6 	bl	8007928 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	69da      	ldr	r2, [r3, #28]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006dea:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	69d9      	ldr	r1, [r3, #28]
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	021a      	lsls	r2, r3, #8
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	430a      	orrs	r2, r1
 8006dfe:	61da      	str	r2, [r3, #28]
 8006e00:	e001      	b.n	8006e06 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3718      	adds	r7, #24
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b086      	sub	sp, #24
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e24:	2300      	movs	r3, #0
 8006e26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d101      	bne.n	8006e36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006e32:	2302      	movs	r3, #2
 8006e34:	e0ae      	b.n	8006f94 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2201      	movs	r2, #1
 8006e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2b0c      	cmp	r3, #12
 8006e42:	f200 809f 	bhi.w	8006f84 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006e46:	a201      	add	r2, pc, #4	; (adr r2, 8006e4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e4c:	08006e81 	.word	0x08006e81
 8006e50:	08006f85 	.word	0x08006f85
 8006e54:	08006f85 	.word	0x08006f85
 8006e58:	08006f85 	.word	0x08006f85
 8006e5c:	08006ec1 	.word	0x08006ec1
 8006e60:	08006f85 	.word	0x08006f85
 8006e64:	08006f85 	.word	0x08006f85
 8006e68:	08006f85 	.word	0x08006f85
 8006e6c:	08006f03 	.word	0x08006f03
 8006e70:	08006f85 	.word	0x08006f85
 8006e74:	08006f85 	.word	0x08006f85
 8006e78:	08006f85 	.word	0x08006f85
 8006e7c:	08006f43 	.word	0x08006f43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	68b9      	ldr	r1, [r7, #8]
 8006e86:	4618      	mov	r0, r3
 8006e88:	f000 fa52 	bl	8007330 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	699a      	ldr	r2, [r3, #24]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f042 0208 	orr.w	r2, r2, #8
 8006e9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	699a      	ldr	r2, [r3, #24]
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f022 0204 	bic.w	r2, r2, #4
 8006eaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	6999      	ldr	r1, [r3, #24]
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	691a      	ldr	r2, [r3, #16]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	430a      	orrs	r2, r1
 8006ebc:	619a      	str	r2, [r3, #24]
      break;
 8006ebe:	e064      	b.n	8006f8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	68b9      	ldr	r1, [r7, #8]
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f000 faa2 	bl	8007410 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	699a      	ldr	r2, [r3, #24]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006eda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	699a      	ldr	r2, [r3, #24]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006eea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	6999      	ldr	r1, [r3, #24]
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	021a      	lsls	r2, r3, #8
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	430a      	orrs	r2, r1
 8006efe:	619a      	str	r2, [r3, #24]
      break;
 8006f00:	e043      	b.n	8006f8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	68b9      	ldr	r1, [r7, #8]
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f000 faf7 	bl	80074fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	69da      	ldr	r2, [r3, #28]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f042 0208 	orr.w	r2, r2, #8
 8006f1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	69da      	ldr	r2, [r3, #28]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f022 0204 	bic.w	r2, r2, #4
 8006f2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	69d9      	ldr	r1, [r3, #28]
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	691a      	ldr	r2, [r3, #16]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	430a      	orrs	r2, r1
 8006f3e:	61da      	str	r2, [r3, #28]
      break;
 8006f40:	e023      	b.n	8006f8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	68b9      	ldr	r1, [r7, #8]
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f000 fb4b 	bl	80075e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	69da      	ldr	r2, [r3, #28]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	69da      	ldr	r2, [r3, #28]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	69d9      	ldr	r1, [r3, #28]
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	691b      	ldr	r3, [r3, #16]
 8006f78:	021a      	lsls	r2, r3, #8
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	430a      	orrs	r2, r1
 8006f80:	61da      	str	r2, [r3, #28]
      break;
 8006f82:	e002      	b.n	8006f8a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
 8006f86:	75fb      	strb	r3, [r7, #23]
      break;
 8006f88:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f92:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3718      	adds	r7, #24
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d101      	bne.n	8006fb8 <HAL_TIM_ConfigClockSource+0x1c>
 8006fb4:	2302      	movs	r3, #2
 8006fb6:	e0b4      	b.n	8007122 <HAL_TIM_ConfigClockSource+0x186>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2202      	movs	r2, #2
 8006fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006fd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006fde:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	68ba      	ldr	r2, [r7, #8]
 8006fe6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ff0:	d03e      	beq.n	8007070 <HAL_TIM_ConfigClockSource+0xd4>
 8006ff2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ff6:	f200 8087 	bhi.w	8007108 <HAL_TIM_ConfigClockSource+0x16c>
 8006ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ffe:	f000 8086 	beq.w	800710e <HAL_TIM_ConfigClockSource+0x172>
 8007002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007006:	d87f      	bhi.n	8007108 <HAL_TIM_ConfigClockSource+0x16c>
 8007008:	2b70      	cmp	r3, #112	; 0x70
 800700a:	d01a      	beq.n	8007042 <HAL_TIM_ConfigClockSource+0xa6>
 800700c:	2b70      	cmp	r3, #112	; 0x70
 800700e:	d87b      	bhi.n	8007108 <HAL_TIM_ConfigClockSource+0x16c>
 8007010:	2b60      	cmp	r3, #96	; 0x60
 8007012:	d050      	beq.n	80070b6 <HAL_TIM_ConfigClockSource+0x11a>
 8007014:	2b60      	cmp	r3, #96	; 0x60
 8007016:	d877      	bhi.n	8007108 <HAL_TIM_ConfigClockSource+0x16c>
 8007018:	2b50      	cmp	r3, #80	; 0x50
 800701a:	d03c      	beq.n	8007096 <HAL_TIM_ConfigClockSource+0xfa>
 800701c:	2b50      	cmp	r3, #80	; 0x50
 800701e:	d873      	bhi.n	8007108 <HAL_TIM_ConfigClockSource+0x16c>
 8007020:	2b40      	cmp	r3, #64	; 0x40
 8007022:	d058      	beq.n	80070d6 <HAL_TIM_ConfigClockSource+0x13a>
 8007024:	2b40      	cmp	r3, #64	; 0x40
 8007026:	d86f      	bhi.n	8007108 <HAL_TIM_ConfigClockSource+0x16c>
 8007028:	2b30      	cmp	r3, #48	; 0x30
 800702a:	d064      	beq.n	80070f6 <HAL_TIM_ConfigClockSource+0x15a>
 800702c:	2b30      	cmp	r3, #48	; 0x30
 800702e:	d86b      	bhi.n	8007108 <HAL_TIM_ConfigClockSource+0x16c>
 8007030:	2b20      	cmp	r3, #32
 8007032:	d060      	beq.n	80070f6 <HAL_TIM_ConfigClockSource+0x15a>
 8007034:	2b20      	cmp	r3, #32
 8007036:	d867      	bhi.n	8007108 <HAL_TIM_ConfigClockSource+0x16c>
 8007038:	2b00      	cmp	r3, #0
 800703a:	d05c      	beq.n	80070f6 <HAL_TIM_ConfigClockSource+0x15a>
 800703c:	2b10      	cmp	r3, #16
 800703e:	d05a      	beq.n	80070f6 <HAL_TIM_ConfigClockSource+0x15a>
 8007040:	e062      	b.n	8007108 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6818      	ldr	r0, [r3, #0]
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	6899      	ldr	r1, [r3, #8]
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	685a      	ldr	r2, [r3, #4]
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	68db      	ldr	r3, [r3, #12]
 8007052:	f000 fcc1 	bl	80079d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007064:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	68ba      	ldr	r2, [r7, #8]
 800706c:	609a      	str	r2, [r3, #8]
      break;
 800706e:	e04f      	b.n	8007110 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6818      	ldr	r0, [r3, #0]
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	6899      	ldr	r1, [r3, #8]
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	685a      	ldr	r2, [r3, #4]
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	68db      	ldr	r3, [r3, #12]
 8007080:	f000 fcaa 	bl	80079d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	689a      	ldr	r2, [r3, #8]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007092:	609a      	str	r2, [r3, #8]
      break;
 8007094:	e03c      	b.n	8007110 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6818      	ldr	r0, [r3, #0]
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	6859      	ldr	r1, [r3, #4]
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	68db      	ldr	r3, [r3, #12]
 80070a2:	461a      	mov	r2, r3
 80070a4:	f000 fb68 	bl	8007778 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	2150      	movs	r1, #80	; 0x50
 80070ae:	4618      	mov	r0, r3
 80070b0:	f000 fc77 	bl	80079a2 <TIM_ITRx_SetConfig>
      break;
 80070b4:	e02c      	b.n	8007110 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6818      	ldr	r0, [r3, #0]
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	6859      	ldr	r1, [r3, #4]
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	68db      	ldr	r3, [r3, #12]
 80070c2:	461a      	mov	r2, r3
 80070c4:	f000 fbc4 	bl	8007850 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	2160      	movs	r1, #96	; 0x60
 80070ce:	4618      	mov	r0, r3
 80070d0:	f000 fc67 	bl	80079a2 <TIM_ITRx_SetConfig>
      break;
 80070d4:	e01c      	b.n	8007110 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6818      	ldr	r0, [r3, #0]
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	6859      	ldr	r1, [r3, #4]
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	68db      	ldr	r3, [r3, #12]
 80070e2:	461a      	mov	r2, r3
 80070e4:	f000 fb48 	bl	8007778 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	2140      	movs	r1, #64	; 0x40
 80070ee:	4618      	mov	r0, r3
 80070f0:	f000 fc57 	bl	80079a2 <TIM_ITRx_SetConfig>
      break;
 80070f4:	e00c      	b.n	8007110 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4619      	mov	r1, r3
 8007100:	4610      	mov	r0, r2
 8007102:	f000 fc4e 	bl	80079a2 <TIM_ITRx_SetConfig>
      break;
 8007106:	e003      	b.n	8007110 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	73fb      	strb	r3, [r7, #15]
      break;
 800710c:	e000      	b.n	8007110 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800710e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2201      	movs	r2, #1
 8007114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007120:	7bfb      	ldrb	r3, [r7, #15]
}
 8007122:	4618      	mov	r0, r3
 8007124:	3710      	adds	r7, #16
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
	...

0800712c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800712c:	b480      	push	{r7}
 800712e:	b085      	sub	sp, #20
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007136:	2300      	movs	r3, #0
 8007138:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	2b0c      	cmp	r3, #12
 800713e:	d831      	bhi.n	80071a4 <HAL_TIM_ReadCapturedValue+0x78>
 8007140:	a201      	add	r2, pc, #4	; (adr r2, 8007148 <HAL_TIM_ReadCapturedValue+0x1c>)
 8007142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007146:	bf00      	nop
 8007148:	0800717d 	.word	0x0800717d
 800714c:	080071a5 	.word	0x080071a5
 8007150:	080071a5 	.word	0x080071a5
 8007154:	080071a5 	.word	0x080071a5
 8007158:	08007187 	.word	0x08007187
 800715c:	080071a5 	.word	0x080071a5
 8007160:	080071a5 	.word	0x080071a5
 8007164:	080071a5 	.word	0x080071a5
 8007168:	08007191 	.word	0x08007191
 800716c:	080071a5 	.word	0x080071a5
 8007170:	080071a5 	.word	0x080071a5
 8007174:	080071a5 	.word	0x080071a5
 8007178:	0800719b 	.word	0x0800719b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007182:	60fb      	str	r3, [r7, #12]

      break;
 8007184:	e00f      	b.n	80071a6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800718c:	60fb      	str	r3, [r7, #12]

      break;
 800718e:	e00a      	b.n	80071a6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007196:	60fb      	str	r3, [r7, #12]

      break;
 8007198:	e005      	b.n	80071a6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a0:	60fb      	str	r3, [r7, #12]

      break;
 80071a2:	e000      	b.n	80071a6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80071a4:	bf00      	nop
  }

  return tmpreg;
 80071a6:	68fb      	ldr	r3, [r7, #12]
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3714      	adds	r7, #20
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr

080071b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b083      	sub	sp, #12
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80071bc:	bf00      	nop
 80071be:	370c      	adds	r7, #12
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr

080071c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b083      	sub	sp, #12
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80071d0:	bf00      	nop
 80071d2:	370c      	adds	r7, #12
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr

080071dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80071dc:	b480      	push	{r7}
 80071de:	b083      	sub	sp, #12
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80071e4:	bf00      	nop
 80071e6:	370c      	adds	r7, #12
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr

080071f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b085      	sub	sp, #20
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	4a40      	ldr	r2, [pc, #256]	; (8007304 <TIM_Base_SetConfig+0x114>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d013      	beq.n	8007230 <TIM_Base_SetConfig+0x40>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800720e:	d00f      	beq.n	8007230 <TIM_Base_SetConfig+0x40>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	4a3d      	ldr	r2, [pc, #244]	; (8007308 <TIM_Base_SetConfig+0x118>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d00b      	beq.n	8007230 <TIM_Base_SetConfig+0x40>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	4a3c      	ldr	r2, [pc, #240]	; (800730c <TIM_Base_SetConfig+0x11c>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d007      	beq.n	8007230 <TIM_Base_SetConfig+0x40>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4a3b      	ldr	r2, [pc, #236]	; (8007310 <TIM_Base_SetConfig+0x120>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d003      	beq.n	8007230 <TIM_Base_SetConfig+0x40>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	4a3a      	ldr	r2, [pc, #232]	; (8007314 <TIM_Base_SetConfig+0x124>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d108      	bne.n	8007242 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007236:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	68fa      	ldr	r2, [r7, #12]
 800723e:	4313      	orrs	r3, r2
 8007240:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	4a2f      	ldr	r2, [pc, #188]	; (8007304 <TIM_Base_SetConfig+0x114>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d02b      	beq.n	80072a2 <TIM_Base_SetConfig+0xb2>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007250:	d027      	beq.n	80072a2 <TIM_Base_SetConfig+0xb2>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	4a2c      	ldr	r2, [pc, #176]	; (8007308 <TIM_Base_SetConfig+0x118>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d023      	beq.n	80072a2 <TIM_Base_SetConfig+0xb2>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4a2b      	ldr	r2, [pc, #172]	; (800730c <TIM_Base_SetConfig+0x11c>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d01f      	beq.n	80072a2 <TIM_Base_SetConfig+0xb2>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4a2a      	ldr	r2, [pc, #168]	; (8007310 <TIM_Base_SetConfig+0x120>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d01b      	beq.n	80072a2 <TIM_Base_SetConfig+0xb2>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4a29      	ldr	r2, [pc, #164]	; (8007314 <TIM_Base_SetConfig+0x124>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d017      	beq.n	80072a2 <TIM_Base_SetConfig+0xb2>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	4a28      	ldr	r2, [pc, #160]	; (8007318 <TIM_Base_SetConfig+0x128>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d013      	beq.n	80072a2 <TIM_Base_SetConfig+0xb2>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4a27      	ldr	r2, [pc, #156]	; (800731c <TIM_Base_SetConfig+0x12c>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d00f      	beq.n	80072a2 <TIM_Base_SetConfig+0xb2>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	4a26      	ldr	r2, [pc, #152]	; (8007320 <TIM_Base_SetConfig+0x130>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d00b      	beq.n	80072a2 <TIM_Base_SetConfig+0xb2>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	4a25      	ldr	r2, [pc, #148]	; (8007324 <TIM_Base_SetConfig+0x134>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d007      	beq.n	80072a2 <TIM_Base_SetConfig+0xb2>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	4a24      	ldr	r2, [pc, #144]	; (8007328 <TIM_Base_SetConfig+0x138>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d003      	beq.n	80072a2 <TIM_Base_SetConfig+0xb2>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4a23      	ldr	r2, [pc, #140]	; (800732c <TIM_Base_SetConfig+0x13c>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d108      	bne.n	80072b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	695b      	ldr	r3, [r3, #20]
 80072be:	4313      	orrs	r3, r2
 80072c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	68fa      	ldr	r2, [r7, #12]
 80072c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	689a      	ldr	r2, [r3, #8]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	4a0a      	ldr	r2, [pc, #40]	; (8007304 <TIM_Base_SetConfig+0x114>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d003      	beq.n	80072e8 <TIM_Base_SetConfig+0xf8>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	4a0c      	ldr	r2, [pc, #48]	; (8007314 <TIM_Base_SetConfig+0x124>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d103      	bne.n	80072f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	691a      	ldr	r2, [r3, #16]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2201      	movs	r2, #1
 80072f4:	615a      	str	r2, [r3, #20]
}
 80072f6:	bf00      	nop
 80072f8:	3714      	adds	r7, #20
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr
 8007302:	bf00      	nop
 8007304:	40010000 	.word	0x40010000
 8007308:	40000400 	.word	0x40000400
 800730c:	40000800 	.word	0x40000800
 8007310:	40000c00 	.word	0x40000c00
 8007314:	40010400 	.word	0x40010400
 8007318:	40014000 	.word	0x40014000
 800731c:	40014400 	.word	0x40014400
 8007320:	40014800 	.word	0x40014800
 8007324:	40001800 	.word	0x40001800
 8007328:	40001c00 	.word	0x40001c00
 800732c:	40002000 	.word	0x40002000

08007330 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007330:	b480      	push	{r7}
 8007332:	b087      	sub	sp, #28
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6a1b      	ldr	r3, [r3, #32]
 800733e:	f023 0201 	bic.w	r2, r3, #1
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6a1b      	ldr	r3, [r3, #32]
 800734a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	699b      	ldr	r3, [r3, #24]
 8007356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800735e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f023 0303 	bic.w	r3, r3, #3
 8007366:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	68fa      	ldr	r2, [r7, #12]
 800736e:	4313      	orrs	r3, r2
 8007370:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	f023 0302 	bic.w	r3, r3, #2
 8007378:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	697a      	ldr	r2, [r7, #20]
 8007380:	4313      	orrs	r3, r2
 8007382:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	4a20      	ldr	r2, [pc, #128]	; (8007408 <TIM_OC1_SetConfig+0xd8>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d003      	beq.n	8007394 <TIM_OC1_SetConfig+0x64>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	4a1f      	ldr	r2, [pc, #124]	; (800740c <TIM_OC1_SetConfig+0xdc>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d10c      	bne.n	80073ae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	f023 0308 	bic.w	r3, r3, #8
 800739a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	697a      	ldr	r2, [r7, #20]
 80073a2:	4313      	orrs	r3, r2
 80073a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	f023 0304 	bic.w	r3, r3, #4
 80073ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	4a15      	ldr	r2, [pc, #84]	; (8007408 <TIM_OC1_SetConfig+0xd8>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d003      	beq.n	80073be <TIM_OC1_SetConfig+0x8e>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	4a14      	ldr	r2, [pc, #80]	; (800740c <TIM_OC1_SetConfig+0xdc>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d111      	bne.n	80073e2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80073cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	695b      	ldr	r3, [r3, #20]
 80073d2:	693a      	ldr	r2, [r7, #16]
 80073d4:	4313      	orrs	r3, r2
 80073d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	699b      	ldr	r3, [r3, #24]
 80073dc:	693a      	ldr	r2, [r7, #16]
 80073de:	4313      	orrs	r3, r2
 80073e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	693a      	ldr	r2, [r7, #16]
 80073e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	68fa      	ldr	r2, [r7, #12]
 80073ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	685a      	ldr	r2, [r3, #4]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	697a      	ldr	r2, [r7, #20]
 80073fa:	621a      	str	r2, [r3, #32]
}
 80073fc:	bf00      	nop
 80073fe:	371c      	adds	r7, #28
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr
 8007408:	40010000 	.word	0x40010000
 800740c:	40010400 	.word	0x40010400

08007410 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007410:	b480      	push	{r7}
 8007412:	b087      	sub	sp, #28
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6a1b      	ldr	r3, [r3, #32]
 800741e:	f023 0210 	bic.w	r2, r3, #16
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6a1b      	ldr	r3, [r3, #32]
 800742a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	699b      	ldr	r3, [r3, #24]
 8007436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800743e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007446:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	021b      	lsls	r3, r3, #8
 800744e:	68fa      	ldr	r2, [r7, #12]
 8007450:	4313      	orrs	r3, r2
 8007452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	f023 0320 	bic.w	r3, r3, #32
 800745a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	011b      	lsls	r3, r3, #4
 8007462:	697a      	ldr	r2, [r7, #20]
 8007464:	4313      	orrs	r3, r2
 8007466:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	4a22      	ldr	r2, [pc, #136]	; (80074f4 <TIM_OC2_SetConfig+0xe4>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d003      	beq.n	8007478 <TIM_OC2_SetConfig+0x68>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	4a21      	ldr	r2, [pc, #132]	; (80074f8 <TIM_OC2_SetConfig+0xe8>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d10d      	bne.n	8007494 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800747e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	011b      	lsls	r3, r3, #4
 8007486:	697a      	ldr	r2, [r7, #20]
 8007488:	4313      	orrs	r3, r2
 800748a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007492:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	4a17      	ldr	r2, [pc, #92]	; (80074f4 <TIM_OC2_SetConfig+0xe4>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d003      	beq.n	80074a4 <TIM_OC2_SetConfig+0x94>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	4a16      	ldr	r2, [pc, #88]	; (80074f8 <TIM_OC2_SetConfig+0xe8>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d113      	bne.n	80074cc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80074aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80074b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	695b      	ldr	r3, [r3, #20]
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	693a      	ldr	r2, [r7, #16]
 80074bc:	4313      	orrs	r3, r2
 80074be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	699b      	ldr	r3, [r3, #24]
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	693a      	ldr	r2, [r7, #16]
 80074c8:	4313      	orrs	r3, r2
 80074ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	693a      	ldr	r2, [r7, #16]
 80074d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	68fa      	ldr	r2, [r7, #12]
 80074d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	685a      	ldr	r2, [r3, #4]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	697a      	ldr	r2, [r7, #20]
 80074e4:	621a      	str	r2, [r3, #32]
}
 80074e6:	bf00      	nop
 80074e8:	371c      	adds	r7, #28
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr
 80074f2:	bf00      	nop
 80074f4:	40010000 	.word	0x40010000
 80074f8:	40010400 	.word	0x40010400

080074fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b087      	sub	sp, #28
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6a1b      	ldr	r3, [r3, #32]
 800750a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6a1b      	ldr	r3, [r3, #32]
 8007516:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	69db      	ldr	r3, [r3, #28]
 8007522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800752a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f023 0303 	bic.w	r3, r3, #3
 8007532:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	68fa      	ldr	r2, [r7, #12]
 800753a:	4313      	orrs	r3, r2
 800753c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007544:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	021b      	lsls	r3, r3, #8
 800754c:	697a      	ldr	r2, [r7, #20]
 800754e:	4313      	orrs	r3, r2
 8007550:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	4a21      	ldr	r2, [pc, #132]	; (80075dc <TIM_OC3_SetConfig+0xe0>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d003      	beq.n	8007562 <TIM_OC3_SetConfig+0x66>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	4a20      	ldr	r2, [pc, #128]	; (80075e0 <TIM_OC3_SetConfig+0xe4>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d10d      	bne.n	800757e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007568:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	021b      	lsls	r3, r3, #8
 8007570:	697a      	ldr	r2, [r7, #20]
 8007572:	4313      	orrs	r3, r2
 8007574:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800757c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4a16      	ldr	r2, [pc, #88]	; (80075dc <TIM_OC3_SetConfig+0xe0>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d003      	beq.n	800758e <TIM_OC3_SetConfig+0x92>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4a15      	ldr	r2, [pc, #84]	; (80075e0 <TIM_OC3_SetConfig+0xe4>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d113      	bne.n	80075b6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007594:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800759c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	695b      	ldr	r3, [r3, #20]
 80075a2:	011b      	lsls	r3, r3, #4
 80075a4:	693a      	ldr	r2, [r7, #16]
 80075a6:	4313      	orrs	r3, r2
 80075a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	699b      	ldr	r3, [r3, #24]
 80075ae:	011b      	lsls	r3, r3, #4
 80075b0:	693a      	ldr	r2, [r7, #16]
 80075b2:	4313      	orrs	r3, r2
 80075b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	693a      	ldr	r2, [r7, #16]
 80075ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	68fa      	ldr	r2, [r7, #12]
 80075c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	685a      	ldr	r2, [r3, #4]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	697a      	ldr	r2, [r7, #20]
 80075ce:	621a      	str	r2, [r3, #32]
}
 80075d0:	bf00      	nop
 80075d2:	371c      	adds	r7, #28
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr
 80075dc:	40010000 	.word	0x40010000
 80075e0:	40010400 	.word	0x40010400

080075e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b087      	sub	sp, #28
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6a1b      	ldr	r3, [r3, #32]
 80075f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6a1b      	ldr	r3, [r3, #32]
 80075fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	69db      	ldr	r3, [r3, #28]
 800760a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007612:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800761a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	021b      	lsls	r3, r3, #8
 8007622:	68fa      	ldr	r2, [r7, #12]
 8007624:	4313      	orrs	r3, r2
 8007626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800762e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	031b      	lsls	r3, r3, #12
 8007636:	693a      	ldr	r2, [r7, #16]
 8007638:	4313      	orrs	r3, r2
 800763a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	4a12      	ldr	r2, [pc, #72]	; (8007688 <TIM_OC4_SetConfig+0xa4>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d003      	beq.n	800764c <TIM_OC4_SetConfig+0x68>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	4a11      	ldr	r2, [pc, #68]	; (800768c <TIM_OC4_SetConfig+0xa8>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d109      	bne.n	8007660 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007652:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	695b      	ldr	r3, [r3, #20]
 8007658:	019b      	lsls	r3, r3, #6
 800765a:	697a      	ldr	r2, [r7, #20]
 800765c:	4313      	orrs	r3, r2
 800765e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	697a      	ldr	r2, [r7, #20]
 8007664:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	68fa      	ldr	r2, [r7, #12]
 800766a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	685a      	ldr	r2, [r3, #4]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	693a      	ldr	r2, [r7, #16]
 8007678:	621a      	str	r2, [r3, #32]
}
 800767a:	bf00      	nop
 800767c:	371c      	adds	r7, #28
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr
 8007686:	bf00      	nop
 8007688:	40010000 	.word	0x40010000
 800768c:	40010400 	.word	0x40010400

08007690 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007690:	b480      	push	{r7}
 8007692:	b087      	sub	sp, #28
 8007694:	af00      	add	r7, sp, #0
 8007696:	60f8      	str	r0, [r7, #12]
 8007698:	60b9      	str	r1, [r7, #8]
 800769a:	607a      	str	r2, [r7, #4]
 800769c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	6a1b      	ldr	r3, [r3, #32]
 80076a2:	f023 0201 	bic.w	r2, r3, #1
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	699b      	ldr	r3, [r3, #24]
 80076ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6a1b      	ldr	r3, [r3, #32]
 80076b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	4a28      	ldr	r2, [pc, #160]	; (800775c <TIM_TI1_SetConfig+0xcc>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d01b      	beq.n	80076f6 <TIM_TI1_SetConfig+0x66>
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076c4:	d017      	beq.n	80076f6 <TIM_TI1_SetConfig+0x66>
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	4a25      	ldr	r2, [pc, #148]	; (8007760 <TIM_TI1_SetConfig+0xd0>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d013      	beq.n	80076f6 <TIM_TI1_SetConfig+0x66>
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	4a24      	ldr	r2, [pc, #144]	; (8007764 <TIM_TI1_SetConfig+0xd4>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d00f      	beq.n	80076f6 <TIM_TI1_SetConfig+0x66>
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	4a23      	ldr	r2, [pc, #140]	; (8007768 <TIM_TI1_SetConfig+0xd8>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d00b      	beq.n	80076f6 <TIM_TI1_SetConfig+0x66>
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	4a22      	ldr	r2, [pc, #136]	; (800776c <TIM_TI1_SetConfig+0xdc>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d007      	beq.n	80076f6 <TIM_TI1_SetConfig+0x66>
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	4a21      	ldr	r2, [pc, #132]	; (8007770 <TIM_TI1_SetConfig+0xe0>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d003      	beq.n	80076f6 <TIM_TI1_SetConfig+0x66>
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	4a20      	ldr	r2, [pc, #128]	; (8007774 <TIM_TI1_SetConfig+0xe4>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d101      	bne.n	80076fa <TIM_TI1_SetConfig+0x6a>
 80076f6:	2301      	movs	r3, #1
 80076f8:	e000      	b.n	80076fc <TIM_TI1_SetConfig+0x6c>
 80076fa:	2300      	movs	r3, #0
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d008      	beq.n	8007712 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	f023 0303 	bic.w	r3, r3, #3
 8007706:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007708:	697a      	ldr	r2, [r7, #20]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	4313      	orrs	r3, r2
 800770e:	617b      	str	r3, [r7, #20]
 8007710:	e003      	b.n	800771a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	f043 0301 	orr.w	r3, r3, #1
 8007718:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007720:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	011b      	lsls	r3, r3, #4
 8007726:	b2db      	uxtb	r3, r3
 8007728:	697a      	ldr	r2, [r7, #20]
 800772a:	4313      	orrs	r3, r2
 800772c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	f023 030a 	bic.w	r3, r3, #10
 8007734:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	f003 030a 	and.w	r3, r3, #10
 800773c:	693a      	ldr	r2, [r7, #16]
 800773e:	4313      	orrs	r3, r2
 8007740:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	697a      	ldr	r2, [r7, #20]
 8007746:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	693a      	ldr	r2, [r7, #16]
 800774c:	621a      	str	r2, [r3, #32]
}
 800774e:	bf00      	nop
 8007750:	371c      	adds	r7, #28
 8007752:	46bd      	mov	sp, r7
 8007754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007758:	4770      	bx	lr
 800775a:	bf00      	nop
 800775c:	40010000 	.word	0x40010000
 8007760:	40000400 	.word	0x40000400
 8007764:	40000800 	.word	0x40000800
 8007768:	40000c00 	.word	0x40000c00
 800776c:	40010400 	.word	0x40010400
 8007770:	40014000 	.word	0x40014000
 8007774:	40001800 	.word	0x40001800

08007778 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007778:	b480      	push	{r7}
 800777a:	b087      	sub	sp, #28
 800777c:	af00      	add	r7, sp, #0
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6a1b      	ldr	r3, [r3, #32]
 8007788:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	6a1b      	ldr	r3, [r3, #32]
 800778e:	f023 0201 	bic.w	r2, r3, #1
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	699b      	ldr	r3, [r3, #24]
 800779a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80077a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	011b      	lsls	r3, r3, #4
 80077a8:	693a      	ldr	r2, [r7, #16]
 80077aa:	4313      	orrs	r3, r2
 80077ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	f023 030a 	bic.w	r3, r3, #10
 80077b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80077b6:	697a      	ldr	r2, [r7, #20]
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	4313      	orrs	r3, r2
 80077bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	693a      	ldr	r2, [r7, #16]
 80077c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	697a      	ldr	r2, [r7, #20]
 80077c8:	621a      	str	r2, [r3, #32]
}
 80077ca:	bf00      	nop
 80077cc:	371c      	adds	r7, #28
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr

080077d6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80077d6:	b480      	push	{r7}
 80077d8:	b087      	sub	sp, #28
 80077da:	af00      	add	r7, sp, #0
 80077dc:	60f8      	str	r0, [r7, #12]
 80077de:	60b9      	str	r1, [r7, #8]
 80077e0:	607a      	str	r2, [r7, #4]
 80077e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	6a1b      	ldr	r3, [r3, #32]
 80077e8:	f023 0210 	bic.w	r2, r3, #16
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	699b      	ldr	r3, [r3, #24]
 80077f4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	6a1b      	ldr	r3, [r3, #32]
 80077fa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007802:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	021b      	lsls	r3, r3, #8
 8007808:	697a      	ldr	r2, [r7, #20]
 800780a:	4313      	orrs	r3, r2
 800780c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007814:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	031b      	lsls	r3, r3, #12
 800781a:	b29b      	uxth	r3, r3
 800781c:	697a      	ldr	r2, [r7, #20]
 800781e:	4313      	orrs	r3, r2
 8007820:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007828:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	011b      	lsls	r3, r3, #4
 800782e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007832:	693a      	ldr	r2, [r7, #16]
 8007834:	4313      	orrs	r3, r2
 8007836:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	697a      	ldr	r2, [r7, #20]
 800783c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	693a      	ldr	r2, [r7, #16]
 8007842:	621a      	str	r2, [r3, #32]
}
 8007844:	bf00      	nop
 8007846:	371c      	adds	r7, #28
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr

08007850 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007850:	b480      	push	{r7}
 8007852:	b087      	sub	sp, #28
 8007854:	af00      	add	r7, sp, #0
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	60b9      	str	r1, [r7, #8]
 800785a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	6a1b      	ldr	r3, [r3, #32]
 8007860:	f023 0210 	bic.w	r2, r3, #16
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	699b      	ldr	r3, [r3, #24]
 800786c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	6a1b      	ldr	r3, [r3, #32]
 8007872:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800787a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	031b      	lsls	r3, r3, #12
 8007880:	697a      	ldr	r2, [r7, #20]
 8007882:	4313      	orrs	r3, r2
 8007884:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800788c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	011b      	lsls	r3, r3, #4
 8007892:	693a      	ldr	r2, [r7, #16]
 8007894:	4313      	orrs	r3, r2
 8007896:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	697a      	ldr	r2, [r7, #20]
 800789c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	693a      	ldr	r2, [r7, #16]
 80078a2:	621a      	str	r2, [r3, #32]
}
 80078a4:	bf00      	nop
 80078a6:	371c      	adds	r7, #28
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr

080078b0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b087      	sub	sp, #28
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	60b9      	str	r1, [r7, #8]
 80078ba:	607a      	str	r2, [r7, #4]
 80078bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	6a1b      	ldr	r3, [r3, #32]
 80078c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	69db      	ldr	r3, [r3, #28]
 80078ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	6a1b      	ldr	r3, [r3, #32]
 80078d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	f023 0303 	bic.w	r3, r3, #3
 80078dc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80078de:	697a      	ldr	r2, [r7, #20]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	4313      	orrs	r3, r2
 80078e4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80078ec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	011b      	lsls	r3, r3, #4
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	697a      	ldr	r2, [r7, #20]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007900:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	021b      	lsls	r3, r3, #8
 8007906:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800790a:	693a      	ldr	r2, [r7, #16]
 800790c:	4313      	orrs	r3, r2
 800790e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	697a      	ldr	r2, [r7, #20]
 8007914:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	693a      	ldr	r2, [r7, #16]
 800791a:	621a      	str	r2, [r3, #32]
}
 800791c:	bf00      	nop
 800791e:	371c      	adds	r7, #28
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr

08007928 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007928:	b480      	push	{r7}
 800792a:	b087      	sub	sp, #28
 800792c:	af00      	add	r7, sp, #0
 800792e:	60f8      	str	r0, [r7, #12]
 8007930:	60b9      	str	r1, [r7, #8]
 8007932:	607a      	str	r2, [r7, #4]
 8007934:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	6a1b      	ldr	r3, [r3, #32]
 800793a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	69db      	ldr	r3, [r3, #28]
 8007946:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	6a1b      	ldr	r3, [r3, #32]
 800794c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007954:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	021b      	lsls	r3, r3, #8
 800795a:	697a      	ldr	r2, [r7, #20]
 800795c:	4313      	orrs	r3, r2
 800795e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007966:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	031b      	lsls	r3, r3, #12
 800796c:	b29b      	uxth	r3, r3
 800796e:	697a      	ldr	r2, [r7, #20]
 8007970:	4313      	orrs	r3, r2
 8007972:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800797a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	031b      	lsls	r3, r3, #12
 8007980:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007984:	693a      	ldr	r2, [r7, #16]
 8007986:	4313      	orrs	r3, r2
 8007988:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	697a      	ldr	r2, [r7, #20]
 800798e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	693a      	ldr	r2, [r7, #16]
 8007994:	621a      	str	r2, [r3, #32]
}
 8007996:	bf00      	nop
 8007998:	371c      	adds	r7, #28
 800799a:	46bd      	mov	sp, r7
 800799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a0:	4770      	bx	lr

080079a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80079a2:	b480      	push	{r7}
 80079a4:	b085      	sub	sp, #20
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	6078      	str	r0, [r7, #4]
 80079aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80079ba:	683a      	ldr	r2, [r7, #0]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	4313      	orrs	r3, r2
 80079c0:	f043 0307 	orr.w	r3, r3, #7
 80079c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	68fa      	ldr	r2, [r7, #12]
 80079ca:	609a      	str	r2, [r3, #8]
}
 80079cc:	bf00      	nop
 80079ce:	3714      	adds	r7, #20
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80079d8:	b480      	push	{r7}
 80079da:	b087      	sub	sp, #28
 80079dc:	af00      	add	r7, sp, #0
 80079de:	60f8      	str	r0, [r7, #12]
 80079e0:	60b9      	str	r1, [r7, #8]
 80079e2:	607a      	str	r2, [r7, #4]
 80079e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80079f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	021a      	lsls	r2, r3, #8
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	431a      	orrs	r2, r3
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	4313      	orrs	r3, r2
 8007a00:	697a      	ldr	r2, [r7, #20]
 8007a02:	4313      	orrs	r3, r2
 8007a04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	697a      	ldr	r2, [r7, #20]
 8007a0a:	609a      	str	r2, [r3, #8]
}
 8007a0c:	bf00      	nop
 8007a0e:	371c      	adds	r7, #28
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b087      	sub	sp, #28
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	60f8      	str	r0, [r7, #12]
 8007a20:	60b9      	str	r1, [r7, #8]
 8007a22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	f003 031f 	and.w	r3, r3, #31
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	6a1a      	ldr	r2, [r3, #32]
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	43db      	mvns	r3, r3
 8007a3a:	401a      	ands	r2, r3
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	6a1a      	ldr	r2, [r3, #32]
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	f003 031f 	and.w	r3, r3, #31
 8007a4a:	6879      	ldr	r1, [r7, #4]
 8007a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8007a50:	431a      	orrs	r2, r3
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	621a      	str	r2, [r3, #32]
}
 8007a56:	bf00      	nop
 8007a58:	371c      	adds	r7, #28
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr
	...

08007a64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b085      	sub	sp, #20
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d101      	bne.n	8007a7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a78:	2302      	movs	r3, #2
 8007a7a:	e05a      	b.n	8007b32 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2202      	movs	r2, #2
 8007a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aa2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	68fa      	ldr	r2, [r7, #12]
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	68fa      	ldr	r2, [r7, #12]
 8007ab4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a21      	ldr	r2, [pc, #132]	; (8007b40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d022      	beq.n	8007b06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ac8:	d01d      	beq.n	8007b06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a1d      	ldr	r2, [pc, #116]	; (8007b44 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d018      	beq.n	8007b06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a1b      	ldr	r2, [pc, #108]	; (8007b48 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d013      	beq.n	8007b06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a1a      	ldr	r2, [pc, #104]	; (8007b4c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d00e      	beq.n	8007b06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a18      	ldr	r2, [pc, #96]	; (8007b50 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d009      	beq.n	8007b06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a17      	ldr	r2, [pc, #92]	; (8007b54 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d004      	beq.n	8007b06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a15      	ldr	r2, [pc, #84]	; (8007b58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d10c      	bne.n	8007b20 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	68ba      	ldr	r2, [r7, #8]
 8007b14:	4313      	orrs	r3, r2
 8007b16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	68ba      	ldr	r2, [r7, #8]
 8007b1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2201      	movs	r2, #1
 8007b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b30:	2300      	movs	r3, #0
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3714      	adds	r7, #20
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr
 8007b3e:	bf00      	nop
 8007b40:	40010000 	.word	0x40010000
 8007b44:	40000400 	.word	0x40000400
 8007b48:	40000800 	.word	0x40000800
 8007b4c:	40000c00 	.word	0x40000c00
 8007b50:	40010400 	.word	0x40010400
 8007b54:	40014000 	.word	0x40014000
 8007b58:	40001800 	.word	0x40001800

08007b5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b083      	sub	sp, #12
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b64:	bf00      	nop
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b78:	bf00      	nop
 8007b7a:	370c      	adds	r7, #12
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr

08007b84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b082      	sub	sp, #8
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d101      	bne.n	8007b96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b92:	2301      	movs	r3, #1
 8007b94:	e03f      	b.n	8007c16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b9c:	b2db      	uxtb	r3, r3
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d106      	bne.n	8007bb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f7fa f954 	bl	8001e58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2224      	movs	r2, #36	; 0x24
 8007bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	68da      	ldr	r2, [r3, #12]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007bc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 fddf 	bl	800878c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	691a      	ldr	r2, [r3, #16]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007bdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	695a      	ldr	r2, [r3, #20]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007bec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	68da      	ldr	r2, [r3, #12]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007bfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2200      	movs	r2, #0
 8007c02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2220      	movs	r2, #32
 8007c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2220      	movs	r2, #32
 8007c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3708      	adds	r7, #8
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b08a      	sub	sp, #40	; 0x28
 8007c22:	af02      	add	r7, sp, #8
 8007c24:	60f8      	str	r0, [r7, #12]
 8007c26:	60b9      	str	r1, [r7, #8]
 8007c28:	603b      	str	r3, [r7, #0]
 8007c2a:	4613      	mov	r3, r2
 8007c2c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	2b20      	cmp	r3, #32
 8007c3c:	d17c      	bne.n	8007d38 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d002      	beq.n	8007c4a <HAL_UART_Transmit+0x2c>
 8007c44:	88fb      	ldrh	r3, [r7, #6]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d101      	bne.n	8007c4e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	e075      	b.n	8007d3a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d101      	bne.n	8007c5c <HAL_UART_Transmit+0x3e>
 8007c58:	2302      	movs	r3, #2
 8007c5a:	e06e      	b.n	8007d3a <HAL_UART_Transmit+0x11c>
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2200      	movs	r2, #0
 8007c68:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2221      	movs	r2, #33	; 0x21
 8007c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007c72:	f7fb fcb3 	bl	80035dc <HAL_GetTick>
 8007c76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	88fa      	ldrh	r2, [r7, #6]
 8007c7c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	88fa      	ldrh	r2, [r7, #6]
 8007c82:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c8c:	d108      	bne.n	8007ca0 <HAL_UART_Transmit+0x82>
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	691b      	ldr	r3, [r3, #16]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d104      	bne.n	8007ca0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007c96:	2300      	movs	r3, #0
 8007c98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	61bb      	str	r3, [r7, #24]
 8007c9e:	e003      	b.n	8007ca8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2200      	movs	r2, #0
 8007cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007cb0:	e02a      	b.n	8007d08 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	9300      	str	r3, [sp, #0]
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	2180      	movs	r1, #128	; 0x80
 8007cbc:	68f8      	ldr	r0, [r7, #12]
 8007cbe:	f000 fb1f 	bl	8008300 <UART_WaitOnFlagUntilTimeout>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d001      	beq.n	8007ccc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007cc8:	2303      	movs	r3, #3
 8007cca:	e036      	b.n	8007d3a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007ccc:	69fb      	ldr	r3, [r7, #28]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d10b      	bne.n	8007cea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007cd2:	69bb      	ldr	r3, [r7, #24]
 8007cd4:	881b      	ldrh	r3, [r3, #0]
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ce0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007ce2:	69bb      	ldr	r3, [r7, #24]
 8007ce4:	3302      	adds	r3, #2
 8007ce6:	61bb      	str	r3, [r7, #24]
 8007ce8:	e007      	b.n	8007cfa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007cea:	69fb      	ldr	r3, [r7, #28]
 8007cec:	781a      	ldrb	r2, [r3, #0]
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007cf4:	69fb      	ldr	r3, [r7, #28]
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	3b01      	subs	r3, #1
 8007d02:	b29a      	uxth	r2, r3
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d1cf      	bne.n	8007cb2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	9300      	str	r3, [sp, #0]
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	2140      	movs	r1, #64	; 0x40
 8007d1c:	68f8      	ldr	r0, [r7, #12]
 8007d1e:	f000 faef 	bl	8008300 <UART_WaitOnFlagUntilTimeout>
 8007d22:	4603      	mov	r3, r0
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d001      	beq.n	8007d2c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007d28:	2303      	movs	r3, #3
 8007d2a:	e006      	b.n	8007d3a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2220      	movs	r2, #32
 8007d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007d34:	2300      	movs	r3, #0
 8007d36:	e000      	b.n	8007d3a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007d38:	2302      	movs	r3, #2
  }
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3720      	adds	r7, #32
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}

08007d42 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d42:	b580      	push	{r7, lr}
 8007d44:	b084      	sub	sp, #16
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	60f8      	str	r0, [r7, #12]
 8007d4a:	60b9      	str	r1, [r7, #8]
 8007d4c:	4613      	mov	r3, r2
 8007d4e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	2b20      	cmp	r3, #32
 8007d5a:	d11d      	bne.n	8007d98 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d002      	beq.n	8007d68 <HAL_UART_Receive_IT+0x26>
 8007d62:	88fb      	ldrh	r3, [r7, #6]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d101      	bne.n	8007d6c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	e016      	b.n	8007d9a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d101      	bne.n	8007d7a <HAL_UART_Receive_IT+0x38>
 8007d76:	2302      	movs	r3, #2
 8007d78:	e00f      	b.n	8007d9a <HAL_UART_Receive_IT+0x58>
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2200      	movs	r2, #0
 8007d86:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007d88:	88fb      	ldrh	r3, [r7, #6]
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	68b9      	ldr	r1, [r7, #8]
 8007d8e:	68f8      	ldr	r0, [r7, #12]
 8007d90:	f000 fb24 	bl	80083dc <UART_Start_Receive_IT>
 8007d94:	4603      	mov	r3, r0
 8007d96:	e000      	b.n	8007d9a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007d98:	2302      	movs	r3, #2
  }
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3710      	adds	r7, #16
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
	...

08007da4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b0ba      	sub	sp, #232	; 0xe8
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	68db      	ldr	r3, [r3, #12]
 8007dbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	695b      	ldr	r3, [r3, #20]
 8007dc6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dda:	f003 030f 	and.w	r3, r3, #15
 8007dde:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007de2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d10f      	bne.n	8007e0a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dee:	f003 0320 	and.w	r3, r3, #32
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d009      	beq.n	8007e0a <HAL_UART_IRQHandler+0x66>
 8007df6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dfa:	f003 0320 	and.w	r3, r3, #32
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d003      	beq.n	8007e0a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 fc07 	bl	8008616 <UART_Receive_IT>
      return;
 8007e08:	e256      	b.n	80082b8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007e0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	f000 80de 	beq.w	8007fd0 <HAL_UART_IRQHandler+0x22c>
 8007e14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e18:	f003 0301 	and.w	r3, r3, #1
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d106      	bne.n	8007e2e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007e20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e24:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	f000 80d1 	beq.w	8007fd0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e32:	f003 0301 	and.w	r3, r3, #1
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d00b      	beq.n	8007e52 <HAL_UART_IRQHandler+0xae>
 8007e3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d005      	beq.n	8007e52 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e4a:	f043 0201 	orr.w	r2, r3, #1
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e56:	f003 0304 	and.w	r3, r3, #4
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d00b      	beq.n	8007e76 <HAL_UART_IRQHandler+0xd2>
 8007e5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e62:	f003 0301 	and.w	r3, r3, #1
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d005      	beq.n	8007e76 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e6e:	f043 0202 	orr.w	r2, r3, #2
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e7a:	f003 0302 	and.w	r3, r3, #2
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d00b      	beq.n	8007e9a <HAL_UART_IRQHandler+0xf6>
 8007e82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e86:	f003 0301 	and.w	r3, r3, #1
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d005      	beq.n	8007e9a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e92:	f043 0204 	orr.w	r2, r3, #4
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e9e:	f003 0308 	and.w	r3, r3, #8
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d011      	beq.n	8007eca <HAL_UART_IRQHandler+0x126>
 8007ea6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007eaa:	f003 0320 	and.w	r3, r3, #32
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d105      	bne.n	8007ebe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007eb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007eb6:	f003 0301 	and.w	r3, r3, #1
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d005      	beq.n	8007eca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ec2:	f043 0208 	orr.w	r2, r3, #8
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	f000 81ed 	beq.w	80082ae <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007ed4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ed8:	f003 0320 	and.w	r3, r3, #32
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d008      	beq.n	8007ef2 <HAL_UART_IRQHandler+0x14e>
 8007ee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ee4:	f003 0320 	and.w	r3, r3, #32
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d002      	beq.n	8007ef2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 fb92 	bl	8008616 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	695b      	ldr	r3, [r3, #20]
 8007ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007efc:	2b40      	cmp	r3, #64	; 0x40
 8007efe:	bf0c      	ite	eq
 8007f00:	2301      	moveq	r3, #1
 8007f02:	2300      	movne	r3, #0
 8007f04:	b2db      	uxtb	r3, r3
 8007f06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f0e:	f003 0308 	and.w	r3, r3, #8
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d103      	bne.n	8007f1e <HAL_UART_IRQHandler+0x17a>
 8007f16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d04f      	beq.n	8007fbe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 fa9a 	bl	8008458 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	695b      	ldr	r3, [r3, #20]
 8007f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f2e:	2b40      	cmp	r3, #64	; 0x40
 8007f30:	d141      	bne.n	8007fb6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	3314      	adds	r3, #20
 8007f38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f40:	e853 3f00 	ldrex	r3, [r3]
 8007f44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007f48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	3314      	adds	r3, #20
 8007f5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007f5e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007f62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007f6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007f6e:	e841 2300 	strex	r3, r2, [r1]
 8007f72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007f76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d1d9      	bne.n	8007f32 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d013      	beq.n	8007fae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f8a:	4a7d      	ldr	r2, [pc, #500]	; (8008180 <HAL_UART_IRQHandler+0x3dc>)
 8007f8c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f92:	4618      	mov	r0, r3
 8007f94:	f7fb fcd3 	bl	800393e <HAL_DMA_Abort_IT>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d016      	beq.n	8007fcc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007fa8:	4610      	mov	r0, r2
 8007faa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fac:	e00e      	b.n	8007fcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f000 f990 	bl	80082d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fb4:	e00a      	b.n	8007fcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 f98c 	bl	80082d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fbc:	e006      	b.n	8007fcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 f988 	bl	80082d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007fca:	e170      	b.n	80082ae <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fcc:	bf00      	nop
    return;
 8007fce:	e16e      	b.n	80082ae <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	f040 814a 	bne.w	800826e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fde:	f003 0310 	and.w	r3, r3, #16
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	f000 8143 	beq.w	800826e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007fe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fec:	f003 0310 	and.w	r3, r3, #16
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	f000 813c 	beq.w	800826e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	60bb      	str	r3, [r7, #8]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	60bb      	str	r3, [r7, #8]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	60bb      	str	r3, [r7, #8]
 800800a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	695b      	ldr	r3, [r3, #20]
 8008012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008016:	2b40      	cmp	r3, #64	; 0x40
 8008018:	f040 80b4 	bne.w	8008184 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008028:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800802c:	2b00      	cmp	r3, #0
 800802e:	f000 8140 	beq.w	80082b2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008036:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800803a:	429a      	cmp	r2, r3
 800803c:	f080 8139 	bcs.w	80082b2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008046:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800804c:	69db      	ldr	r3, [r3, #28]
 800804e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008052:	f000 8088 	beq.w	8008166 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	330c      	adds	r3, #12
 800805c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008060:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008064:	e853 3f00 	ldrex	r3, [r3]
 8008068:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800806c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008070:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008074:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	330c      	adds	r3, #12
 800807e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008082:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008086:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800808a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800808e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008092:	e841 2300 	strex	r3, r2, [r1]
 8008096:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800809a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d1d9      	bne.n	8008056 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	3314      	adds	r3, #20
 80080a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080ac:	e853 3f00 	ldrex	r3, [r3]
 80080b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80080b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80080b4:	f023 0301 	bic.w	r3, r3, #1
 80080b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	3314      	adds	r3, #20
 80080c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80080c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80080ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80080ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80080d2:	e841 2300 	strex	r3, r2, [r1]
 80080d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80080d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d1e1      	bne.n	80080a2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	3314      	adds	r3, #20
 80080e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80080e8:	e853 3f00 	ldrex	r3, [r3]
 80080ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80080ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	3314      	adds	r3, #20
 80080fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008102:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008104:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008106:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008108:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800810a:	e841 2300 	strex	r3, r2, [r1]
 800810e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008110:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008112:	2b00      	cmp	r3, #0
 8008114:	d1e3      	bne.n	80080de <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2220      	movs	r2, #32
 800811a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2200      	movs	r2, #0
 8008122:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	330c      	adds	r3, #12
 800812a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800812c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800812e:	e853 3f00 	ldrex	r3, [r3]
 8008132:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008134:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008136:	f023 0310 	bic.w	r3, r3, #16
 800813a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	330c      	adds	r3, #12
 8008144:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008148:	65ba      	str	r2, [r7, #88]	; 0x58
 800814a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800814c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800814e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008150:	e841 2300 	strex	r3, r2, [r1]
 8008154:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008156:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008158:	2b00      	cmp	r3, #0
 800815a:	d1e3      	bne.n	8008124 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008160:	4618      	mov	r0, r3
 8008162:	f7fb fb7c 	bl	800385e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800816e:	b29b      	uxth	r3, r3
 8008170:	1ad3      	subs	r3, r2, r3
 8008172:	b29b      	uxth	r3, r3
 8008174:	4619      	mov	r1, r3
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 f8b6 	bl	80082e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800817c:	e099      	b.n	80082b2 <HAL_UART_IRQHandler+0x50e>
 800817e:	bf00      	nop
 8008180:	0800851f 	.word	0x0800851f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800818c:	b29b      	uxth	r3, r3
 800818e:	1ad3      	subs	r3, r2, r3
 8008190:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008198:	b29b      	uxth	r3, r3
 800819a:	2b00      	cmp	r3, #0
 800819c:	f000 808b 	beq.w	80082b6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80081a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	f000 8086 	beq.w	80082b6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	330c      	adds	r3, #12
 80081b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b4:	e853 3f00 	ldrex	r3, [r3]
 80081b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80081ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80081c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	330c      	adds	r3, #12
 80081ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80081ce:	647a      	str	r2, [r7, #68]	; 0x44
 80081d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80081d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80081d6:	e841 2300 	strex	r3, r2, [r1]
 80081da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80081dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d1e3      	bne.n	80081aa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	3314      	adds	r3, #20
 80081e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ec:	e853 3f00 	ldrex	r3, [r3]
 80081f0:	623b      	str	r3, [r7, #32]
   return(result);
 80081f2:	6a3b      	ldr	r3, [r7, #32]
 80081f4:	f023 0301 	bic.w	r3, r3, #1
 80081f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	3314      	adds	r3, #20
 8008202:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008206:	633a      	str	r2, [r7, #48]	; 0x30
 8008208:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800820a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800820c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800820e:	e841 2300 	strex	r3, r2, [r1]
 8008212:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008216:	2b00      	cmp	r3, #0
 8008218:	d1e3      	bne.n	80081e2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2220      	movs	r2, #32
 800821e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	330c      	adds	r3, #12
 800822e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	e853 3f00 	ldrex	r3, [r3]
 8008236:	60fb      	str	r3, [r7, #12]
   return(result);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f023 0310 	bic.w	r3, r3, #16
 800823e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	330c      	adds	r3, #12
 8008248:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800824c:	61fa      	str	r2, [r7, #28]
 800824e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008250:	69b9      	ldr	r1, [r7, #24]
 8008252:	69fa      	ldr	r2, [r7, #28]
 8008254:	e841 2300 	strex	r3, r2, [r1]
 8008258:	617b      	str	r3, [r7, #20]
   return(result);
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d1e3      	bne.n	8008228 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008260:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008264:	4619      	mov	r1, r3
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 f83e 	bl	80082e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800826c:	e023      	b.n	80082b6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800826e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008276:	2b00      	cmp	r3, #0
 8008278:	d009      	beq.n	800828e <HAL_UART_IRQHandler+0x4ea>
 800827a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800827e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008282:	2b00      	cmp	r3, #0
 8008284:	d003      	beq.n	800828e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 f95d 	bl	8008546 <UART_Transmit_IT>
    return;
 800828c:	e014      	b.n	80082b8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800828e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008296:	2b00      	cmp	r3, #0
 8008298:	d00e      	beq.n	80082b8 <HAL_UART_IRQHandler+0x514>
 800829a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800829e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d008      	beq.n	80082b8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 f99d 	bl	80085e6 <UART_EndTransmit_IT>
    return;
 80082ac:	e004      	b.n	80082b8 <HAL_UART_IRQHandler+0x514>
    return;
 80082ae:	bf00      	nop
 80082b0:	e002      	b.n	80082b8 <HAL_UART_IRQHandler+0x514>
      return;
 80082b2:	bf00      	nop
 80082b4:	e000      	b.n	80082b8 <HAL_UART_IRQHandler+0x514>
      return;
 80082b6:	bf00      	nop
  }
}
 80082b8:	37e8      	adds	r7, #232	; 0xe8
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
 80082be:	bf00      	nop

080082c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b083      	sub	sp, #12
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80082c8:	bf00      	nop
 80082ca:	370c      	adds	r7, #12
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr

080082d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80082dc:	bf00      	nop
 80082de:	370c      	adds	r7, #12
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr

080082e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b083      	sub	sp, #12
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	460b      	mov	r3, r1
 80082f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80082f4:	bf00      	nop
 80082f6:	370c      	adds	r7, #12
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr

08008300 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b090      	sub	sp, #64	; 0x40
 8008304:	af00      	add	r7, sp, #0
 8008306:	60f8      	str	r0, [r7, #12]
 8008308:	60b9      	str	r1, [r7, #8]
 800830a:	603b      	str	r3, [r7, #0]
 800830c:	4613      	mov	r3, r2
 800830e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008310:	e050      	b.n	80083b4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008312:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008318:	d04c      	beq.n	80083b4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800831a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800831c:	2b00      	cmp	r3, #0
 800831e:	d007      	beq.n	8008330 <UART_WaitOnFlagUntilTimeout+0x30>
 8008320:	f7fb f95c 	bl	80035dc <HAL_GetTick>
 8008324:	4602      	mov	r2, r0
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	1ad3      	subs	r3, r2, r3
 800832a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800832c:	429a      	cmp	r2, r3
 800832e:	d241      	bcs.n	80083b4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	330c      	adds	r3, #12
 8008336:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800833a:	e853 3f00 	ldrex	r3, [r3]
 800833e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008342:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008346:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	330c      	adds	r3, #12
 800834e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008350:	637a      	str	r2, [r7, #52]	; 0x34
 8008352:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008354:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008356:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008358:	e841 2300 	strex	r3, r2, [r1]
 800835c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800835e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008360:	2b00      	cmp	r3, #0
 8008362:	d1e5      	bne.n	8008330 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	3314      	adds	r3, #20
 800836a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	e853 3f00 	ldrex	r3, [r3]
 8008372:	613b      	str	r3, [r7, #16]
   return(result);
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	f023 0301 	bic.w	r3, r3, #1
 800837a:	63bb      	str	r3, [r7, #56]	; 0x38
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	3314      	adds	r3, #20
 8008382:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008384:	623a      	str	r2, [r7, #32]
 8008386:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008388:	69f9      	ldr	r1, [r7, #28]
 800838a:	6a3a      	ldr	r2, [r7, #32]
 800838c:	e841 2300 	strex	r3, r2, [r1]
 8008390:	61bb      	str	r3, [r7, #24]
   return(result);
 8008392:	69bb      	ldr	r3, [r7, #24]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d1e5      	bne.n	8008364 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2220      	movs	r2, #32
 800839c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2220      	movs	r2, #32
 80083a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	2200      	movs	r2, #0
 80083ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80083b0:	2303      	movs	r3, #3
 80083b2:	e00f      	b.n	80083d4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	4013      	ands	r3, r2
 80083be:	68ba      	ldr	r2, [r7, #8]
 80083c0:	429a      	cmp	r2, r3
 80083c2:	bf0c      	ite	eq
 80083c4:	2301      	moveq	r3, #1
 80083c6:	2300      	movne	r3, #0
 80083c8:	b2db      	uxtb	r3, r3
 80083ca:	461a      	mov	r2, r3
 80083cc:	79fb      	ldrb	r3, [r7, #7]
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d09f      	beq.n	8008312 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80083d2:	2300      	movs	r3, #0
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3740      	adds	r7, #64	; 0x40
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083dc:	b480      	push	{r7}
 80083de:	b085      	sub	sp, #20
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	60f8      	str	r0, [r7, #12]
 80083e4:	60b9      	str	r1, [r7, #8]
 80083e6:	4613      	mov	r3, r2
 80083e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	68ba      	ldr	r2, [r7, #8]
 80083ee:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	88fa      	ldrh	r2, [r7, #6]
 80083f4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	88fa      	ldrh	r2, [r7, #6]
 80083fa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2200      	movs	r2, #0
 8008400:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2222      	movs	r2, #34	; 0x22
 8008406:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2200      	movs	r2, #0
 800840e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	691b      	ldr	r3, [r3, #16]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d007      	beq.n	800842a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	68da      	ldr	r2, [r3, #12]
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008428:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	695a      	ldr	r2, [r3, #20]
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f042 0201 	orr.w	r2, r2, #1
 8008438:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	68da      	ldr	r2, [r3, #12]
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f042 0220 	orr.w	r2, r2, #32
 8008448:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800844a:	2300      	movs	r3, #0
}
 800844c:	4618      	mov	r0, r3
 800844e:	3714      	adds	r7, #20
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr

08008458 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008458:	b480      	push	{r7}
 800845a:	b095      	sub	sp, #84	; 0x54
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	330c      	adds	r3, #12
 8008466:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800846a:	e853 3f00 	ldrex	r3, [r3]
 800846e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008472:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008476:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	330c      	adds	r3, #12
 800847e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008480:	643a      	str	r2, [r7, #64]	; 0x40
 8008482:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008484:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008486:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008488:	e841 2300 	strex	r3, r2, [r1]
 800848c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800848e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008490:	2b00      	cmp	r3, #0
 8008492:	d1e5      	bne.n	8008460 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	3314      	adds	r3, #20
 800849a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800849c:	6a3b      	ldr	r3, [r7, #32]
 800849e:	e853 3f00 	ldrex	r3, [r3]
 80084a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80084a4:	69fb      	ldr	r3, [r7, #28]
 80084a6:	f023 0301 	bic.w	r3, r3, #1
 80084aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	3314      	adds	r3, #20
 80084b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80084b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084bc:	e841 2300 	strex	r3, r2, [r1]
 80084c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80084c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d1e5      	bne.n	8008494 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d119      	bne.n	8008504 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	330c      	adds	r3, #12
 80084d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	e853 3f00 	ldrex	r3, [r3]
 80084de:	60bb      	str	r3, [r7, #8]
   return(result);
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	f023 0310 	bic.w	r3, r3, #16
 80084e6:	647b      	str	r3, [r7, #68]	; 0x44
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	330c      	adds	r3, #12
 80084ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80084f0:	61ba      	str	r2, [r7, #24]
 80084f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f4:	6979      	ldr	r1, [r7, #20]
 80084f6:	69ba      	ldr	r2, [r7, #24]
 80084f8:	e841 2300 	strex	r3, r2, [r1]
 80084fc:	613b      	str	r3, [r7, #16]
   return(result);
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d1e5      	bne.n	80084d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2220      	movs	r2, #32
 8008508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2200      	movs	r2, #0
 8008510:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008512:	bf00      	nop
 8008514:	3754      	adds	r7, #84	; 0x54
 8008516:	46bd      	mov	sp, r7
 8008518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851c:	4770      	bx	lr

0800851e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800851e:	b580      	push	{r7, lr}
 8008520:	b084      	sub	sp, #16
 8008522:	af00      	add	r7, sp, #0
 8008524:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800852a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2200      	movs	r2, #0
 8008530:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2200      	movs	r2, #0
 8008536:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008538:	68f8      	ldr	r0, [r7, #12]
 800853a:	f7ff fecb 	bl	80082d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800853e:	bf00      	nop
 8008540:	3710      	adds	r7, #16
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}

08008546 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008546:	b480      	push	{r7}
 8008548:	b085      	sub	sp, #20
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008554:	b2db      	uxtb	r3, r3
 8008556:	2b21      	cmp	r3, #33	; 0x21
 8008558:	d13e      	bne.n	80085d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	689b      	ldr	r3, [r3, #8]
 800855e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008562:	d114      	bne.n	800858e <UART_Transmit_IT+0x48>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	691b      	ldr	r3, [r3, #16]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d110      	bne.n	800858e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6a1b      	ldr	r3, [r3, #32]
 8008570:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	881b      	ldrh	r3, [r3, #0]
 8008576:	461a      	mov	r2, r3
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008580:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6a1b      	ldr	r3, [r3, #32]
 8008586:	1c9a      	adds	r2, r3, #2
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	621a      	str	r2, [r3, #32]
 800858c:	e008      	b.n	80085a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6a1b      	ldr	r3, [r3, #32]
 8008592:	1c59      	adds	r1, r3, #1
 8008594:	687a      	ldr	r2, [r7, #4]
 8008596:	6211      	str	r1, [r2, #32]
 8008598:	781a      	ldrb	r2, [r3, #0]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	3b01      	subs	r3, #1
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	4619      	mov	r1, r3
 80085ae:	84d1      	strh	r1, [r2, #38]	; 0x26
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d10f      	bne.n	80085d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	68da      	ldr	r2, [r3, #12]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80085c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	68da      	ldr	r2, [r3, #12]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80085d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80085d4:	2300      	movs	r3, #0
 80085d6:	e000      	b.n	80085da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80085d8:	2302      	movs	r3, #2
  }
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3714      	adds	r7, #20
 80085de:	46bd      	mov	sp, r7
 80085e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e4:	4770      	bx	lr

080085e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80085e6:	b580      	push	{r7, lr}
 80085e8:	b082      	sub	sp, #8
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	68da      	ldr	r2, [r3, #12]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2220      	movs	r2, #32
 8008602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f7ff fe5a 	bl	80082c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800860c:	2300      	movs	r3, #0
}
 800860e:	4618      	mov	r0, r3
 8008610:	3708      	adds	r7, #8
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}

08008616 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008616:	b580      	push	{r7, lr}
 8008618:	b08c      	sub	sp, #48	; 0x30
 800861a:	af00      	add	r7, sp, #0
 800861c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008624:	b2db      	uxtb	r3, r3
 8008626:	2b22      	cmp	r3, #34	; 0x22
 8008628:	f040 80ab 	bne.w	8008782 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008634:	d117      	bne.n	8008666 <UART_Receive_IT+0x50>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	691b      	ldr	r3, [r3, #16]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d113      	bne.n	8008666 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800863e:	2300      	movs	r3, #0
 8008640:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008646:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	b29b      	uxth	r3, r3
 8008650:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008654:	b29a      	uxth	r2, r3
 8008656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008658:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800865e:	1c9a      	adds	r2, r3, #2
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	629a      	str	r2, [r3, #40]	; 0x28
 8008664:	e026      	b.n	80086b4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800866a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800866c:	2300      	movs	r3, #0
 800866e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	689b      	ldr	r3, [r3, #8]
 8008674:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008678:	d007      	beq.n	800868a <UART_Receive_IT+0x74>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d10a      	bne.n	8008698 <UART_Receive_IT+0x82>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	691b      	ldr	r3, [r3, #16]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d106      	bne.n	8008698 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	b2da      	uxtb	r2, r3
 8008692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008694:	701a      	strb	r2, [r3, #0]
 8008696:	e008      	b.n	80086aa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	b2db      	uxtb	r3, r3
 80086a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086a4:	b2da      	uxtb	r2, r3
 80086a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086a8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ae:	1c5a      	adds	r2, r3, #1
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	3b01      	subs	r3, #1
 80086bc:	b29b      	uxth	r3, r3
 80086be:	687a      	ldr	r2, [r7, #4]
 80086c0:	4619      	mov	r1, r3
 80086c2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d15a      	bne.n	800877e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	68da      	ldr	r2, [r3, #12]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f022 0220 	bic.w	r2, r2, #32
 80086d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	68da      	ldr	r2, [r3, #12]
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80086e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	695a      	ldr	r2, [r3, #20]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f022 0201 	bic.w	r2, r2, #1
 80086f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2220      	movs	r2, #32
 80086fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008704:	2b01      	cmp	r3, #1
 8008706:	d135      	bne.n	8008774 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2200      	movs	r2, #0
 800870c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	330c      	adds	r3, #12
 8008714:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	e853 3f00 	ldrex	r3, [r3]
 800871c:	613b      	str	r3, [r7, #16]
   return(result);
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	f023 0310 	bic.w	r3, r3, #16
 8008724:	627b      	str	r3, [r7, #36]	; 0x24
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	330c      	adds	r3, #12
 800872c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800872e:	623a      	str	r2, [r7, #32]
 8008730:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008732:	69f9      	ldr	r1, [r7, #28]
 8008734:	6a3a      	ldr	r2, [r7, #32]
 8008736:	e841 2300 	strex	r3, r2, [r1]
 800873a:	61bb      	str	r3, [r7, #24]
   return(result);
 800873c:	69bb      	ldr	r3, [r7, #24]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d1e5      	bne.n	800870e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f003 0310 	and.w	r3, r3, #16
 800874c:	2b10      	cmp	r3, #16
 800874e:	d10a      	bne.n	8008766 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008750:	2300      	movs	r3, #0
 8008752:	60fb      	str	r3, [r7, #12]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	60fb      	str	r3, [r7, #12]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	60fb      	str	r3, [r7, #12]
 8008764:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800876a:	4619      	mov	r1, r3
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f7ff fdbb 	bl	80082e8 <HAL_UARTEx_RxEventCallback>
 8008772:	e002      	b.n	800877a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f7f9 fe1d 	bl	80023b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800877a:	2300      	movs	r3, #0
 800877c:	e002      	b.n	8008784 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800877e:	2300      	movs	r3, #0
 8008780:	e000      	b.n	8008784 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008782:	2302      	movs	r3, #2
  }
}
 8008784:	4618      	mov	r0, r3
 8008786:	3730      	adds	r7, #48	; 0x30
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800878c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008790:	b0c0      	sub	sp, #256	; 0x100
 8008792:	af00      	add	r7, sp, #0
 8008794:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	691b      	ldr	r3, [r3, #16]
 80087a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80087a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087a8:	68d9      	ldr	r1, [r3, #12]
 80087aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087ae:	681a      	ldr	r2, [r3, #0]
 80087b0:	ea40 0301 	orr.w	r3, r0, r1
 80087b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80087b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087ba:	689a      	ldr	r2, [r3, #8]
 80087bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087c0:	691b      	ldr	r3, [r3, #16]
 80087c2:	431a      	orrs	r2, r3
 80087c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087c8:	695b      	ldr	r3, [r3, #20]
 80087ca:	431a      	orrs	r2, r3
 80087cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087d0:	69db      	ldr	r3, [r3, #28]
 80087d2:	4313      	orrs	r3, r2
 80087d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80087d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	68db      	ldr	r3, [r3, #12]
 80087e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80087e4:	f021 010c 	bic.w	r1, r1, #12
 80087e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80087f2:	430b      	orrs	r3, r1
 80087f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80087f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	695b      	ldr	r3, [r3, #20]
 80087fe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008806:	6999      	ldr	r1, [r3, #24]
 8008808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800880c:	681a      	ldr	r2, [r3, #0]
 800880e:	ea40 0301 	orr.w	r3, r0, r1
 8008812:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	4b8f      	ldr	r3, [pc, #572]	; (8008a58 <UART_SetConfig+0x2cc>)
 800881c:	429a      	cmp	r2, r3
 800881e:	d005      	beq.n	800882c <UART_SetConfig+0xa0>
 8008820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008824:	681a      	ldr	r2, [r3, #0]
 8008826:	4b8d      	ldr	r3, [pc, #564]	; (8008a5c <UART_SetConfig+0x2d0>)
 8008828:	429a      	cmp	r2, r3
 800882a:	d104      	bne.n	8008836 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800882c:	f7fd f818 	bl	8005860 <HAL_RCC_GetPCLK2Freq>
 8008830:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008834:	e003      	b.n	800883e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008836:	f7fc ffff 	bl	8005838 <HAL_RCC_GetPCLK1Freq>
 800883a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800883e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008842:	69db      	ldr	r3, [r3, #28]
 8008844:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008848:	f040 810c 	bne.w	8008a64 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800884c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008850:	2200      	movs	r2, #0
 8008852:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008856:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800885a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800885e:	4622      	mov	r2, r4
 8008860:	462b      	mov	r3, r5
 8008862:	1891      	adds	r1, r2, r2
 8008864:	65b9      	str	r1, [r7, #88]	; 0x58
 8008866:	415b      	adcs	r3, r3
 8008868:	65fb      	str	r3, [r7, #92]	; 0x5c
 800886a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800886e:	4621      	mov	r1, r4
 8008870:	eb12 0801 	adds.w	r8, r2, r1
 8008874:	4629      	mov	r1, r5
 8008876:	eb43 0901 	adc.w	r9, r3, r1
 800887a:	f04f 0200 	mov.w	r2, #0
 800887e:	f04f 0300 	mov.w	r3, #0
 8008882:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008886:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800888a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800888e:	4690      	mov	r8, r2
 8008890:	4699      	mov	r9, r3
 8008892:	4623      	mov	r3, r4
 8008894:	eb18 0303 	adds.w	r3, r8, r3
 8008898:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800889c:	462b      	mov	r3, r5
 800889e:	eb49 0303 	adc.w	r3, r9, r3
 80088a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80088a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	2200      	movs	r2, #0
 80088ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80088b2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80088b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80088ba:	460b      	mov	r3, r1
 80088bc:	18db      	adds	r3, r3, r3
 80088be:	653b      	str	r3, [r7, #80]	; 0x50
 80088c0:	4613      	mov	r3, r2
 80088c2:	eb42 0303 	adc.w	r3, r2, r3
 80088c6:	657b      	str	r3, [r7, #84]	; 0x54
 80088c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80088cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80088d0:	f7f7 fcde 	bl	8000290 <__aeabi_uldivmod>
 80088d4:	4602      	mov	r2, r0
 80088d6:	460b      	mov	r3, r1
 80088d8:	4b61      	ldr	r3, [pc, #388]	; (8008a60 <UART_SetConfig+0x2d4>)
 80088da:	fba3 2302 	umull	r2, r3, r3, r2
 80088de:	095b      	lsrs	r3, r3, #5
 80088e0:	011c      	lsls	r4, r3, #4
 80088e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80088e6:	2200      	movs	r2, #0
 80088e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80088ec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80088f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80088f4:	4642      	mov	r2, r8
 80088f6:	464b      	mov	r3, r9
 80088f8:	1891      	adds	r1, r2, r2
 80088fa:	64b9      	str	r1, [r7, #72]	; 0x48
 80088fc:	415b      	adcs	r3, r3
 80088fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008900:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008904:	4641      	mov	r1, r8
 8008906:	eb12 0a01 	adds.w	sl, r2, r1
 800890a:	4649      	mov	r1, r9
 800890c:	eb43 0b01 	adc.w	fp, r3, r1
 8008910:	f04f 0200 	mov.w	r2, #0
 8008914:	f04f 0300 	mov.w	r3, #0
 8008918:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800891c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008920:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008924:	4692      	mov	sl, r2
 8008926:	469b      	mov	fp, r3
 8008928:	4643      	mov	r3, r8
 800892a:	eb1a 0303 	adds.w	r3, sl, r3
 800892e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008932:	464b      	mov	r3, r9
 8008934:	eb4b 0303 	adc.w	r3, fp, r3
 8008938:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800893c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	2200      	movs	r2, #0
 8008944:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008948:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800894c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008950:	460b      	mov	r3, r1
 8008952:	18db      	adds	r3, r3, r3
 8008954:	643b      	str	r3, [r7, #64]	; 0x40
 8008956:	4613      	mov	r3, r2
 8008958:	eb42 0303 	adc.w	r3, r2, r3
 800895c:	647b      	str	r3, [r7, #68]	; 0x44
 800895e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008962:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008966:	f7f7 fc93 	bl	8000290 <__aeabi_uldivmod>
 800896a:	4602      	mov	r2, r0
 800896c:	460b      	mov	r3, r1
 800896e:	4611      	mov	r1, r2
 8008970:	4b3b      	ldr	r3, [pc, #236]	; (8008a60 <UART_SetConfig+0x2d4>)
 8008972:	fba3 2301 	umull	r2, r3, r3, r1
 8008976:	095b      	lsrs	r3, r3, #5
 8008978:	2264      	movs	r2, #100	; 0x64
 800897a:	fb02 f303 	mul.w	r3, r2, r3
 800897e:	1acb      	subs	r3, r1, r3
 8008980:	00db      	lsls	r3, r3, #3
 8008982:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008986:	4b36      	ldr	r3, [pc, #216]	; (8008a60 <UART_SetConfig+0x2d4>)
 8008988:	fba3 2302 	umull	r2, r3, r3, r2
 800898c:	095b      	lsrs	r3, r3, #5
 800898e:	005b      	lsls	r3, r3, #1
 8008990:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008994:	441c      	add	r4, r3
 8008996:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800899a:	2200      	movs	r2, #0
 800899c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80089a0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80089a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80089a8:	4642      	mov	r2, r8
 80089aa:	464b      	mov	r3, r9
 80089ac:	1891      	adds	r1, r2, r2
 80089ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80089b0:	415b      	adcs	r3, r3
 80089b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80089b8:	4641      	mov	r1, r8
 80089ba:	1851      	adds	r1, r2, r1
 80089bc:	6339      	str	r1, [r7, #48]	; 0x30
 80089be:	4649      	mov	r1, r9
 80089c0:	414b      	adcs	r3, r1
 80089c2:	637b      	str	r3, [r7, #52]	; 0x34
 80089c4:	f04f 0200 	mov.w	r2, #0
 80089c8:	f04f 0300 	mov.w	r3, #0
 80089cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80089d0:	4659      	mov	r1, fp
 80089d2:	00cb      	lsls	r3, r1, #3
 80089d4:	4651      	mov	r1, sl
 80089d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80089da:	4651      	mov	r1, sl
 80089dc:	00ca      	lsls	r2, r1, #3
 80089de:	4610      	mov	r0, r2
 80089e0:	4619      	mov	r1, r3
 80089e2:	4603      	mov	r3, r0
 80089e4:	4642      	mov	r2, r8
 80089e6:	189b      	adds	r3, r3, r2
 80089e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80089ec:	464b      	mov	r3, r9
 80089ee:	460a      	mov	r2, r1
 80089f0:	eb42 0303 	adc.w	r3, r2, r3
 80089f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80089f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	2200      	movs	r2, #0
 8008a00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008a04:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008a08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008a0c:	460b      	mov	r3, r1
 8008a0e:	18db      	adds	r3, r3, r3
 8008a10:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a12:	4613      	mov	r3, r2
 8008a14:	eb42 0303 	adc.w	r3, r2, r3
 8008a18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008a1e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008a22:	f7f7 fc35 	bl	8000290 <__aeabi_uldivmod>
 8008a26:	4602      	mov	r2, r0
 8008a28:	460b      	mov	r3, r1
 8008a2a:	4b0d      	ldr	r3, [pc, #52]	; (8008a60 <UART_SetConfig+0x2d4>)
 8008a2c:	fba3 1302 	umull	r1, r3, r3, r2
 8008a30:	095b      	lsrs	r3, r3, #5
 8008a32:	2164      	movs	r1, #100	; 0x64
 8008a34:	fb01 f303 	mul.w	r3, r1, r3
 8008a38:	1ad3      	subs	r3, r2, r3
 8008a3a:	00db      	lsls	r3, r3, #3
 8008a3c:	3332      	adds	r3, #50	; 0x32
 8008a3e:	4a08      	ldr	r2, [pc, #32]	; (8008a60 <UART_SetConfig+0x2d4>)
 8008a40:	fba2 2303 	umull	r2, r3, r2, r3
 8008a44:	095b      	lsrs	r3, r3, #5
 8008a46:	f003 0207 	and.w	r2, r3, #7
 8008a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4422      	add	r2, r4
 8008a52:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008a54:	e105      	b.n	8008c62 <UART_SetConfig+0x4d6>
 8008a56:	bf00      	nop
 8008a58:	40011000 	.word	0x40011000
 8008a5c:	40011400 	.word	0x40011400
 8008a60:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008a64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a68:	2200      	movs	r2, #0
 8008a6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008a6e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008a72:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008a76:	4642      	mov	r2, r8
 8008a78:	464b      	mov	r3, r9
 8008a7a:	1891      	adds	r1, r2, r2
 8008a7c:	6239      	str	r1, [r7, #32]
 8008a7e:	415b      	adcs	r3, r3
 8008a80:	627b      	str	r3, [r7, #36]	; 0x24
 8008a82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008a86:	4641      	mov	r1, r8
 8008a88:	1854      	adds	r4, r2, r1
 8008a8a:	4649      	mov	r1, r9
 8008a8c:	eb43 0501 	adc.w	r5, r3, r1
 8008a90:	f04f 0200 	mov.w	r2, #0
 8008a94:	f04f 0300 	mov.w	r3, #0
 8008a98:	00eb      	lsls	r3, r5, #3
 8008a9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008a9e:	00e2      	lsls	r2, r4, #3
 8008aa0:	4614      	mov	r4, r2
 8008aa2:	461d      	mov	r5, r3
 8008aa4:	4643      	mov	r3, r8
 8008aa6:	18e3      	adds	r3, r4, r3
 8008aa8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008aac:	464b      	mov	r3, r9
 8008aae:	eb45 0303 	adc.w	r3, r5, r3
 8008ab2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	2200      	movs	r2, #0
 8008abe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008ac2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008ac6:	f04f 0200 	mov.w	r2, #0
 8008aca:	f04f 0300 	mov.w	r3, #0
 8008ace:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008ad2:	4629      	mov	r1, r5
 8008ad4:	008b      	lsls	r3, r1, #2
 8008ad6:	4621      	mov	r1, r4
 8008ad8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008adc:	4621      	mov	r1, r4
 8008ade:	008a      	lsls	r2, r1, #2
 8008ae0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008ae4:	f7f7 fbd4 	bl	8000290 <__aeabi_uldivmod>
 8008ae8:	4602      	mov	r2, r0
 8008aea:	460b      	mov	r3, r1
 8008aec:	4b60      	ldr	r3, [pc, #384]	; (8008c70 <UART_SetConfig+0x4e4>)
 8008aee:	fba3 2302 	umull	r2, r3, r3, r2
 8008af2:	095b      	lsrs	r3, r3, #5
 8008af4:	011c      	lsls	r4, r3, #4
 8008af6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008afa:	2200      	movs	r2, #0
 8008afc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008b00:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008b04:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008b08:	4642      	mov	r2, r8
 8008b0a:	464b      	mov	r3, r9
 8008b0c:	1891      	adds	r1, r2, r2
 8008b0e:	61b9      	str	r1, [r7, #24]
 8008b10:	415b      	adcs	r3, r3
 8008b12:	61fb      	str	r3, [r7, #28]
 8008b14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008b18:	4641      	mov	r1, r8
 8008b1a:	1851      	adds	r1, r2, r1
 8008b1c:	6139      	str	r1, [r7, #16]
 8008b1e:	4649      	mov	r1, r9
 8008b20:	414b      	adcs	r3, r1
 8008b22:	617b      	str	r3, [r7, #20]
 8008b24:	f04f 0200 	mov.w	r2, #0
 8008b28:	f04f 0300 	mov.w	r3, #0
 8008b2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008b30:	4659      	mov	r1, fp
 8008b32:	00cb      	lsls	r3, r1, #3
 8008b34:	4651      	mov	r1, sl
 8008b36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008b3a:	4651      	mov	r1, sl
 8008b3c:	00ca      	lsls	r2, r1, #3
 8008b3e:	4610      	mov	r0, r2
 8008b40:	4619      	mov	r1, r3
 8008b42:	4603      	mov	r3, r0
 8008b44:	4642      	mov	r2, r8
 8008b46:	189b      	adds	r3, r3, r2
 8008b48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008b4c:	464b      	mov	r3, r9
 8008b4e:	460a      	mov	r2, r1
 8008b50:	eb42 0303 	adc.w	r3, r2, r3
 8008b54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	67bb      	str	r3, [r7, #120]	; 0x78
 8008b62:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008b64:	f04f 0200 	mov.w	r2, #0
 8008b68:	f04f 0300 	mov.w	r3, #0
 8008b6c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008b70:	4649      	mov	r1, r9
 8008b72:	008b      	lsls	r3, r1, #2
 8008b74:	4641      	mov	r1, r8
 8008b76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008b7a:	4641      	mov	r1, r8
 8008b7c:	008a      	lsls	r2, r1, #2
 8008b7e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008b82:	f7f7 fb85 	bl	8000290 <__aeabi_uldivmod>
 8008b86:	4602      	mov	r2, r0
 8008b88:	460b      	mov	r3, r1
 8008b8a:	4b39      	ldr	r3, [pc, #228]	; (8008c70 <UART_SetConfig+0x4e4>)
 8008b8c:	fba3 1302 	umull	r1, r3, r3, r2
 8008b90:	095b      	lsrs	r3, r3, #5
 8008b92:	2164      	movs	r1, #100	; 0x64
 8008b94:	fb01 f303 	mul.w	r3, r1, r3
 8008b98:	1ad3      	subs	r3, r2, r3
 8008b9a:	011b      	lsls	r3, r3, #4
 8008b9c:	3332      	adds	r3, #50	; 0x32
 8008b9e:	4a34      	ldr	r2, [pc, #208]	; (8008c70 <UART_SetConfig+0x4e4>)
 8008ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8008ba4:	095b      	lsrs	r3, r3, #5
 8008ba6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008baa:	441c      	add	r4, r3
 8008bac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	673b      	str	r3, [r7, #112]	; 0x70
 8008bb4:	677a      	str	r2, [r7, #116]	; 0x74
 8008bb6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008bba:	4642      	mov	r2, r8
 8008bbc:	464b      	mov	r3, r9
 8008bbe:	1891      	adds	r1, r2, r2
 8008bc0:	60b9      	str	r1, [r7, #8]
 8008bc2:	415b      	adcs	r3, r3
 8008bc4:	60fb      	str	r3, [r7, #12]
 8008bc6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008bca:	4641      	mov	r1, r8
 8008bcc:	1851      	adds	r1, r2, r1
 8008bce:	6039      	str	r1, [r7, #0]
 8008bd0:	4649      	mov	r1, r9
 8008bd2:	414b      	adcs	r3, r1
 8008bd4:	607b      	str	r3, [r7, #4]
 8008bd6:	f04f 0200 	mov.w	r2, #0
 8008bda:	f04f 0300 	mov.w	r3, #0
 8008bde:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008be2:	4659      	mov	r1, fp
 8008be4:	00cb      	lsls	r3, r1, #3
 8008be6:	4651      	mov	r1, sl
 8008be8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008bec:	4651      	mov	r1, sl
 8008bee:	00ca      	lsls	r2, r1, #3
 8008bf0:	4610      	mov	r0, r2
 8008bf2:	4619      	mov	r1, r3
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	4642      	mov	r2, r8
 8008bf8:	189b      	adds	r3, r3, r2
 8008bfa:	66bb      	str	r3, [r7, #104]	; 0x68
 8008bfc:	464b      	mov	r3, r9
 8008bfe:	460a      	mov	r2, r1
 8008c00:	eb42 0303 	adc.w	r3, r2, r3
 8008c04:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	663b      	str	r3, [r7, #96]	; 0x60
 8008c10:	667a      	str	r2, [r7, #100]	; 0x64
 8008c12:	f04f 0200 	mov.w	r2, #0
 8008c16:	f04f 0300 	mov.w	r3, #0
 8008c1a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008c1e:	4649      	mov	r1, r9
 8008c20:	008b      	lsls	r3, r1, #2
 8008c22:	4641      	mov	r1, r8
 8008c24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008c28:	4641      	mov	r1, r8
 8008c2a:	008a      	lsls	r2, r1, #2
 8008c2c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008c30:	f7f7 fb2e 	bl	8000290 <__aeabi_uldivmod>
 8008c34:	4602      	mov	r2, r0
 8008c36:	460b      	mov	r3, r1
 8008c38:	4b0d      	ldr	r3, [pc, #52]	; (8008c70 <UART_SetConfig+0x4e4>)
 8008c3a:	fba3 1302 	umull	r1, r3, r3, r2
 8008c3e:	095b      	lsrs	r3, r3, #5
 8008c40:	2164      	movs	r1, #100	; 0x64
 8008c42:	fb01 f303 	mul.w	r3, r1, r3
 8008c46:	1ad3      	subs	r3, r2, r3
 8008c48:	011b      	lsls	r3, r3, #4
 8008c4a:	3332      	adds	r3, #50	; 0x32
 8008c4c:	4a08      	ldr	r2, [pc, #32]	; (8008c70 <UART_SetConfig+0x4e4>)
 8008c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8008c52:	095b      	lsrs	r3, r3, #5
 8008c54:	f003 020f 	and.w	r2, r3, #15
 8008c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4422      	add	r2, r4
 8008c60:	609a      	str	r2, [r3, #8]
}
 8008c62:	bf00      	nop
 8008c64:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c6e:	bf00      	nop
 8008c70:	51eb851f 	.word	0x51eb851f

08008c74 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008c74:	b084      	sub	sp, #16
 8008c76:	b580      	push	{r7, lr}
 8008c78:	b084      	sub	sp, #16
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	6078      	str	r0, [r7, #4]
 8008c7e:	f107 001c 	add.w	r0, r7, #28
 8008c82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d122      	bne.n	8008cd2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c90:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	68db      	ldr	r3, [r3, #12]
 8008c9c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008ca0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ca4:	687a      	ldr	r2, [r7, #4]
 8008ca6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	68db      	ldr	r3, [r3, #12]
 8008cac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008cb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	d105      	bne.n	8008cc6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	68db      	ldr	r3, [r3, #12]
 8008cbe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f000 faa2 	bl	8009210 <USB_CoreReset>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	73fb      	strb	r3, [r7, #15]
 8008cd0:	e01a      	b.n	8008d08 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	68db      	ldr	r3, [r3, #12]
 8008cd6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f000 fa96 	bl	8009210 <USB_CoreReset>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008ce8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d106      	bne.n	8008cfc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cf2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	639a      	str	r2, [r3, #56]	; 0x38
 8008cfa:	e005      	b.n	8008d08 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d00:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d0a:	2b01      	cmp	r3, #1
 8008d0c:	d10b      	bne.n	8008d26 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	689b      	ldr	r3, [r3, #8]
 8008d12:	f043 0206 	orr.w	r2, r3, #6
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	689b      	ldr	r3, [r3, #8]
 8008d1e:	f043 0220 	orr.w	r2, r3, #32
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3710      	adds	r7, #16
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008d32:	b004      	add	sp, #16
 8008d34:	4770      	bx	lr

08008d36 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008d36:	b480      	push	{r7}
 8008d38:	b083      	sub	sp, #12
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	689b      	ldr	r3, [r3, #8]
 8008d42:	f023 0201 	bic.w	r2, r3, #1
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008d4a:	2300      	movs	r3, #0
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	370c      	adds	r7, #12
 8008d50:	46bd      	mov	sp, r7
 8008d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d56:	4770      	bx	lr

08008d58 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b084      	sub	sp, #16
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	460b      	mov	r3, r1
 8008d62:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008d64:	2300      	movs	r3, #0
 8008d66:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	68db      	ldr	r3, [r3, #12]
 8008d6c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008d74:	78fb      	ldrb	r3, [r7, #3]
 8008d76:	2b01      	cmp	r3, #1
 8008d78:	d115      	bne.n	8008da6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	68db      	ldr	r3, [r3, #12]
 8008d7e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008d86:	2001      	movs	r0, #1
 8008d88:	f7fa fc34 	bl	80035f4 <HAL_Delay>
      ms++;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	3301      	adds	r3, #1
 8008d90:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f000 fa2e 	bl	80091f4 <USB_GetMode>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	2b01      	cmp	r3, #1
 8008d9c:	d01e      	beq.n	8008ddc <USB_SetCurrentMode+0x84>
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	2b31      	cmp	r3, #49	; 0x31
 8008da2:	d9f0      	bls.n	8008d86 <USB_SetCurrentMode+0x2e>
 8008da4:	e01a      	b.n	8008ddc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008da6:	78fb      	ldrb	r3, [r7, #3]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d115      	bne.n	8008dd8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	68db      	ldr	r3, [r3, #12]
 8008db0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008db8:	2001      	movs	r0, #1
 8008dba:	f7fa fc1b 	bl	80035f4 <HAL_Delay>
      ms++;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	3301      	adds	r3, #1
 8008dc2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f000 fa15 	bl	80091f4 <USB_GetMode>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d005      	beq.n	8008ddc <USB_SetCurrentMode+0x84>
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	2b31      	cmp	r3, #49	; 0x31
 8008dd4:	d9f0      	bls.n	8008db8 <USB_SetCurrentMode+0x60>
 8008dd6:	e001      	b.n	8008ddc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008dd8:	2301      	movs	r3, #1
 8008dda:	e005      	b.n	8008de8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	2b32      	cmp	r3, #50	; 0x32
 8008de0:	d101      	bne.n	8008de6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008de2:	2301      	movs	r3, #1
 8008de4:	e000      	b.n	8008de8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008de6:	2300      	movs	r3, #0
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3710      	adds	r7, #16
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008df0:	b084      	sub	sp, #16
 8008df2:	b580      	push	{r7, lr}
 8008df4:	b086      	sub	sp, #24
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	6078      	str	r0, [r7, #4]
 8008dfa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008dfe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008e02:	2300      	movs	r3, #0
 8008e04:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	613b      	str	r3, [r7, #16]
 8008e0e:	e009      	b.n	8008e24 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008e10:	687a      	ldr	r2, [r7, #4]
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	3340      	adds	r3, #64	; 0x40
 8008e16:	009b      	lsls	r3, r3, #2
 8008e18:	4413      	add	r3, r2
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	3301      	adds	r3, #1
 8008e22:	613b      	str	r3, [r7, #16]
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	2b0e      	cmp	r3, #14
 8008e28:	d9f2      	bls.n	8008e10 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008e2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d11c      	bne.n	8008e6a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	68fa      	ldr	r2, [r7, #12]
 8008e3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e3e:	f043 0302 	orr.w	r3, r3, #2
 8008e42:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e48:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e54:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e60:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	639a      	str	r2, [r3, #56]	; 0x38
 8008e68:	e00b      	b.n	8008e82 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e6e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e7a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008e88:	461a      	mov	r2, r3
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e94:	4619      	mov	r1, r3
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	680b      	ldr	r3, [r1, #0]
 8008ea0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ea4:	2b01      	cmp	r3, #1
 8008ea6:	d10c      	bne.n	8008ec2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d104      	bne.n	8008eb8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008eae:	2100      	movs	r1, #0
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f000 f965 	bl	8009180 <USB_SetDevSpeed>
 8008eb6:	e008      	b.n	8008eca <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008eb8:	2101      	movs	r1, #1
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f000 f960 	bl	8009180 <USB_SetDevSpeed>
 8008ec0:	e003      	b.n	8008eca <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008ec2:	2103      	movs	r1, #3
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f000 f95b 	bl	8009180 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008eca:	2110      	movs	r1, #16
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f000 f8f3 	bl	80090b8 <USB_FlushTxFifo>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d001      	beq.n	8008edc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f000 f91f 	bl	8009120 <USB_FlushRxFifo>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d001      	beq.n	8008eec <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008ee8:	2301      	movs	r3, #1
 8008eea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ef2:	461a      	mov	r2, r3
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008efe:	461a      	mov	r2, r3
 8008f00:	2300      	movs	r3, #0
 8008f02:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f10:	2300      	movs	r3, #0
 8008f12:	613b      	str	r3, [r7, #16]
 8008f14:	e043      	b.n	8008f9e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	015a      	lsls	r2, r3, #5
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	4413      	add	r3, r2
 8008f1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f2c:	d118      	bne.n	8008f60 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d10a      	bne.n	8008f4a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	015a      	lsls	r2, r3, #5
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	4413      	add	r3, r2
 8008f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f40:	461a      	mov	r2, r3
 8008f42:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008f46:	6013      	str	r3, [r2, #0]
 8008f48:	e013      	b.n	8008f72 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	015a      	lsls	r2, r3, #5
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	4413      	add	r3, r2
 8008f52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f56:	461a      	mov	r2, r3
 8008f58:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008f5c:	6013      	str	r3, [r2, #0]
 8008f5e:	e008      	b.n	8008f72 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	015a      	lsls	r2, r3, #5
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	4413      	add	r3, r2
 8008f68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f6c:	461a      	mov	r2, r3
 8008f6e:	2300      	movs	r3, #0
 8008f70:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	015a      	lsls	r2, r3, #5
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	4413      	add	r3, r2
 8008f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f7e:	461a      	mov	r2, r3
 8008f80:	2300      	movs	r3, #0
 8008f82:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	015a      	lsls	r2, r3, #5
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	4413      	add	r3, r2
 8008f8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f90:	461a      	mov	r2, r3
 8008f92:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008f96:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	3301      	adds	r3, #1
 8008f9c:	613b      	str	r3, [r7, #16]
 8008f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa0:	693a      	ldr	r2, [r7, #16]
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	d3b7      	bcc.n	8008f16 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	613b      	str	r3, [r7, #16]
 8008faa:	e043      	b.n	8009034 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	015a      	lsls	r2, r3, #5
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	4413      	add	r3, r2
 8008fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008fbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008fc2:	d118      	bne.n	8008ff6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d10a      	bne.n	8008fe0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	015a      	lsls	r2, r3, #5
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	4413      	add	r3, r2
 8008fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008fdc:	6013      	str	r3, [r2, #0]
 8008fde:	e013      	b.n	8009008 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	015a      	lsls	r2, r3, #5
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	4413      	add	r3, r2
 8008fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fec:	461a      	mov	r2, r3
 8008fee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008ff2:	6013      	str	r3, [r2, #0]
 8008ff4:	e008      	b.n	8009008 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	015a      	lsls	r2, r3, #5
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	4413      	add	r3, r2
 8008ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009002:	461a      	mov	r2, r3
 8009004:	2300      	movs	r3, #0
 8009006:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	015a      	lsls	r2, r3, #5
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	4413      	add	r3, r2
 8009010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009014:	461a      	mov	r2, r3
 8009016:	2300      	movs	r3, #0
 8009018:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	015a      	lsls	r2, r3, #5
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	4413      	add	r3, r2
 8009022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009026:	461a      	mov	r2, r3
 8009028:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800902c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	3301      	adds	r3, #1
 8009032:	613b      	str	r3, [r7, #16]
 8009034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009036:	693a      	ldr	r2, [r7, #16]
 8009038:	429a      	cmp	r2, r3
 800903a:	d3b7      	bcc.n	8008fac <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009042:	691b      	ldr	r3, [r3, #16]
 8009044:	68fa      	ldr	r2, [r7, #12]
 8009046:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800904a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800904e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2200      	movs	r2, #0
 8009054:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800905c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800905e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009060:	2b00      	cmp	r3, #0
 8009062:	d105      	bne.n	8009070 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	699b      	ldr	r3, [r3, #24]
 8009068:	f043 0210 	orr.w	r2, r3, #16
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	699a      	ldr	r2, [r3, #24]
 8009074:	4b0f      	ldr	r3, [pc, #60]	; (80090b4 <USB_DevInit+0x2c4>)
 8009076:	4313      	orrs	r3, r2
 8009078:	687a      	ldr	r2, [r7, #4]
 800907a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800907c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800907e:	2b00      	cmp	r3, #0
 8009080:	d005      	beq.n	800908e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	699b      	ldr	r3, [r3, #24]
 8009086:	f043 0208 	orr.w	r2, r3, #8
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800908e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009090:	2b01      	cmp	r3, #1
 8009092:	d107      	bne.n	80090a4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	699b      	ldr	r3, [r3, #24]
 8009098:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800909c:	f043 0304 	orr.w	r3, r3, #4
 80090a0:	687a      	ldr	r2, [r7, #4]
 80090a2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80090a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3718      	adds	r7, #24
 80090aa:	46bd      	mov	sp, r7
 80090ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80090b0:	b004      	add	sp, #16
 80090b2:	4770      	bx	lr
 80090b4:	803c3800 	.word	0x803c3800

080090b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b085      	sub	sp, #20
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80090c2:	2300      	movs	r3, #0
 80090c4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	3301      	adds	r3, #1
 80090ca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	4a13      	ldr	r2, [pc, #76]	; (800911c <USB_FlushTxFifo+0x64>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d901      	bls.n	80090d8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80090d4:	2303      	movs	r3, #3
 80090d6:	e01b      	b.n	8009110 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	691b      	ldr	r3, [r3, #16]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	daf2      	bge.n	80090c6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80090e0:	2300      	movs	r3, #0
 80090e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	019b      	lsls	r3, r3, #6
 80090e8:	f043 0220 	orr.w	r2, r3, #32
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	3301      	adds	r3, #1
 80090f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	4a08      	ldr	r2, [pc, #32]	; (800911c <USB_FlushTxFifo+0x64>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d901      	bls.n	8009102 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80090fe:	2303      	movs	r3, #3
 8009100:	e006      	b.n	8009110 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	691b      	ldr	r3, [r3, #16]
 8009106:	f003 0320 	and.w	r3, r3, #32
 800910a:	2b20      	cmp	r3, #32
 800910c:	d0f0      	beq.n	80090f0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800910e:	2300      	movs	r3, #0
}
 8009110:	4618      	mov	r0, r3
 8009112:	3714      	adds	r7, #20
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr
 800911c:	00030d40 	.word	0x00030d40

08009120 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009120:	b480      	push	{r7}
 8009122:	b085      	sub	sp, #20
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009128:	2300      	movs	r3, #0
 800912a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	3301      	adds	r3, #1
 8009130:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	4a11      	ldr	r2, [pc, #68]	; (800917c <USB_FlushRxFifo+0x5c>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d901      	bls.n	800913e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800913a:	2303      	movs	r3, #3
 800913c:	e018      	b.n	8009170 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	691b      	ldr	r3, [r3, #16]
 8009142:	2b00      	cmp	r3, #0
 8009144:	daf2      	bge.n	800912c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009146:	2300      	movs	r3, #0
 8009148:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2210      	movs	r2, #16
 800914e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	3301      	adds	r3, #1
 8009154:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	4a08      	ldr	r2, [pc, #32]	; (800917c <USB_FlushRxFifo+0x5c>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d901      	bls.n	8009162 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800915e:	2303      	movs	r3, #3
 8009160:	e006      	b.n	8009170 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	691b      	ldr	r3, [r3, #16]
 8009166:	f003 0310 	and.w	r3, r3, #16
 800916a:	2b10      	cmp	r3, #16
 800916c:	d0f0      	beq.n	8009150 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800916e:	2300      	movs	r3, #0
}
 8009170:	4618      	mov	r0, r3
 8009172:	3714      	adds	r7, #20
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr
 800917c:	00030d40 	.word	0x00030d40

08009180 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009180:	b480      	push	{r7}
 8009182:	b085      	sub	sp, #20
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
 8009188:	460b      	mov	r3, r1
 800918a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009196:	681a      	ldr	r2, [r3, #0]
 8009198:	78fb      	ldrb	r3, [r7, #3]
 800919a:	68f9      	ldr	r1, [r7, #12]
 800919c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80091a0:	4313      	orrs	r3, r2
 80091a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80091a4:	2300      	movs	r3, #0
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3714      	adds	r7, #20
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr

080091b2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80091b2:	b480      	push	{r7}
 80091b4:	b085      	sub	sp, #20
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	68fa      	ldr	r2, [r7, #12]
 80091c8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80091cc:	f023 0303 	bic.w	r3, r3, #3
 80091d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091d8:	685b      	ldr	r3, [r3, #4]
 80091da:	68fa      	ldr	r2, [r7, #12]
 80091dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80091e0:	f043 0302 	orr.w	r3, r3, #2
 80091e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80091e6:	2300      	movs	r3, #0
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3714      	adds	r7, #20
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr

080091f4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b083      	sub	sp, #12
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	695b      	ldr	r3, [r3, #20]
 8009200:	f003 0301 	and.w	r3, r3, #1
}
 8009204:	4618      	mov	r0, r3
 8009206:	370c      	adds	r7, #12
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr

08009210 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009210:	b480      	push	{r7}
 8009212:	b085      	sub	sp, #20
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009218:	2300      	movs	r3, #0
 800921a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	3301      	adds	r3, #1
 8009220:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	4a13      	ldr	r2, [pc, #76]	; (8009274 <USB_CoreReset+0x64>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d901      	bls.n	800922e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800922a:	2303      	movs	r3, #3
 800922c:	e01b      	b.n	8009266 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	691b      	ldr	r3, [r3, #16]
 8009232:	2b00      	cmp	r3, #0
 8009234:	daf2      	bge.n	800921c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009236:	2300      	movs	r3, #0
 8009238:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	691b      	ldr	r3, [r3, #16]
 800923e:	f043 0201 	orr.w	r2, r3, #1
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	3301      	adds	r3, #1
 800924a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	4a09      	ldr	r2, [pc, #36]	; (8009274 <USB_CoreReset+0x64>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d901      	bls.n	8009258 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009254:	2303      	movs	r3, #3
 8009256:	e006      	b.n	8009266 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	691b      	ldr	r3, [r3, #16]
 800925c:	f003 0301 	and.w	r3, r3, #1
 8009260:	2b01      	cmp	r3, #1
 8009262:	d0f0      	beq.n	8009246 <USB_CoreReset+0x36>

  return HAL_OK;
 8009264:	2300      	movs	r3, #0
}
 8009266:	4618      	mov	r0, r3
 8009268:	3714      	adds	r7, #20
 800926a:	46bd      	mov	sp, r7
 800926c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009270:	4770      	bx	lr
 8009272:	bf00      	nop
 8009274:	00030d40 	.word	0x00030d40

08009278 <__errno>:
 8009278:	4b01      	ldr	r3, [pc, #4]	; (8009280 <__errno+0x8>)
 800927a:	6818      	ldr	r0, [r3, #0]
 800927c:	4770      	bx	lr
 800927e:	bf00      	nop
 8009280:	20000120 	.word	0x20000120

08009284 <__libc_init_array>:
 8009284:	b570      	push	{r4, r5, r6, lr}
 8009286:	4d0d      	ldr	r5, [pc, #52]	; (80092bc <__libc_init_array+0x38>)
 8009288:	4c0d      	ldr	r4, [pc, #52]	; (80092c0 <__libc_init_array+0x3c>)
 800928a:	1b64      	subs	r4, r4, r5
 800928c:	10a4      	asrs	r4, r4, #2
 800928e:	2600      	movs	r6, #0
 8009290:	42a6      	cmp	r6, r4
 8009292:	d109      	bne.n	80092a8 <__libc_init_array+0x24>
 8009294:	4d0b      	ldr	r5, [pc, #44]	; (80092c4 <__libc_init_array+0x40>)
 8009296:	4c0c      	ldr	r4, [pc, #48]	; (80092c8 <__libc_init_array+0x44>)
 8009298:	f001 f88e 	bl	800a3b8 <_init>
 800929c:	1b64      	subs	r4, r4, r5
 800929e:	10a4      	asrs	r4, r4, #2
 80092a0:	2600      	movs	r6, #0
 80092a2:	42a6      	cmp	r6, r4
 80092a4:	d105      	bne.n	80092b2 <__libc_init_array+0x2e>
 80092a6:	bd70      	pop	{r4, r5, r6, pc}
 80092a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80092ac:	4798      	blx	r3
 80092ae:	3601      	adds	r6, #1
 80092b0:	e7ee      	b.n	8009290 <__libc_init_array+0xc>
 80092b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80092b6:	4798      	blx	r3
 80092b8:	3601      	adds	r6, #1
 80092ba:	e7f2      	b.n	80092a2 <__libc_init_array+0x1e>
 80092bc:	0800a5f0 	.word	0x0800a5f0
 80092c0:	0800a5f0 	.word	0x0800a5f0
 80092c4:	0800a5f0 	.word	0x0800a5f0
 80092c8:	0800a5f4 	.word	0x0800a5f4

080092cc <memset>:
 80092cc:	4402      	add	r2, r0
 80092ce:	4603      	mov	r3, r0
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d100      	bne.n	80092d6 <memset+0xa>
 80092d4:	4770      	bx	lr
 80092d6:	f803 1b01 	strb.w	r1, [r3], #1
 80092da:	e7f9      	b.n	80092d0 <memset+0x4>

080092dc <_puts_r>:
 80092dc:	b570      	push	{r4, r5, r6, lr}
 80092de:	460e      	mov	r6, r1
 80092e0:	4605      	mov	r5, r0
 80092e2:	b118      	cbz	r0, 80092ec <_puts_r+0x10>
 80092e4:	6983      	ldr	r3, [r0, #24]
 80092e6:	b90b      	cbnz	r3, 80092ec <_puts_r+0x10>
 80092e8:	f000 fa68 	bl	80097bc <__sinit>
 80092ec:	69ab      	ldr	r3, [r5, #24]
 80092ee:	68ac      	ldr	r4, [r5, #8]
 80092f0:	b913      	cbnz	r3, 80092f8 <_puts_r+0x1c>
 80092f2:	4628      	mov	r0, r5
 80092f4:	f000 fa62 	bl	80097bc <__sinit>
 80092f8:	4b2c      	ldr	r3, [pc, #176]	; (80093ac <_puts_r+0xd0>)
 80092fa:	429c      	cmp	r4, r3
 80092fc:	d120      	bne.n	8009340 <_puts_r+0x64>
 80092fe:	686c      	ldr	r4, [r5, #4]
 8009300:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009302:	07db      	lsls	r3, r3, #31
 8009304:	d405      	bmi.n	8009312 <_puts_r+0x36>
 8009306:	89a3      	ldrh	r3, [r4, #12]
 8009308:	0598      	lsls	r0, r3, #22
 800930a:	d402      	bmi.n	8009312 <_puts_r+0x36>
 800930c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800930e:	f000 faf3 	bl	80098f8 <__retarget_lock_acquire_recursive>
 8009312:	89a3      	ldrh	r3, [r4, #12]
 8009314:	0719      	lsls	r1, r3, #28
 8009316:	d51d      	bpl.n	8009354 <_puts_r+0x78>
 8009318:	6923      	ldr	r3, [r4, #16]
 800931a:	b1db      	cbz	r3, 8009354 <_puts_r+0x78>
 800931c:	3e01      	subs	r6, #1
 800931e:	68a3      	ldr	r3, [r4, #8]
 8009320:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009324:	3b01      	subs	r3, #1
 8009326:	60a3      	str	r3, [r4, #8]
 8009328:	bb39      	cbnz	r1, 800937a <_puts_r+0x9e>
 800932a:	2b00      	cmp	r3, #0
 800932c:	da38      	bge.n	80093a0 <_puts_r+0xc4>
 800932e:	4622      	mov	r2, r4
 8009330:	210a      	movs	r1, #10
 8009332:	4628      	mov	r0, r5
 8009334:	f000 f868 	bl	8009408 <__swbuf_r>
 8009338:	3001      	adds	r0, #1
 800933a:	d011      	beq.n	8009360 <_puts_r+0x84>
 800933c:	250a      	movs	r5, #10
 800933e:	e011      	b.n	8009364 <_puts_r+0x88>
 8009340:	4b1b      	ldr	r3, [pc, #108]	; (80093b0 <_puts_r+0xd4>)
 8009342:	429c      	cmp	r4, r3
 8009344:	d101      	bne.n	800934a <_puts_r+0x6e>
 8009346:	68ac      	ldr	r4, [r5, #8]
 8009348:	e7da      	b.n	8009300 <_puts_r+0x24>
 800934a:	4b1a      	ldr	r3, [pc, #104]	; (80093b4 <_puts_r+0xd8>)
 800934c:	429c      	cmp	r4, r3
 800934e:	bf08      	it	eq
 8009350:	68ec      	ldreq	r4, [r5, #12]
 8009352:	e7d5      	b.n	8009300 <_puts_r+0x24>
 8009354:	4621      	mov	r1, r4
 8009356:	4628      	mov	r0, r5
 8009358:	f000 f8a8 	bl	80094ac <__swsetup_r>
 800935c:	2800      	cmp	r0, #0
 800935e:	d0dd      	beq.n	800931c <_puts_r+0x40>
 8009360:	f04f 35ff 	mov.w	r5, #4294967295
 8009364:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009366:	07da      	lsls	r2, r3, #31
 8009368:	d405      	bmi.n	8009376 <_puts_r+0x9a>
 800936a:	89a3      	ldrh	r3, [r4, #12]
 800936c:	059b      	lsls	r3, r3, #22
 800936e:	d402      	bmi.n	8009376 <_puts_r+0x9a>
 8009370:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009372:	f000 fac2 	bl	80098fa <__retarget_lock_release_recursive>
 8009376:	4628      	mov	r0, r5
 8009378:	bd70      	pop	{r4, r5, r6, pc}
 800937a:	2b00      	cmp	r3, #0
 800937c:	da04      	bge.n	8009388 <_puts_r+0xac>
 800937e:	69a2      	ldr	r2, [r4, #24]
 8009380:	429a      	cmp	r2, r3
 8009382:	dc06      	bgt.n	8009392 <_puts_r+0xb6>
 8009384:	290a      	cmp	r1, #10
 8009386:	d004      	beq.n	8009392 <_puts_r+0xb6>
 8009388:	6823      	ldr	r3, [r4, #0]
 800938a:	1c5a      	adds	r2, r3, #1
 800938c:	6022      	str	r2, [r4, #0]
 800938e:	7019      	strb	r1, [r3, #0]
 8009390:	e7c5      	b.n	800931e <_puts_r+0x42>
 8009392:	4622      	mov	r2, r4
 8009394:	4628      	mov	r0, r5
 8009396:	f000 f837 	bl	8009408 <__swbuf_r>
 800939a:	3001      	adds	r0, #1
 800939c:	d1bf      	bne.n	800931e <_puts_r+0x42>
 800939e:	e7df      	b.n	8009360 <_puts_r+0x84>
 80093a0:	6823      	ldr	r3, [r4, #0]
 80093a2:	250a      	movs	r5, #10
 80093a4:	1c5a      	adds	r2, r3, #1
 80093a6:	6022      	str	r2, [r4, #0]
 80093a8:	701d      	strb	r5, [r3, #0]
 80093aa:	e7db      	b.n	8009364 <_puts_r+0x88>
 80093ac:	0800a574 	.word	0x0800a574
 80093b0:	0800a594 	.word	0x0800a594
 80093b4:	0800a554 	.word	0x0800a554

080093b8 <puts>:
 80093b8:	4b02      	ldr	r3, [pc, #8]	; (80093c4 <puts+0xc>)
 80093ba:	4601      	mov	r1, r0
 80093bc:	6818      	ldr	r0, [r3, #0]
 80093be:	f7ff bf8d 	b.w	80092dc <_puts_r>
 80093c2:	bf00      	nop
 80093c4:	20000120 	.word	0x20000120

080093c8 <siprintf>:
 80093c8:	b40e      	push	{r1, r2, r3}
 80093ca:	b500      	push	{lr}
 80093cc:	b09c      	sub	sp, #112	; 0x70
 80093ce:	ab1d      	add	r3, sp, #116	; 0x74
 80093d0:	9002      	str	r0, [sp, #8]
 80093d2:	9006      	str	r0, [sp, #24]
 80093d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80093d8:	4809      	ldr	r0, [pc, #36]	; (8009400 <siprintf+0x38>)
 80093da:	9107      	str	r1, [sp, #28]
 80093dc:	9104      	str	r1, [sp, #16]
 80093de:	4909      	ldr	r1, [pc, #36]	; (8009404 <siprintf+0x3c>)
 80093e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80093e4:	9105      	str	r1, [sp, #20]
 80093e6:	6800      	ldr	r0, [r0, #0]
 80093e8:	9301      	str	r3, [sp, #4]
 80093ea:	a902      	add	r1, sp, #8
 80093ec:	f000 fc28 	bl	8009c40 <_svfiprintf_r>
 80093f0:	9b02      	ldr	r3, [sp, #8]
 80093f2:	2200      	movs	r2, #0
 80093f4:	701a      	strb	r2, [r3, #0]
 80093f6:	b01c      	add	sp, #112	; 0x70
 80093f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80093fc:	b003      	add	sp, #12
 80093fe:	4770      	bx	lr
 8009400:	20000120 	.word	0x20000120
 8009404:	ffff0208 	.word	0xffff0208

08009408 <__swbuf_r>:
 8009408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800940a:	460e      	mov	r6, r1
 800940c:	4614      	mov	r4, r2
 800940e:	4605      	mov	r5, r0
 8009410:	b118      	cbz	r0, 800941a <__swbuf_r+0x12>
 8009412:	6983      	ldr	r3, [r0, #24]
 8009414:	b90b      	cbnz	r3, 800941a <__swbuf_r+0x12>
 8009416:	f000 f9d1 	bl	80097bc <__sinit>
 800941a:	4b21      	ldr	r3, [pc, #132]	; (80094a0 <__swbuf_r+0x98>)
 800941c:	429c      	cmp	r4, r3
 800941e:	d12b      	bne.n	8009478 <__swbuf_r+0x70>
 8009420:	686c      	ldr	r4, [r5, #4]
 8009422:	69a3      	ldr	r3, [r4, #24]
 8009424:	60a3      	str	r3, [r4, #8]
 8009426:	89a3      	ldrh	r3, [r4, #12]
 8009428:	071a      	lsls	r2, r3, #28
 800942a:	d52f      	bpl.n	800948c <__swbuf_r+0x84>
 800942c:	6923      	ldr	r3, [r4, #16]
 800942e:	b36b      	cbz	r3, 800948c <__swbuf_r+0x84>
 8009430:	6923      	ldr	r3, [r4, #16]
 8009432:	6820      	ldr	r0, [r4, #0]
 8009434:	1ac0      	subs	r0, r0, r3
 8009436:	6963      	ldr	r3, [r4, #20]
 8009438:	b2f6      	uxtb	r6, r6
 800943a:	4283      	cmp	r3, r0
 800943c:	4637      	mov	r7, r6
 800943e:	dc04      	bgt.n	800944a <__swbuf_r+0x42>
 8009440:	4621      	mov	r1, r4
 8009442:	4628      	mov	r0, r5
 8009444:	f000 f926 	bl	8009694 <_fflush_r>
 8009448:	bb30      	cbnz	r0, 8009498 <__swbuf_r+0x90>
 800944a:	68a3      	ldr	r3, [r4, #8]
 800944c:	3b01      	subs	r3, #1
 800944e:	60a3      	str	r3, [r4, #8]
 8009450:	6823      	ldr	r3, [r4, #0]
 8009452:	1c5a      	adds	r2, r3, #1
 8009454:	6022      	str	r2, [r4, #0]
 8009456:	701e      	strb	r6, [r3, #0]
 8009458:	6963      	ldr	r3, [r4, #20]
 800945a:	3001      	adds	r0, #1
 800945c:	4283      	cmp	r3, r0
 800945e:	d004      	beq.n	800946a <__swbuf_r+0x62>
 8009460:	89a3      	ldrh	r3, [r4, #12]
 8009462:	07db      	lsls	r3, r3, #31
 8009464:	d506      	bpl.n	8009474 <__swbuf_r+0x6c>
 8009466:	2e0a      	cmp	r6, #10
 8009468:	d104      	bne.n	8009474 <__swbuf_r+0x6c>
 800946a:	4621      	mov	r1, r4
 800946c:	4628      	mov	r0, r5
 800946e:	f000 f911 	bl	8009694 <_fflush_r>
 8009472:	b988      	cbnz	r0, 8009498 <__swbuf_r+0x90>
 8009474:	4638      	mov	r0, r7
 8009476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009478:	4b0a      	ldr	r3, [pc, #40]	; (80094a4 <__swbuf_r+0x9c>)
 800947a:	429c      	cmp	r4, r3
 800947c:	d101      	bne.n	8009482 <__swbuf_r+0x7a>
 800947e:	68ac      	ldr	r4, [r5, #8]
 8009480:	e7cf      	b.n	8009422 <__swbuf_r+0x1a>
 8009482:	4b09      	ldr	r3, [pc, #36]	; (80094a8 <__swbuf_r+0xa0>)
 8009484:	429c      	cmp	r4, r3
 8009486:	bf08      	it	eq
 8009488:	68ec      	ldreq	r4, [r5, #12]
 800948a:	e7ca      	b.n	8009422 <__swbuf_r+0x1a>
 800948c:	4621      	mov	r1, r4
 800948e:	4628      	mov	r0, r5
 8009490:	f000 f80c 	bl	80094ac <__swsetup_r>
 8009494:	2800      	cmp	r0, #0
 8009496:	d0cb      	beq.n	8009430 <__swbuf_r+0x28>
 8009498:	f04f 37ff 	mov.w	r7, #4294967295
 800949c:	e7ea      	b.n	8009474 <__swbuf_r+0x6c>
 800949e:	bf00      	nop
 80094a0:	0800a574 	.word	0x0800a574
 80094a4:	0800a594 	.word	0x0800a594
 80094a8:	0800a554 	.word	0x0800a554

080094ac <__swsetup_r>:
 80094ac:	4b32      	ldr	r3, [pc, #200]	; (8009578 <__swsetup_r+0xcc>)
 80094ae:	b570      	push	{r4, r5, r6, lr}
 80094b0:	681d      	ldr	r5, [r3, #0]
 80094b2:	4606      	mov	r6, r0
 80094b4:	460c      	mov	r4, r1
 80094b6:	b125      	cbz	r5, 80094c2 <__swsetup_r+0x16>
 80094b8:	69ab      	ldr	r3, [r5, #24]
 80094ba:	b913      	cbnz	r3, 80094c2 <__swsetup_r+0x16>
 80094bc:	4628      	mov	r0, r5
 80094be:	f000 f97d 	bl	80097bc <__sinit>
 80094c2:	4b2e      	ldr	r3, [pc, #184]	; (800957c <__swsetup_r+0xd0>)
 80094c4:	429c      	cmp	r4, r3
 80094c6:	d10f      	bne.n	80094e8 <__swsetup_r+0x3c>
 80094c8:	686c      	ldr	r4, [r5, #4]
 80094ca:	89a3      	ldrh	r3, [r4, #12]
 80094cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80094d0:	0719      	lsls	r1, r3, #28
 80094d2:	d42c      	bmi.n	800952e <__swsetup_r+0x82>
 80094d4:	06dd      	lsls	r5, r3, #27
 80094d6:	d411      	bmi.n	80094fc <__swsetup_r+0x50>
 80094d8:	2309      	movs	r3, #9
 80094da:	6033      	str	r3, [r6, #0]
 80094dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80094e0:	81a3      	strh	r3, [r4, #12]
 80094e2:	f04f 30ff 	mov.w	r0, #4294967295
 80094e6:	e03e      	b.n	8009566 <__swsetup_r+0xba>
 80094e8:	4b25      	ldr	r3, [pc, #148]	; (8009580 <__swsetup_r+0xd4>)
 80094ea:	429c      	cmp	r4, r3
 80094ec:	d101      	bne.n	80094f2 <__swsetup_r+0x46>
 80094ee:	68ac      	ldr	r4, [r5, #8]
 80094f0:	e7eb      	b.n	80094ca <__swsetup_r+0x1e>
 80094f2:	4b24      	ldr	r3, [pc, #144]	; (8009584 <__swsetup_r+0xd8>)
 80094f4:	429c      	cmp	r4, r3
 80094f6:	bf08      	it	eq
 80094f8:	68ec      	ldreq	r4, [r5, #12]
 80094fa:	e7e6      	b.n	80094ca <__swsetup_r+0x1e>
 80094fc:	0758      	lsls	r0, r3, #29
 80094fe:	d512      	bpl.n	8009526 <__swsetup_r+0x7a>
 8009500:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009502:	b141      	cbz	r1, 8009516 <__swsetup_r+0x6a>
 8009504:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009508:	4299      	cmp	r1, r3
 800950a:	d002      	beq.n	8009512 <__swsetup_r+0x66>
 800950c:	4630      	mov	r0, r6
 800950e:	f000 fa5b 	bl	80099c8 <_free_r>
 8009512:	2300      	movs	r3, #0
 8009514:	6363      	str	r3, [r4, #52]	; 0x34
 8009516:	89a3      	ldrh	r3, [r4, #12]
 8009518:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800951c:	81a3      	strh	r3, [r4, #12]
 800951e:	2300      	movs	r3, #0
 8009520:	6063      	str	r3, [r4, #4]
 8009522:	6923      	ldr	r3, [r4, #16]
 8009524:	6023      	str	r3, [r4, #0]
 8009526:	89a3      	ldrh	r3, [r4, #12]
 8009528:	f043 0308 	orr.w	r3, r3, #8
 800952c:	81a3      	strh	r3, [r4, #12]
 800952e:	6923      	ldr	r3, [r4, #16]
 8009530:	b94b      	cbnz	r3, 8009546 <__swsetup_r+0x9a>
 8009532:	89a3      	ldrh	r3, [r4, #12]
 8009534:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009538:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800953c:	d003      	beq.n	8009546 <__swsetup_r+0x9a>
 800953e:	4621      	mov	r1, r4
 8009540:	4630      	mov	r0, r6
 8009542:	f000 fa01 	bl	8009948 <__smakebuf_r>
 8009546:	89a0      	ldrh	r0, [r4, #12]
 8009548:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800954c:	f010 0301 	ands.w	r3, r0, #1
 8009550:	d00a      	beq.n	8009568 <__swsetup_r+0xbc>
 8009552:	2300      	movs	r3, #0
 8009554:	60a3      	str	r3, [r4, #8]
 8009556:	6963      	ldr	r3, [r4, #20]
 8009558:	425b      	negs	r3, r3
 800955a:	61a3      	str	r3, [r4, #24]
 800955c:	6923      	ldr	r3, [r4, #16]
 800955e:	b943      	cbnz	r3, 8009572 <__swsetup_r+0xc6>
 8009560:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009564:	d1ba      	bne.n	80094dc <__swsetup_r+0x30>
 8009566:	bd70      	pop	{r4, r5, r6, pc}
 8009568:	0781      	lsls	r1, r0, #30
 800956a:	bf58      	it	pl
 800956c:	6963      	ldrpl	r3, [r4, #20]
 800956e:	60a3      	str	r3, [r4, #8]
 8009570:	e7f4      	b.n	800955c <__swsetup_r+0xb0>
 8009572:	2000      	movs	r0, #0
 8009574:	e7f7      	b.n	8009566 <__swsetup_r+0xba>
 8009576:	bf00      	nop
 8009578:	20000120 	.word	0x20000120
 800957c:	0800a574 	.word	0x0800a574
 8009580:	0800a594 	.word	0x0800a594
 8009584:	0800a554 	.word	0x0800a554

08009588 <__sflush_r>:
 8009588:	898a      	ldrh	r2, [r1, #12]
 800958a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800958e:	4605      	mov	r5, r0
 8009590:	0710      	lsls	r0, r2, #28
 8009592:	460c      	mov	r4, r1
 8009594:	d458      	bmi.n	8009648 <__sflush_r+0xc0>
 8009596:	684b      	ldr	r3, [r1, #4]
 8009598:	2b00      	cmp	r3, #0
 800959a:	dc05      	bgt.n	80095a8 <__sflush_r+0x20>
 800959c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800959e:	2b00      	cmp	r3, #0
 80095a0:	dc02      	bgt.n	80095a8 <__sflush_r+0x20>
 80095a2:	2000      	movs	r0, #0
 80095a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80095aa:	2e00      	cmp	r6, #0
 80095ac:	d0f9      	beq.n	80095a2 <__sflush_r+0x1a>
 80095ae:	2300      	movs	r3, #0
 80095b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80095b4:	682f      	ldr	r7, [r5, #0]
 80095b6:	602b      	str	r3, [r5, #0]
 80095b8:	d032      	beq.n	8009620 <__sflush_r+0x98>
 80095ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80095bc:	89a3      	ldrh	r3, [r4, #12]
 80095be:	075a      	lsls	r2, r3, #29
 80095c0:	d505      	bpl.n	80095ce <__sflush_r+0x46>
 80095c2:	6863      	ldr	r3, [r4, #4]
 80095c4:	1ac0      	subs	r0, r0, r3
 80095c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80095c8:	b10b      	cbz	r3, 80095ce <__sflush_r+0x46>
 80095ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80095cc:	1ac0      	subs	r0, r0, r3
 80095ce:	2300      	movs	r3, #0
 80095d0:	4602      	mov	r2, r0
 80095d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80095d4:	6a21      	ldr	r1, [r4, #32]
 80095d6:	4628      	mov	r0, r5
 80095d8:	47b0      	blx	r6
 80095da:	1c43      	adds	r3, r0, #1
 80095dc:	89a3      	ldrh	r3, [r4, #12]
 80095de:	d106      	bne.n	80095ee <__sflush_r+0x66>
 80095e0:	6829      	ldr	r1, [r5, #0]
 80095e2:	291d      	cmp	r1, #29
 80095e4:	d82c      	bhi.n	8009640 <__sflush_r+0xb8>
 80095e6:	4a2a      	ldr	r2, [pc, #168]	; (8009690 <__sflush_r+0x108>)
 80095e8:	40ca      	lsrs	r2, r1
 80095ea:	07d6      	lsls	r6, r2, #31
 80095ec:	d528      	bpl.n	8009640 <__sflush_r+0xb8>
 80095ee:	2200      	movs	r2, #0
 80095f0:	6062      	str	r2, [r4, #4]
 80095f2:	04d9      	lsls	r1, r3, #19
 80095f4:	6922      	ldr	r2, [r4, #16]
 80095f6:	6022      	str	r2, [r4, #0]
 80095f8:	d504      	bpl.n	8009604 <__sflush_r+0x7c>
 80095fa:	1c42      	adds	r2, r0, #1
 80095fc:	d101      	bne.n	8009602 <__sflush_r+0x7a>
 80095fe:	682b      	ldr	r3, [r5, #0]
 8009600:	b903      	cbnz	r3, 8009604 <__sflush_r+0x7c>
 8009602:	6560      	str	r0, [r4, #84]	; 0x54
 8009604:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009606:	602f      	str	r7, [r5, #0]
 8009608:	2900      	cmp	r1, #0
 800960a:	d0ca      	beq.n	80095a2 <__sflush_r+0x1a>
 800960c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009610:	4299      	cmp	r1, r3
 8009612:	d002      	beq.n	800961a <__sflush_r+0x92>
 8009614:	4628      	mov	r0, r5
 8009616:	f000 f9d7 	bl	80099c8 <_free_r>
 800961a:	2000      	movs	r0, #0
 800961c:	6360      	str	r0, [r4, #52]	; 0x34
 800961e:	e7c1      	b.n	80095a4 <__sflush_r+0x1c>
 8009620:	6a21      	ldr	r1, [r4, #32]
 8009622:	2301      	movs	r3, #1
 8009624:	4628      	mov	r0, r5
 8009626:	47b0      	blx	r6
 8009628:	1c41      	adds	r1, r0, #1
 800962a:	d1c7      	bne.n	80095bc <__sflush_r+0x34>
 800962c:	682b      	ldr	r3, [r5, #0]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d0c4      	beq.n	80095bc <__sflush_r+0x34>
 8009632:	2b1d      	cmp	r3, #29
 8009634:	d001      	beq.n	800963a <__sflush_r+0xb2>
 8009636:	2b16      	cmp	r3, #22
 8009638:	d101      	bne.n	800963e <__sflush_r+0xb6>
 800963a:	602f      	str	r7, [r5, #0]
 800963c:	e7b1      	b.n	80095a2 <__sflush_r+0x1a>
 800963e:	89a3      	ldrh	r3, [r4, #12]
 8009640:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009644:	81a3      	strh	r3, [r4, #12]
 8009646:	e7ad      	b.n	80095a4 <__sflush_r+0x1c>
 8009648:	690f      	ldr	r7, [r1, #16]
 800964a:	2f00      	cmp	r7, #0
 800964c:	d0a9      	beq.n	80095a2 <__sflush_r+0x1a>
 800964e:	0793      	lsls	r3, r2, #30
 8009650:	680e      	ldr	r6, [r1, #0]
 8009652:	bf08      	it	eq
 8009654:	694b      	ldreq	r3, [r1, #20]
 8009656:	600f      	str	r7, [r1, #0]
 8009658:	bf18      	it	ne
 800965a:	2300      	movne	r3, #0
 800965c:	eba6 0807 	sub.w	r8, r6, r7
 8009660:	608b      	str	r3, [r1, #8]
 8009662:	f1b8 0f00 	cmp.w	r8, #0
 8009666:	dd9c      	ble.n	80095a2 <__sflush_r+0x1a>
 8009668:	6a21      	ldr	r1, [r4, #32]
 800966a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800966c:	4643      	mov	r3, r8
 800966e:	463a      	mov	r2, r7
 8009670:	4628      	mov	r0, r5
 8009672:	47b0      	blx	r6
 8009674:	2800      	cmp	r0, #0
 8009676:	dc06      	bgt.n	8009686 <__sflush_r+0xfe>
 8009678:	89a3      	ldrh	r3, [r4, #12]
 800967a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800967e:	81a3      	strh	r3, [r4, #12]
 8009680:	f04f 30ff 	mov.w	r0, #4294967295
 8009684:	e78e      	b.n	80095a4 <__sflush_r+0x1c>
 8009686:	4407      	add	r7, r0
 8009688:	eba8 0800 	sub.w	r8, r8, r0
 800968c:	e7e9      	b.n	8009662 <__sflush_r+0xda>
 800968e:	bf00      	nop
 8009690:	20400001 	.word	0x20400001

08009694 <_fflush_r>:
 8009694:	b538      	push	{r3, r4, r5, lr}
 8009696:	690b      	ldr	r3, [r1, #16]
 8009698:	4605      	mov	r5, r0
 800969a:	460c      	mov	r4, r1
 800969c:	b913      	cbnz	r3, 80096a4 <_fflush_r+0x10>
 800969e:	2500      	movs	r5, #0
 80096a0:	4628      	mov	r0, r5
 80096a2:	bd38      	pop	{r3, r4, r5, pc}
 80096a4:	b118      	cbz	r0, 80096ae <_fflush_r+0x1a>
 80096a6:	6983      	ldr	r3, [r0, #24]
 80096a8:	b90b      	cbnz	r3, 80096ae <_fflush_r+0x1a>
 80096aa:	f000 f887 	bl	80097bc <__sinit>
 80096ae:	4b14      	ldr	r3, [pc, #80]	; (8009700 <_fflush_r+0x6c>)
 80096b0:	429c      	cmp	r4, r3
 80096b2:	d11b      	bne.n	80096ec <_fflush_r+0x58>
 80096b4:	686c      	ldr	r4, [r5, #4]
 80096b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d0ef      	beq.n	800969e <_fflush_r+0xa>
 80096be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80096c0:	07d0      	lsls	r0, r2, #31
 80096c2:	d404      	bmi.n	80096ce <_fflush_r+0x3a>
 80096c4:	0599      	lsls	r1, r3, #22
 80096c6:	d402      	bmi.n	80096ce <_fflush_r+0x3a>
 80096c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096ca:	f000 f915 	bl	80098f8 <__retarget_lock_acquire_recursive>
 80096ce:	4628      	mov	r0, r5
 80096d0:	4621      	mov	r1, r4
 80096d2:	f7ff ff59 	bl	8009588 <__sflush_r>
 80096d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80096d8:	07da      	lsls	r2, r3, #31
 80096da:	4605      	mov	r5, r0
 80096dc:	d4e0      	bmi.n	80096a0 <_fflush_r+0xc>
 80096de:	89a3      	ldrh	r3, [r4, #12]
 80096e0:	059b      	lsls	r3, r3, #22
 80096e2:	d4dd      	bmi.n	80096a0 <_fflush_r+0xc>
 80096e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096e6:	f000 f908 	bl	80098fa <__retarget_lock_release_recursive>
 80096ea:	e7d9      	b.n	80096a0 <_fflush_r+0xc>
 80096ec:	4b05      	ldr	r3, [pc, #20]	; (8009704 <_fflush_r+0x70>)
 80096ee:	429c      	cmp	r4, r3
 80096f0:	d101      	bne.n	80096f6 <_fflush_r+0x62>
 80096f2:	68ac      	ldr	r4, [r5, #8]
 80096f4:	e7df      	b.n	80096b6 <_fflush_r+0x22>
 80096f6:	4b04      	ldr	r3, [pc, #16]	; (8009708 <_fflush_r+0x74>)
 80096f8:	429c      	cmp	r4, r3
 80096fa:	bf08      	it	eq
 80096fc:	68ec      	ldreq	r4, [r5, #12]
 80096fe:	e7da      	b.n	80096b6 <_fflush_r+0x22>
 8009700:	0800a574 	.word	0x0800a574
 8009704:	0800a594 	.word	0x0800a594
 8009708:	0800a554 	.word	0x0800a554

0800970c <std>:
 800970c:	2300      	movs	r3, #0
 800970e:	b510      	push	{r4, lr}
 8009710:	4604      	mov	r4, r0
 8009712:	e9c0 3300 	strd	r3, r3, [r0]
 8009716:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800971a:	6083      	str	r3, [r0, #8]
 800971c:	8181      	strh	r1, [r0, #12]
 800971e:	6643      	str	r3, [r0, #100]	; 0x64
 8009720:	81c2      	strh	r2, [r0, #14]
 8009722:	6183      	str	r3, [r0, #24]
 8009724:	4619      	mov	r1, r3
 8009726:	2208      	movs	r2, #8
 8009728:	305c      	adds	r0, #92	; 0x5c
 800972a:	f7ff fdcf 	bl	80092cc <memset>
 800972e:	4b05      	ldr	r3, [pc, #20]	; (8009744 <std+0x38>)
 8009730:	6263      	str	r3, [r4, #36]	; 0x24
 8009732:	4b05      	ldr	r3, [pc, #20]	; (8009748 <std+0x3c>)
 8009734:	62a3      	str	r3, [r4, #40]	; 0x28
 8009736:	4b05      	ldr	r3, [pc, #20]	; (800974c <std+0x40>)
 8009738:	62e3      	str	r3, [r4, #44]	; 0x2c
 800973a:	4b05      	ldr	r3, [pc, #20]	; (8009750 <std+0x44>)
 800973c:	6224      	str	r4, [r4, #32]
 800973e:	6323      	str	r3, [r4, #48]	; 0x30
 8009740:	bd10      	pop	{r4, pc}
 8009742:	bf00      	nop
 8009744:	0800a189 	.word	0x0800a189
 8009748:	0800a1ab 	.word	0x0800a1ab
 800974c:	0800a1e3 	.word	0x0800a1e3
 8009750:	0800a207 	.word	0x0800a207

08009754 <_cleanup_r>:
 8009754:	4901      	ldr	r1, [pc, #4]	; (800975c <_cleanup_r+0x8>)
 8009756:	f000 b8af 	b.w	80098b8 <_fwalk_reent>
 800975a:	bf00      	nop
 800975c:	08009695 	.word	0x08009695

08009760 <__sfmoreglue>:
 8009760:	b570      	push	{r4, r5, r6, lr}
 8009762:	2268      	movs	r2, #104	; 0x68
 8009764:	1e4d      	subs	r5, r1, #1
 8009766:	4355      	muls	r5, r2
 8009768:	460e      	mov	r6, r1
 800976a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800976e:	f000 f997 	bl	8009aa0 <_malloc_r>
 8009772:	4604      	mov	r4, r0
 8009774:	b140      	cbz	r0, 8009788 <__sfmoreglue+0x28>
 8009776:	2100      	movs	r1, #0
 8009778:	e9c0 1600 	strd	r1, r6, [r0]
 800977c:	300c      	adds	r0, #12
 800977e:	60a0      	str	r0, [r4, #8]
 8009780:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009784:	f7ff fda2 	bl	80092cc <memset>
 8009788:	4620      	mov	r0, r4
 800978a:	bd70      	pop	{r4, r5, r6, pc}

0800978c <__sfp_lock_acquire>:
 800978c:	4801      	ldr	r0, [pc, #4]	; (8009794 <__sfp_lock_acquire+0x8>)
 800978e:	f000 b8b3 	b.w	80098f8 <__retarget_lock_acquire_recursive>
 8009792:	bf00      	nop
 8009794:	20001009 	.word	0x20001009

08009798 <__sfp_lock_release>:
 8009798:	4801      	ldr	r0, [pc, #4]	; (80097a0 <__sfp_lock_release+0x8>)
 800979a:	f000 b8ae 	b.w	80098fa <__retarget_lock_release_recursive>
 800979e:	bf00      	nop
 80097a0:	20001009 	.word	0x20001009

080097a4 <__sinit_lock_acquire>:
 80097a4:	4801      	ldr	r0, [pc, #4]	; (80097ac <__sinit_lock_acquire+0x8>)
 80097a6:	f000 b8a7 	b.w	80098f8 <__retarget_lock_acquire_recursive>
 80097aa:	bf00      	nop
 80097ac:	2000100a 	.word	0x2000100a

080097b0 <__sinit_lock_release>:
 80097b0:	4801      	ldr	r0, [pc, #4]	; (80097b8 <__sinit_lock_release+0x8>)
 80097b2:	f000 b8a2 	b.w	80098fa <__retarget_lock_release_recursive>
 80097b6:	bf00      	nop
 80097b8:	2000100a 	.word	0x2000100a

080097bc <__sinit>:
 80097bc:	b510      	push	{r4, lr}
 80097be:	4604      	mov	r4, r0
 80097c0:	f7ff fff0 	bl	80097a4 <__sinit_lock_acquire>
 80097c4:	69a3      	ldr	r3, [r4, #24]
 80097c6:	b11b      	cbz	r3, 80097d0 <__sinit+0x14>
 80097c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097cc:	f7ff bff0 	b.w	80097b0 <__sinit_lock_release>
 80097d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80097d4:	6523      	str	r3, [r4, #80]	; 0x50
 80097d6:	4b13      	ldr	r3, [pc, #76]	; (8009824 <__sinit+0x68>)
 80097d8:	4a13      	ldr	r2, [pc, #76]	; (8009828 <__sinit+0x6c>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80097de:	42a3      	cmp	r3, r4
 80097e0:	bf04      	itt	eq
 80097e2:	2301      	moveq	r3, #1
 80097e4:	61a3      	streq	r3, [r4, #24]
 80097e6:	4620      	mov	r0, r4
 80097e8:	f000 f820 	bl	800982c <__sfp>
 80097ec:	6060      	str	r0, [r4, #4]
 80097ee:	4620      	mov	r0, r4
 80097f0:	f000 f81c 	bl	800982c <__sfp>
 80097f4:	60a0      	str	r0, [r4, #8]
 80097f6:	4620      	mov	r0, r4
 80097f8:	f000 f818 	bl	800982c <__sfp>
 80097fc:	2200      	movs	r2, #0
 80097fe:	60e0      	str	r0, [r4, #12]
 8009800:	2104      	movs	r1, #4
 8009802:	6860      	ldr	r0, [r4, #4]
 8009804:	f7ff ff82 	bl	800970c <std>
 8009808:	68a0      	ldr	r0, [r4, #8]
 800980a:	2201      	movs	r2, #1
 800980c:	2109      	movs	r1, #9
 800980e:	f7ff ff7d 	bl	800970c <std>
 8009812:	68e0      	ldr	r0, [r4, #12]
 8009814:	2202      	movs	r2, #2
 8009816:	2112      	movs	r1, #18
 8009818:	f7ff ff78 	bl	800970c <std>
 800981c:	2301      	movs	r3, #1
 800981e:	61a3      	str	r3, [r4, #24]
 8009820:	e7d2      	b.n	80097c8 <__sinit+0xc>
 8009822:	bf00      	nop
 8009824:	0800a550 	.word	0x0800a550
 8009828:	08009755 	.word	0x08009755

0800982c <__sfp>:
 800982c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800982e:	4607      	mov	r7, r0
 8009830:	f7ff ffac 	bl	800978c <__sfp_lock_acquire>
 8009834:	4b1e      	ldr	r3, [pc, #120]	; (80098b0 <__sfp+0x84>)
 8009836:	681e      	ldr	r6, [r3, #0]
 8009838:	69b3      	ldr	r3, [r6, #24]
 800983a:	b913      	cbnz	r3, 8009842 <__sfp+0x16>
 800983c:	4630      	mov	r0, r6
 800983e:	f7ff ffbd 	bl	80097bc <__sinit>
 8009842:	3648      	adds	r6, #72	; 0x48
 8009844:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009848:	3b01      	subs	r3, #1
 800984a:	d503      	bpl.n	8009854 <__sfp+0x28>
 800984c:	6833      	ldr	r3, [r6, #0]
 800984e:	b30b      	cbz	r3, 8009894 <__sfp+0x68>
 8009850:	6836      	ldr	r6, [r6, #0]
 8009852:	e7f7      	b.n	8009844 <__sfp+0x18>
 8009854:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009858:	b9d5      	cbnz	r5, 8009890 <__sfp+0x64>
 800985a:	4b16      	ldr	r3, [pc, #88]	; (80098b4 <__sfp+0x88>)
 800985c:	60e3      	str	r3, [r4, #12]
 800985e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009862:	6665      	str	r5, [r4, #100]	; 0x64
 8009864:	f000 f847 	bl	80098f6 <__retarget_lock_init_recursive>
 8009868:	f7ff ff96 	bl	8009798 <__sfp_lock_release>
 800986c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009870:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009874:	6025      	str	r5, [r4, #0]
 8009876:	61a5      	str	r5, [r4, #24]
 8009878:	2208      	movs	r2, #8
 800987a:	4629      	mov	r1, r5
 800987c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009880:	f7ff fd24 	bl	80092cc <memset>
 8009884:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009888:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800988c:	4620      	mov	r0, r4
 800988e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009890:	3468      	adds	r4, #104	; 0x68
 8009892:	e7d9      	b.n	8009848 <__sfp+0x1c>
 8009894:	2104      	movs	r1, #4
 8009896:	4638      	mov	r0, r7
 8009898:	f7ff ff62 	bl	8009760 <__sfmoreglue>
 800989c:	4604      	mov	r4, r0
 800989e:	6030      	str	r0, [r6, #0]
 80098a0:	2800      	cmp	r0, #0
 80098a2:	d1d5      	bne.n	8009850 <__sfp+0x24>
 80098a4:	f7ff ff78 	bl	8009798 <__sfp_lock_release>
 80098a8:	230c      	movs	r3, #12
 80098aa:	603b      	str	r3, [r7, #0]
 80098ac:	e7ee      	b.n	800988c <__sfp+0x60>
 80098ae:	bf00      	nop
 80098b0:	0800a550 	.word	0x0800a550
 80098b4:	ffff0001 	.word	0xffff0001

080098b8 <_fwalk_reent>:
 80098b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098bc:	4606      	mov	r6, r0
 80098be:	4688      	mov	r8, r1
 80098c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80098c4:	2700      	movs	r7, #0
 80098c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80098ca:	f1b9 0901 	subs.w	r9, r9, #1
 80098ce:	d505      	bpl.n	80098dc <_fwalk_reent+0x24>
 80098d0:	6824      	ldr	r4, [r4, #0]
 80098d2:	2c00      	cmp	r4, #0
 80098d4:	d1f7      	bne.n	80098c6 <_fwalk_reent+0xe>
 80098d6:	4638      	mov	r0, r7
 80098d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098dc:	89ab      	ldrh	r3, [r5, #12]
 80098de:	2b01      	cmp	r3, #1
 80098e0:	d907      	bls.n	80098f2 <_fwalk_reent+0x3a>
 80098e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80098e6:	3301      	adds	r3, #1
 80098e8:	d003      	beq.n	80098f2 <_fwalk_reent+0x3a>
 80098ea:	4629      	mov	r1, r5
 80098ec:	4630      	mov	r0, r6
 80098ee:	47c0      	blx	r8
 80098f0:	4307      	orrs	r7, r0
 80098f2:	3568      	adds	r5, #104	; 0x68
 80098f4:	e7e9      	b.n	80098ca <_fwalk_reent+0x12>

080098f6 <__retarget_lock_init_recursive>:
 80098f6:	4770      	bx	lr

080098f8 <__retarget_lock_acquire_recursive>:
 80098f8:	4770      	bx	lr

080098fa <__retarget_lock_release_recursive>:
 80098fa:	4770      	bx	lr

080098fc <__swhatbuf_r>:
 80098fc:	b570      	push	{r4, r5, r6, lr}
 80098fe:	460e      	mov	r6, r1
 8009900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009904:	2900      	cmp	r1, #0
 8009906:	b096      	sub	sp, #88	; 0x58
 8009908:	4614      	mov	r4, r2
 800990a:	461d      	mov	r5, r3
 800990c:	da08      	bge.n	8009920 <__swhatbuf_r+0x24>
 800990e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009912:	2200      	movs	r2, #0
 8009914:	602a      	str	r2, [r5, #0]
 8009916:	061a      	lsls	r2, r3, #24
 8009918:	d410      	bmi.n	800993c <__swhatbuf_r+0x40>
 800991a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800991e:	e00e      	b.n	800993e <__swhatbuf_r+0x42>
 8009920:	466a      	mov	r2, sp
 8009922:	f000 fc97 	bl	800a254 <_fstat_r>
 8009926:	2800      	cmp	r0, #0
 8009928:	dbf1      	blt.n	800990e <__swhatbuf_r+0x12>
 800992a:	9a01      	ldr	r2, [sp, #4]
 800992c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009930:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009934:	425a      	negs	r2, r3
 8009936:	415a      	adcs	r2, r3
 8009938:	602a      	str	r2, [r5, #0]
 800993a:	e7ee      	b.n	800991a <__swhatbuf_r+0x1e>
 800993c:	2340      	movs	r3, #64	; 0x40
 800993e:	2000      	movs	r0, #0
 8009940:	6023      	str	r3, [r4, #0]
 8009942:	b016      	add	sp, #88	; 0x58
 8009944:	bd70      	pop	{r4, r5, r6, pc}
	...

08009948 <__smakebuf_r>:
 8009948:	898b      	ldrh	r3, [r1, #12]
 800994a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800994c:	079d      	lsls	r5, r3, #30
 800994e:	4606      	mov	r6, r0
 8009950:	460c      	mov	r4, r1
 8009952:	d507      	bpl.n	8009964 <__smakebuf_r+0x1c>
 8009954:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009958:	6023      	str	r3, [r4, #0]
 800995a:	6123      	str	r3, [r4, #16]
 800995c:	2301      	movs	r3, #1
 800995e:	6163      	str	r3, [r4, #20]
 8009960:	b002      	add	sp, #8
 8009962:	bd70      	pop	{r4, r5, r6, pc}
 8009964:	ab01      	add	r3, sp, #4
 8009966:	466a      	mov	r2, sp
 8009968:	f7ff ffc8 	bl	80098fc <__swhatbuf_r>
 800996c:	9900      	ldr	r1, [sp, #0]
 800996e:	4605      	mov	r5, r0
 8009970:	4630      	mov	r0, r6
 8009972:	f000 f895 	bl	8009aa0 <_malloc_r>
 8009976:	b948      	cbnz	r0, 800998c <__smakebuf_r+0x44>
 8009978:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800997c:	059a      	lsls	r2, r3, #22
 800997e:	d4ef      	bmi.n	8009960 <__smakebuf_r+0x18>
 8009980:	f023 0303 	bic.w	r3, r3, #3
 8009984:	f043 0302 	orr.w	r3, r3, #2
 8009988:	81a3      	strh	r3, [r4, #12]
 800998a:	e7e3      	b.n	8009954 <__smakebuf_r+0xc>
 800998c:	4b0d      	ldr	r3, [pc, #52]	; (80099c4 <__smakebuf_r+0x7c>)
 800998e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009990:	89a3      	ldrh	r3, [r4, #12]
 8009992:	6020      	str	r0, [r4, #0]
 8009994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009998:	81a3      	strh	r3, [r4, #12]
 800999a:	9b00      	ldr	r3, [sp, #0]
 800999c:	6163      	str	r3, [r4, #20]
 800999e:	9b01      	ldr	r3, [sp, #4]
 80099a0:	6120      	str	r0, [r4, #16]
 80099a2:	b15b      	cbz	r3, 80099bc <__smakebuf_r+0x74>
 80099a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099a8:	4630      	mov	r0, r6
 80099aa:	f000 fc65 	bl	800a278 <_isatty_r>
 80099ae:	b128      	cbz	r0, 80099bc <__smakebuf_r+0x74>
 80099b0:	89a3      	ldrh	r3, [r4, #12]
 80099b2:	f023 0303 	bic.w	r3, r3, #3
 80099b6:	f043 0301 	orr.w	r3, r3, #1
 80099ba:	81a3      	strh	r3, [r4, #12]
 80099bc:	89a0      	ldrh	r0, [r4, #12]
 80099be:	4305      	orrs	r5, r0
 80099c0:	81a5      	strh	r5, [r4, #12]
 80099c2:	e7cd      	b.n	8009960 <__smakebuf_r+0x18>
 80099c4:	08009755 	.word	0x08009755

080099c8 <_free_r>:
 80099c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80099ca:	2900      	cmp	r1, #0
 80099cc:	d044      	beq.n	8009a58 <_free_r+0x90>
 80099ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099d2:	9001      	str	r0, [sp, #4]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	f1a1 0404 	sub.w	r4, r1, #4
 80099da:	bfb8      	it	lt
 80099dc:	18e4      	addlt	r4, r4, r3
 80099de:	f000 fc95 	bl	800a30c <__malloc_lock>
 80099e2:	4a1e      	ldr	r2, [pc, #120]	; (8009a5c <_free_r+0x94>)
 80099e4:	9801      	ldr	r0, [sp, #4]
 80099e6:	6813      	ldr	r3, [r2, #0]
 80099e8:	b933      	cbnz	r3, 80099f8 <_free_r+0x30>
 80099ea:	6063      	str	r3, [r4, #4]
 80099ec:	6014      	str	r4, [r2, #0]
 80099ee:	b003      	add	sp, #12
 80099f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80099f4:	f000 bc90 	b.w	800a318 <__malloc_unlock>
 80099f8:	42a3      	cmp	r3, r4
 80099fa:	d908      	bls.n	8009a0e <_free_r+0x46>
 80099fc:	6825      	ldr	r5, [r4, #0]
 80099fe:	1961      	adds	r1, r4, r5
 8009a00:	428b      	cmp	r3, r1
 8009a02:	bf01      	itttt	eq
 8009a04:	6819      	ldreq	r1, [r3, #0]
 8009a06:	685b      	ldreq	r3, [r3, #4]
 8009a08:	1949      	addeq	r1, r1, r5
 8009a0a:	6021      	streq	r1, [r4, #0]
 8009a0c:	e7ed      	b.n	80099ea <_free_r+0x22>
 8009a0e:	461a      	mov	r2, r3
 8009a10:	685b      	ldr	r3, [r3, #4]
 8009a12:	b10b      	cbz	r3, 8009a18 <_free_r+0x50>
 8009a14:	42a3      	cmp	r3, r4
 8009a16:	d9fa      	bls.n	8009a0e <_free_r+0x46>
 8009a18:	6811      	ldr	r1, [r2, #0]
 8009a1a:	1855      	adds	r5, r2, r1
 8009a1c:	42a5      	cmp	r5, r4
 8009a1e:	d10b      	bne.n	8009a38 <_free_r+0x70>
 8009a20:	6824      	ldr	r4, [r4, #0]
 8009a22:	4421      	add	r1, r4
 8009a24:	1854      	adds	r4, r2, r1
 8009a26:	42a3      	cmp	r3, r4
 8009a28:	6011      	str	r1, [r2, #0]
 8009a2a:	d1e0      	bne.n	80099ee <_free_r+0x26>
 8009a2c:	681c      	ldr	r4, [r3, #0]
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	6053      	str	r3, [r2, #4]
 8009a32:	4421      	add	r1, r4
 8009a34:	6011      	str	r1, [r2, #0]
 8009a36:	e7da      	b.n	80099ee <_free_r+0x26>
 8009a38:	d902      	bls.n	8009a40 <_free_r+0x78>
 8009a3a:	230c      	movs	r3, #12
 8009a3c:	6003      	str	r3, [r0, #0]
 8009a3e:	e7d6      	b.n	80099ee <_free_r+0x26>
 8009a40:	6825      	ldr	r5, [r4, #0]
 8009a42:	1961      	adds	r1, r4, r5
 8009a44:	428b      	cmp	r3, r1
 8009a46:	bf04      	itt	eq
 8009a48:	6819      	ldreq	r1, [r3, #0]
 8009a4a:	685b      	ldreq	r3, [r3, #4]
 8009a4c:	6063      	str	r3, [r4, #4]
 8009a4e:	bf04      	itt	eq
 8009a50:	1949      	addeq	r1, r1, r5
 8009a52:	6021      	streq	r1, [r4, #0]
 8009a54:	6054      	str	r4, [r2, #4]
 8009a56:	e7ca      	b.n	80099ee <_free_r+0x26>
 8009a58:	b003      	add	sp, #12
 8009a5a:	bd30      	pop	{r4, r5, pc}
 8009a5c:	2000100c 	.word	0x2000100c

08009a60 <sbrk_aligned>:
 8009a60:	b570      	push	{r4, r5, r6, lr}
 8009a62:	4e0e      	ldr	r6, [pc, #56]	; (8009a9c <sbrk_aligned+0x3c>)
 8009a64:	460c      	mov	r4, r1
 8009a66:	6831      	ldr	r1, [r6, #0]
 8009a68:	4605      	mov	r5, r0
 8009a6a:	b911      	cbnz	r1, 8009a72 <sbrk_aligned+0x12>
 8009a6c:	f000 fb7c 	bl	800a168 <_sbrk_r>
 8009a70:	6030      	str	r0, [r6, #0]
 8009a72:	4621      	mov	r1, r4
 8009a74:	4628      	mov	r0, r5
 8009a76:	f000 fb77 	bl	800a168 <_sbrk_r>
 8009a7a:	1c43      	adds	r3, r0, #1
 8009a7c:	d00a      	beq.n	8009a94 <sbrk_aligned+0x34>
 8009a7e:	1cc4      	adds	r4, r0, #3
 8009a80:	f024 0403 	bic.w	r4, r4, #3
 8009a84:	42a0      	cmp	r0, r4
 8009a86:	d007      	beq.n	8009a98 <sbrk_aligned+0x38>
 8009a88:	1a21      	subs	r1, r4, r0
 8009a8a:	4628      	mov	r0, r5
 8009a8c:	f000 fb6c 	bl	800a168 <_sbrk_r>
 8009a90:	3001      	adds	r0, #1
 8009a92:	d101      	bne.n	8009a98 <sbrk_aligned+0x38>
 8009a94:	f04f 34ff 	mov.w	r4, #4294967295
 8009a98:	4620      	mov	r0, r4
 8009a9a:	bd70      	pop	{r4, r5, r6, pc}
 8009a9c:	20001010 	.word	0x20001010

08009aa0 <_malloc_r>:
 8009aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009aa4:	1ccd      	adds	r5, r1, #3
 8009aa6:	f025 0503 	bic.w	r5, r5, #3
 8009aaa:	3508      	adds	r5, #8
 8009aac:	2d0c      	cmp	r5, #12
 8009aae:	bf38      	it	cc
 8009ab0:	250c      	movcc	r5, #12
 8009ab2:	2d00      	cmp	r5, #0
 8009ab4:	4607      	mov	r7, r0
 8009ab6:	db01      	blt.n	8009abc <_malloc_r+0x1c>
 8009ab8:	42a9      	cmp	r1, r5
 8009aba:	d905      	bls.n	8009ac8 <_malloc_r+0x28>
 8009abc:	230c      	movs	r3, #12
 8009abe:	603b      	str	r3, [r7, #0]
 8009ac0:	2600      	movs	r6, #0
 8009ac2:	4630      	mov	r0, r6
 8009ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ac8:	4e2e      	ldr	r6, [pc, #184]	; (8009b84 <_malloc_r+0xe4>)
 8009aca:	f000 fc1f 	bl	800a30c <__malloc_lock>
 8009ace:	6833      	ldr	r3, [r6, #0]
 8009ad0:	461c      	mov	r4, r3
 8009ad2:	bb34      	cbnz	r4, 8009b22 <_malloc_r+0x82>
 8009ad4:	4629      	mov	r1, r5
 8009ad6:	4638      	mov	r0, r7
 8009ad8:	f7ff ffc2 	bl	8009a60 <sbrk_aligned>
 8009adc:	1c43      	adds	r3, r0, #1
 8009ade:	4604      	mov	r4, r0
 8009ae0:	d14d      	bne.n	8009b7e <_malloc_r+0xde>
 8009ae2:	6834      	ldr	r4, [r6, #0]
 8009ae4:	4626      	mov	r6, r4
 8009ae6:	2e00      	cmp	r6, #0
 8009ae8:	d140      	bne.n	8009b6c <_malloc_r+0xcc>
 8009aea:	6823      	ldr	r3, [r4, #0]
 8009aec:	4631      	mov	r1, r6
 8009aee:	4638      	mov	r0, r7
 8009af0:	eb04 0803 	add.w	r8, r4, r3
 8009af4:	f000 fb38 	bl	800a168 <_sbrk_r>
 8009af8:	4580      	cmp	r8, r0
 8009afa:	d13a      	bne.n	8009b72 <_malloc_r+0xd2>
 8009afc:	6821      	ldr	r1, [r4, #0]
 8009afe:	3503      	adds	r5, #3
 8009b00:	1a6d      	subs	r5, r5, r1
 8009b02:	f025 0503 	bic.w	r5, r5, #3
 8009b06:	3508      	adds	r5, #8
 8009b08:	2d0c      	cmp	r5, #12
 8009b0a:	bf38      	it	cc
 8009b0c:	250c      	movcc	r5, #12
 8009b0e:	4629      	mov	r1, r5
 8009b10:	4638      	mov	r0, r7
 8009b12:	f7ff ffa5 	bl	8009a60 <sbrk_aligned>
 8009b16:	3001      	adds	r0, #1
 8009b18:	d02b      	beq.n	8009b72 <_malloc_r+0xd2>
 8009b1a:	6823      	ldr	r3, [r4, #0]
 8009b1c:	442b      	add	r3, r5
 8009b1e:	6023      	str	r3, [r4, #0]
 8009b20:	e00e      	b.n	8009b40 <_malloc_r+0xa0>
 8009b22:	6822      	ldr	r2, [r4, #0]
 8009b24:	1b52      	subs	r2, r2, r5
 8009b26:	d41e      	bmi.n	8009b66 <_malloc_r+0xc6>
 8009b28:	2a0b      	cmp	r2, #11
 8009b2a:	d916      	bls.n	8009b5a <_malloc_r+0xba>
 8009b2c:	1961      	adds	r1, r4, r5
 8009b2e:	42a3      	cmp	r3, r4
 8009b30:	6025      	str	r5, [r4, #0]
 8009b32:	bf18      	it	ne
 8009b34:	6059      	strne	r1, [r3, #4]
 8009b36:	6863      	ldr	r3, [r4, #4]
 8009b38:	bf08      	it	eq
 8009b3a:	6031      	streq	r1, [r6, #0]
 8009b3c:	5162      	str	r2, [r4, r5]
 8009b3e:	604b      	str	r3, [r1, #4]
 8009b40:	4638      	mov	r0, r7
 8009b42:	f104 060b 	add.w	r6, r4, #11
 8009b46:	f000 fbe7 	bl	800a318 <__malloc_unlock>
 8009b4a:	f026 0607 	bic.w	r6, r6, #7
 8009b4e:	1d23      	adds	r3, r4, #4
 8009b50:	1af2      	subs	r2, r6, r3
 8009b52:	d0b6      	beq.n	8009ac2 <_malloc_r+0x22>
 8009b54:	1b9b      	subs	r3, r3, r6
 8009b56:	50a3      	str	r3, [r4, r2]
 8009b58:	e7b3      	b.n	8009ac2 <_malloc_r+0x22>
 8009b5a:	6862      	ldr	r2, [r4, #4]
 8009b5c:	42a3      	cmp	r3, r4
 8009b5e:	bf0c      	ite	eq
 8009b60:	6032      	streq	r2, [r6, #0]
 8009b62:	605a      	strne	r2, [r3, #4]
 8009b64:	e7ec      	b.n	8009b40 <_malloc_r+0xa0>
 8009b66:	4623      	mov	r3, r4
 8009b68:	6864      	ldr	r4, [r4, #4]
 8009b6a:	e7b2      	b.n	8009ad2 <_malloc_r+0x32>
 8009b6c:	4634      	mov	r4, r6
 8009b6e:	6876      	ldr	r6, [r6, #4]
 8009b70:	e7b9      	b.n	8009ae6 <_malloc_r+0x46>
 8009b72:	230c      	movs	r3, #12
 8009b74:	603b      	str	r3, [r7, #0]
 8009b76:	4638      	mov	r0, r7
 8009b78:	f000 fbce 	bl	800a318 <__malloc_unlock>
 8009b7c:	e7a1      	b.n	8009ac2 <_malloc_r+0x22>
 8009b7e:	6025      	str	r5, [r4, #0]
 8009b80:	e7de      	b.n	8009b40 <_malloc_r+0xa0>
 8009b82:	bf00      	nop
 8009b84:	2000100c 	.word	0x2000100c

08009b88 <__ssputs_r>:
 8009b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b8c:	688e      	ldr	r6, [r1, #8]
 8009b8e:	429e      	cmp	r6, r3
 8009b90:	4682      	mov	sl, r0
 8009b92:	460c      	mov	r4, r1
 8009b94:	4690      	mov	r8, r2
 8009b96:	461f      	mov	r7, r3
 8009b98:	d838      	bhi.n	8009c0c <__ssputs_r+0x84>
 8009b9a:	898a      	ldrh	r2, [r1, #12]
 8009b9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009ba0:	d032      	beq.n	8009c08 <__ssputs_r+0x80>
 8009ba2:	6825      	ldr	r5, [r4, #0]
 8009ba4:	6909      	ldr	r1, [r1, #16]
 8009ba6:	eba5 0901 	sub.w	r9, r5, r1
 8009baa:	6965      	ldr	r5, [r4, #20]
 8009bac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009bb0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009bb4:	3301      	adds	r3, #1
 8009bb6:	444b      	add	r3, r9
 8009bb8:	106d      	asrs	r5, r5, #1
 8009bba:	429d      	cmp	r5, r3
 8009bbc:	bf38      	it	cc
 8009bbe:	461d      	movcc	r5, r3
 8009bc0:	0553      	lsls	r3, r2, #21
 8009bc2:	d531      	bpl.n	8009c28 <__ssputs_r+0xa0>
 8009bc4:	4629      	mov	r1, r5
 8009bc6:	f7ff ff6b 	bl	8009aa0 <_malloc_r>
 8009bca:	4606      	mov	r6, r0
 8009bcc:	b950      	cbnz	r0, 8009be4 <__ssputs_r+0x5c>
 8009bce:	230c      	movs	r3, #12
 8009bd0:	f8ca 3000 	str.w	r3, [sl]
 8009bd4:	89a3      	ldrh	r3, [r4, #12]
 8009bd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bda:	81a3      	strh	r3, [r4, #12]
 8009bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8009be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009be4:	6921      	ldr	r1, [r4, #16]
 8009be6:	464a      	mov	r2, r9
 8009be8:	f000 fb68 	bl	800a2bc <memcpy>
 8009bec:	89a3      	ldrh	r3, [r4, #12]
 8009bee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009bf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bf6:	81a3      	strh	r3, [r4, #12]
 8009bf8:	6126      	str	r6, [r4, #16]
 8009bfa:	6165      	str	r5, [r4, #20]
 8009bfc:	444e      	add	r6, r9
 8009bfe:	eba5 0509 	sub.w	r5, r5, r9
 8009c02:	6026      	str	r6, [r4, #0]
 8009c04:	60a5      	str	r5, [r4, #8]
 8009c06:	463e      	mov	r6, r7
 8009c08:	42be      	cmp	r6, r7
 8009c0a:	d900      	bls.n	8009c0e <__ssputs_r+0x86>
 8009c0c:	463e      	mov	r6, r7
 8009c0e:	6820      	ldr	r0, [r4, #0]
 8009c10:	4632      	mov	r2, r6
 8009c12:	4641      	mov	r1, r8
 8009c14:	f000 fb60 	bl	800a2d8 <memmove>
 8009c18:	68a3      	ldr	r3, [r4, #8]
 8009c1a:	1b9b      	subs	r3, r3, r6
 8009c1c:	60a3      	str	r3, [r4, #8]
 8009c1e:	6823      	ldr	r3, [r4, #0]
 8009c20:	4433      	add	r3, r6
 8009c22:	6023      	str	r3, [r4, #0]
 8009c24:	2000      	movs	r0, #0
 8009c26:	e7db      	b.n	8009be0 <__ssputs_r+0x58>
 8009c28:	462a      	mov	r2, r5
 8009c2a:	f000 fb7b 	bl	800a324 <_realloc_r>
 8009c2e:	4606      	mov	r6, r0
 8009c30:	2800      	cmp	r0, #0
 8009c32:	d1e1      	bne.n	8009bf8 <__ssputs_r+0x70>
 8009c34:	6921      	ldr	r1, [r4, #16]
 8009c36:	4650      	mov	r0, sl
 8009c38:	f7ff fec6 	bl	80099c8 <_free_r>
 8009c3c:	e7c7      	b.n	8009bce <__ssputs_r+0x46>
	...

08009c40 <_svfiprintf_r>:
 8009c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c44:	4698      	mov	r8, r3
 8009c46:	898b      	ldrh	r3, [r1, #12]
 8009c48:	061b      	lsls	r3, r3, #24
 8009c4a:	b09d      	sub	sp, #116	; 0x74
 8009c4c:	4607      	mov	r7, r0
 8009c4e:	460d      	mov	r5, r1
 8009c50:	4614      	mov	r4, r2
 8009c52:	d50e      	bpl.n	8009c72 <_svfiprintf_r+0x32>
 8009c54:	690b      	ldr	r3, [r1, #16]
 8009c56:	b963      	cbnz	r3, 8009c72 <_svfiprintf_r+0x32>
 8009c58:	2140      	movs	r1, #64	; 0x40
 8009c5a:	f7ff ff21 	bl	8009aa0 <_malloc_r>
 8009c5e:	6028      	str	r0, [r5, #0]
 8009c60:	6128      	str	r0, [r5, #16]
 8009c62:	b920      	cbnz	r0, 8009c6e <_svfiprintf_r+0x2e>
 8009c64:	230c      	movs	r3, #12
 8009c66:	603b      	str	r3, [r7, #0]
 8009c68:	f04f 30ff 	mov.w	r0, #4294967295
 8009c6c:	e0d1      	b.n	8009e12 <_svfiprintf_r+0x1d2>
 8009c6e:	2340      	movs	r3, #64	; 0x40
 8009c70:	616b      	str	r3, [r5, #20]
 8009c72:	2300      	movs	r3, #0
 8009c74:	9309      	str	r3, [sp, #36]	; 0x24
 8009c76:	2320      	movs	r3, #32
 8009c78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c80:	2330      	movs	r3, #48	; 0x30
 8009c82:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009e2c <_svfiprintf_r+0x1ec>
 8009c86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c8a:	f04f 0901 	mov.w	r9, #1
 8009c8e:	4623      	mov	r3, r4
 8009c90:	469a      	mov	sl, r3
 8009c92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c96:	b10a      	cbz	r2, 8009c9c <_svfiprintf_r+0x5c>
 8009c98:	2a25      	cmp	r2, #37	; 0x25
 8009c9a:	d1f9      	bne.n	8009c90 <_svfiprintf_r+0x50>
 8009c9c:	ebba 0b04 	subs.w	fp, sl, r4
 8009ca0:	d00b      	beq.n	8009cba <_svfiprintf_r+0x7a>
 8009ca2:	465b      	mov	r3, fp
 8009ca4:	4622      	mov	r2, r4
 8009ca6:	4629      	mov	r1, r5
 8009ca8:	4638      	mov	r0, r7
 8009caa:	f7ff ff6d 	bl	8009b88 <__ssputs_r>
 8009cae:	3001      	adds	r0, #1
 8009cb0:	f000 80aa 	beq.w	8009e08 <_svfiprintf_r+0x1c8>
 8009cb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009cb6:	445a      	add	r2, fp
 8009cb8:	9209      	str	r2, [sp, #36]	; 0x24
 8009cba:	f89a 3000 	ldrb.w	r3, [sl]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	f000 80a2 	beq.w	8009e08 <_svfiprintf_r+0x1c8>
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8009cca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009cce:	f10a 0a01 	add.w	sl, sl, #1
 8009cd2:	9304      	str	r3, [sp, #16]
 8009cd4:	9307      	str	r3, [sp, #28]
 8009cd6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009cda:	931a      	str	r3, [sp, #104]	; 0x68
 8009cdc:	4654      	mov	r4, sl
 8009cde:	2205      	movs	r2, #5
 8009ce0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ce4:	4851      	ldr	r0, [pc, #324]	; (8009e2c <_svfiprintf_r+0x1ec>)
 8009ce6:	f7f6 fa83 	bl	80001f0 <memchr>
 8009cea:	9a04      	ldr	r2, [sp, #16]
 8009cec:	b9d8      	cbnz	r0, 8009d26 <_svfiprintf_r+0xe6>
 8009cee:	06d0      	lsls	r0, r2, #27
 8009cf0:	bf44      	itt	mi
 8009cf2:	2320      	movmi	r3, #32
 8009cf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cf8:	0711      	lsls	r1, r2, #28
 8009cfa:	bf44      	itt	mi
 8009cfc:	232b      	movmi	r3, #43	; 0x2b
 8009cfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d02:	f89a 3000 	ldrb.w	r3, [sl]
 8009d06:	2b2a      	cmp	r3, #42	; 0x2a
 8009d08:	d015      	beq.n	8009d36 <_svfiprintf_r+0xf6>
 8009d0a:	9a07      	ldr	r2, [sp, #28]
 8009d0c:	4654      	mov	r4, sl
 8009d0e:	2000      	movs	r0, #0
 8009d10:	f04f 0c0a 	mov.w	ip, #10
 8009d14:	4621      	mov	r1, r4
 8009d16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d1a:	3b30      	subs	r3, #48	; 0x30
 8009d1c:	2b09      	cmp	r3, #9
 8009d1e:	d94e      	bls.n	8009dbe <_svfiprintf_r+0x17e>
 8009d20:	b1b0      	cbz	r0, 8009d50 <_svfiprintf_r+0x110>
 8009d22:	9207      	str	r2, [sp, #28]
 8009d24:	e014      	b.n	8009d50 <_svfiprintf_r+0x110>
 8009d26:	eba0 0308 	sub.w	r3, r0, r8
 8009d2a:	fa09 f303 	lsl.w	r3, r9, r3
 8009d2e:	4313      	orrs	r3, r2
 8009d30:	9304      	str	r3, [sp, #16]
 8009d32:	46a2      	mov	sl, r4
 8009d34:	e7d2      	b.n	8009cdc <_svfiprintf_r+0x9c>
 8009d36:	9b03      	ldr	r3, [sp, #12]
 8009d38:	1d19      	adds	r1, r3, #4
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	9103      	str	r1, [sp, #12]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	bfbb      	ittet	lt
 8009d42:	425b      	neglt	r3, r3
 8009d44:	f042 0202 	orrlt.w	r2, r2, #2
 8009d48:	9307      	strge	r3, [sp, #28]
 8009d4a:	9307      	strlt	r3, [sp, #28]
 8009d4c:	bfb8      	it	lt
 8009d4e:	9204      	strlt	r2, [sp, #16]
 8009d50:	7823      	ldrb	r3, [r4, #0]
 8009d52:	2b2e      	cmp	r3, #46	; 0x2e
 8009d54:	d10c      	bne.n	8009d70 <_svfiprintf_r+0x130>
 8009d56:	7863      	ldrb	r3, [r4, #1]
 8009d58:	2b2a      	cmp	r3, #42	; 0x2a
 8009d5a:	d135      	bne.n	8009dc8 <_svfiprintf_r+0x188>
 8009d5c:	9b03      	ldr	r3, [sp, #12]
 8009d5e:	1d1a      	adds	r2, r3, #4
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	9203      	str	r2, [sp, #12]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	bfb8      	it	lt
 8009d68:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d6c:	3402      	adds	r4, #2
 8009d6e:	9305      	str	r3, [sp, #20]
 8009d70:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009e3c <_svfiprintf_r+0x1fc>
 8009d74:	7821      	ldrb	r1, [r4, #0]
 8009d76:	2203      	movs	r2, #3
 8009d78:	4650      	mov	r0, sl
 8009d7a:	f7f6 fa39 	bl	80001f0 <memchr>
 8009d7e:	b140      	cbz	r0, 8009d92 <_svfiprintf_r+0x152>
 8009d80:	2340      	movs	r3, #64	; 0x40
 8009d82:	eba0 000a 	sub.w	r0, r0, sl
 8009d86:	fa03 f000 	lsl.w	r0, r3, r0
 8009d8a:	9b04      	ldr	r3, [sp, #16]
 8009d8c:	4303      	orrs	r3, r0
 8009d8e:	3401      	adds	r4, #1
 8009d90:	9304      	str	r3, [sp, #16]
 8009d92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d96:	4826      	ldr	r0, [pc, #152]	; (8009e30 <_svfiprintf_r+0x1f0>)
 8009d98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d9c:	2206      	movs	r2, #6
 8009d9e:	f7f6 fa27 	bl	80001f0 <memchr>
 8009da2:	2800      	cmp	r0, #0
 8009da4:	d038      	beq.n	8009e18 <_svfiprintf_r+0x1d8>
 8009da6:	4b23      	ldr	r3, [pc, #140]	; (8009e34 <_svfiprintf_r+0x1f4>)
 8009da8:	bb1b      	cbnz	r3, 8009df2 <_svfiprintf_r+0x1b2>
 8009daa:	9b03      	ldr	r3, [sp, #12]
 8009dac:	3307      	adds	r3, #7
 8009dae:	f023 0307 	bic.w	r3, r3, #7
 8009db2:	3308      	adds	r3, #8
 8009db4:	9303      	str	r3, [sp, #12]
 8009db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009db8:	4433      	add	r3, r6
 8009dba:	9309      	str	r3, [sp, #36]	; 0x24
 8009dbc:	e767      	b.n	8009c8e <_svfiprintf_r+0x4e>
 8009dbe:	fb0c 3202 	mla	r2, ip, r2, r3
 8009dc2:	460c      	mov	r4, r1
 8009dc4:	2001      	movs	r0, #1
 8009dc6:	e7a5      	b.n	8009d14 <_svfiprintf_r+0xd4>
 8009dc8:	2300      	movs	r3, #0
 8009dca:	3401      	adds	r4, #1
 8009dcc:	9305      	str	r3, [sp, #20]
 8009dce:	4619      	mov	r1, r3
 8009dd0:	f04f 0c0a 	mov.w	ip, #10
 8009dd4:	4620      	mov	r0, r4
 8009dd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009dda:	3a30      	subs	r2, #48	; 0x30
 8009ddc:	2a09      	cmp	r2, #9
 8009dde:	d903      	bls.n	8009de8 <_svfiprintf_r+0x1a8>
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d0c5      	beq.n	8009d70 <_svfiprintf_r+0x130>
 8009de4:	9105      	str	r1, [sp, #20]
 8009de6:	e7c3      	b.n	8009d70 <_svfiprintf_r+0x130>
 8009de8:	fb0c 2101 	mla	r1, ip, r1, r2
 8009dec:	4604      	mov	r4, r0
 8009dee:	2301      	movs	r3, #1
 8009df0:	e7f0      	b.n	8009dd4 <_svfiprintf_r+0x194>
 8009df2:	ab03      	add	r3, sp, #12
 8009df4:	9300      	str	r3, [sp, #0]
 8009df6:	462a      	mov	r2, r5
 8009df8:	4b0f      	ldr	r3, [pc, #60]	; (8009e38 <_svfiprintf_r+0x1f8>)
 8009dfa:	a904      	add	r1, sp, #16
 8009dfc:	4638      	mov	r0, r7
 8009dfe:	f3af 8000 	nop.w
 8009e02:	1c42      	adds	r2, r0, #1
 8009e04:	4606      	mov	r6, r0
 8009e06:	d1d6      	bne.n	8009db6 <_svfiprintf_r+0x176>
 8009e08:	89ab      	ldrh	r3, [r5, #12]
 8009e0a:	065b      	lsls	r3, r3, #25
 8009e0c:	f53f af2c 	bmi.w	8009c68 <_svfiprintf_r+0x28>
 8009e10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e12:	b01d      	add	sp, #116	; 0x74
 8009e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e18:	ab03      	add	r3, sp, #12
 8009e1a:	9300      	str	r3, [sp, #0]
 8009e1c:	462a      	mov	r2, r5
 8009e1e:	4b06      	ldr	r3, [pc, #24]	; (8009e38 <_svfiprintf_r+0x1f8>)
 8009e20:	a904      	add	r1, sp, #16
 8009e22:	4638      	mov	r0, r7
 8009e24:	f000 f87a 	bl	8009f1c <_printf_i>
 8009e28:	e7eb      	b.n	8009e02 <_svfiprintf_r+0x1c2>
 8009e2a:	bf00      	nop
 8009e2c:	0800a5b4 	.word	0x0800a5b4
 8009e30:	0800a5be 	.word	0x0800a5be
 8009e34:	00000000 	.word	0x00000000
 8009e38:	08009b89 	.word	0x08009b89
 8009e3c:	0800a5ba 	.word	0x0800a5ba

08009e40 <_printf_common>:
 8009e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e44:	4616      	mov	r6, r2
 8009e46:	4699      	mov	r9, r3
 8009e48:	688a      	ldr	r2, [r1, #8]
 8009e4a:	690b      	ldr	r3, [r1, #16]
 8009e4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009e50:	4293      	cmp	r3, r2
 8009e52:	bfb8      	it	lt
 8009e54:	4613      	movlt	r3, r2
 8009e56:	6033      	str	r3, [r6, #0]
 8009e58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009e5c:	4607      	mov	r7, r0
 8009e5e:	460c      	mov	r4, r1
 8009e60:	b10a      	cbz	r2, 8009e66 <_printf_common+0x26>
 8009e62:	3301      	adds	r3, #1
 8009e64:	6033      	str	r3, [r6, #0]
 8009e66:	6823      	ldr	r3, [r4, #0]
 8009e68:	0699      	lsls	r1, r3, #26
 8009e6a:	bf42      	ittt	mi
 8009e6c:	6833      	ldrmi	r3, [r6, #0]
 8009e6e:	3302      	addmi	r3, #2
 8009e70:	6033      	strmi	r3, [r6, #0]
 8009e72:	6825      	ldr	r5, [r4, #0]
 8009e74:	f015 0506 	ands.w	r5, r5, #6
 8009e78:	d106      	bne.n	8009e88 <_printf_common+0x48>
 8009e7a:	f104 0a19 	add.w	sl, r4, #25
 8009e7e:	68e3      	ldr	r3, [r4, #12]
 8009e80:	6832      	ldr	r2, [r6, #0]
 8009e82:	1a9b      	subs	r3, r3, r2
 8009e84:	42ab      	cmp	r3, r5
 8009e86:	dc26      	bgt.n	8009ed6 <_printf_common+0x96>
 8009e88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009e8c:	1e13      	subs	r3, r2, #0
 8009e8e:	6822      	ldr	r2, [r4, #0]
 8009e90:	bf18      	it	ne
 8009e92:	2301      	movne	r3, #1
 8009e94:	0692      	lsls	r2, r2, #26
 8009e96:	d42b      	bmi.n	8009ef0 <_printf_common+0xb0>
 8009e98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009e9c:	4649      	mov	r1, r9
 8009e9e:	4638      	mov	r0, r7
 8009ea0:	47c0      	blx	r8
 8009ea2:	3001      	adds	r0, #1
 8009ea4:	d01e      	beq.n	8009ee4 <_printf_common+0xa4>
 8009ea6:	6823      	ldr	r3, [r4, #0]
 8009ea8:	68e5      	ldr	r5, [r4, #12]
 8009eaa:	6832      	ldr	r2, [r6, #0]
 8009eac:	f003 0306 	and.w	r3, r3, #6
 8009eb0:	2b04      	cmp	r3, #4
 8009eb2:	bf08      	it	eq
 8009eb4:	1aad      	subeq	r5, r5, r2
 8009eb6:	68a3      	ldr	r3, [r4, #8]
 8009eb8:	6922      	ldr	r2, [r4, #16]
 8009eba:	bf0c      	ite	eq
 8009ebc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ec0:	2500      	movne	r5, #0
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	bfc4      	itt	gt
 8009ec6:	1a9b      	subgt	r3, r3, r2
 8009ec8:	18ed      	addgt	r5, r5, r3
 8009eca:	2600      	movs	r6, #0
 8009ecc:	341a      	adds	r4, #26
 8009ece:	42b5      	cmp	r5, r6
 8009ed0:	d11a      	bne.n	8009f08 <_printf_common+0xc8>
 8009ed2:	2000      	movs	r0, #0
 8009ed4:	e008      	b.n	8009ee8 <_printf_common+0xa8>
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	4652      	mov	r2, sl
 8009eda:	4649      	mov	r1, r9
 8009edc:	4638      	mov	r0, r7
 8009ede:	47c0      	blx	r8
 8009ee0:	3001      	adds	r0, #1
 8009ee2:	d103      	bne.n	8009eec <_printf_common+0xac>
 8009ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eec:	3501      	adds	r5, #1
 8009eee:	e7c6      	b.n	8009e7e <_printf_common+0x3e>
 8009ef0:	18e1      	adds	r1, r4, r3
 8009ef2:	1c5a      	adds	r2, r3, #1
 8009ef4:	2030      	movs	r0, #48	; 0x30
 8009ef6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009efa:	4422      	add	r2, r4
 8009efc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009f00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009f04:	3302      	adds	r3, #2
 8009f06:	e7c7      	b.n	8009e98 <_printf_common+0x58>
 8009f08:	2301      	movs	r3, #1
 8009f0a:	4622      	mov	r2, r4
 8009f0c:	4649      	mov	r1, r9
 8009f0e:	4638      	mov	r0, r7
 8009f10:	47c0      	blx	r8
 8009f12:	3001      	adds	r0, #1
 8009f14:	d0e6      	beq.n	8009ee4 <_printf_common+0xa4>
 8009f16:	3601      	adds	r6, #1
 8009f18:	e7d9      	b.n	8009ece <_printf_common+0x8e>
	...

08009f1c <_printf_i>:
 8009f1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f20:	7e0f      	ldrb	r7, [r1, #24]
 8009f22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009f24:	2f78      	cmp	r7, #120	; 0x78
 8009f26:	4691      	mov	r9, r2
 8009f28:	4680      	mov	r8, r0
 8009f2a:	460c      	mov	r4, r1
 8009f2c:	469a      	mov	sl, r3
 8009f2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009f32:	d807      	bhi.n	8009f44 <_printf_i+0x28>
 8009f34:	2f62      	cmp	r7, #98	; 0x62
 8009f36:	d80a      	bhi.n	8009f4e <_printf_i+0x32>
 8009f38:	2f00      	cmp	r7, #0
 8009f3a:	f000 80d8 	beq.w	800a0ee <_printf_i+0x1d2>
 8009f3e:	2f58      	cmp	r7, #88	; 0x58
 8009f40:	f000 80a3 	beq.w	800a08a <_printf_i+0x16e>
 8009f44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009f4c:	e03a      	b.n	8009fc4 <_printf_i+0xa8>
 8009f4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009f52:	2b15      	cmp	r3, #21
 8009f54:	d8f6      	bhi.n	8009f44 <_printf_i+0x28>
 8009f56:	a101      	add	r1, pc, #4	; (adr r1, 8009f5c <_printf_i+0x40>)
 8009f58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009f5c:	08009fb5 	.word	0x08009fb5
 8009f60:	08009fc9 	.word	0x08009fc9
 8009f64:	08009f45 	.word	0x08009f45
 8009f68:	08009f45 	.word	0x08009f45
 8009f6c:	08009f45 	.word	0x08009f45
 8009f70:	08009f45 	.word	0x08009f45
 8009f74:	08009fc9 	.word	0x08009fc9
 8009f78:	08009f45 	.word	0x08009f45
 8009f7c:	08009f45 	.word	0x08009f45
 8009f80:	08009f45 	.word	0x08009f45
 8009f84:	08009f45 	.word	0x08009f45
 8009f88:	0800a0d5 	.word	0x0800a0d5
 8009f8c:	08009ff9 	.word	0x08009ff9
 8009f90:	0800a0b7 	.word	0x0800a0b7
 8009f94:	08009f45 	.word	0x08009f45
 8009f98:	08009f45 	.word	0x08009f45
 8009f9c:	0800a0f7 	.word	0x0800a0f7
 8009fa0:	08009f45 	.word	0x08009f45
 8009fa4:	08009ff9 	.word	0x08009ff9
 8009fa8:	08009f45 	.word	0x08009f45
 8009fac:	08009f45 	.word	0x08009f45
 8009fb0:	0800a0bf 	.word	0x0800a0bf
 8009fb4:	682b      	ldr	r3, [r5, #0]
 8009fb6:	1d1a      	adds	r2, r3, #4
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	602a      	str	r2, [r5, #0]
 8009fbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009fc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	e0a3      	b.n	800a110 <_printf_i+0x1f4>
 8009fc8:	6820      	ldr	r0, [r4, #0]
 8009fca:	6829      	ldr	r1, [r5, #0]
 8009fcc:	0606      	lsls	r6, r0, #24
 8009fce:	f101 0304 	add.w	r3, r1, #4
 8009fd2:	d50a      	bpl.n	8009fea <_printf_i+0xce>
 8009fd4:	680e      	ldr	r6, [r1, #0]
 8009fd6:	602b      	str	r3, [r5, #0]
 8009fd8:	2e00      	cmp	r6, #0
 8009fda:	da03      	bge.n	8009fe4 <_printf_i+0xc8>
 8009fdc:	232d      	movs	r3, #45	; 0x2d
 8009fde:	4276      	negs	r6, r6
 8009fe0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fe4:	485e      	ldr	r0, [pc, #376]	; (800a160 <_printf_i+0x244>)
 8009fe6:	230a      	movs	r3, #10
 8009fe8:	e019      	b.n	800a01e <_printf_i+0x102>
 8009fea:	680e      	ldr	r6, [r1, #0]
 8009fec:	602b      	str	r3, [r5, #0]
 8009fee:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009ff2:	bf18      	it	ne
 8009ff4:	b236      	sxthne	r6, r6
 8009ff6:	e7ef      	b.n	8009fd8 <_printf_i+0xbc>
 8009ff8:	682b      	ldr	r3, [r5, #0]
 8009ffa:	6820      	ldr	r0, [r4, #0]
 8009ffc:	1d19      	adds	r1, r3, #4
 8009ffe:	6029      	str	r1, [r5, #0]
 800a000:	0601      	lsls	r1, r0, #24
 800a002:	d501      	bpl.n	800a008 <_printf_i+0xec>
 800a004:	681e      	ldr	r6, [r3, #0]
 800a006:	e002      	b.n	800a00e <_printf_i+0xf2>
 800a008:	0646      	lsls	r6, r0, #25
 800a00a:	d5fb      	bpl.n	800a004 <_printf_i+0xe8>
 800a00c:	881e      	ldrh	r6, [r3, #0]
 800a00e:	4854      	ldr	r0, [pc, #336]	; (800a160 <_printf_i+0x244>)
 800a010:	2f6f      	cmp	r7, #111	; 0x6f
 800a012:	bf0c      	ite	eq
 800a014:	2308      	moveq	r3, #8
 800a016:	230a      	movne	r3, #10
 800a018:	2100      	movs	r1, #0
 800a01a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a01e:	6865      	ldr	r5, [r4, #4]
 800a020:	60a5      	str	r5, [r4, #8]
 800a022:	2d00      	cmp	r5, #0
 800a024:	bfa2      	ittt	ge
 800a026:	6821      	ldrge	r1, [r4, #0]
 800a028:	f021 0104 	bicge.w	r1, r1, #4
 800a02c:	6021      	strge	r1, [r4, #0]
 800a02e:	b90e      	cbnz	r6, 800a034 <_printf_i+0x118>
 800a030:	2d00      	cmp	r5, #0
 800a032:	d04d      	beq.n	800a0d0 <_printf_i+0x1b4>
 800a034:	4615      	mov	r5, r2
 800a036:	fbb6 f1f3 	udiv	r1, r6, r3
 800a03a:	fb03 6711 	mls	r7, r3, r1, r6
 800a03e:	5dc7      	ldrb	r7, [r0, r7]
 800a040:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a044:	4637      	mov	r7, r6
 800a046:	42bb      	cmp	r3, r7
 800a048:	460e      	mov	r6, r1
 800a04a:	d9f4      	bls.n	800a036 <_printf_i+0x11a>
 800a04c:	2b08      	cmp	r3, #8
 800a04e:	d10b      	bne.n	800a068 <_printf_i+0x14c>
 800a050:	6823      	ldr	r3, [r4, #0]
 800a052:	07de      	lsls	r6, r3, #31
 800a054:	d508      	bpl.n	800a068 <_printf_i+0x14c>
 800a056:	6923      	ldr	r3, [r4, #16]
 800a058:	6861      	ldr	r1, [r4, #4]
 800a05a:	4299      	cmp	r1, r3
 800a05c:	bfde      	ittt	le
 800a05e:	2330      	movle	r3, #48	; 0x30
 800a060:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a064:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a068:	1b52      	subs	r2, r2, r5
 800a06a:	6122      	str	r2, [r4, #16]
 800a06c:	f8cd a000 	str.w	sl, [sp]
 800a070:	464b      	mov	r3, r9
 800a072:	aa03      	add	r2, sp, #12
 800a074:	4621      	mov	r1, r4
 800a076:	4640      	mov	r0, r8
 800a078:	f7ff fee2 	bl	8009e40 <_printf_common>
 800a07c:	3001      	adds	r0, #1
 800a07e:	d14c      	bne.n	800a11a <_printf_i+0x1fe>
 800a080:	f04f 30ff 	mov.w	r0, #4294967295
 800a084:	b004      	add	sp, #16
 800a086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a08a:	4835      	ldr	r0, [pc, #212]	; (800a160 <_printf_i+0x244>)
 800a08c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a090:	6829      	ldr	r1, [r5, #0]
 800a092:	6823      	ldr	r3, [r4, #0]
 800a094:	f851 6b04 	ldr.w	r6, [r1], #4
 800a098:	6029      	str	r1, [r5, #0]
 800a09a:	061d      	lsls	r5, r3, #24
 800a09c:	d514      	bpl.n	800a0c8 <_printf_i+0x1ac>
 800a09e:	07df      	lsls	r7, r3, #31
 800a0a0:	bf44      	itt	mi
 800a0a2:	f043 0320 	orrmi.w	r3, r3, #32
 800a0a6:	6023      	strmi	r3, [r4, #0]
 800a0a8:	b91e      	cbnz	r6, 800a0b2 <_printf_i+0x196>
 800a0aa:	6823      	ldr	r3, [r4, #0]
 800a0ac:	f023 0320 	bic.w	r3, r3, #32
 800a0b0:	6023      	str	r3, [r4, #0]
 800a0b2:	2310      	movs	r3, #16
 800a0b4:	e7b0      	b.n	800a018 <_printf_i+0xfc>
 800a0b6:	6823      	ldr	r3, [r4, #0]
 800a0b8:	f043 0320 	orr.w	r3, r3, #32
 800a0bc:	6023      	str	r3, [r4, #0]
 800a0be:	2378      	movs	r3, #120	; 0x78
 800a0c0:	4828      	ldr	r0, [pc, #160]	; (800a164 <_printf_i+0x248>)
 800a0c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a0c6:	e7e3      	b.n	800a090 <_printf_i+0x174>
 800a0c8:	0659      	lsls	r1, r3, #25
 800a0ca:	bf48      	it	mi
 800a0cc:	b2b6      	uxthmi	r6, r6
 800a0ce:	e7e6      	b.n	800a09e <_printf_i+0x182>
 800a0d0:	4615      	mov	r5, r2
 800a0d2:	e7bb      	b.n	800a04c <_printf_i+0x130>
 800a0d4:	682b      	ldr	r3, [r5, #0]
 800a0d6:	6826      	ldr	r6, [r4, #0]
 800a0d8:	6961      	ldr	r1, [r4, #20]
 800a0da:	1d18      	adds	r0, r3, #4
 800a0dc:	6028      	str	r0, [r5, #0]
 800a0de:	0635      	lsls	r5, r6, #24
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	d501      	bpl.n	800a0e8 <_printf_i+0x1cc>
 800a0e4:	6019      	str	r1, [r3, #0]
 800a0e6:	e002      	b.n	800a0ee <_printf_i+0x1d2>
 800a0e8:	0670      	lsls	r0, r6, #25
 800a0ea:	d5fb      	bpl.n	800a0e4 <_printf_i+0x1c8>
 800a0ec:	8019      	strh	r1, [r3, #0]
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	6123      	str	r3, [r4, #16]
 800a0f2:	4615      	mov	r5, r2
 800a0f4:	e7ba      	b.n	800a06c <_printf_i+0x150>
 800a0f6:	682b      	ldr	r3, [r5, #0]
 800a0f8:	1d1a      	adds	r2, r3, #4
 800a0fa:	602a      	str	r2, [r5, #0]
 800a0fc:	681d      	ldr	r5, [r3, #0]
 800a0fe:	6862      	ldr	r2, [r4, #4]
 800a100:	2100      	movs	r1, #0
 800a102:	4628      	mov	r0, r5
 800a104:	f7f6 f874 	bl	80001f0 <memchr>
 800a108:	b108      	cbz	r0, 800a10e <_printf_i+0x1f2>
 800a10a:	1b40      	subs	r0, r0, r5
 800a10c:	6060      	str	r0, [r4, #4]
 800a10e:	6863      	ldr	r3, [r4, #4]
 800a110:	6123      	str	r3, [r4, #16]
 800a112:	2300      	movs	r3, #0
 800a114:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a118:	e7a8      	b.n	800a06c <_printf_i+0x150>
 800a11a:	6923      	ldr	r3, [r4, #16]
 800a11c:	462a      	mov	r2, r5
 800a11e:	4649      	mov	r1, r9
 800a120:	4640      	mov	r0, r8
 800a122:	47d0      	blx	sl
 800a124:	3001      	adds	r0, #1
 800a126:	d0ab      	beq.n	800a080 <_printf_i+0x164>
 800a128:	6823      	ldr	r3, [r4, #0]
 800a12a:	079b      	lsls	r3, r3, #30
 800a12c:	d413      	bmi.n	800a156 <_printf_i+0x23a>
 800a12e:	68e0      	ldr	r0, [r4, #12]
 800a130:	9b03      	ldr	r3, [sp, #12]
 800a132:	4298      	cmp	r0, r3
 800a134:	bfb8      	it	lt
 800a136:	4618      	movlt	r0, r3
 800a138:	e7a4      	b.n	800a084 <_printf_i+0x168>
 800a13a:	2301      	movs	r3, #1
 800a13c:	4632      	mov	r2, r6
 800a13e:	4649      	mov	r1, r9
 800a140:	4640      	mov	r0, r8
 800a142:	47d0      	blx	sl
 800a144:	3001      	adds	r0, #1
 800a146:	d09b      	beq.n	800a080 <_printf_i+0x164>
 800a148:	3501      	adds	r5, #1
 800a14a:	68e3      	ldr	r3, [r4, #12]
 800a14c:	9903      	ldr	r1, [sp, #12]
 800a14e:	1a5b      	subs	r3, r3, r1
 800a150:	42ab      	cmp	r3, r5
 800a152:	dcf2      	bgt.n	800a13a <_printf_i+0x21e>
 800a154:	e7eb      	b.n	800a12e <_printf_i+0x212>
 800a156:	2500      	movs	r5, #0
 800a158:	f104 0619 	add.w	r6, r4, #25
 800a15c:	e7f5      	b.n	800a14a <_printf_i+0x22e>
 800a15e:	bf00      	nop
 800a160:	0800a5c5 	.word	0x0800a5c5
 800a164:	0800a5d6 	.word	0x0800a5d6

0800a168 <_sbrk_r>:
 800a168:	b538      	push	{r3, r4, r5, lr}
 800a16a:	4d06      	ldr	r5, [pc, #24]	; (800a184 <_sbrk_r+0x1c>)
 800a16c:	2300      	movs	r3, #0
 800a16e:	4604      	mov	r4, r0
 800a170:	4608      	mov	r0, r1
 800a172:	602b      	str	r3, [r5, #0]
 800a174:	f7f8 f842 	bl	80021fc <_sbrk>
 800a178:	1c43      	adds	r3, r0, #1
 800a17a:	d102      	bne.n	800a182 <_sbrk_r+0x1a>
 800a17c:	682b      	ldr	r3, [r5, #0]
 800a17e:	b103      	cbz	r3, 800a182 <_sbrk_r+0x1a>
 800a180:	6023      	str	r3, [r4, #0]
 800a182:	bd38      	pop	{r3, r4, r5, pc}
 800a184:	20001014 	.word	0x20001014

0800a188 <__sread>:
 800a188:	b510      	push	{r4, lr}
 800a18a:	460c      	mov	r4, r1
 800a18c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a190:	f000 f8f8 	bl	800a384 <_read_r>
 800a194:	2800      	cmp	r0, #0
 800a196:	bfab      	itete	ge
 800a198:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a19a:	89a3      	ldrhlt	r3, [r4, #12]
 800a19c:	181b      	addge	r3, r3, r0
 800a19e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a1a2:	bfac      	ite	ge
 800a1a4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a1a6:	81a3      	strhlt	r3, [r4, #12]
 800a1a8:	bd10      	pop	{r4, pc}

0800a1aa <__swrite>:
 800a1aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1ae:	461f      	mov	r7, r3
 800a1b0:	898b      	ldrh	r3, [r1, #12]
 800a1b2:	05db      	lsls	r3, r3, #23
 800a1b4:	4605      	mov	r5, r0
 800a1b6:	460c      	mov	r4, r1
 800a1b8:	4616      	mov	r6, r2
 800a1ba:	d505      	bpl.n	800a1c8 <__swrite+0x1e>
 800a1bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1c0:	2302      	movs	r3, #2
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	f000 f868 	bl	800a298 <_lseek_r>
 800a1c8:	89a3      	ldrh	r3, [r4, #12]
 800a1ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a1d2:	81a3      	strh	r3, [r4, #12]
 800a1d4:	4632      	mov	r2, r6
 800a1d6:	463b      	mov	r3, r7
 800a1d8:	4628      	mov	r0, r5
 800a1da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1de:	f000 b817 	b.w	800a210 <_write_r>

0800a1e2 <__sseek>:
 800a1e2:	b510      	push	{r4, lr}
 800a1e4:	460c      	mov	r4, r1
 800a1e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1ea:	f000 f855 	bl	800a298 <_lseek_r>
 800a1ee:	1c43      	adds	r3, r0, #1
 800a1f0:	89a3      	ldrh	r3, [r4, #12]
 800a1f2:	bf15      	itete	ne
 800a1f4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a1f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a1fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a1fe:	81a3      	strheq	r3, [r4, #12]
 800a200:	bf18      	it	ne
 800a202:	81a3      	strhne	r3, [r4, #12]
 800a204:	bd10      	pop	{r4, pc}

0800a206 <__sclose>:
 800a206:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a20a:	f000 b813 	b.w	800a234 <_close_r>
	...

0800a210 <_write_r>:
 800a210:	b538      	push	{r3, r4, r5, lr}
 800a212:	4d07      	ldr	r5, [pc, #28]	; (800a230 <_write_r+0x20>)
 800a214:	4604      	mov	r4, r0
 800a216:	4608      	mov	r0, r1
 800a218:	4611      	mov	r1, r2
 800a21a:	2200      	movs	r2, #0
 800a21c:	602a      	str	r2, [r5, #0]
 800a21e:	461a      	mov	r2, r3
 800a220:	f7f7 ff9b 	bl	800215a <_write>
 800a224:	1c43      	adds	r3, r0, #1
 800a226:	d102      	bne.n	800a22e <_write_r+0x1e>
 800a228:	682b      	ldr	r3, [r5, #0]
 800a22a:	b103      	cbz	r3, 800a22e <_write_r+0x1e>
 800a22c:	6023      	str	r3, [r4, #0]
 800a22e:	bd38      	pop	{r3, r4, r5, pc}
 800a230:	20001014 	.word	0x20001014

0800a234 <_close_r>:
 800a234:	b538      	push	{r3, r4, r5, lr}
 800a236:	4d06      	ldr	r5, [pc, #24]	; (800a250 <_close_r+0x1c>)
 800a238:	2300      	movs	r3, #0
 800a23a:	4604      	mov	r4, r0
 800a23c:	4608      	mov	r0, r1
 800a23e:	602b      	str	r3, [r5, #0]
 800a240:	f7f7 ffa7 	bl	8002192 <_close>
 800a244:	1c43      	adds	r3, r0, #1
 800a246:	d102      	bne.n	800a24e <_close_r+0x1a>
 800a248:	682b      	ldr	r3, [r5, #0]
 800a24a:	b103      	cbz	r3, 800a24e <_close_r+0x1a>
 800a24c:	6023      	str	r3, [r4, #0]
 800a24e:	bd38      	pop	{r3, r4, r5, pc}
 800a250:	20001014 	.word	0x20001014

0800a254 <_fstat_r>:
 800a254:	b538      	push	{r3, r4, r5, lr}
 800a256:	4d07      	ldr	r5, [pc, #28]	; (800a274 <_fstat_r+0x20>)
 800a258:	2300      	movs	r3, #0
 800a25a:	4604      	mov	r4, r0
 800a25c:	4608      	mov	r0, r1
 800a25e:	4611      	mov	r1, r2
 800a260:	602b      	str	r3, [r5, #0]
 800a262:	f7f7 ffa2 	bl	80021aa <_fstat>
 800a266:	1c43      	adds	r3, r0, #1
 800a268:	d102      	bne.n	800a270 <_fstat_r+0x1c>
 800a26a:	682b      	ldr	r3, [r5, #0]
 800a26c:	b103      	cbz	r3, 800a270 <_fstat_r+0x1c>
 800a26e:	6023      	str	r3, [r4, #0]
 800a270:	bd38      	pop	{r3, r4, r5, pc}
 800a272:	bf00      	nop
 800a274:	20001014 	.word	0x20001014

0800a278 <_isatty_r>:
 800a278:	b538      	push	{r3, r4, r5, lr}
 800a27a:	4d06      	ldr	r5, [pc, #24]	; (800a294 <_isatty_r+0x1c>)
 800a27c:	2300      	movs	r3, #0
 800a27e:	4604      	mov	r4, r0
 800a280:	4608      	mov	r0, r1
 800a282:	602b      	str	r3, [r5, #0]
 800a284:	f7f7 ffa1 	bl	80021ca <_isatty>
 800a288:	1c43      	adds	r3, r0, #1
 800a28a:	d102      	bne.n	800a292 <_isatty_r+0x1a>
 800a28c:	682b      	ldr	r3, [r5, #0]
 800a28e:	b103      	cbz	r3, 800a292 <_isatty_r+0x1a>
 800a290:	6023      	str	r3, [r4, #0]
 800a292:	bd38      	pop	{r3, r4, r5, pc}
 800a294:	20001014 	.word	0x20001014

0800a298 <_lseek_r>:
 800a298:	b538      	push	{r3, r4, r5, lr}
 800a29a:	4d07      	ldr	r5, [pc, #28]	; (800a2b8 <_lseek_r+0x20>)
 800a29c:	4604      	mov	r4, r0
 800a29e:	4608      	mov	r0, r1
 800a2a0:	4611      	mov	r1, r2
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	602a      	str	r2, [r5, #0]
 800a2a6:	461a      	mov	r2, r3
 800a2a8:	f7f7 ff9a 	bl	80021e0 <_lseek>
 800a2ac:	1c43      	adds	r3, r0, #1
 800a2ae:	d102      	bne.n	800a2b6 <_lseek_r+0x1e>
 800a2b0:	682b      	ldr	r3, [r5, #0]
 800a2b2:	b103      	cbz	r3, 800a2b6 <_lseek_r+0x1e>
 800a2b4:	6023      	str	r3, [r4, #0]
 800a2b6:	bd38      	pop	{r3, r4, r5, pc}
 800a2b8:	20001014 	.word	0x20001014

0800a2bc <memcpy>:
 800a2bc:	440a      	add	r2, r1
 800a2be:	4291      	cmp	r1, r2
 800a2c0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a2c4:	d100      	bne.n	800a2c8 <memcpy+0xc>
 800a2c6:	4770      	bx	lr
 800a2c8:	b510      	push	{r4, lr}
 800a2ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a2ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a2d2:	4291      	cmp	r1, r2
 800a2d4:	d1f9      	bne.n	800a2ca <memcpy+0xe>
 800a2d6:	bd10      	pop	{r4, pc}

0800a2d8 <memmove>:
 800a2d8:	4288      	cmp	r0, r1
 800a2da:	b510      	push	{r4, lr}
 800a2dc:	eb01 0402 	add.w	r4, r1, r2
 800a2e0:	d902      	bls.n	800a2e8 <memmove+0x10>
 800a2e2:	4284      	cmp	r4, r0
 800a2e4:	4623      	mov	r3, r4
 800a2e6:	d807      	bhi.n	800a2f8 <memmove+0x20>
 800a2e8:	1e43      	subs	r3, r0, #1
 800a2ea:	42a1      	cmp	r1, r4
 800a2ec:	d008      	beq.n	800a300 <memmove+0x28>
 800a2ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a2f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a2f6:	e7f8      	b.n	800a2ea <memmove+0x12>
 800a2f8:	4402      	add	r2, r0
 800a2fa:	4601      	mov	r1, r0
 800a2fc:	428a      	cmp	r2, r1
 800a2fe:	d100      	bne.n	800a302 <memmove+0x2a>
 800a300:	bd10      	pop	{r4, pc}
 800a302:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a306:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a30a:	e7f7      	b.n	800a2fc <memmove+0x24>

0800a30c <__malloc_lock>:
 800a30c:	4801      	ldr	r0, [pc, #4]	; (800a314 <__malloc_lock+0x8>)
 800a30e:	f7ff baf3 	b.w	80098f8 <__retarget_lock_acquire_recursive>
 800a312:	bf00      	nop
 800a314:	20001008 	.word	0x20001008

0800a318 <__malloc_unlock>:
 800a318:	4801      	ldr	r0, [pc, #4]	; (800a320 <__malloc_unlock+0x8>)
 800a31a:	f7ff baee 	b.w	80098fa <__retarget_lock_release_recursive>
 800a31e:	bf00      	nop
 800a320:	20001008 	.word	0x20001008

0800a324 <_realloc_r>:
 800a324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a328:	4680      	mov	r8, r0
 800a32a:	4614      	mov	r4, r2
 800a32c:	460e      	mov	r6, r1
 800a32e:	b921      	cbnz	r1, 800a33a <_realloc_r+0x16>
 800a330:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a334:	4611      	mov	r1, r2
 800a336:	f7ff bbb3 	b.w	8009aa0 <_malloc_r>
 800a33a:	b92a      	cbnz	r2, 800a348 <_realloc_r+0x24>
 800a33c:	f7ff fb44 	bl	80099c8 <_free_r>
 800a340:	4625      	mov	r5, r4
 800a342:	4628      	mov	r0, r5
 800a344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a348:	f000 f82e 	bl	800a3a8 <_malloc_usable_size_r>
 800a34c:	4284      	cmp	r4, r0
 800a34e:	4607      	mov	r7, r0
 800a350:	d802      	bhi.n	800a358 <_realloc_r+0x34>
 800a352:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a356:	d812      	bhi.n	800a37e <_realloc_r+0x5a>
 800a358:	4621      	mov	r1, r4
 800a35a:	4640      	mov	r0, r8
 800a35c:	f7ff fba0 	bl	8009aa0 <_malloc_r>
 800a360:	4605      	mov	r5, r0
 800a362:	2800      	cmp	r0, #0
 800a364:	d0ed      	beq.n	800a342 <_realloc_r+0x1e>
 800a366:	42bc      	cmp	r4, r7
 800a368:	4622      	mov	r2, r4
 800a36a:	4631      	mov	r1, r6
 800a36c:	bf28      	it	cs
 800a36e:	463a      	movcs	r2, r7
 800a370:	f7ff ffa4 	bl	800a2bc <memcpy>
 800a374:	4631      	mov	r1, r6
 800a376:	4640      	mov	r0, r8
 800a378:	f7ff fb26 	bl	80099c8 <_free_r>
 800a37c:	e7e1      	b.n	800a342 <_realloc_r+0x1e>
 800a37e:	4635      	mov	r5, r6
 800a380:	e7df      	b.n	800a342 <_realloc_r+0x1e>
	...

0800a384 <_read_r>:
 800a384:	b538      	push	{r3, r4, r5, lr}
 800a386:	4d07      	ldr	r5, [pc, #28]	; (800a3a4 <_read_r+0x20>)
 800a388:	4604      	mov	r4, r0
 800a38a:	4608      	mov	r0, r1
 800a38c:	4611      	mov	r1, r2
 800a38e:	2200      	movs	r2, #0
 800a390:	602a      	str	r2, [r5, #0]
 800a392:	461a      	mov	r2, r3
 800a394:	f7f7 fec4 	bl	8002120 <_read>
 800a398:	1c43      	adds	r3, r0, #1
 800a39a:	d102      	bne.n	800a3a2 <_read_r+0x1e>
 800a39c:	682b      	ldr	r3, [r5, #0]
 800a39e:	b103      	cbz	r3, 800a3a2 <_read_r+0x1e>
 800a3a0:	6023      	str	r3, [r4, #0]
 800a3a2:	bd38      	pop	{r3, r4, r5, pc}
 800a3a4:	20001014 	.word	0x20001014

0800a3a8 <_malloc_usable_size_r>:
 800a3a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3ac:	1f18      	subs	r0, r3, #4
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	bfbc      	itt	lt
 800a3b2:	580b      	ldrlt	r3, [r1, r0]
 800a3b4:	18c0      	addlt	r0, r0, r3
 800a3b6:	4770      	bx	lr

0800a3b8 <_init>:
 800a3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ba:	bf00      	nop
 800a3bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3be:	bc08      	pop	{r3}
 800a3c0:	469e      	mov	lr, r3
 800a3c2:	4770      	bx	lr

0800a3c4 <_fini>:
 800a3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3c6:	bf00      	nop
 800a3c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3ca:	bc08      	pop	{r3}
 800a3cc:	469e      	mov	lr, r3
 800a3ce:	4770      	bx	lr
