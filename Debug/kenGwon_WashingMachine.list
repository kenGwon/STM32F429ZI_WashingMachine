
kenGwon_WashingMachine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4b8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  0800a668  0800a668  0001a668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a880  0800a880  0002018c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a880  0800a880  0001a880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a888  0800a888  0002018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a888  0800a888  0001a888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a88c  0800a88c  0001a88c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000018c  20000000  0800a890  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002018c  2**0
                  CONTENTS
 10 .bss          00000e94  2000018c  2000018c  0002018c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001020  20001020  0002018c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002043d  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004366  00000000  00000000  000405f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019e8  00000000  00000000  00044960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001818  00000000  00000000  00046348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ae8a  00000000  00000000  00047b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022f0e  00000000  00000000  000729ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee278  00000000  00000000  000958f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00183b70  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007474  00000000  00000000  00183bc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000018c 	.word	0x2000018c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a650 	.word	0x0800a650

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000190 	.word	0x20000190
 80001ec:	0800a650 	.word	0x0800a650

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <DHT11_Init>:

/*
 * desc: DHT11은 active-low로 작동하기 때문에 초기화 과정에서 전위를 1로 셋팅해준다.
 */
void DHT11_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_DATA_RIN, GPIO_PIN_SET);
 8000598:	2201      	movs	r2, #1
 800059a:	2101      	movs	r1, #1
 800059c:	4804      	ldr	r0, [pc, #16]	; (80005b0 <DHT11_Init+0x1c>)
 800059e:	f004 f829 	bl	80045f4 <HAL_GPIO_WritePin>
	HAL_Delay(3000); // 초기화 할때는 딱 한번만 일어나기 때문에 hal_delay()를 줘도 상관 없다.
 80005a2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80005a6:	f003 f971 	bl	800388c <HAL_Delay>
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40020000 	.word	0x40020000

080005b4 <DHT11_Trriger>:

/*
 * desc: DHT11의 데이터 시트에서 정의하고 있는대로 트리거 클락 신호를 생성한다.
 */
void DHT11_Trriger(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_DATA_RIN, GPIO_PIN_RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2101      	movs	r1, #1
 80005bc:	4808      	ldr	r0, [pc, #32]	; (80005e0 <DHT11_Trriger+0x2c>)
 80005be:	f004 f819 	bl	80045f4 <HAL_GPIO_WritePin>
	delay_us(20000);
 80005c2:	f644 6020 	movw	r0, #20000	; 0x4e20
 80005c6:	f001 ffb1 	bl	800252c <delay_us>
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_DATA_RIN, GPIO_PIN_SET);
 80005ca:	2201      	movs	r2, #1
 80005cc:	2101      	movs	r1, #1
 80005ce:	4804      	ldr	r0, [pc, #16]	; (80005e0 <DHT11_Trriger+0x2c>)
 80005d0:	f004 f810 	bl	80045f4 <HAL_GPIO_WritePin>
	delay_us(7);
 80005d4:	2007      	movs	r0, #7
 80005d6:	f001 ffa9 	bl	800252c <delay_us>
}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40020000 	.word	0x40020000

080005e4 <DHT11_Dumi_Read>:

/*
 * desc: DHT11의 데이터 시트에서 정의하고 있는대로 트리거 신호 이후 핸드쉐이크 과정을 거친다.
 */
void DHT11_Dumi_Read(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	while( 1 == HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN) );
 80005e8:	bf00      	nop
 80005ea:	2101      	movs	r1, #1
 80005ec:	480c      	ldr	r0, [pc, #48]	; (8000620 <DHT11_Dumi_Read+0x3c>)
 80005ee:	f003 ffe9 	bl	80045c4 <HAL_GPIO_ReadPin>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d0f8      	beq.n	80005ea <DHT11_Dumi_Read+0x6>
	while( 0 == HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN) );
 80005f8:	bf00      	nop
 80005fa:	2101      	movs	r1, #1
 80005fc:	4808      	ldr	r0, [pc, #32]	; (8000620 <DHT11_Dumi_Read+0x3c>)
 80005fe:	f003 ffe1 	bl	80045c4 <HAL_GPIO_ReadPin>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d0f8      	beq.n	80005fa <DHT11_Dumi_Read+0x16>
	while( 1 == HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN) );
 8000608:	bf00      	nop
 800060a:	2101      	movs	r1, #1
 800060c:	4804      	ldr	r0, [pc, #16]	; (8000620 <DHT11_Dumi_Read+0x3c>)
 800060e:	f003 ffd9 	bl	80045c4 <HAL_GPIO_ReadPin>
 8000612:	4603      	mov	r3, r0
 8000614:	2b01      	cmp	r3, #1
 8000616:	d0f8      	beq.n	800060a <DHT11_Dumi_Read+0x26>
}
 8000618:	bf00      	nop
 800061a:	bf00      	nop
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40020000 	.word	0x40020000

08000624 <DHT11_DataLine_Input>:

/*
 * desc: MCU가 DHT11로부터 데이터를 받기 위해, DHT11과 연결되어 있는 MCU의 GPIO port의 셋팅을 input 모드로 설정해준다.
 */
void DHT11_DataLine_Input(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b086      	sub	sp, #24
 8000628:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = DHT11_DATA_RIN;
 8000638:	2301      	movs	r3, #1
 800063a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT; //Change Output to Input
 800063c:	2300      	movs	r3, #0
 800063e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	4619      	mov	r1, r3
 8000648:	4803      	ldr	r0, [pc, #12]	; (8000658 <DHT11_DataLine_Input+0x34>)
 800064a:	f003 fe0f 	bl	800426c <HAL_GPIO_Init>
}
 800064e:	bf00      	nop
 8000650:	3718      	adds	r7, #24
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40020000 	.word	0x40020000

0800065c <DHT11_DataLine_Output>:

/*
 * desc: MCU가 DHT11에게 트리거 신호를 보내는 등의 작업을 수행하기 위해, DHT11과 연결되어 있는 MCU의 GPIO port의 셋팅을 output 모드로 설정해준다.
 */
void DHT11_DataLine_Output(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = DHT11_DATA_RIN;
 8000670:	2301      	movs	r3, #1
 8000672:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; //Change Input to Output
 8000674:	2301      	movs	r3, #1
 8000676:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000678:	2300      	movs	r3, #0
 800067a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067c:	2300      	movs	r3, #0
 800067e:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	4619      	mov	r1, r3
 8000684:	4803      	ldr	r0, [pc, #12]	; (8000694 <DHT11_DataLine_Output+0x38>)
 8000686:	f003 fdf1 	bl	800426c <HAL_GPIO_Init>
}
 800068a:	bf00      	nop
 800068c:	3718      	adds	r7, #24
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40020000 	.word	0x40020000

08000698 <DHT11_rx_Data>:

/*
 * desc: DHT11로부터 들어온 전기신호를 읽어 0인지 1인지 판별한다.(DHT11 데이터 시트에서 정의한 0, 1 판별법을 코드로 구현한 것)
 */
uint8_t DHT11_rx_Data(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
	uint8_t rx_data = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	71fb      	strb	r3, [r7, #7]

	for(int i = 0; i < 8; i++) // 8비트 받아야 하니까 for문을 8번 돌린다.
 80006a2:	2300      	movs	r3, #0
 80006a4:	603b      	str	r3, [r7, #0]
 80006a6:	e023      	b.n	80006f0 <DHT11_rx_Data+0x58>
	{
		// DHT11이 보낸 신호의 전위가 LOW인 시간은 정보로서의 의미가 없음
		while (0 == HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN))
 80006a8:	bf00      	nop
 80006aa:	2101      	movs	r1, #1
 80006ac:	4814      	ldr	r0, [pc, #80]	; (8000700 <DHT11_rx_Data+0x68>)
 80006ae:	f003 ff89 	bl	80045c4 <HAL_GPIO_ReadPin>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d0f8      	beq.n	80006aa <DHT11_rx_Data+0x12>
			;

		// 위 whlie문을 탈출했다는 것은 DHT11이 보낸 신호의 전위가 HIGH로 바뀌었다는 뜻이고, 이때부터 정보로서의 의미가 있음
		delay_us(40); // 0인지 1인지 구분해야 하니까 둘의 중간 값 정도인 40마이크로 세컨드 만큼 딜레이를 주고 그 다음에 오는 if문을 통해 0인지 1인지 판단하겠다. (0이면 26마이크로 세컨드만 유지되고, 1이면 70마이크로 세컨트가 유지되기 때문)
 80006b8:	2028      	movs	r0, #40	; 0x28
 80006ba:	f001 ff37 	bl	800252c <delay_us>

		rx_data<<=1; // 한 비트 좌로 쉬프트 시킨다.(왜냐하면 총 8비트를 앞에서부터 쌓아가야 하기 때문)
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	005b      	lsls	r3, r3, #1
 80006c2:	71fb      	strb	r3, [r7, #7]

		// 위에서 딜레이 40us를 주고 다시 읽었는데 이 if문에 걸렸다는 뜻은 HIGH 전위가 유지된 시간이 최소 40마이크로 세컨드를 넘었다는 뜻이고, 이는 곧 DHT11이 1이라는 데이터를 보낸 것으로 정의된다.
		if(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN))
 80006c4:	2101      	movs	r1, #1
 80006c6:	480e      	ldr	r0, [pc, #56]	; (8000700 <DHT11_rx_Data+0x68>)
 80006c8:	f003 ff7c 	bl	80045c4 <HAL_GPIO_ReadPin>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d003      	beq.n	80006da <DHT11_rx_Data+0x42>
		{
			rx_data |= 1;
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	f043 0301 	orr.w	r3, r3, #1
 80006d8:	71fb      	strb	r3, [r7, #7]
			// 이렇게 00000000000000000000000000000001 값과 OR비트 연산을 해주면
			// rx_data는 8비트 이기 때문에 00000001과 OR 연산되어 끝자리 비트만 0에서 1로 바뀌는 효과가 발생하게 된
		}

		// DHT11이 0 신호를 보냈다면 이 while문에 들어가지도 않을 것이며, 오직 1 신호를 보낸 경우에만 위의 40마이크로 세컨드를 체크하고 남은 HIGH전위 인가 시간을 털어낼 수 있다.
		while (1 == HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN))
 80006da:	bf00      	nop
 80006dc:	2101      	movs	r1, #1
 80006de:	4808      	ldr	r0, [pc, #32]	; (8000700 <DHT11_rx_Data+0x68>)
 80006e0:	f003 ff70 	bl	80045c4 <HAL_GPIO_ReadPin>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b01      	cmp	r3, #1
 80006e8:	d0f8      	beq.n	80006dc <DHT11_rx_Data+0x44>
	for(int i = 0; i < 8; i++) // 8비트 받아야 하니까 for문을 8번 돌린다.
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	3301      	adds	r3, #1
 80006ee:	603b      	str	r3, [r7, #0]
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	2b07      	cmp	r3, #7
 80006f4:	ddd8      	ble.n	80006a8 <DHT11_rx_Data+0x10>
			;

		// 위 while문을 탈출했다는 것은 전위가 LOW로 떨어져 다시 정보로서의 의미가 없는 구간에 돌아왔다는 것을 의미한다.
	}

	return rx_data;
 80006f6:	79fb      	ldrb	r3, [r7, #7]
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40020000 	.word	0x40020000

08000704 <LCD_Command>:
#endif
}

//
void LCD_Command(uint8_t command)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b086      	sub	sp, #24
 8000708:	af02      	add	r7, sp, #8
 800070a:	4603      	mov	r3, r0
 800070c:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = command & 0xf0;
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	f023 030f 	bic.w	r3, r3, #15
 8000714:	73fb      	strb	r3, [r7, #15]
	low_nibble = (command<<4) & 0xf0;
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	011b      	lsls	r3, r3, #4
 800071a:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 800071c:	7bfb      	ldrb	r3, [r7, #15]
 800071e:	f043 030c 	orr.w	r3, r3, #12
 8000722:	b2db      	uxtb	r3, r3
 8000724:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 8000726:	7bfb      	ldrb	r3, [r7, #15]
 8000728:	f043 0308 	orr.w	r3, r3, #8
 800072c:	b2db      	uxtb	r3, r3
 800072e:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 8000730:	7bbb      	ldrb	r3, [r7, #14]
 8000732:	f043 030c 	orr.w	r3, r3, #12
 8000736:	b2db      	uxtb	r3, r3
 8000738:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 800073a:	7bbb      	ldrb	r3, [r7, #14]
 800073c:	f043 0308 	orr.w	r3, r3, #8
 8000740:	b2db      	uxtb	r3, r3
 8000742:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 8000744:	bf00      	nop
 8000746:	f107 0208 	add.w	r2, r7, #8
 800074a:	2364      	movs	r3, #100	; 0x64
 800074c:	9300      	str	r3, [sp, #0]
 800074e:	2304      	movs	r3, #4
 8000750:	214e      	movs	r1, #78	; 0x4e
 8000752:	4805      	ldr	r0, [pc, #20]	; (8000768 <LCD_Command+0x64>)
 8000754:	f004 f8ac 	bl	80048b0 <HAL_I2C_Master_Transmit>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d1f3      	bne.n	8000746 <LCD_Command+0x42>
			i2c_buffer, 4, 100)!=HAL_OK){
		//HAL_Delay(1);
	}
	return;
 800075e:	bf00      	nop
}
 8000760:	3710      	adds	r7, #16
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	200003f0 	.word	0x200003f0

0800076c <LCD_Data>:

// 1 byte write... 딱 한개의 캐릭터만 찍는 것이다.
void LCD_Data(uint8_t data)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b086      	sub	sp, #24
 8000770:	af02      	add	r7, sp, #8
 8000772:	4603      	mov	r3, r0
 8000774:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = data & 0xf0;
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	f023 030f 	bic.w	r3, r3, #15
 800077c:	73fb      	strb	r3, [r7, #15]
	low_nibble = (data<<4) & 0xf0;
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	011b      	lsls	r3, r3, #4
 8000782:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 8000784:	7bfb      	ldrb	r3, [r7, #15]
 8000786:	f043 030d 	orr.w	r3, r3, #13
 800078a:	b2db      	uxtb	r3, r3
 800078c:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 800078e:	7bfb      	ldrb	r3, [r7, #15]
 8000790:	f043 0309 	orr.w	r3, r3, #9
 8000794:	b2db      	uxtb	r3, r3
 8000796:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 8000798:	7bbb      	ldrb	r3, [r7, #14]
 800079a:	f043 030d 	orr.w	r3, r3, #13
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 80007a2:	7bbb      	ldrb	r3, [r7, #14]
 80007a4:	f043 0309 	orr.w	r3, r3, #9
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 80007ac:	bf00      	nop
 80007ae:	f107 0208 	add.w	r2, r7, #8
 80007b2:	2364      	movs	r3, #100	; 0x64
 80007b4:	9300      	str	r3, [sp, #0]
 80007b6:	2304      	movs	r3, #4
 80007b8:	214e      	movs	r1, #78	; 0x4e
 80007ba:	4805      	ldr	r0, [pc, #20]	; (80007d0 <LCD_Data+0x64>)
 80007bc:	f004 f878 	bl	80048b0 <HAL_I2C_Master_Transmit>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d1f3      	bne.n	80007ae <LCD_Data+0x42>
			i2c_buffer, 4, 100)!=HAL_OK){
		//HAL_Delay(1);
	}
	return;
 80007c6:	bf00      	nop
}
 80007c8:	3710      	adds	r7, #16
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	200003f0 	.word	0x200003f0

080007d4 <I2C_LCD_Init>:

// lcd 초기화
void I2C_LCD_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0

	LCD_Command(0x33);
 80007d8:	2033      	movs	r0, #51	; 0x33
 80007da:	f7ff ff93 	bl	8000704 <LCD_Command>
	LCD_Command(0x32);
 80007de:	2032      	movs	r0, #50	; 0x32
 80007e0:	f7ff ff90 	bl	8000704 <LCD_Command>
	LCD_Command(0x28);	//Function Set 4-bit mode
 80007e4:	2028      	movs	r0, #40	; 0x28
 80007e6:	f7ff ff8d 	bl	8000704 <LCD_Command>
	LCD_Command(DISPLAY_ON);
 80007ea:	200c      	movs	r0, #12
 80007ec:	f7ff ff8a 	bl	8000704 <LCD_Command>
	LCD_Command(0x06);	//Entry mode set
 80007f0:	2006      	movs	r0, #6
 80007f2:	f7ff ff87 	bl	8000704 <LCD_Command>
	LCD_Command(CLEAR_DISPLAY);
 80007f6:	2001      	movs	r0, #1
 80007f8:	f7ff ff84 	bl	8000704 <LCD_Command>
	HAL_Delay(2);
 80007fc:	2002      	movs	r0, #2
 80007fe:	f003 f845 	bl	800388c <HAL_Delay>
}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}

08000806 <LCD_String>:

// null을 만날때 까지 string을 LCD에 출력
void LCD_String(uint8_t *str)
{
 8000806:	b580      	push	{r7, lr}
 8000808:	b082      	sub	sp, #8
 800080a:	af00      	add	r7, sp, #0
 800080c:	6078      	str	r0, [r7, #4]
	while(*str) // 널문자를 만날 때까지
 800080e:	e006      	b.n	800081e <LCD_String+0x18>
	{
		LCD_Data(*str++);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	1c5a      	adds	r2, r3, #1
 8000814:	607a      	str	r2, [r7, #4]
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff ffa7 	bl	800076c <LCD_Data>
	while(*str) // 널문자를 만날 때까지
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d1f4      	bne.n	8000810 <LCD_String+0xa>
	}
}
 8000826:	bf00      	nop
 8000828:	bf00      	nop
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <Move_Cursor>:

// 해당 줄,col으로 이동 하는 함수
void Move_Cursor(uint8_t row, uint8_t column)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	460a      	mov	r2, r1
 800083a:	71fb      	strb	r3, [r7, #7]
 800083c:	4613      	mov	r3, r2
 800083e:	71bb      	strb	r3, [r7, #6]
	LCD_Command(0x80 | row<<6 | column);
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	019b      	lsls	r3, r3, #6
 8000844:	b2da      	uxtb	r2, r3
 8000846:	79bb      	ldrb	r3, [r7, #6]
 8000848:	4313      	orrs	r3, r2
 800084a:	b2db      	uxtb	r3, r3
 800084c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000850:	b2db      	uxtb	r3, r3
 8000852:	4618      	mov	r0, r3
 8000854:	f7ff ff56 	bl	8000704 <LCD_Command>
	return;
 8000858:	bf00      	nop
}
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}

08000860 <Get_Button>:
 * param2: 함수가 접근하는 푸시 버튼 1개에 대응하는 1개 핀의 주소
 * param3: 함수가 접근하는 푸시 버튼 1개가 button_status[] 배열 상의 몇번째 인덱스에 해당하게 할 것인지를 결정하는 값
 * return: 푸시 버튼의 상태 (BUTTON_RELEASE 또는 BUTTON_PRESS)
 */
int Get_Button(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint8_t button_number)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	460b      	mov	r3, r1
 800086a:	807b      	strh	r3, [r7, #2]
 800086c:	4613      	mov	r3, r2
 800086e:	707b      	strb	r3, [r7, #1]
	unsigned char curr_state; // uint8_t로 선언해도 되지만 unsigned char로 선언한 이유는 여기에 담기는 값이 비록 0 또는 1이겠지만, 그것을 BUTTON_PRESS 또는 BUTTON_RELEASE와 같은 논리적 상태로 보겠다는 개발자의 의도를 담은 선언이다.
	curr_state = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin); // 0(BUTTON_PRESS) 또는 1(BUTTON_RELEASE)
 8000870:	887b      	ldrh	r3, [r7, #2]
 8000872:	4619      	mov	r1, r3
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f003 fea5 	bl	80045c4 <HAL_GPIO_ReadPin>
 800087a:	4603      	mov	r3, r0
 800087c:	73fb      	strb	r3, [r7, #15]

	if (curr_state == BUTTON_PRESS && button_status[button_number] == BUTTON_RELEASE)
 800087e:	7bfb      	ldrb	r3, [r7, #15]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d10d      	bne.n	80008a0 <Get_Button+0x40>
 8000884:	787b      	ldrb	r3, [r7, #1]
 8000886:	4a11      	ldr	r2, [pc, #68]	; (80008cc <Get_Button+0x6c>)
 8000888:	5cd3      	ldrb	r3, [r2, r3]
 800088a:	2b01      	cmp	r3, #1
 800088c:	d108      	bne.n	80008a0 <Get_Button+0x40>
	{
		HAL_Delay(100); // 0.1초 동안 노이즈가 지나가길 기다림
 800088e:	2064      	movs	r0, #100	; 0x64
 8000890:	f002 fffc 	bl	800388c <HAL_Delay>
		button_status[button_number] = BUTTON_PRESS; // 누르긴 눌렀으니까 우선 button_status배열 상의 상태를 BUTTON_PRESS로 바꿔준다.
 8000894:	787b      	ldrb	r3, [r7, #1]
 8000896:	4a0d      	ldr	r2, [pc, #52]	; (80008cc <Get_Button+0x6c>)
 8000898:	2100      	movs	r1, #0
 800089a:	54d1      	strb	r1, [r2, r3]
		return BUTTON_RELEASE; // 아직은 버튼을 누른것으로 간주할 수 없다.(왜냐하면 button_status배열 상의 버튼의 기존 상태가 BUTTON_RELEASE였기 때문이다.)
 800089c:	2301      	movs	r3, #1
 800089e:	e011      	b.n	80008c4 <Get_Button+0x64>
	}
	else if (curr_state == BUTTON_RELEASE && button_status[button_number] == BUTTON_PRESS)
 80008a0:	7bfb      	ldrb	r3, [r7, #15]
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d10d      	bne.n	80008c2 <Get_Button+0x62>
 80008a6:	787b      	ldrb	r3, [r7, #1]
 80008a8:	4a08      	ldr	r2, [pc, #32]	; (80008cc <Get_Button+0x6c>)
 80008aa:	5cd3      	ldrb	r3, [r2, r3]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d108      	bne.n	80008c2 <Get_Button+0x62>
	{
		button_status[button_number] = BUTTON_RELEASE; // button_status배열 상의 상태를 curr_state에 맞게 다시 초기화해주고
 80008b0:	787b      	ldrb	r3, [r7, #1]
 80008b2:	4a06      	ldr	r2, [pc, #24]	; (80008cc <Get_Button+0x6c>)
 80008b4:	2101      	movs	r1, #1
 80008b6:	54d1      	strb	r1, [r2, r3]
		HAL_Delay(30);
 80008b8:	201e      	movs	r0, #30
 80008ba:	f002 ffe7 	bl	800388c <HAL_Delay>
		return BUTTON_PRESS; // 정말 버튼을 누른 것으로 인정
 80008be:	2300      	movs	r3, #0
 80008c0:	e000      	b.n	80008c4 <Get_Button+0x64>
	}

	return BUTTON_RELEASE;
 80008c2:	2301      	movs	r3, #1
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3710      	adds	r7, #16
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20000000 	.word	0x20000000

080008d0 <Buzzer_Turn_On>:

/*
 * desc: 부저에서 소리가 나오도록 duty cycle을 설정해준다.
 */
void Buzzer_Turn_On(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
	return __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, 200);
 80008d4:	4b03      	ldr	r3, [pc, #12]	; (80008e4 <Buzzer_Turn_On+0x14>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	22c8      	movs	r2, #200	; 0xc8
 80008da:	635a      	str	r2, [r3, #52]	; 0x34
}
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr
 80008e4:	20000584 	.word	0x20000584

080008e8 <Buzzer_Turn_Off>:

/*
 * desc: 부저에서 소리가 안 나오도록 duty cycle을 설정해준다.
 */
void Buzzer_Turn_Off(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
	return __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, 0);
 80008ec:	4b03      	ldr	r3, [pc, #12]	; (80008fc <Buzzer_Turn_Off+0x14>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2200      	movs	r2, #0
 80008f2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr
 80008fc:	20000584 	.word	0x20000584

08000900 <Mode_Complete_Alarm>:

/*
 * desc: 세탁/헹굼/탈수가 모두 완료되면 부저로 노래를 출력한다.
 */
void Mode_Complete_Alarm(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
	static uint32_t i = 0;
	int divide_freq = 1600000;
 8000906:	4b25      	ldr	r3, [pc, #148]	; (800099c <Mode_Complete_Alarm+0x9c>)
 8000908:	607b      	str	r3, [r7, #4]

	if (mode_complete_alarm_stop_start_flag == START)
 800090a:	4b25      	ldr	r3, [pc, #148]	; (80009a0 <Mode_Complete_Alarm+0xa0>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	b2db      	uxtb	r3, r3
 8000910:	2b01      	cmp	r3, #1
 8000912:	d139      	bne.n	8000988 <Mode_Complete_Alarm+0x88>
	{
		Buzzer_Turn_On();
 8000914:	f7ff ffdc 	bl	80008d0 <Buzzer_Turn_On>
		__HAL_TIM_SET_AUTORELOAD(&htim9, divide_freq / mode_complete_note[i]);
 8000918:	6879      	ldr	r1, [r7, #4]
 800091a:	4b22      	ldr	r3, [pc, #136]	; (80009a4 <Mode_Complete_Alarm+0xa4>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4a22      	ldr	r2, [pc, #136]	; (80009a8 <Mode_Complete_Alarm+0xa8>)
 8000920:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000924:	4b21      	ldr	r3, [pc, #132]	; (80009ac <Mode_Complete_Alarm+0xac>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	fbb1 f2f2 	udiv	r2, r1, r2
 800092c:	62da      	str	r2, [r3, #44]	; 0x2c
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	4b1c      	ldr	r3, [pc, #112]	; (80009a4 <Mode_Complete_Alarm+0xa4>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	491c      	ldr	r1, [pc, #112]	; (80009a8 <Mode_Complete_Alarm+0xa8>)
 8000936:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800093a:	fbb2 f3f3 	udiv	r3, r2, r3
 800093e:	4a1b      	ldr	r2, [pc, #108]	; (80009ac <Mode_Complete_Alarm+0xac>)
 8000940:	60d3      	str	r3, [r2, #12]

		// 리듬 단위 1은 0.2초라고 가정
		if (TIM10_10ms_WM_buzzer_timer > 20 * mode_complete_rythm[i])
 8000942:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <Mode_Complete_Alarm+0xa4>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a1a      	ldr	r2, [pc, #104]	; (80009b0 <Mode_Complete_Alarm+0xb0>)
 8000948:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800094c:	4613      	mov	r3, r2
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	4413      	add	r3, r2
 8000952:	009b      	lsls	r3, r3, #2
 8000954:	461a      	mov	r2, r3
 8000956:	4b17      	ldr	r3, [pc, #92]	; (80009b4 <Mode_Complete_Alarm+0xb4>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	429a      	cmp	r2, r3
 800095c:	d207      	bcs.n	800096e <Mode_Complete_Alarm+0x6e>
		{
			TIM10_10ms_WM_buzzer_timer = 0;
 800095e:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <Mode_Complete_Alarm+0xb4>)
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
			i++;
 8000964:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <Mode_Complete_Alarm+0xa4>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	3301      	adds	r3, #1
 800096a:	4a0e      	ldr	r2, [pc, #56]	; (80009a4 <Mode_Complete_Alarm+0xa4>)
 800096c:	6013      	str	r3, [r2, #0]
		}

		if (i >= sizeof(mode_complete_note)/sizeof(uint32_t))
 800096e:	4b0d      	ldr	r3, [pc, #52]	; (80009a4 <Mode_Complete_Alarm+0xa4>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	2b1b      	cmp	r3, #27
 8000974:	d90d      	bls.n	8000992 <Mode_Complete_Alarm+0x92>
		{
			i = 0;
 8000976:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <Mode_Complete_Alarm+0xa4>)
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
			mode_complete_alarm_stop_start_flag = STOP;
 800097c:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <Mode_Complete_Alarm+0xa0>)
 800097e:	2200      	movs	r2, #0
 8000980:	701a      	strb	r2, [r3, #0]
			Buzzer_Turn_Off();
 8000982:	f7ff ffb1 	bl	80008e8 <Buzzer_Turn_Off>
	else
	{
		i = 0;
		Buzzer_Turn_Off();
	}
}
 8000986:	e004      	b.n	8000992 <Mode_Complete_Alarm+0x92>
		i = 0;
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <Mode_Complete_Alarm+0xa4>)
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
		Buzzer_Turn_Off();
 800098e:	f7ff ffab 	bl	80008e8 <Buzzer_Turn_Off>
}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	00186a00 	.word	0x00186a00
 80009a0:	20000f8f 	.word	0x20000f8f
 80009a4:	200001a8 	.word	0x200001a8
 80009a8:	20000008 	.word	0x20000008
 80009ac:	20000584 	.word	0x20000584
 80009b0:	20000078 	.word	0x20000078
 80009b4:	20000c28 	.word	0x20000c28

080009b8 <DCmotor_Forward_Rotate>:
/*
 * desc: DC모터를 원하는 시간동안 정방향 회전시킨 뒤 멈춘다.
 * param1: DC모터가 가동하는 시간(초 단위)
 */
void DCmotor_Forward_Rotate(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 80009bc:	2201      	movs	r2, #1
 80009be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009c2:	4805      	ldr	r0, [pc, #20]	; (80009d8 <DCmotor_Forward_Rotate+0x20>)
 80009c4:	f003 fe16 	bl	80045f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ce:	4802      	ldr	r0, [pc, #8]	; (80009d8 <DCmotor_Forward_Rotate+0x20>)
 80009d0:	f003 fe10 	bl	80045f4 <HAL_GPIO_WritePin>
}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40021000 	.word	0x40021000

080009dc <DCmotor_Backward_Rotate>:
/*
 * desc: DC모터를 원하는 시간동안 역방향 회전시킨 뒤 멈춘다.
 * param1: DC모터가 가동하는 시간(초 단위)
 */
void DCmotor_Backward_Rotate(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 80009e0:	2200      	movs	r2, #0
 80009e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009e6:	4805      	ldr	r0, [pc, #20]	; (80009fc <DCmotor_Backward_Rotate+0x20>)
 80009e8:	f003 fe04 	bl	80045f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 80009ec:	2201      	movs	r2, #1
 80009ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009f2:	4802      	ldr	r0, [pc, #8]	; (80009fc <DCmotor_Backward_Rotate+0x20>)
 80009f4:	f003 fdfe 	bl	80045f4 <HAL_GPIO_WritePin>
}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40021000 	.word	0x40021000

08000a00 <DCmotor_Break>:

/*
 * desc: DC모터를 멈춘다.
 */
void DCmotor_Break(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 8000a04:	2201      	movs	r2, #1
 8000a06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a0a:	4805      	ldr	r0, [pc, #20]	; (8000a20 <DCmotor_Break+0x20>)
 8000a0c:	f003 fdf2 	bl	80045f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 8000a10:	2201      	movs	r2, #1
 8000a12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a16:	4802      	ldr	r0, [pc, #8]	; (8000a20 <DCmotor_Break+0x20>)
 8000a18:	f003 fdec 	bl	80045f4 <HAL_GPIO_WritePin>
}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40021000 	.word	0x40021000

08000a24 <DCmotor_Set_DutyCycle>:

void DCmotor_Set_DutyCycle(uint16_t duty_cycle)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, duty_cycle);
 8000a2e:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <DCmotor_Set_DutyCycle+0x20>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	88fa      	ldrh	r2, [r7, #6]
 8000a34:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000a36:	bf00      	nop
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	200004f4 	.word	0x200004f4

08000a48 <FND4digit_off>:

/*
 * desc: FND의 4자리를 모두 끈다.
 */
void FND4digit_off(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
#if 0 // common 에노우드 WCN4-
	HAL_GPIO_WritePin(FND_COM_PORT, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(FND_DATA_PORT,FND_font[8]|FND_p, GPIO_PIN_SET);
#else // common 캐소우드 CL5642AH30
	HAL_GPIO_WritePin(FND_COM_PORT, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_SET);
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8000a52:	4809      	ldr	r0, [pc, #36]	; (8000a78 <FND4digit_off+0x30>)
 8000a54:	f003 fdce 	bl	80045f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FND_DATA_PORT,FND_font[8]|FND_p, GPIO_PIN_RESET);
 8000a58:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <FND4digit_off+0x34>)
 8000a5a:	6a1b      	ldr	r3, [r3, #32]
 8000a5c:	b29b      	uxth	r3, r3
 8000a5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000a62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	2200      	movs	r2, #0
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4804      	ldr	r0, [pc, #16]	; (8000a80 <FND4digit_off+0x38>)
 8000a6e:	f003 fdc1 	bl	80045f4 <HAL_GPIO_WritePin>
#endif
	return;
 8000a72:	bf00      	nop
}
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40020800 	.word	0x40020800
 8000a7c:	200000f0 	.word	0x200000f0
 8000a80:	40020400 	.word	0x40020400

08000a84 <FND4digit_time_display>:
/*
 * desc: 초 단위로 들어온 시간을 00:00(분:초) 형태로 FND에 출력한다.
 * param1: 초 단위로 환산된 시간
 */
void FND4digit_time_display(uint32_t time)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]



	uint8_t miniute, second, miniute_tens, miniute_units, second_tens, second_units;

	miniute = (time % 3600) / 60;
 8000a8c:	687a      	ldr	r2, [r7, #4]
 8000a8e:	4b7c      	ldr	r3, [pc, #496]	; (8000c80 <FND4digit_time_display+0x1fc>)
 8000a90:	fba3 1302 	umull	r1, r3, r3, r2
 8000a94:	0adb      	lsrs	r3, r3, #11
 8000a96:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8000a9a:	fb01 f303 	mul.w	r3, r1, r3
 8000a9e:	1ad3      	subs	r3, r2, r3
 8000aa0:	4a78      	ldr	r2, [pc, #480]	; (8000c84 <FND4digit_time_display+0x200>)
 8000aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8000aa6:	095b      	lsrs	r3, r3, #5
 8000aa8:	73fb      	strb	r3, [r7, #15]
	second = (time % 3600) % 60;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4a74      	ldr	r2, [pc, #464]	; (8000c80 <FND4digit_time_display+0x1fc>)
 8000aae:	fba2 1203 	umull	r1, r2, r2, r3
 8000ab2:	0ad2      	lsrs	r2, r2, #11
 8000ab4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8000ab8:	fb01 f202 	mul.w	r2, r1, r2
 8000abc:	1a9a      	subs	r2, r3, r2
 8000abe:	4b71      	ldr	r3, [pc, #452]	; (8000c84 <FND4digit_time_display+0x200>)
 8000ac0:	fba3 1302 	umull	r1, r3, r3, r2
 8000ac4:	0959      	lsrs	r1, r3, #5
 8000ac6:	460b      	mov	r3, r1
 8000ac8:	011b      	lsls	r3, r3, #4
 8000aca:	1a5b      	subs	r3, r3, r1
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	1ad1      	subs	r1, r2, r3
 8000ad0:	460b      	mov	r3, r1
 8000ad2:	73bb      	strb	r3, [r7, #14]

	miniute_tens = miniute / 10;
 8000ad4:	7bfb      	ldrb	r3, [r7, #15]
 8000ad6:	4a6c      	ldr	r2, [pc, #432]	; (8000c88 <FND4digit_time_display+0x204>)
 8000ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8000adc:	08db      	lsrs	r3, r3, #3
 8000ade:	737b      	strb	r3, [r7, #13]
	miniute_units = miniute % 10;
 8000ae0:	7bfa      	ldrb	r2, [r7, #15]
 8000ae2:	4b69      	ldr	r3, [pc, #420]	; (8000c88 <FND4digit_time_display+0x204>)
 8000ae4:	fba3 1302 	umull	r1, r3, r3, r2
 8000ae8:	08d9      	lsrs	r1, r3, #3
 8000aea:	460b      	mov	r3, r1
 8000aec:	009b      	lsls	r3, r3, #2
 8000aee:	440b      	add	r3, r1
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	1ad3      	subs	r3, r2, r3
 8000af4:	733b      	strb	r3, [r7, #12]
	second_tens = second / 10;
 8000af6:	7bbb      	ldrb	r3, [r7, #14]
 8000af8:	4a63      	ldr	r2, [pc, #396]	; (8000c88 <FND4digit_time_display+0x204>)
 8000afa:	fba2 2303 	umull	r2, r3, r2, r3
 8000afe:	08db      	lsrs	r3, r3, #3
 8000b00:	72fb      	strb	r3, [r7, #11]
	second_units = second % 10;
 8000b02:	7bba      	ldrb	r2, [r7, #14]
 8000b04:	4b60      	ldr	r3, [pc, #384]	; (8000c88 <FND4digit_time_display+0x204>)
 8000b06:	fba3 1302 	umull	r1, r3, r3, r2
 8000b0a:	08d9      	lsrs	r1, r3, #3
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	440b      	add	r3, r1
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	72bb      	strb	r3, [r7, #10]



	if (fnd1ms_counter >= 2)   // 2ms reached // 0.002초마다 잔상효과 유지
 8000b18:	4b5c      	ldr	r3, [pc, #368]	; (8000c8c <FND4digit_time_display+0x208>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	f340 80ab 	ble.w	8000c78 <FND4digit_time_display+0x1f4>
	{
		fnd1ms_counter=0;
 8000b22:	4b5a      	ldr	r3, [pc, #360]	; (8000c8c <FND4digit_time_display+0x208>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
		msec += 2;
 8000b28:	4b59      	ldr	r3, [pc, #356]	; (8000c90 <FND4digit_time_display+0x20c>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	3302      	adds	r3, #2
 8000b2e:	4a58      	ldr	r2, [pc, #352]	; (8000c90 <FND4digit_time_display+0x20c>)
 8000b30:	6013      	str	r3, [r2, #0]

		if (msec > 1000)   // 1000ms reached // 1초마다 새로운 표시값으로 업데이트
 8000b32:	4b57      	ldr	r3, [pc, #348]	; (8000c90 <FND4digit_time_display+0x20c>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b3a:	d91e      	bls.n	8000b7a <FND4digit_time_display+0xf6>
		{
			msec = 0;
 8000b3c:	4b54      	ldr	r3, [pc, #336]	; (8000c90 <FND4digit_time_display+0x20c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
//			FND4digit_time_update(time);

			// 분
			FND[0] = FND_font[second_units]; // FND 오른쪽 끝 자리
 8000b42:	7abb      	ldrb	r3, [r7, #10]
 8000b44:	4a53      	ldr	r2, [pc, #332]	; (8000c94 <FND4digit_time_display+0x210>)
 8000b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b4a:	b29a      	uxth	r2, r3
 8000b4c:	4b52      	ldr	r3, [pc, #328]	; (8000c98 <FND4digit_time_display+0x214>)
 8000b4e:	801a      	strh	r2, [r3, #0]
			FND[1] = FND_font[second_tens];
 8000b50:	7afb      	ldrb	r3, [r7, #11]
 8000b52:	4a50      	ldr	r2, [pc, #320]	; (8000c94 <FND4digit_time_display+0x210>)
 8000b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b58:	b29a      	uxth	r2, r3
 8000b5a:	4b4f      	ldr	r3, [pc, #316]	; (8000c98 <FND4digit_time_display+0x214>)
 8000b5c:	805a      	strh	r2, [r3, #2]
			// 초
			FND[2] = FND_font[miniute_units];
 8000b5e:	7b3b      	ldrb	r3, [r7, #12]
 8000b60:	4a4c      	ldr	r2, [pc, #304]	; (8000c94 <FND4digit_time_display+0x210>)
 8000b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b66:	b29a      	uxth	r2, r3
 8000b68:	4b4b      	ldr	r3, [pc, #300]	; (8000c98 <FND4digit_time_display+0x214>)
 8000b6a:	809a      	strh	r2, [r3, #4]
			FND[3] = FND_font[miniute_tens]; // FND 왼쪽 끝 자리
 8000b6c:	7b7b      	ldrb	r3, [r7, #13]
 8000b6e:	4a49      	ldr	r2, [pc, #292]	; (8000c94 <FND4digit_time_display+0x210>)
 8000b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b74:	b29a      	uxth	r2, r3
 8000b76:	4b48      	ldr	r3, [pc, #288]	; (8000c98 <FND4digit_time_display+0x214>)
 8000b78:	80da      	strh	r2, [r3, #6]
		}

		FND4digit_off();
 8000b7a:	f7ff ff65 	bl	8000a48 <FND4digit_off>


		if (i == 3 && miniute_tens == 0)
 8000b7e:	4b47      	ldr	r3, [pc, #284]	; (8000c9c <FND4digit_time_display+0x218>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2b03      	cmp	r3, #3
 8000b84:	d113      	bne.n	8000bae <FND4digit_time_display+0x12a>
 8000b86:	7b7b      	ldrb	r3, [r7, #13]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d110      	bne.n	8000bae <FND4digit_time_display+0x12a>
		{
			// 출력하면 안되고
			i++;
 8000b8c:	4b43      	ldr	r3, [pc, #268]	; (8000c9c <FND4digit_time_display+0x218>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	3301      	adds	r3, #1
 8000b92:	4a42      	ldr	r2, [pc, #264]	; (8000c9c <FND4digit_time_display+0x218>)
 8000b94:	6013      	str	r3, [r2, #0]
			i %= 4;
 8000b96:	4b41      	ldr	r3, [pc, #260]	; (8000c9c <FND4digit_time_display+0x218>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	425a      	negs	r2, r3
 8000b9c:	f003 0303 	and.w	r3, r3, #3
 8000ba0:	f002 0203 	and.w	r2, r2, #3
 8000ba4:	bf58      	it	pl
 8000ba6:	4253      	negpl	r3, r2
 8000ba8:	4a3c      	ldr	r2, [pc, #240]	; (8000c9c <FND4digit_time_display+0x218>)
 8000baa:	6013      	str	r3, [r2, #0]
			return;
 8000bac:	e064      	b.n	8000c78 <FND4digit_time_display+0x1f4>
		}

		if (i == 2 && miniute_tens == 0 && miniute_units == 0)
 8000bae:	4b3b      	ldr	r3, [pc, #236]	; (8000c9c <FND4digit_time_display+0x218>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	2b02      	cmp	r3, #2
 8000bb4:	d116      	bne.n	8000be4 <FND4digit_time_display+0x160>
 8000bb6:	7b7b      	ldrb	r3, [r7, #13]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d113      	bne.n	8000be4 <FND4digit_time_display+0x160>
 8000bbc:	7b3b      	ldrb	r3, [r7, #12]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d110      	bne.n	8000be4 <FND4digit_time_display+0x160>
		{
			// 출력하면 안되고
			i++;
 8000bc2:	4b36      	ldr	r3, [pc, #216]	; (8000c9c <FND4digit_time_display+0x218>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	4a34      	ldr	r2, [pc, #208]	; (8000c9c <FND4digit_time_display+0x218>)
 8000bca:	6013      	str	r3, [r2, #0]
			i %= 4;
 8000bcc:	4b33      	ldr	r3, [pc, #204]	; (8000c9c <FND4digit_time_display+0x218>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	425a      	negs	r2, r3
 8000bd2:	f003 0303 	and.w	r3, r3, #3
 8000bd6:	f002 0203 	and.w	r2, r2, #3
 8000bda:	bf58      	it	pl
 8000bdc:	4253      	negpl	r3, r2
 8000bde:	4a2f      	ldr	r2, [pc, #188]	; (8000c9c <FND4digit_time_display+0x218>)
 8000be0:	6013      	str	r3, [r2, #0]
			return;
 8000be2:	e049      	b.n	8000c78 <FND4digit_time_display+0x1f4>
		}

		if (i == 1 && miniute < 1 && second_tens == 0)
 8000be4:	4b2d      	ldr	r3, [pc, #180]	; (8000c9c <FND4digit_time_display+0x218>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d116      	bne.n	8000c1a <FND4digit_time_display+0x196>
 8000bec:	7bfb      	ldrb	r3, [r7, #15]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d113      	bne.n	8000c1a <FND4digit_time_display+0x196>
 8000bf2:	7afb      	ldrb	r3, [r7, #11]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d110      	bne.n	8000c1a <FND4digit_time_display+0x196>
		{
			// 출력하면 안되고
			i++;
 8000bf8:	4b28      	ldr	r3, [pc, #160]	; (8000c9c <FND4digit_time_display+0x218>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	4a27      	ldr	r2, [pc, #156]	; (8000c9c <FND4digit_time_display+0x218>)
 8000c00:	6013      	str	r3, [r2, #0]
			i %= 4;
 8000c02:	4b26      	ldr	r3, [pc, #152]	; (8000c9c <FND4digit_time_display+0x218>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	425a      	negs	r2, r3
 8000c08:	f003 0303 	and.w	r3, r3, #3
 8000c0c:	f002 0203 	and.w	r2, r2, #3
 8000c10:	bf58      	it	pl
 8000c12:	4253      	negpl	r3, r2
 8000c14:	4a21      	ldr	r2, [pc, #132]	; (8000c9c <FND4digit_time_display+0x218>)
 8000c16:	6013      	str	r3, [r2, #0]
			return;
 8000c18:	e02e      	b.n	8000c78 <FND4digit_time_display+0x1f4>
		}


		HAL_GPIO_WritePin(FND_COM_PORT,FND_digit[i], GPIO_PIN_RESET);
 8000c1a:	4b20      	ldr	r3, [pc, #128]	; (8000c9c <FND4digit_time_display+0x218>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a20      	ldr	r2, [pc, #128]	; (8000ca0 <FND4digit_time_display+0x21c>)
 8000c20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c24:	2200      	movs	r2, #0
 8000c26:	4619      	mov	r1, r3
 8000c28:	481e      	ldr	r0, [pc, #120]	; (8000ca4 <FND4digit_time_display+0x220>)
 8000c2a:	f003 fce3 	bl	80045f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FND_DATA_PORT, FND[i], GPIO_PIN_SET);
 8000c2e:	4b1b      	ldr	r3, [pc, #108]	; (8000c9c <FND4digit_time_display+0x218>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a19      	ldr	r2, [pc, #100]	; (8000c98 <FND4digit_time_display+0x214>)
 8000c34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c38:	2201      	movs	r2, #1
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	481a      	ldr	r0, [pc, #104]	; (8000ca8 <FND4digit_time_display+0x224>)
 8000c3e:	f003 fcd9 	bl	80045f4 <HAL_GPIO_WritePin>

		if (i == 2)
 8000c42:	4b16      	ldr	r3, [pc, #88]	; (8000c9c <FND4digit_time_display+0x218>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	2b02      	cmp	r3, #2
 8000c48:	d105      	bne.n	8000c56 <FND4digit_time_display+0x1d2>
		{
			HAL_GPIO_WritePin(FND_DATA_PORT, FND_p, GPIO_PIN_SET);
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c50:	4815      	ldr	r0, [pc, #84]	; (8000ca8 <FND4digit_time_display+0x224>)
 8000c52:	f003 fccf 	bl	80045f4 <HAL_GPIO_WritePin>
		}

		i++;   // 다음 display할 FND를 가리킨다.
 8000c56:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <FND4digit_time_display+0x218>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	4a0f      	ldr	r2, [pc, #60]	; (8000c9c <FND4digit_time_display+0x218>)
 8000c5e:	6013      	str	r3, [r2, #0]
		i %= 4;
 8000c60:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <FND4digit_time_display+0x218>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	425a      	negs	r2, r3
 8000c66:	f003 0303 	and.w	r3, r3, #3
 8000c6a:	f002 0203 	and.w	r2, r2, #3
 8000c6e:	bf58      	it	pl
 8000c70:	4253      	negpl	r3, r2
 8000c72:	4a0a      	ldr	r2, [pc, #40]	; (8000c9c <FND4digit_time_display+0x218>)
 8000c74:	6013      	str	r3, [r2, #0]
		return;
 8000c76:	bf00      	nop
	}
}
 8000c78:	3710      	adds	r7, #16
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	91a2b3c5 	.word	0x91a2b3c5
 8000c84:	88888889 	.word	0x88888889
 8000c88:	cccccccd 	.word	0xcccccccd
 8000c8c:	20000bf0 	.word	0x20000bf0
 8000c90:	200001b4 	.word	0x200001b4
 8000c94:	200000f0 	.word	0x200000f0
 8000c98:	200001ac 	.word	0x200001ac
 8000c9c:	200001b8 	.word	0x200001b8
 8000ca0:	200000e8 	.word	0x200000e8
 8000ca4:	40020800 	.word	0x40020800
 8000ca8:	40020400 	.word	0x40020400

08000cac <bcd2dec>:
	HAL_RTC_SetTime(&hrtc, &my_systemTime, RTC_FORMAT_BCD);
}

// 0010 0111 -> 23 (.ioc 환경변수 설정에서 날자값을 bcd포맷으로 저장하게 했기 때문에 이렇게 된다. binary 포맷이었다면 0001 0111 이었을 것)
uint8_t bcd2dec(uint8_t byte)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	71fb      	strb	r3, [r7, #7]
	uint8_t high, low;
	low = byte & 0x0f; // 하위 4bit (low nibble)
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	f003 030f 	and.w	r3, r3, #15
 8000cbc:	73fb      	strb	r3, [r7, #15]
	high = (byte >> 4) * 10; // 상위 4bit (high nibble)
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	091b      	lsrs	r3, r3, #4
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	0092      	lsls	r2, r2, #2
 8000cc8:	4413      	add	r3, r2
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	73bb      	strb	r3, [r7, #14]

	return high + low;
 8000cce:	7bba      	ldrb	r2, [r7, #14]
 8000cd0:	7bfb      	ldrb	r3, [r7, #15]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	b2db      	uxtb	r3, r3
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3714      	adds	r7, #20
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
	...

08000ce4 <dec2bcd>:

// 23 -> 0010 0111
uint8_t dec2bcd(uint8_t byte)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	71fb      	strb	r3, [r7, #7]
	uint8_t high, low;

	high = (byte / 10) << 4;
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	4a0d      	ldr	r2, [pc, #52]	; (8000d28 <dec2bcd+0x44>)
 8000cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf6:	08db      	lsrs	r3, r3, #3
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	011b      	lsls	r3, r3, #4
 8000cfc:	73fb      	strb	r3, [r7, #15]
	low = (byte % 10);
 8000cfe:	79fa      	ldrb	r2, [r7, #7]
 8000d00:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <dec2bcd+0x44>)
 8000d02:	fba3 1302 	umull	r1, r3, r3, r2
 8000d06:	08d9      	lsrs	r1, r3, #3
 8000d08:	460b      	mov	r3, r1
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	440b      	add	r3, r1
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	73bb      	strb	r3, [r7, #14]

	return high + low;
 8000d14:	7bfa      	ldrb	r2, [r7, #15]
 8000d16:	7bbb      	ldrb	r3, [r7, #14]
 8000d18:	4413      	add	r3, r2
 8000d1a:	b2db      	uxtb	r3, r3
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	cccccccd 	.word	0xcccccccd

08000d2c <LEDbar_All_Off>:

/*
 * desc: ledbar가 모두 꺼진다.
 */
void LEDbar_All_Off(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, 0xff, 0);
 8000d30:	2200      	movs	r2, #0
 8000d32:	21ff      	movs	r1, #255	; 0xff
 8000d34:	4802      	ldr	r0, [pc, #8]	; (8000d40 <LEDbar_All_Off+0x14>)
 8000d36:	f003 fc5d 	bl	80045f4 <HAL_GPIO_WritePin>
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40020c00 	.word	0x40020c00

08000d44 <LEDbar_On_Up>:

/*
 * desc: ledbar는 8개의 led로 구성되어 있는데, 아래서부터 위로 한칸씩 올라가면서 1개의 led가 켜졌다가 꺼진다.
 */
void LEDbar_On_Up(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
	static int i = 0;

	if (TIM10_10ms_counter_ledbar >= 20)
 8000d48:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <LEDbar_On_Up+0x48>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2b13      	cmp	r3, #19
 8000d4e:	d91b      	bls.n	8000d88 <LEDbar_On_Up+0x44>
	{
		TIM10_10ms_counter_ledbar = 0;
 8000d50:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <LEDbar_On_Up+0x48>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]

		if (i == 8)
 8000d56:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <LEDbar_On_Up+0x4c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	2b08      	cmp	r3, #8
 8000d5c:	d104      	bne.n	8000d68 <LEDbar_On_Up+0x24>
		{
			LEDbar_All_Off();
 8000d5e:	f7ff ffe5 	bl	8000d2c <LEDbar_All_Off>
			i = 0;
 8000d62:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <LEDbar_On_Up+0x4c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
		}

		LEDbar_All_Off();
 8000d68:	f7ff ffe0 	bl	8000d2c <LEDbar_All_Off>
		HAL_GPIO_WritePin(GPIOD, 0x01 << i++, 1);
 8000d6c:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <LEDbar_On_Up+0x4c>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	1c5a      	adds	r2, r3, #1
 8000d72:	4907      	ldr	r1, [pc, #28]	; (8000d90 <LEDbar_On_Up+0x4c>)
 8000d74:	600a      	str	r2, [r1, #0]
 8000d76:	2201      	movs	r2, #1
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	b29b      	uxth	r3, r3
 8000d7e:	2201      	movs	r2, #1
 8000d80:	4619      	mov	r1, r3
 8000d82:	4804      	ldr	r0, [pc, #16]	; (8000d94 <LEDbar_On_Up+0x50>)
 8000d84:	f003 fc36 	bl	80045f4 <HAL_GPIO_WritePin>
	}
}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000c00 	.word	0x20000c00
 8000d90:	200001bc 	.word	0x200001bc
 8000d94:	40020c00 	.word	0x40020c00

08000d98 <LEDbar_Keepon_Up>:

/*
 * desc: ledbar는 8개의 led로 구성되어 있는데, 아래서부터 위로 한칸씩 올라가면서 켜진 LED는 유지하면서 1개의 led가 추가로 켜진다.
 */
void LEDbar_Keepon_Up(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
	static int i = 0;

	if (TIM10_10ms_counter_ledbar >= 20)
 8000d9c:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <LEDbar_Keepon_Up+0x44>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2b13      	cmp	r3, #19
 8000da2:	d919      	bls.n	8000dd8 <LEDbar_Keepon_Up+0x40>
	{
		TIM10_10ms_counter_ledbar = 0;
 8000da4:	4b0d      	ldr	r3, [pc, #52]	; (8000ddc <LEDbar_Keepon_Up+0x44>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]

		if (i == 8)
 8000daa:	4b0d      	ldr	r3, [pc, #52]	; (8000de0 <LEDbar_Keepon_Up+0x48>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2b08      	cmp	r3, #8
 8000db0:	d104      	bne.n	8000dbc <LEDbar_Keepon_Up+0x24>
		{
			LEDbar_All_Off();
 8000db2:	f7ff ffbb 	bl	8000d2c <LEDbar_All_Off>
			i = 0;
 8000db6:	4b0a      	ldr	r3, [pc, #40]	; (8000de0 <LEDbar_Keepon_Up+0x48>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(GPIOD, 0x00|(0x01 << i++), 1);
 8000dbc:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <LEDbar_Keepon_Up+0x48>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	1c5a      	adds	r2, r3, #1
 8000dc2:	4907      	ldr	r1, [pc, #28]	; (8000de0 <LEDbar_Keepon_Up+0x48>)
 8000dc4:	600a      	str	r2, [r1, #0]
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	b29b      	uxth	r3, r3
 8000dce:	2201      	movs	r2, #1
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4804      	ldr	r0, [pc, #16]	; (8000de4 <LEDbar_Keepon_Up+0x4c>)
 8000dd4:	f003 fc0e 	bl	80045f4 <HAL_GPIO_WritePin>
	}
}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20000c00 	.word	0x20000c00
 8000de0:	200001c0 	.word	0x200001c0
 8000de4:	40020c00 	.word	0x40020c00

08000de8 <LEDbar_Flower_On>:

/*
 * desc: ledbar는 8개의 led로 구성되어 있는데, led가 펴져나가는 물결 모양으로 점멸되게 한다.
 */
void LEDbar_Flower_On(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
	static int i = 0;

	if (TIM10_10ms_counter_ledbar >= 20)
 8000dec:	4b16      	ldr	r3, [pc, #88]	; (8000e48 <LEDbar_Flower_On+0x60>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2b13      	cmp	r3, #19
 8000df2:	d926      	bls.n	8000e42 <LEDbar_Flower_On+0x5a>
	{
		TIM10_10ms_counter_ledbar = 0;
 8000df4:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <LEDbar_Flower_On+0x60>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]

		if (i == 4)
 8000dfa:	4b14      	ldr	r3, [pc, #80]	; (8000e4c <LEDbar_Flower_On+0x64>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2b04      	cmp	r3, #4
 8000e00:	d104      	bne.n	8000e0c <LEDbar_Flower_On+0x24>
		{
			LEDbar_All_Off();
 8000e02:	f7ff ff93 	bl	8000d2c <LEDbar_All_Off>
			i = 0;
 8000e06:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <LEDbar_Flower_On+0x64>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(GPIOD, 0x08 >> i, 1);
 8000e0c:	4b0f      	ldr	r3, [pc, #60]	; (8000e4c <LEDbar_Flower_On+0x64>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2208      	movs	r2, #8
 8000e12:	fa42 f303 	asr.w	r3, r2, r3
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	2201      	movs	r2, #1
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	480c      	ldr	r0, [pc, #48]	; (8000e50 <LEDbar_Flower_On+0x68>)
 8000e1e:	f003 fbe9 	bl	80045f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, 0x10 << i, 1);
 8000e22:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <LEDbar_Flower_On+0x64>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2210      	movs	r2, #16
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	b29b      	uxth	r3, r3
 8000e2e:	2201      	movs	r2, #1
 8000e30:	4619      	mov	r1, r3
 8000e32:	4807      	ldr	r0, [pc, #28]	; (8000e50 <LEDbar_Flower_On+0x68>)
 8000e34:	f003 fbde 	bl	80045f4 <HAL_GPIO_WritePin>
		i++;
 8000e38:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <LEDbar_Flower_On+0x64>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	4a03      	ldr	r2, [pc, #12]	; (8000e4c <LEDbar_Flower_On+0x64>)
 8000e40:	6013      	str	r3, [r2, #0]
	}
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000c00 	.word	0x20000c00
 8000e4c:	200001c4 	.word	0x200001c4
 8000e50:	40020c00 	.word	0x40020c00

08000e54 <HAL_STSTICK_Handler>:
// ---------- call by SysTick_Handler of stm32f4xx_it.c ----------
// ARM default timer
// enter here every 1ms
volatile int fnd1ms_counter = 0;
void HAL_STSTICK_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
	fnd1ms_counter++; // 1ms timer
 8000e58:	4b04      	ldr	r3, [pc, #16]	; (8000e6c <HAL_STSTICK_Handler+0x18>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	4a03      	ldr	r2, [pc, #12]	; (8000e6c <HAL_STSTICK_Handler+0x18>)
 8000e60:	6013      	str	r3, [r2, #0]
}
 8000e62:	bf00      	nop
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	20000bf0 	.word	0x20000bf0

08000e70 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE   // Add for printf
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000e78:	1d39      	adds	r1, r7, #4
 8000e7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e7e:	2201      	movs	r2, #1
 8000e80:	4803      	ldr	r0, [pc, #12]	; (8000e90 <__io_putchar+0x20>)
 8000e82:	f007 f818 	bl	8007eb6 <HAL_UART_Transmit>

  return ch;
 8000e86:	687b      	ldr	r3, [r7, #4]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	2000065c 	.word	0x2000065c

08000e94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e98:	f002 fc86 	bl	80037a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e9c:	f000 f826 	bl	8000eec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea0:	f000 fc3e 	bl	8001720 <MX_GPIO_Init>
  MX_ETH_Init();
 8000ea4:	f000 f88e 	bl	8000fc4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000ea8:	f000 fbb8 	bl	800161c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000eac:	f000 fc0a 	bl	80016c4 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM10_Init();
 8000eb0:	f000 fb6c 	bl	800158c <MX_TIM10_Init>
  MX_TIM11_Init();
 8000eb4:	f000 fb8e 	bl	80015d4 <MX_TIM11_Init>
  MX_I2C1_Init();
 8000eb8:	f000 f8d2 	bl	8001060 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000ebc:	f000 f9c4 	bl	8001248 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000ec0:	f000 fa16 	bl	80012f0 <MX_TIM4_Init>
  MX_TIM2_Init();
 8000ec4:	f000 f966 	bl	8001194 <MX_TIM2_Init>
  MX_USART6_UART_Init();
 8000ec8:	f000 fbd2 	bl	8001670 <MX_USART6_UART_Init>
  MX_RTC_Init();
 8000ecc:	f000 f908 	bl	80010e0 <MX_RTC_Init>
  MX_TIM5_Init();
 8000ed0:	f000 fa84 	bl	80013dc <MX_TIM5_Init>
  MX_TIM9_Init();
 8000ed4:	f000 faf8 	bl	80014c8 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  printf("enter main()!!!\n");
 8000ed8:	4803      	ldr	r0, [pc, #12]	; (8000ee8 <main+0x54>)
 8000eda:	f008 fbb9 	bl	8009650 <puts>

  WashingMachine_Init();
 8000ede:	f001 fc2b 	bl	8002738 <WashingMachine_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  WashingMachine_Processing();
 8000ee2:	f001 fc69 	bl	80027b8 <WashingMachine_Processing>
 8000ee6:	e7fc      	b.n	8000ee2 <main+0x4e>
 8000ee8:	0800a668 	.word	0x0800a668

08000eec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b094      	sub	sp, #80	; 0x50
 8000ef0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ef2:	f107 0320 	add.w	r3, r7, #32
 8000ef6:	2230      	movs	r2, #48	; 0x30
 8000ef8:	2100      	movs	r1, #0
 8000efa:	4618      	mov	r0, r3
 8000efc:	f008 fb32 	bl	8009564 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f00:	f107 030c 	add.w	r3, r7, #12
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f10:	2300      	movs	r3, #0
 8000f12:	60bb      	str	r3, [r7, #8]
 8000f14:	4b29      	ldr	r3, [pc, #164]	; (8000fbc <SystemClock_Config+0xd0>)
 8000f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f18:	4a28      	ldr	r2, [pc, #160]	; (8000fbc <SystemClock_Config+0xd0>)
 8000f1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f20:	4b26      	ldr	r3, [pc, #152]	; (8000fbc <SystemClock_Config+0xd0>)
 8000f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f28:	60bb      	str	r3, [r7, #8]
 8000f2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	607b      	str	r3, [r7, #4]
 8000f30:	4b23      	ldr	r3, [pc, #140]	; (8000fc0 <SystemClock_Config+0xd4>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a22      	ldr	r2, [pc, #136]	; (8000fc0 <SystemClock_Config+0xd4>)
 8000f36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f3a:	6013      	str	r3, [r2, #0]
 8000f3c:	4b20      	ldr	r3, [pc, #128]	; (8000fc0 <SystemClock_Config+0xd4>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f44:	607b      	str	r3, [r7, #4]
 8000f46:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000f48:	2309      	movs	r3, #9
 8000f4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f4c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f52:	2301      	movs	r3, #1
 8000f54:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f56:	2302      	movs	r3, #2
 8000f58:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f60:	2304      	movs	r3, #4
 8000f62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000f64:	23a8      	movs	r3, #168	; 0xa8
 8000f66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f6c:	2307      	movs	r3, #7
 8000f6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f70:	f107 0320 	add.w	r3, r7, #32
 8000f74:	4618      	mov	r0, r3
 8000f76:	f004 f93b 	bl	80051f0 <HAL_RCC_OscConfig>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000f80:	f000 fd1e 	bl	80019c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f84:	230f      	movs	r3, #15
 8000f86:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f90:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f9a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f9c:	f107 030c 	add.w	r3, r7, #12
 8000fa0:	2105      	movs	r1, #5
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f004 fb9c 	bl	80056e0 <HAL_RCC_ClockConfig>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000fae:	f000 fd07 	bl	80019c0 <Error_Handler>
  }
}
 8000fb2:	bf00      	nop
 8000fb4:	3750      	adds	r7, #80	; 0x50
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40023800 	.word	0x40023800
 8000fc0:	40007000 	.word	0x40007000

08000fc4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000fc8:	4b1f      	ldr	r3, [pc, #124]	; (8001048 <MX_ETH_Init+0x84>)
 8000fca:	4a20      	ldr	r2, [pc, #128]	; (800104c <MX_ETH_Init+0x88>)
 8000fcc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000fce:	4b20      	ldr	r3, [pc, #128]	; (8001050 <MX_ETH_Init+0x8c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000fd4:	4b1e      	ldr	r3, [pc, #120]	; (8001050 <MX_ETH_Init+0x8c>)
 8000fd6:	2280      	movs	r2, #128	; 0x80
 8000fd8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000fda:	4b1d      	ldr	r3, [pc, #116]	; (8001050 <MX_ETH_Init+0x8c>)
 8000fdc:	22e1      	movs	r2, #225	; 0xe1
 8000fde:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000fe0:	4b1b      	ldr	r3, [pc, #108]	; (8001050 <MX_ETH_Init+0x8c>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000fe6:	4b1a      	ldr	r3, [pc, #104]	; (8001050 <MX_ETH_Init+0x8c>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000fec:	4b18      	ldr	r3, [pc, #96]	; (8001050 <MX_ETH_Init+0x8c>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000ff2:	4b15      	ldr	r3, [pc, #84]	; (8001048 <MX_ETH_Init+0x84>)
 8000ff4:	4a16      	ldr	r2, [pc, #88]	; (8001050 <MX_ETH_Init+0x8c>)
 8000ff6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000ff8:	4b13      	ldr	r3, [pc, #76]	; (8001048 <MX_ETH_Init+0x84>)
 8000ffa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000ffe:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001000:	4b11      	ldr	r3, [pc, #68]	; (8001048 <MX_ETH_Init+0x84>)
 8001002:	4a14      	ldr	r2, [pc, #80]	; (8001054 <MX_ETH_Init+0x90>)
 8001004:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001006:	4b10      	ldr	r3, [pc, #64]	; (8001048 <MX_ETH_Init+0x84>)
 8001008:	4a13      	ldr	r2, [pc, #76]	; (8001058 <MX_ETH_Init+0x94>)
 800100a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800100c:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <MX_ETH_Init+0x84>)
 800100e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001012:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001014:	480c      	ldr	r0, [pc, #48]	; (8001048 <MX_ETH_Init+0x84>)
 8001016:	f002 fe01 	bl	8003c1c <HAL_ETH_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001020:	f000 fcce 	bl	80019c0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001024:	2238      	movs	r2, #56	; 0x38
 8001026:	2100      	movs	r1, #0
 8001028:	480c      	ldr	r0, [pc, #48]	; (800105c <MX_ETH_Init+0x98>)
 800102a:	f008 fa9b 	bl	8009564 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800102e:	4b0b      	ldr	r3, [pc, #44]	; (800105c <MX_ETH_Init+0x98>)
 8001030:	2221      	movs	r2, #33	; 0x21
 8001032:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001034:	4b09      	ldr	r3, [pc, #36]	; (800105c <MX_ETH_Init+0x98>)
 8001036:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800103a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800103c:	4b07      	ldr	r3, [pc, #28]	; (800105c <MX_ETH_Init+0x98>)
 800103e:	2200      	movs	r2, #0
 8001040:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000340 	.word	0x20000340
 800104c:	40028000 	.word	0x40028000
 8001050:	20000bf4 	.word	0x20000bf4
 8001054:	200002a0 	.word	0x200002a0
 8001058:	20000200 	.word	0x20000200
 800105c:	200001c8 	.word	0x200001c8

08001060 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001064:	4b1b      	ldr	r3, [pc, #108]	; (80010d4 <MX_I2C1_Init+0x74>)
 8001066:	4a1c      	ldr	r2, [pc, #112]	; (80010d8 <MX_I2C1_Init+0x78>)
 8001068:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800106a:	4b1a      	ldr	r3, [pc, #104]	; (80010d4 <MX_I2C1_Init+0x74>)
 800106c:	4a1b      	ldr	r2, [pc, #108]	; (80010dc <MX_I2C1_Init+0x7c>)
 800106e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001070:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <MX_I2C1_Init+0x74>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001076:	4b17      	ldr	r3, [pc, #92]	; (80010d4 <MX_I2C1_Init+0x74>)
 8001078:	2200      	movs	r2, #0
 800107a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800107c:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <MX_I2C1_Init+0x74>)
 800107e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001082:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001084:	4b13      	ldr	r3, [pc, #76]	; (80010d4 <MX_I2C1_Init+0x74>)
 8001086:	2200      	movs	r2, #0
 8001088:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800108a:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <MX_I2C1_Init+0x74>)
 800108c:	2200      	movs	r2, #0
 800108e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001090:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <MX_I2C1_Init+0x74>)
 8001092:	2200      	movs	r2, #0
 8001094:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001096:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <MX_I2C1_Init+0x74>)
 8001098:	2200      	movs	r2, #0
 800109a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800109c:	480d      	ldr	r0, [pc, #52]	; (80010d4 <MX_I2C1_Init+0x74>)
 800109e:	f003 fac3 	bl	8004628 <HAL_I2C_Init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010a8:	f000 fc8a 	bl	80019c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010ac:	2100      	movs	r1, #0
 80010ae:	4809      	ldr	r0, [pc, #36]	; (80010d4 <MX_I2C1_Init+0x74>)
 80010b0:	f003 ff05 	bl	8004ebe <HAL_I2CEx_ConfigAnalogFilter>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80010ba:	f000 fc81 	bl	80019c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010be:	2100      	movs	r1, #0
 80010c0:	4804      	ldr	r0, [pc, #16]	; (80010d4 <MX_I2C1_Init+0x74>)
 80010c2:	f003 ff38 	bl	8004f36 <HAL_I2CEx_ConfigDigitalFilter>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80010cc:	f000 fc78 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	200003f0 	.word	0x200003f0
 80010d8:	40005400 	.word	0x40005400
 80010dc:	000186a0 	.word	0x000186a0

080010e0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80010f4:	2300      	movs	r3, #0
 80010f6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80010f8:	4b24      	ldr	r3, [pc, #144]	; (800118c <MX_RTC_Init+0xac>)
 80010fa:	4a25      	ldr	r2, [pc, #148]	; (8001190 <MX_RTC_Init+0xb0>)
 80010fc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80010fe:	4b23      	ldr	r3, [pc, #140]	; (800118c <MX_RTC_Init+0xac>)
 8001100:	2200      	movs	r2, #0
 8001102:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001104:	4b21      	ldr	r3, [pc, #132]	; (800118c <MX_RTC_Init+0xac>)
 8001106:	227f      	movs	r2, #127	; 0x7f
 8001108:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800110a:	4b20      	ldr	r3, [pc, #128]	; (800118c <MX_RTC_Init+0xac>)
 800110c:	22ff      	movs	r2, #255	; 0xff
 800110e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001110:	4b1e      	ldr	r3, [pc, #120]	; (800118c <MX_RTC_Init+0xac>)
 8001112:	2200      	movs	r2, #0
 8001114:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001116:	4b1d      	ldr	r3, [pc, #116]	; (800118c <MX_RTC_Init+0xac>)
 8001118:	2200      	movs	r2, #0
 800111a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800111c:	4b1b      	ldr	r3, [pc, #108]	; (800118c <MX_RTC_Init+0xac>)
 800111e:	2200      	movs	r2, #0
 8001120:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001122:	481a      	ldr	r0, [pc, #104]	; (800118c <MX_RTC_Init+0xac>)
 8001124:	f004 febc 	bl	8005ea0 <HAL_RTC_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800112e:	f000 fc47 	bl	80019c0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x8;
 8001132:	2308      	movs	r3, #8
 8001134:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x38;
 8001136:	2338      	movs	r3, #56	; 0x38
 8001138:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x15;
 800113a:	2315      	movs	r3, #21
 800113c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001146:	1d3b      	adds	r3, r7, #4
 8001148:	2201      	movs	r2, #1
 800114a:	4619      	mov	r1, r3
 800114c:	480f      	ldr	r0, [pc, #60]	; (800118c <MX_RTC_Init+0xac>)
 800114e:	f004 ff1d 	bl	8005f8c <HAL_RTC_SetTime>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001158:	f000 fc32 	bl	80019c0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800115c:	2301      	movs	r3, #1
 800115e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_OCTOBER;
 8001160:	2310      	movs	r3, #16
 8001162:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x16;
 8001164:	2316      	movs	r3, #22
 8001166:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 8001168:	2323      	movs	r3, #35	; 0x23
 800116a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800116c:	463b      	mov	r3, r7
 800116e:	2201      	movs	r2, #1
 8001170:	4619      	mov	r1, r3
 8001172:	4806      	ldr	r0, [pc, #24]	; (800118c <MX_RTC_Init+0xac>)
 8001174:	f005 f802 	bl	800617c <HAL_RTC_SetDate>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800117e:	f000 fc1f 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001182:	bf00      	nop
 8001184:	3718      	adds	r7, #24
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000444 	.word	0x20000444
 8001190:	40002800 	.word	0x40002800

08001194 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08a      	sub	sp, #40	; 0x28
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800119a:	f107 0320 	add.w	r3, r7, #32
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011a4:	1d3b      	adds	r3, r7, #4
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]
 80011b0:	611a      	str	r2, [r3, #16]
 80011b2:	615a      	str	r2, [r3, #20]
 80011b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011b6:	4b23      	ldr	r3, [pc, #140]	; (8001244 <MX_TIM2_Init+0xb0>)
 80011b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680-1;
 80011be:	4b21      	ldr	r3, [pc, #132]	; (8001244 <MX_TIM2_Init+0xb0>)
 80011c0:	f240 628f 	movw	r2, #1679	; 0x68f
 80011c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c6:	4b1f      	ldr	r3, [pc, #124]	; (8001244 <MX_TIM2_Init+0xb0>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80011cc:	4b1d      	ldr	r3, [pc, #116]	; (8001244 <MX_TIM2_Init+0xb0>)
 80011ce:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d4:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <MX_TIM2_Init+0xb0>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011da:	4b1a      	ldr	r3, [pc, #104]	; (8001244 <MX_TIM2_Init+0xb0>)
 80011dc:	2200      	movs	r2, #0
 80011de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011e0:	4818      	ldr	r0, [pc, #96]	; (8001244 <MX_TIM2_Init+0xb0>)
 80011e2:	f005 fa1b 	bl	800661c <HAL_TIM_PWM_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80011ec:	f000 fbe8 	bl	80019c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011f0:	2300      	movs	r3, #0
 80011f2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f4:	2300      	movs	r3, #0
 80011f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011f8:	f107 0320 	add.w	r3, r7, #32
 80011fc:	4619      	mov	r1, r3
 80011fe:	4811      	ldr	r0, [pc, #68]	; (8001244 <MX_TIM2_Init+0xb0>)
 8001200:	f006 fd7c 	bl	8007cfc <HAL_TIMEx_MasterConfigSynchronization>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800120a:	f000 fbd9 	bl	80019c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800120e:	2360      	movs	r3, #96	; 0x60
 8001210:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8001212:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001216:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001218:	2300      	movs	r3, #0
 800121a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001220:	1d3b      	adds	r3, r7, #4
 8001222:	2200      	movs	r2, #0
 8001224:	4619      	mov	r1, r3
 8001226:	4807      	ldr	r0, [pc, #28]	; (8001244 <MX_TIM2_Init+0xb0>)
 8001228:	f005 ff42 	bl	80070b0 <HAL_TIM_PWM_ConfigChannel>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8001232:	f000 fbc5 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001236:	4803      	ldr	r0, [pc, #12]	; (8001244 <MX_TIM2_Init+0xb0>)
 8001238:	f000 fe52 	bl	8001ee0 <HAL_TIM_MspPostInit>

}
 800123c:	bf00      	nop
 800123e:	3728      	adds	r7, #40	; 0x28
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20000464 	.word	0x20000464

08001248 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800124e:	f107 0310 	add.w	r3, r7, #16
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001258:	463b      	mov	r3, r7
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001264:	4b20      	ldr	r3, [pc, #128]	; (80012e8 <MX_TIM3_Init+0xa0>)
 8001266:	4a21      	ldr	r2, [pc, #132]	; (80012ec <MX_TIM3_Init+0xa4>)
 8001268:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 800126a:	4b1f      	ldr	r3, [pc, #124]	; (80012e8 <MX_TIM3_Init+0xa0>)
 800126c:	2253      	movs	r2, #83	; 0x53
 800126e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001270:	4b1d      	ldr	r3, [pc, #116]	; (80012e8 <MX_TIM3_Init+0xa0>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001276:	4b1c      	ldr	r3, [pc, #112]	; (80012e8 <MX_TIM3_Init+0xa0>)
 8001278:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800127c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800127e:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <MX_TIM3_Init+0xa0>)
 8001280:	2200      	movs	r2, #0
 8001282:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001284:	4b18      	ldr	r3, [pc, #96]	; (80012e8 <MX_TIM3_Init+0xa0>)
 8001286:	2200      	movs	r2, #0
 8001288:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800128a:	4817      	ldr	r0, [pc, #92]	; (80012e8 <MX_TIM3_Init+0xa0>)
 800128c:	f005 fbf4 	bl	8006a78 <HAL_TIM_IC_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001296:	f000 fb93 	bl	80019c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800129a:	2300      	movs	r3, #0
 800129c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800129e:	2300      	movs	r3, #0
 80012a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012a2:	f107 0310 	add.w	r3, r7, #16
 80012a6:	4619      	mov	r1, r3
 80012a8:	480f      	ldr	r0, [pc, #60]	; (80012e8 <MX_TIM3_Init+0xa0>)
 80012aa:	f006 fd27 	bl	8007cfc <HAL_TIMEx_MasterConfigSynchronization>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80012b4:	f000 fb84 	bl	80019c0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80012b8:	230a      	movs	r3, #10
 80012ba:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80012bc:	2301      	movs	r3, #1
 80012be:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80012c0:	2300      	movs	r3, #0
 80012c2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80012c8:	463b      	mov	r3, r7
 80012ca:	2200      	movs	r2, #0
 80012cc:	4619      	mov	r1, r3
 80012ce:	4806      	ldr	r0, [pc, #24]	; (80012e8 <MX_TIM3_Init+0xa0>)
 80012d0:	f005 fe52 	bl	8006f78 <HAL_TIM_IC_ConfigChannel>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80012da:	f000 fb71 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012de:	bf00      	nop
 80012e0:	3718      	adds	r7, #24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	200004ac 	.word	0x200004ac
 80012ec:	40000400 	.word	0x40000400

080012f0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08e      	sub	sp, #56	; 0x38
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001304:	f107 0320 	add.w	r3, r7, #32
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800130e:	1d3b      	adds	r3, r7, #4
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]
 800131a:	611a      	str	r2, [r3, #16]
 800131c:	615a      	str	r2, [r3, #20]
 800131e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001320:	4b2c      	ldr	r3, [pc, #176]	; (80013d4 <MX_TIM4_Init+0xe4>)
 8001322:	4a2d      	ldr	r2, [pc, #180]	; (80013d8 <MX_TIM4_Init+0xe8>)
 8001324:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840-1;
 8001326:	4b2b      	ldr	r3, [pc, #172]	; (80013d4 <MX_TIM4_Init+0xe4>)
 8001328:	f240 3247 	movw	r2, #839	; 0x347
 800132c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800132e:	4b29      	ldr	r3, [pc, #164]	; (80013d4 <MX_TIM4_Init+0xe4>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8001334:	4b27      	ldr	r3, [pc, #156]	; (80013d4 <MX_TIM4_Init+0xe4>)
 8001336:	2263      	movs	r2, #99	; 0x63
 8001338:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800133a:	4b26      	ldr	r3, [pc, #152]	; (80013d4 <MX_TIM4_Init+0xe4>)
 800133c:	2200      	movs	r2, #0
 800133e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001340:	4b24      	ldr	r3, [pc, #144]	; (80013d4 <MX_TIM4_Init+0xe4>)
 8001342:	2200      	movs	r2, #0
 8001344:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001346:	4823      	ldr	r0, [pc, #140]	; (80013d4 <MX_TIM4_Init+0xe4>)
 8001348:	f005 f8a8 	bl	800649c <HAL_TIM_Base_Init>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001352:	f000 fb35 	bl	80019c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001356:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800135a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800135c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001360:	4619      	mov	r1, r3
 8001362:	481c      	ldr	r0, [pc, #112]	; (80013d4 <MX_TIM4_Init+0xe4>)
 8001364:	f005 ff66 	bl	8007234 <HAL_TIM_ConfigClockSource>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800136e:	f000 fb27 	bl	80019c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001372:	4818      	ldr	r0, [pc, #96]	; (80013d4 <MX_TIM4_Init+0xe4>)
 8001374:	f005 f952 	bl	800661c <HAL_TIM_PWM_Init>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800137e:	f000 fb1f 	bl	80019c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001382:	2300      	movs	r3, #0
 8001384:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001386:	2300      	movs	r3, #0
 8001388:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800138a:	f107 0320 	add.w	r3, r7, #32
 800138e:	4619      	mov	r1, r3
 8001390:	4810      	ldr	r0, [pc, #64]	; (80013d4 <MX_TIM4_Init+0xe4>)
 8001392:	f006 fcb3 	bl	8007cfc <HAL_TIMEx_MasterConfigSynchronization>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800139c:	f000 fb10 	bl	80019c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013a0:	2360      	movs	r3, #96	; 0x60
 80013a2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 70-1;
 80013a4:	2345      	movs	r3, #69	; 0x45
 80013a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013a8:	2300      	movs	r3, #0
 80013aa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80013ac:	2304      	movs	r3, #4
 80013ae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013b0:	1d3b      	adds	r3, r7, #4
 80013b2:	2200      	movs	r2, #0
 80013b4:	4619      	mov	r1, r3
 80013b6:	4807      	ldr	r0, [pc, #28]	; (80013d4 <MX_TIM4_Init+0xe4>)
 80013b8:	f005 fe7a 	bl	80070b0 <HAL_TIM_PWM_ConfigChannel>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80013c2:	f000 fafd 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80013c6:	4803      	ldr	r0, [pc, #12]	; (80013d4 <MX_TIM4_Init+0xe4>)
 80013c8:	f000 fd8a 	bl	8001ee0 <HAL_TIM_MspPostInit>

}
 80013cc:	bf00      	nop
 80013ce:	3738      	adds	r7, #56	; 0x38
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	200004f4 	.word	0x200004f4
 80013d8:	40000800 	.word	0x40000800

080013dc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08e      	sub	sp, #56	; 0x38
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f0:	f107 0320 	add.w	r3, r7, #32
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]
 8001408:	615a      	str	r2, [r3, #20]
 800140a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800140c:	4b2c      	ldr	r3, [pc, #176]	; (80014c0 <MX_TIM5_Init+0xe4>)
 800140e:	4a2d      	ldr	r2, [pc, #180]	; (80014c4 <MX_TIM5_Init+0xe8>)
 8001410:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 52.5-1;
 8001412:	4b2b      	ldr	r3, [pc, #172]	; (80014c0 <MX_TIM5_Init+0xe4>)
 8001414:	2233      	movs	r2, #51	; 0x33
 8001416:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001418:	4b29      	ldr	r3, [pc, #164]	; (80014c0 <MX_TIM5_Init+0xe4>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 400-1;
 800141e:	4b28      	ldr	r3, [pc, #160]	; (80014c0 <MX_TIM5_Init+0xe4>)
 8001420:	f240 128f 	movw	r2, #399	; 0x18f
 8001424:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001426:	4b26      	ldr	r3, [pc, #152]	; (80014c0 <MX_TIM5_Init+0xe4>)
 8001428:	2200      	movs	r2, #0
 800142a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800142c:	4b24      	ldr	r3, [pc, #144]	; (80014c0 <MX_TIM5_Init+0xe4>)
 800142e:	2200      	movs	r2, #0
 8001430:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001432:	4823      	ldr	r0, [pc, #140]	; (80014c0 <MX_TIM5_Init+0xe4>)
 8001434:	f005 f832 	bl	800649c <HAL_TIM_Base_Init>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800143e:	f000 fabf 	bl	80019c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001442:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001446:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001448:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800144c:	4619      	mov	r1, r3
 800144e:	481c      	ldr	r0, [pc, #112]	; (80014c0 <MX_TIM5_Init+0xe4>)
 8001450:	f005 fef0 	bl	8007234 <HAL_TIM_ConfigClockSource>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800145a:	f000 fab1 	bl	80019c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800145e:	4818      	ldr	r0, [pc, #96]	; (80014c0 <MX_TIM5_Init+0xe4>)
 8001460:	f005 f8dc 	bl	800661c <HAL_TIM_PWM_Init>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800146a:	f000 faa9 	bl	80019c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800146e:	2300      	movs	r3, #0
 8001470:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001472:	2300      	movs	r3, #0
 8001474:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001476:	f107 0320 	add.w	r3, r7, #32
 800147a:	4619      	mov	r1, r3
 800147c:	4810      	ldr	r0, [pc, #64]	; (80014c0 <MX_TIM5_Init+0xe4>)
 800147e:	f006 fc3d 	bl	8007cfc <HAL_TIMEx_MasterConfigSynchronization>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001488:	f000 fa9a 	bl	80019c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800148c:	2360      	movs	r3, #96	; 0x60
 800148e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001490:	2300      	movs	r3, #0
 8001492:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001494:	2300      	movs	r3, #0
 8001496:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800149c:	1d3b      	adds	r3, r7, #4
 800149e:	220c      	movs	r2, #12
 80014a0:	4619      	mov	r1, r3
 80014a2:	4807      	ldr	r0, [pc, #28]	; (80014c0 <MX_TIM5_Init+0xe4>)
 80014a4:	f005 fe04 	bl	80070b0 <HAL_TIM_PWM_ConfigChannel>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 80014ae:	f000 fa87 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80014b2:	4803      	ldr	r0, [pc, #12]	; (80014c0 <MX_TIM5_Init+0xe4>)
 80014b4:	f000 fd14 	bl	8001ee0 <HAL_TIM_MspPostInit>

}
 80014b8:	bf00      	nop
 80014ba:	3738      	adds	r7, #56	; 0x38
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	2000053c 	.word	0x2000053c
 80014c4:	40000c00 	.word	0x40000c00

080014c8 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08c      	sub	sp, #48	; 0x30
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ce:	f107 0320 	add.w	r3, r7, #32
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]
 80014da:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014dc:	1d3b      	adds	r3, r7, #4
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	60da      	str	r2, [r3, #12]
 80014e8:	611a      	str	r2, [r3, #16]
 80014ea:	615a      	str	r2, [r3, #20]
 80014ec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80014ee:	4b25      	ldr	r3, [pc, #148]	; (8001584 <MX_TIM9_Init+0xbc>)
 80014f0:	4a25      	ldr	r2, [pc, #148]	; (8001588 <MX_TIM9_Init+0xc0>)
 80014f2:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 105-1;
 80014f4:	4b23      	ldr	r3, [pc, #140]	; (8001584 <MX_TIM9_Init+0xbc>)
 80014f6:	2268      	movs	r2, #104	; 0x68
 80014f8:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014fa:	4b22      	ldr	r3, [pc, #136]	; (8001584 <MX_TIM9_Init+0xbc>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 400-1;
 8001500:	4b20      	ldr	r3, [pc, #128]	; (8001584 <MX_TIM9_Init+0xbc>)
 8001502:	f240 128f 	movw	r2, #399	; 0x18f
 8001506:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001508:	4b1e      	ldr	r3, [pc, #120]	; (8001584 <MX_TIM9_Init+0xbc>)
 800150a:	2200      	movs	r2, #0
 800150c:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800150e:	4b1d      	ldr	r3, [pc, #116]	; (8001584 <MX_TIM9_Init+0xbc>)
 8001510:	2200      	movs	r2, #0
 8001512:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001514:	481b      	ldr	r0, [pc, #108]	; (8001584 <MX_TIM9_Init+0xbc>)
 8001516:	f004 ffc1 	bl	800649c <HAL_TIM_Base_Init>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8001520:	f000 fa4e 	bl	80019c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001524:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001528:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800152a:	f107 0320 	add.w	r3, r7, #32
 800152e:	4619      	mov	r1, r3
 8001530:	4814      	ldr	r0, [pc, #80]	; (8001584 <MX_TIM9_Init+0xbc>)
 8001532:	f005 fe7f 	bl	8007234 <HAL_TIM_ConfigClockSource>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 800153c:	f000 fa40 	bl	80019c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001540:	4810      	ldr	r0, [pc, #64]	; (8001584 <MX_TIM9_Init+0xbc>)
 8001542:	f005 f86b 	bl	800661c <HAL_TIM_PWM_Init>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 800154c:	f000 fa38 	bl	80019c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001550:	2360      	movs	r3, #96	; 0x60
 8001552:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 200-1;
 8001554:	23c7      	movs	r3, #199	; 0xc7
 8001556:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001558:	2300      	movs	r3, #0
 800155a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001560:	1d3b      	adds	r3, r7, #4
 8001562:	2200      	movs	r2, #0
 8001564:	4619      	mov	r1, r3
 8001566:	4807      	ldr	r0, [pc, #28]	; (8001584 <MX_TIM9_Init+0xbc>)
 8001568:	f005 fda2 	bl	80070b0 <HAL_TIM_PWM_ConfigChannel>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 8001572:	f000 fa25 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001576:	4803      	ldr	r0, [pc, #12]	; (8001584 <MX_TIM9_Init+0xbc>)
 8001578:	f000 fcb2 	bl	8001ee0 <HAL_TIM_MspPostInit>

}
 800157c:	bf00      	nop
 800157e:	3730      	adds	r7, #48	; 0x30
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20000584 	.word	0x20000584
 8001588:	40014000 	.word	0x40014000

0800158c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001590:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <MX_TIM10_Init+0x40>)
 8001592:	4a0f      	ldr	r2, [pc, #60]	; (80015d0 <MX_TIM10_Init+0x44>)
 8001594:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 8001596:	4b0d      	ldr	r3, [pc, #52]	; (80015cc <MX_TIM10_Init+0x40>)
 8001598:	22a7      	movs	r2, #167	; 0xa7
 800159a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800159c:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <MX_TIM10_Init+0x40>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000-1;
 80015a2:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <MX_TIM10_Init+0x40>)
 80015a4:	f242 720f 	movw	r2, #9999	; 0x270f
 80015a8:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015aa:	4b08      	ldr	r3, [pc, #32]	; (80015cc <MX_TIM10_Init+0x40>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <MX_TIM10_Init+0x40>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80015b6:	4805      	ldr	r0, [pc, #20]	; (80015cc <MX_TIM10_Init+0x40>)
 80015b8:	f004 ff70 	bl	800649c <HAL_TIM_Base_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80015c2:	f000 f9fd 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	200005cc 	.word	0x200005cc
 80015d0:	40014400 	.word	0x40014400

080015d4 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80015d8:	4b0e      	ldr	r3, [pc, #56]	; (8001614 <MX_TIM11_Init+0x40>)
 80015da:	4a0f      	ldr	r2, [pc, #60]	; (8001618 <MX_TIM11_Init+0x44>)
 80015dc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 168-1;
 80015de:	4b0d      	ldr	r3, [pc, #52]	; (8001614 <MX_TIM11_Init+0x40>)
 80015e0:	22a7      	movs	r2, #167	; 0xa7
 80015e2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e4:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <MX_TIM11_Init+0x40>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80015ea:	4b0a      	ldr	r3, [pc, #40]	; (8001614 <MX_TIM11_Init+0x40>)
 80015ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015f0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f2:	4b08      	ldr	r3, [pc, #32]	; (8001614 <MX_TIM11_Init+0x40>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015f8:	4b06      	ldr	r3, [pc, #24]	; (8001614 <MX_TIM11_Init+0x40>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80015fe:	4805      	ldr	r0, [pc, #20]	; (8001614 <MX_TIM11_Init+0x40>)
 8001600:	f004 ff4c 	bl	800649c <HAL_TIM_Base_Init>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800160a:	f000 f9d9 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000614 	.word	0x20000614
 8001618:	40014800 	.word	0x40014800

0800161c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001620:	4b11      	ldr	r3, [pc, #68]	; (8001668 <MX_USART3_UART_Init+0x4c>)
 8001622:	4a12      	ldr	r2, [pc, #72]	; (800166c <MX_USART3_UART_Init+0x50>)
 8001624:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001626:	4b10      	ldr	r3, [pc, #64]	; (8001668 <MX_USART3_UART_Init+0x4c>)
 8001628:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800162c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800162e:	4b0e      	ldr	r3, [pc, #56]	; (8001668 <MX_USART3_UART_Init+0x4c>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001634:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <MX_USART3_UART_Init+0x4c>)
 8001636:	2200      	movs	r2, #0
 8001638:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800163a:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <MX_USART3_UART_Init+0x4c>)
 800163c:	2200      	movs	r2, #0
 800163e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001640:	4b09      	ldr	r3, [pc, #36]	; (8001668 <MX_USART3_UART_Init+0x4c>)
 8001642:	220c      	movs	r2, #12
 8001644:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001646:	4b08      	ldr	r3, [pc, #32]	; (8001668 <MX_USART3_UART_Init+0x4c>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <MX_USART3_UART_Init+0x4c>)
 800164e:	2200      	movs	r2, #0
 8001650:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001652:	4805      	ldr	r0, [pc, #20]	; (8001668 <MX_USART3_UART_Init+0x4c>)
 8001654:	f006 fbe2 	bl	8007e1c <HAL_UART_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800165e:	f000 f9af 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	2000065c 	.word	0x2000065c
 800166c:	40004800 	.word	0x40004800

08001670 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001674:	4b11      	ldr	r3, [pc, #68]	; (80016bc <MX_USART6_UART_Init+0x4c>)
 8001676:	4a12      	ldr	r2, [pc, #72]	; (80016c0 <MX_USART6_UART_Init+0x50>)
 8001678:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800167a:	4b10      	ldr	r3, [pc, #64]	; (80016bc <MX_USART6_UART_Init+0x4c>)
 800167c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001680:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001682:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <MX_USART6_UART_Init+0x4c>)
 8001684:	2200      	movs	r2, #0
 8001686:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001688:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <MX_USART6_UART_Init+0x4c>)
 800168a:	2200      	movs	r2, #0
 800168c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800168e:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <MX_USART6_UART_Init+0x4c>)
 8001690:	2200      	movs	r2, #0
 8001692:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001694:	4b09      	ldr	r3, [pc, #36]	; (80016bc <MX_USART6_UART_Init+0x4c>)
 8001696:	220c      	movs	r2, #12
 8001698:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800169a:	4b08      	ldr	r3, [pc, #32]	; (80016bc <MX_USART6_UART_Init+0x4c>)
 800169c:	2200      	movs	r2, #0
 800169e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a0:	4b06      	ldr	r3, [pc, #24]	; (80016bc <MX_USART6_UART_Init+0x4c>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80016a6:	4805      	ldr	r0, [pc, #20]	; (80016bc <MX_USART6_UART_Init+0x4c>)
 80016a8:	f006 fbb8 	bl	8007e1c <HAL_UART_Init>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80016b2:	f000 f985 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	200006a0 	.word	0x200006a0
 80016c0:	40011400 	.word	0x40011400

080016c4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80016c8:	4b14      	ldr	r3, [pc, #80]	; (800171c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016ca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80016ce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80016d0:	4b12      	ldr	r3, [pc, #72]	; (800171c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016d2:	2204      	movs	r2, #4
 80016d4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80016d6:	4b11      	ldr	r3, [pc, #68]	; (800171c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016d8:	2202      	movs	r2, #2
 80016da:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80016dc:	4b0f      	ldr	r3, [pc, #60]	; (800171c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016de:	2200      	movs	r2, #0
 80016e0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80016e2:	4b0e      	ldr	r3, [pc, #56]	; (800171c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016e4:	2202      	movs	r2, #2
 80016e6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80016e8:	4b0c      	ldr	r3, [pc, #48]	; (800171c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016ea:	2201      	movs	r2, #1
 80016ec:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80016ee:	4b0b      	ldr	r3, [pc, #44]	; (800171c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80016f4:	4b09      	ldr	r3, [pc, #36]	; (800171c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80016fa:	4b08      	ldr	r3, [pc, #32]	; (800171c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016fc:	2201      	movs	r2, #1
 80016fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001700:	4b06      	ldr	r3, [pc, #24]	; (800171c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001702:	2200      	movs	r2, #0
 8001704:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001706:	4805      	ldr	r0, [pc, #20]	; (800171c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001708:	f003 fc54 	bl	8004fb4 <HAL_PCD_Init>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001712:	f000 f955 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	200006e4 	.word	0x200006e4

08001720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b08e      	sub	sp, #56	; 0x38
 8001724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001726:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	605a      	str	r2, [r3, #4]
 8001730:	609a      	str	r2, [r3, #8]
 8001732:	60da      	str	r2, [r3, #12]
 8001734:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	623b      	str	r3, [r7, #32]
 800173a:	4b99      	ldr	r3, [pc, #612]	; (80019a0 <MX_GPIO_Init+0x280>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	4a98      	ldr	r2, [pc, #608]	; (80019a0 <MX_GPIO_Init+0x280>)
 8001740:	f043 0310 	orr.w	r3, r3, #16
 8001744:	6313      	str	r3, [r2, #48]	; 0x30
 8001746:	4b96      	ldr	r3, [pc, #600]	; (80019a0 <MX_GPIO_Init+0x280>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	f003 0310 	and.w	r3, r3, #16
 800174e:	623b      	str	r3, [r7, #32]
 8001750:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	61fb      	str	r3, [r7, #28]
 8001756:	4b92      	ldr	r3, [pc, #584]	; (80019a0 <MX_GPIO_Init+0x280>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	4a91      	ldr	r2, [pc, #580]	; (80019a0 <MX_GPIO_Init+0x280>)
 800175c:	f043 0304 	orr.w	r3, r3, #4
 8001760:	6313      	str	r3, [r2, #48]	; 0x30
 8001762:	4b8f      	ldr	r3, [pc, #572]	; (80019a0 <MX_GPIO_Init+0x280>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	f003 0304 	and.w	r3, r3, #4
 800176a:	61fb      	str	r3, [r7, #28]
 800176c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	61bb      	str	r3, [r7, #24]
 8001772:	4b8b      	ldr	r3, [pc, #556]	; (80019a0 <MX_GPIO_Init+0x280>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	4a8a      	ldr	r2, [pc, #552]	; (80019a0 <MX_GPIO_Init+0x280>)
 8001778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800177c:	6313      	str	r3, [r2, #48]	; 0x30
 800177e:	4b88      	ldr	r3, [pc, #544]	; (80019a0 <MX_GPIO_Init+0x280>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001786:	61bb      	str	r3, [r7, #24]
 8001788:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	617b      	str	r3, [r7, #20]
 800178e:	4b84      	ldr	r3, [pc, #528]	; (80019a0 <MX_GPIO_Init+0x280>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	4a83      	ldr	r2, [pc, #524]	; (80019a0 <MX_GPIO_Init+0x280>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	6313      	str	r3, [r2, #48]	; 0x30
 800179a:	4b81      	ldr	r3, [pc, #516]	; (80019a0 <MX_GPIO_Init+0x280>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	617b      	str	r3, [r7, #20]
 80017a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	613b      	str	r3, [r7, #16]
 80017aa:	4b7d      	ldr	r3, [pc, #500]	; (80019a0 <MX_GPIO_Init+0x280>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	4a7c      	ldr	r2, [pc, #496]	; (80019a0 <MX_GPIO_Init+0x280>)
 80017b0:	f043 0302 	orr.w	r3, r3, #2
 80017b4:	6313      	str	r3, [r2, #48]	; 0x30
 80017b6:	4b7a      	ldr	r3, [pc, #488]	; (80019a0 <MX_GPIO_Init+0x280>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	613b      	str	r3, [r7, #16]
 80017c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	4b76      	ldr	r3, [pc, #472]	; (80019a0 <MX_GPIO_Init+0x280>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	4a75      	ldr	r2, [pc, #468]	; (80019a0 <MX_GPIO_Init+0x280>)
 80017cc:	f043 0320 	orr.w	r3, r3, #32
 80017d0:	6313      	str	r3, [r2, #48]	; 0x30
 80017d2:	4b73      	ldr	r3, [pc, #460]	; (80019a0 <MX_GPIO_Init+0x280>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	f003 0320 	and.w	r3, r3, #32
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	60bb      	str	r3, [r7, #8]
 80017e2:	4b6f      	ldr	r3, [pc, #444]	; (80019a0 <MX_GPIO_Init+0x280>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	4a6e      	ldr	r2, [pc, #440]	; (80019a0 <MX_GPIO_Init+0x280>)
 80017e8:	f043 0308 	orr.w	r3, r3, #8
 80017ec:	6313      	str	r3, [r2, #48]	; 0x30
 80017ee:	4b6c      	ldr	r3, [pc, #432]	; (80019a0 <MX_GPIO_Init+0x280>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	f003 0308 	and.w	r3, r3, #8
 80017f6:	60bb      	str	r3, [r7, #8]
 80017f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	607b      	str	r3, [r7, #4]
 80017fe:	4b68      	ldr	r3, [pc, #416]	; (80019a0 <MX_GPIO_Init+0x280>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	4a67      	ldr	r2, [pc, #412]	; (80019a0 <MX_GPIO_Init+0x280>)
 8001804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001808:	6313      	str	r3, [r2, #48]	; 0x30
 800180a:	4b65      	ldr	r3, [pc, #404]	; (80019a0 <MX_GPIO_Init+0x280>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001812:	607b      	str	r3, [r7, #4]
 8001814:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 8001816:	2200      	movs	r2, #0
 8001818:	2101      	movs	r1, #1
 800181a:	4862      	ldr	r0, [pc, #392]	; (80019a4 <MX_GPIO_Init+0x284>)
 800181c:	f002 feea 	bl	80045f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|FND_A_Pin|FND_B_Pin|FND_G_Pin
 8001820:	2200      	movs	r2, #0
 8001822:	f24d 01ff 	movw	r1, #53503	; 0xd0ff
 8001826:	4860      	ldr	r0, [pc, #384]	; (80019a8 <MX_GPIO_Init+0x288>)
 8001828:	f002 fee4 	bl	80045f4 <HAL_GPIO_WritePin>
                          |LD3_Pin|FND_DP_Pin|FND_C_Pin|FND_D_Pin
                          |FND_E_Pin|FND_F_Pin|LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, GPIO_PIN_RESET);
 800182c:	2200      	movs	r2, #0
 800182e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001832:	485e      	ldr	r0, [pc, #376]	; (80019ac <MX_GPIO_Init+0x28c>)
 8001834:	f002 fede 	bl	80045f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, IN1_DCMOTOR_Pin|IN2_DCMOTOR_Pin|FAN_ROTATE_DERECTION_LED_Pin, GPIO_PIN_RESET);
 8001838:	2200      	movs	r2, #0
 800183a:	f44f 510c 	mov.w	r1, #8960	; 0x2300
 800183e:	485c      	ldr	r0, [pc, #368]	; (80019b0 <MX_GPIO_Init+0x290>)
 8001840:	f002 fed8 	bl	80045f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001844:	2200      	movs	r2, #0
 8001846:	2140      	movs	r1, #64	; 0x40
 8001848:	485a      	ldr	r0, [pc, #360]	; (80019b4 <MX_GPIO_Init+0x294>)
 800184a:	f002 fed3 	bl	80045f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FND_D1_Pin|FND_D2_Pin|FND_D3_Pin|FND_D4_Pin, GPIO_PIN_RESET);
 800184e:	2200      	movs	r2, #0
 8001850:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8001854:	4858      	ldr	r0, [pc, #352]	; (80019b8 <MX_GPIO_Init+0x298>)
 8001856:	f002 fecd 	bl	80045f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LEDBAR0_Pin|LEDBAR1_Pin|LEDBAR2_Pin|LEDBAR3_Pin
 800185a:	2200      	movs	r2, #0
 800185c:	21ff      	movs	r1, #255	; 0xff
 800185e:	4857      	ldr	r0, [pc, #348]	; (80019bc <MX_GPIO_Init+0x29c>)
 8001860:	f002 fec8 	bl	80045f4 <HAL_GPIO_WritePin>
                          |LEDBAR4_Pin|LEDBAR5_Pin|LEDBAR6_Pin|LEDBAR7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001864:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001868:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800186a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800186e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001874:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001878:	4619      	mov	r1, r3
 800187a:	484f      	ldr	r0, [pc, #316]	; (80019b8 <MX_GPIO_Init+0x298>)
 800187c:	f002 fcf6 	bl	800426c <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 8001880:	2301      	movs	r3, #1
 8001882:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001884:	2301      	movs	r3, #1
 8001886:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188c:	2300      	movs	r3, #0
 800188e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8001890:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001894:	4619      	mov	r1, r3
 8001896:	4843      	ldr	r0, [pc, #268]	; (80019a4 <MX_GPIO_Init+0x284>)
 8001898:	f002 fce8 	bl	800426c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin FND_A_Pin FND_B_Pin FND_G_Pin
                           LD3_Pin FND_DP_Pin FND_C_Pin FND_D_Pin
                           FND_E_Pin FND_F_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|FND_A_Pin|FND_B_Pin|FND_G_Pin
 800189c:	f24d 03ff 	movw	r3, #53503	; 0xd0ff
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24
                          |LD3_Pin|FND_DP_Pin|FND_C_Pin|FND_D_Pin
                          |FND_E_Pin|FND_F_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a2:	2301      	movs	r3, #1
 80018a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018aa:	2300      	movs	r3, #0
 80018ac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b2:	4619      	mov	r1, r3
 80018b4:	483c      	ldr	r0, [pc, #240]	; (80019a8 <MX_GPIO_Init+0x288>)
 80018b6:	f002 fcd9 	bl	800426c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULTRASONIC_TRIGGER_Pin */
  GPIO_InitStruct.Pin = ULTRASONIC_TRIGGER_Pin;
 80018ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c0:	2301      	movs	r3, #1
 80018c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c8:	2300      	movs	r3, #0
 80018ca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ULTRASONIC_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 80018cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018d0:	4619      	mov	r1, r3
 80018d2:	4836      	ldr	r0, [pc, #216]	; (80019ac <MX_GPIO_Init+0x28c>)
 80018d4:	f002 fcca 	bl	800426c <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_DCMOTOR_Pin IN2_DCMOTOR_Pin FAN_ROTATE_DERECTION_LED_Pin */
  GPIO_InitStruct.Pin = IN1_DCMOTOR_Pin|IN2_DCMOTOR_Pin|FAN_ROTATE_DERECTION_LED_Pin;
 80018d8:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 80018dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018de:	2301      	movs	r3, #1
 80018e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e6:	2300      	movs	r3, #0
 80018e8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ee:	4619      	mov	r1, r3
 80018f0:	482f      	ldr	r0, [pc, #188]	; (80019b0 <MX_GPIO_Init+0x290>)
 80018f2:	f002 fcbb 	bl	800426c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON3_Pin BUTTON2_Pin BUTTON1_Pin BUTTON0_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON2_Pin|BUTTON1_Pin|BUTTON0_Pin;
 80018f6:	f44f 4354 	mov.w	r3, #54272	; 0xd400
 80018fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018fc:	2300      	movs	r3, #0
 80018fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	2300      	movs	r3, #0
 8001902:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001904:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001908:	4619      	mov	r1, r3
 800190a:	4829      	ldr	r0, [pc, #164]	; (80019b0 <MX_GPIO_Init+0x290>)
 800190c:	f002 fcae 	bl	800426c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON4_Pin */
  GPIO_InitStruct.Pin = BUTTON4_Pin;
 8001910:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001914:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001916:	2300      	movs	r3, #0
 8001918:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191a:	2300      	movs	r3, #0
 800191c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BUTTON4_GPIO_Port, &GPIO_InitStruct);
 800191e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001922:	4619      	mov	r1, r3
 8001924:	4820      	ldr	r0, [pc, #128]	; (80019a8 <MX_GPIO_Init+0x288>)
 8001926:	f002 fca1 	bl	800426c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800192a:	2340      	movs	r3, #64	; 0x40
 800192c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800192e:	2301      	movs	r3, #1
 8001930:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001932:	2300      	movs	r3, #0
 8001934:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001936:	2300      	movs	r3, #0
 8001938:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800193a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800193e:	4619      	mov	r1, r3
 8001940:	481c      	ldr	r0, [pc, #112]	; (80019b4 <MX_GPIO_Init+0x294>)
 8001942:	f002 fc93 	bl	800426c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001946:	2380      	movs	r3, #128	; 0x80
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800194a:	2300      	movs	r3, #0
 800194c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001956:	4619      	mov	r1, r3
 8001958:	4816      	ldr	r0, [pc, #88]	; (80019b4 <MX_GPIO_Init+0x294>)
 800195a:	f002 fc87 	bl	800426c <HAL_GPIO_Init>

  /*Configure GPIO pins : FND_D1_Pin FND_D2_Pin FND_D3_Pin FND_D4_Pin */
  GPIO_InitStruct.Pin = FND_D1_Pin|FND_D2_Pin|FND_D3_Pin|FND_D4_Pin;
 800195e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001962:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001964:	2301      	movs	r3, #1
 8001966:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196c:	2300      	movs	r3, #0
 800196e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001970:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001974:	4619      	mov	r1, r3
 8001976:	4810      	ldr	r0, [pc, #64]	; (80019b8 <MX_GPIO_Init+0x298>)
 8001978:	f002 fc78 	bl	800426c <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDBAR0_Pin LEDBAR1_Pin LEDBAR2_Pin LEDBAR3_Pin
                           LEDBAR4_Pin LEDBAR5_Pin LEDBAR6_Pin LEDBAR7_Pin */
  GPIO_InitStruct.Pin = LEDBAR0_Pin|LEDBAR1_Pin|LEDBAR2_Pin|LEDBAR3_Pin
 800197c:	23ff      	movs	r3, #255	; 0xff
 800197e:	627b      	str	r3, [r7, #36]	; 0x24
                          |LEDBAR4_Pin|LEDBAR5_Pin|LEDBAR6_Pin|LEDBAR7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001980:	2301      	movs	r3, #1
 8001982:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001988:	2300      	movs	r3, #0
 800198a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800198c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001990:	4619      	mov	r1, r3
 8001992:	480a      	ldr	r0, [pc, #40]	; (80019bc <MX_GPIO_Init+0x29c>)
 8001994:	f002 fc6a 	bl	800426c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001998:	bf00      	nop
 800199a:	3738      	adds	r7, #56	; 0x38
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40023800 	.word	0x40023800
 80019a4:	40020000 	.word	0x40020000
 80019a8:	40020400 	.word	0x40020400
 80019ac:	40021400 	.word	0x40021400
 80019b0:	40021000 	.word	0x40021000
 80019b4:	40021800 	.word	0x40021800
 80019b8:	40020800 	.word	0x40020800
 80019bc:	40020c00 	.word	0x40020c00

080019c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019c4:	b672      	cpsid	i
}
 80019c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019c8:	e7fe      	b.n	80019c8 <Error_Handler+0x8>
	...

080019cc <open_WashingMachine_Lid>:
	// 서보모터 데이터 시트에서 1.5ms동안 유지되는 high 신호는 90도 회전으로 본다. ==> 0.00002 * 75개
	// 서보모터 데이터 시트에서 1ms동안 유지되는 high 신호는 0도 회전으로 본다. ==> 0.00002 * 50개
}

void open_WashingMachine_Lid(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 50);
 80019d0:	4b04      	ldr	r3, [pc, #16]	; (80019e4 <open_WashingMachine_Lid+0x18>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2232      	movs	r2, #50	; 0x32
 80019d6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	20000464 	.word	0x20000464

080019e8 <close_WashingMachine_Lid>:

void close_WashingMachine_Lid(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 100);
 80019ec:	4b04      	ldr	r3, [pc, #16]	; (8001a00 <close_WashingMachine_Lid+0x18>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2264      	movs	r2, #100	; 0x64
 80019f2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	20000464 	.word	0x20000464

08001a04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	607b      	str	r3, [r7, #4]
 8001a0e:	4b10      	ldr	r3, [pc, #64]	; (8001a50 <HAL_MspInit+0x4c>)
 8001a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a12:	4a0f      	ldr	r2, [pc, #60]	; (8001a50 <HAL_MspInit+0x4c>)
 8001a14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a18:	6453      	str	r3, [r2, #68]	; 0x44
 8001a1a:	4b0d      	ldr	r3, [pc, #52]	; (8001a50 <HAL_MspInit+0x4c>)
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a22:	607b      	str	r3, [r7, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	603b      	str	r3, [r7, #0]
 8001a2a:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <HAL_MspInit+0x4c>)
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2e:	4a08      	ldr	r2, [pc, #32]	; (8001a50 <HAL_MspInit+0x4c>)
 8001a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a34:	6413      	str	r3, [r2, #64]	; 0x40
 8001a36:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <HAL_MspInit+0x4c>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3e:	603b      	str	r3, [r7, #0]
 8001a40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	40023800 	.word	0x40023800

08001a54 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08e      	sub	sp, #56	; 0x38
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	609a      	str	r2, [r3, #8]
 8001a68:	60da      	str	r2, [r3, #12]
 8001a6a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a55      	ldr	r2, [pc, #340]	; (8001bc8 <HAL_ETH_MspInit+0x174>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	f040 80a4 	bne.w	8001bc0 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001a78:	2300      	movs	r3, #0
 8001a7a:	623b      	str	r3, [r7, #32]
 8001a7c:	4b53      	ldr	r3, [pc, #332]	; (8001bcc <HAL_ETH_MspInit+0x178>)
 8001a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a80:	4a52      	ldr	r2, [pc, #328]	; (8001bcc <HAL_ETH_MspInit+0x178>)
 8001a82:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a86:	6313      	str	r3, [r2, #48]	; 0x30
 8001a88:	4b50      	ldr	r3, [pc, #320]	; (8001bcc <HAL_ETH_MspInit+0x178>)
 8001a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a90:	623b      	str	r3, [r7, #32]
 8001a92:	6a3b      	ldr	r3, [r7, #32]
 8001a94:	2300      	movs	r3, #0
 8001a96:	61fb      	str	r3, [r7, #28]
 8001a98:	4b4c      	ldr	r3, [pc, #304]	; (8001bcc <HAL_ETH_MspInit+0x178>)
 8001a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9c:	4a4b      	ldr	r2, [pc, #300]	; (8001bcc <HAL_ETH_MspInit+0x178>)
 8001a9e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001aa2:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa4:	4b49      	ldr	r3, [pc, #292]	; (8001bcc <HAL_ETH_MspInit+0x178>)
 8001aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001aac:	61fb      	str	r3, [r7, #28]
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	61bb      	str	r3, [r7, #24]
 8001ab4:	4b45      	ldr	r3, [pc, #276]	; (8001bcc <HAL_ETH_MspInit+0x178>)
 8001ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab8:	4a44      	ldr	r2, [pc, #272]	; (8001bcc <HAL_ETH_MspInit+0x178>)
 8001aba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001abe:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac0:	4b42      	ldr	r3, [pc, #264]	; (8001bcc <HAL_ETH_MspInit+0x178>)
 8001ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ac8:	61bb      	str	r3, [r7, #24]
 8001aca:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001acc:	2300      	movs	r3, #0
 8001ace:	617b      	str	r3, [r7, #20]
 8001ad0:	4b3e      	ldr	r3, [pc, #248]	; (8001bcc <HAL_ETH_MspInit+0x178>)
 8001ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad4:	4a3d      	ldr	r2, [pc, #244]	; (8001bcc <HAL_ETH_MspInit+0x178>)
 8001ad6:	f043 0304 	orr.w	r3, r3, #4
 8001ada:	6313      	str	r3, [r2, #48]	; 0x30
 8001adc:	4b3b      	ldr	r3, [pc, #236]	; (8001bcc <HAL_ETH_MspInit+0x178>)
 8001ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae0:	f003 0304 	and.w	r3, r3, #4
 8001ae4:	617b      	str	r3, [r7, #20]
 8001ae6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae8:	2300      	movs	r3, #0
 8001aea:	613b      	str	r3, [r7, #16]
 8001aec:	4b37      	ldr	r3, [pc, #220]	; (8001bcc <HAL_ETH_MspInit+0x178>)
 8001aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af0:	4a36      	ldr	r2, [pc, #216]	; (8001bcc <HAL_ETH_MspInit+0x178>)
 8001af2:	f043 0301 	orr.w	r3, r3, #1
 8001af6:	6313      	str	r3, [r2, #48]	; 0x30
 8001af8:	4b34      	ldr	r3, [pc, #208]	; (8001bcc <HAL_ETH_MspInit+0x178>)
 8001afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afc:	f003 0301 	and.w	r3, r3, #1
 8001b00:	613b      	str	r3, [r7, #16]
 8001b02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b04:	2300      	movs	r3, #0
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	4b30      	ldr	r3, [pc, #192]	; (8001bcc <HAL_ETH_MspInit+0x178>)
 8001b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0c:	4a2f      	ldr	r2, [pc, #188]	; (8001bcc <HAL_ETH_MspInit+0x178>)
 8001b0e:	f043 0302 	orr.w	r3, r3, #2
 8001b12:	6313      	str	r3, [r2, #48]	; 0x30
 8001b14:	4b2d      	ldr	r3, [pc, #180]	; (8001bcc <HAL_ETH_MspInit+0x178>)
 8001b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b18:	f003 0302 	and.w	r3, r3, #2
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b20:	2300      	movs	r3, #0
 8001b22:	60bb      	str	r3, [r7, #8]
 8001b24:	4b29      	ldr	r3, [pc, #164]	; (8001bcc <HAL_ETH_MspInit+0x178>)
 8001b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b28:	4a28      	ldr	r2, [pc, #160]	; (8001bcc <HAL_ETH_MspInit+0x178>)
 8001b2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b2e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b30:	4b26      	ldr	r3, [pc, #152]	; (8001bcc <HAL_ETH_MspInit+0x178>)
 8001b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b38:	60bb      	str	r3, [r7, #8]
 8001b3a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001b3c:	2332      	movs	r3, #50	; 0x32
 8001b3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b40:	2302      	movs	r3, #2
 8001b42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b4c:	230b      	movs	r3, #11
 8001b4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b54:	4619      	mov	r1, r3
 8001b56:	481e      	ldr	r0, [pc, #120]	; (8001bd0 <HAL_ETH_MspInit+0x17c>)
 8001b58:	f002 fb88 	bl	800426c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001b5c:	2386      	movs	r3, #134	; 0x86
 8001b5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b60:	2302      	movs	r3, #2
 8001b62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b6c:	230b      	movs	r3, #11
 8001b6e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b74:	4619      	mov	r1, r3
 8001b76:	4817      	ldr	r0, [pc, #92]	; (8001bd4 <HAL_ETH_MspInit+0x180>)
 8001b78:	f002 fb78 	bl	800426c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001b7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b82:	2302      	movs	r3, #2
 8001b84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b8e:	230b      	movs	r3, #11
 8001b90:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001b92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b96:	4619      	mov	r1, r3
 8001b98:	480f      	ldr	r0, [pc, #60]	; (8001bd8 <HAL_ETH_MspInit+0x184>)
 8001b9a:	f002 fb67 	bl	800426c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001b9e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001ba2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bac:	2303      	movs	r3, #3
 8001bae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001bb0:	230b      	movs	r3, #11
 8001bb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4808      	ldr	r0, [pc, #32]	; (8001bdc <HAL_ETH_MspInit+0x188>)
 8001bbc:	f002 fb56 	bl	800426c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001bc0:	bf00      	nop
 8001bc2:	3738      	adds	r7, #56	; 0x38
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40028000 	.word	0x40028000
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	40020800 	.word	0x40020800
 8001bd4:	40020000 	.word	0x40020000
 8001bd8:	40020400 	.word	0x40020400
 8001bdc:	40021800 	.word	0x40021800

08001be0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b08a      	sub	sp, #40	; 0x28
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be8:	f107 0314 	add.w	r3, r7, #20
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]
 8001bf6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a19      	ldr	r2, [pc, #100]	; (8001c64 <HAL_I2C_MspInit+0x84>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d12c      	bne.n	8001c5c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	613b      	str	r3, [r7, #16]
 8001c06:	4b18      	ldr	r3, [pc, #96]	; (8001c68 <HAL_I2C_MspInit+0x88>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	4a17      	ldr	r2, [pc, #92]	; (8001c68 <HAL_I2C_MspInit+0x88>)
 8001c0c:	f043 0302 	orr.w	r3, r3, #2
 8001c10:	6313      	str	r3, [r2, #48]	; 0x30
 8001c12:	4b15      	ldr	r3, [pc, #84]	; (8001c68 <HAL_I2C_MspInit+0x88>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	613b      	str	r3, [r7, #16]
 8001c1c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c24:	2312      	movs	r3, #18
 8001c26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c30:	2304      	movs	r3, #4
 8001c32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c34:	f107 0314 	add.w	r3, r7, #20
 8001c38:	4619      	mov	r1, r3
 8001c3a:	480c      	ldr	r0, [pc, #48]	; (8001c6c <HAL_I2C_MspInit+0x8c>)
 8001c3c:	f002 fb16 	bl	800426c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c40:	2300      	movs	r3, #0
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <HAL_I2C_MspInit+0x88>)
 8001c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c48:	4a07      	ldr	r2, [pc, #28]	; (8001c68 <HAL_I2C_MspInit+0x88>)
 8001c4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c4e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c50:	4b05      	ldr	r3, [pc, #20]	; (8001c68 <HAL_I2C_MspInit+0x88>)
 8001c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c5c:	bf00      	nop
 8001c5e:	3728      	adds	r7, #40	; 0x28
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40005400 	.word	0x40005400
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	40020400 	.word	0x40020400

08001c70 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08e      	sub	sp, #56	; 0x38
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c78:	f107 0308 	add.w	r3, r7, #8
 8001c7c:	2230      	movs	r2, #48	; 0x30
 8001c7e:	2100      	movs	r1, #0
 8001c80:	4618      	mov	r0, r3
 8001c82:	f007 fc6f 	bl	8009564 <memset>
  if(hrtc->Instance==RTC)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a0c      	ldr	r2, [pc, #48]	; (8001cbc <HAL_RTC_MspInit+0x4c>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d111      	bne.n	8001cb4 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001c90:	2320      	movs	r3, #32
 8001c92:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001c94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c98:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c9a:	f107 0308 	add.w	r3, r7, #8
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f003 ff3e 	bl	8005b20 <HAL_RCCEx_PeriphCLKConfig>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001caa:	f7ff fe89 	bl	80019c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001cae:	4b04      	ldr	r3, [pc, #16]	; (8001cc0 <HAL_RTC_MspInit+0x50>)
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001cb4:	bf00      	nop
 8001cb6:	3738      	adds	r7, #56	; 0x38
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40002800 	.word	0x40002800
 8001cc0:	42470e3c 	.word	0x42470e3c

08001cc4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cd4:	d115      	bne.n	8001d02 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60fb      	str	r3, [r7, #12]
 8001cda:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <HAL_TIM_PWM_MspInit+0x48>)
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cde:	4a0b      	ldr	r2, [pc, #44]	; (8001d0c <HAL_TIM_PWM_MspInit+0x48>)
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ce6:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <HAL_TIM_PWM_MspInit+0x48>)
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	201c      	movs	r0, #28
 8001cf8:	f001 fec7 	bl	8003a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001cfc:	201c      	movs	r0, #28
 8001cfe:	f001 fee0 	bl	8003ac2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001d02:	bf00      	nop
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40023800 	.word	0x40023800

08001d10 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08a      	sub	sp, #40	; 0x28
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d18:	f107 0314 	add.w	r3, r7, #20
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	605a      	str	r2, [r3, #4]
 8001d22:	609a      	str	r2, [r3, #8]
 8001d24:	60da      	str	r2, [r3, #12]
 8001d26:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a1d      	ldr	r2, [pc, #116]	; (8001da4 <HAL_TIM_IC_MspInit+0x94>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d133      	bne.n	8001d9a <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	613b      	str	r3, [r7, #16]
 8001d36:	4b1c      	ldr	r3, [pc, #112]	; (8001da8 <HAL_TIM_IC_MspInit+0x98>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	4a1b      	ldr	r2, [pc, #108]	; (8001da8 <HAL_TIM_IC_MspInit+0x98>)
 8001d3c:	f043 0302 	orr.w	r3, r3, #2
 8001d40:	6413      	str	r3, [r2, #64]	; 0x40
 8001d42:	4b19      	ldr	r3, [pc, #100]	; (8001da8 <HAL_TIM_IC_MspInit+0x98>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	613b      	str	r3, [r7, #16]
 8001d4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	4b15      	ldr	r3, [pc, #84]	; (8001da8 <HAL_TIM_IC_MspInit+0x98>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	4a14      	ldr	r2, [pc, #80]	; (8001da8 <HAL_TIM_IC_MspInit+0x98>)
 8001d58:	f043 0301 	orr.w	r3, r3, #1
 8001d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5e:	4b12      	ldr	r3, [pc, #72]	; (8001da8 <HAL_TIM_IC_MspInit+0x98>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = ULTRASONIC_TIM3_CH1_Pin;
 8001d6a:	2340      	movs	r3, #64	; 0x40
 8001d6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d76:	2300      	movs	r3, #0
 8001d78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ULTRASONIC_TIM3_CH1_GPIO_Port, &GPIO_InitStruct);
 8001d7e:	f107 0314 	add.w	r3, r7, #20
 8001d82:	4619      	mov	r1, r3
 8001d84:	4809      	ldr	r0, [pc, #36]	; (8001dac <HAL_TIM_IC_MspInit+0x9c>)
 8001d86:	f002 fa71 	bl	800426c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	201d      	movs	r0, #29
 8001d90:	f001 fe7b 	bl	8003a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d94:	201d      	movs	r0, #29
 8001d96:	f001 fe94 	bl	8003ac2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001d9a:	bf00      	nop
 8001d9c:	3728      	adds	r7, #40	; 0x28
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40000400 	.word	0x40000400
 8001da8:	40023800 	.word	0x40023800
 8001dac:	40020000 	.word	0x40020000

08001db0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b088      	sub	sp, #32
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a42      	ldr	r2, [pc, #264]	; (8001ec8 <HAL_TIM_Base_MspInit+0x118>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d10e      	bne.n	8001de0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	61fb      	str	r3, [r7, #28]
 8001dc6:	4b41      	ldr	r3, [pc, #260]	; (8001ecc <HAL_TIM_Base_MspInit+0x11c>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	4a40      	ldr	r2, [pc, #256]	; (8001ecc <HAL_TIM_Base_MspInit+0x11c>)
 8001dcc:	f043 0304 	orr.w	r3, r3, #4
 8001dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8001dd2:	4b3e      	ldr	r3, [pc, #248]	; (8001ecc <HAL_TIM_Base_MspInit+0x11c>)
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	f003 0304 	and.w	r3, r3, #4
 8001dda:	61fb      	str	r3, [r7, #28]
 8001ddc:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001dde:	e06e      	b.n	8001ebe <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM5)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a3a      	ldr	r2, [pc, #232]	; (8001ed0 <HAL_TIM_Base_MspInit+0x120>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d116      	bne.n	8001e18 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	61bb      	str	r3, [r7, #24]
 8001dee:	4b37      	ldr	r3, [pc, #220]	; (8001ecc <HAL_TIM_Base_MspInit+0x11c>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	4a36      	ldr	r2, [pc, #216]	; (8001ecc <HAL_TIM_Base_MspInit+0x11c>)
 8001df4:	f043 0308 	orr.w	r3, r3, #8
 8001df8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dfa:	4b34      	ldr	r3, [pc, #208]	; (8001ecc <HAL_TIM_Base_MspInit+0x11c>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	f003 0308 	and.w	r3, r3, #8
 8001e02:	61bb      	str	r3, [r7, #24]
 8001e04:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001e06:	2200      	movs	r2, #0
 8001e08:	2100      	movs	r1, #0
 8001e0a:	2032      	movs	r0, #50	; 0x32
 8001e0c:	f001 fe3d 	bl	8003a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001e10:	2032      	movs	r0, #50	; 0x32
 8001e12:	f001 fe56 	bl	8003ac2 <HAL_NVIC_EnableIRQ>
}
 8001e16:	e052      	b.n	8001ebe <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM9)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a2d      	ldr	r2, [pc, #180]	; (8001ed4 <HAL_TIM_Base_MspInit+0x124>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d116      	bne.n	8001e50 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	617b      	str	r3, [r7, #20]
 8001e26:	4b29      	ldr	r3, [pc, #164]	; (8001ecc <HAL_TIM_Base_MspInit+0x11c>)
 8001e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2a:	4a28      	ldr	r2, [pc, #160]	; (8001ecc <HAL_TIM_Base_MspInit+0x11c>)
 8001e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e30:	6453      	str	r3, [r2, #68]	; 0x44
 8001e32:	4b26      	ldr	r3, [pc, #152]	; (8001ecc <HAL_TIM_Base_MspInit+0x11c>)
 8001e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e3a:	617b      	str	r3, [r7, #20]
 8001e3c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001e3e:	2200      	movs	r2, #0
 8001e40:	2100      	movs	r1, #0
 8001e42:	2018      	movs	r0, #24
 8001e44:	f001 fe21 	bl	8003a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001e48:	2018      	movs	r0, #24
 8001e4a:	f001 fe3a 	bl	8003ac2 <HAL_NVIC_EnableIRQ>
}
 8001e4e:	e036      	b.n	8001ebe <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM10)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a20      	ldr	r2, [pc, #128]	; (8001ed8 <HAL_TIM_Base_MspInit+0x128>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d116      	bne.n	8001e88 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	613b      	str	r3, [r7, #16]
 8001e5e:	4b1b      	ldr	r3, [pc, #108]	; (8001ecc <HAL_TIM_Base_MspInit+0x11c>)
 8001e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e62:	4a1a      	ldr	r2, [pc, #104]	; (8001ecc <HAL_TIM_Base_MspInit+0x11c>)
 8001e64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e68:	6453      	str	r3, [r2, #68]	; 0x44
 8001e6a:	4b18      	ldr	r3, [pc, #96]	; (8001ecc <HAL_TIM_Base_MspInit+0x11c>)
 8001e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e72:	613b      	str	r3, [r7, #16]
 8001e74:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001e76:	2200      	movs	r2, #0
 8001e78:	2100      	movs	r1, #0
 8001e7a:	2019      	movs	r0, #25
 8001e7c:	f001 fe05 	bl	8003a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001e80:	2019      	movs	r0, #25
 8001e82:	f001 fe1e 	bl	8003ac2 <HAL_NVIC_EnableIRQ>
}
 8001e86:	e01a      	b.n	8001ebe <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM11)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a13      	ldr	r2, [pc, #76]	; (8001edc <HAL_TIM_Base_MspInit+0x12c>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d115      	bne.n	8001ebe <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	4b0d      	ldr	r3, [pc, #52]	; (8001ecc <HAL_TIM_Base_MspInit+0x11c>)
 8001e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9a:	4a0c      	ldr	r2, [pc, #48]	; (8001ecc <HAL_TIM_Base_MspInit+0x11c>)
 8001e9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ea0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ea2:	4b0a      	ldr	r3, [pc, #40]	; (8001ecc <HAL_TIM_Base_MspInit+0x11c>)
 8001ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001eae:	2200      	movs	r2, #0
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	201a      	movs	r0, #26
 8001eb4:	f001 fde9 	bl	8003a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001eb8:	201a      	movs	r0, #26
 8001eba:	f001 fe02 	bl	8003ac2 <HAL_NVIC_EnableIRQ>
}
 8001ebe:	bf00      	nop
 8001ec0:	3720      	adds	r7, #32
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40000800 	.word	0x40000800
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	40000c00 	.word	0x40000c00
 8001ed4:	40014000 	.word	0x40014000
 8001ed8:	40014400 	.word	0x40014400
 8001edc:	40014800 	.word	0x40014800

08001ee0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08c      	sub	sp, #48	; 0x30
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee8:	f107 031c 	add.w	r3, r7, #28
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	605a      	str	r2, [r3, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
 8001ef4:	60da      	str	r2, [r3, #12]
 8001ef6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f00:	d11e      	bne.n	8001f40 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	61bb      	str	r3, [r7, #24]
 8001f06:	4b46      	ldr	r3, [pc, #280]	; (8002020 <HAL_TIM_MspPostInit+0x140>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	4a45      	ldr	r2, [pc, #276]	; (8002020 <HAL_TIM_MspPostInit+0x140>)
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	6313      	str	r3, [r2, #48]	; 0x30
 8001f12:	4b43      	ldr	r3, [pc, #268]	; (8002020 <HAL_TIM_MspPostInit+0x140>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	61bb      	str	r3, [r7, #24]
 8001f1c:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001f1e:	2320      	movs	r3, #32
 8001f20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f22:	2302      	movs	r3, #2
 8001f24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f26:	2300      	movs	r3, #0
 8001f28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f32:	f107 031c 	add.w	r3, r7, #28
 8001f36:	4619      	mov	r1, r3
 8001f38:	483a      	ldr	r0, [pc, #232]	; (8002024 <HAL_TIM_MspPostInit+0x144>)
 8001f3a:	f002 f997 	bl	800426c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001f3e:	e06b      	b.n	8002018 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM4)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a38      	ldr	r2, [pc, #224]	; (8002028 <HAL_TIM_MspPostInit+0x148>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d11f      	bne.n	8001f8a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	617b      	str	r3, [r7, #20]
 8001f4e:	4b34      	ldr	r3, [pc, #208]	; (8002020 <HAL_TIM_MspPostInit+0x140>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	4a33      	ldr	r2, [pc, #204]	; (8002020 <HAL_TIM_MspPostInit+0x140>)
 8001f54:	f043 0308 	orr.w	r3, r3, #8
 8001f58:	6313      	str	r3, [r2, #48]	; 0x30
 8001f5a:	4b31      	ldr	r3, [pc, #196]	; (8002020 <HAL_TIM_MspPostInit+0x140>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	f003 0308 	and.w	r3, r3, #8
 8001f62:	617b      	str	r3, [r7, #20]
 8001f64:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001f66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f74:	2300      	movs	r3, #0
 8001f76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f78:	2302      	movs	r3, #2
 8001f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f7c:	f107 031c 	add.w	r3, r7, #28
 8001f80:	4619      	mov	r1, r3
 8001f82:	482a      	ldr	r0, [pc, #168]	; (800202c <HAL_TIM_MspPostInit+0x14c>)
 8001f84:	f002 f972 	bl	800426c <HAL_GPIO_Init>
}
 8001f88:	e046      	b.n	8002018 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM5)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a28      	ldr	r2, [pc, #160]	; (8002030 <HAL_TIM_MspPostInit+0x150>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d11e      	bne.n	8001fd2 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f94:	2300      	movs	r3, #0
 8001f96:	613b      	str	r3, [r7, #16]
 8001f98:	4b21      	ldr	r3, [pc, #132]	; (8002020 <HAL_TIM_MspPostInit+0x140>)
 8001f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9c:	4a20      	ldr	r2, [pc, #128]	; (8002020 <HAL_TIM_MspPostInit+0x140>)
 8001f9e:	f043 0301 	orr.w	r3, r3, #1
 8001fa2:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa4:	4b1e      	ldr	r3, [pc, #120]	; (8002020 <HAL_TIM_MspPostInit+0x140>)
 8001fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	613b      	str	r3, [r7, #16]
 8001fae:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = BUZZER_DEPRECATED_Pin;
 8001fb0:	2308      	movs	r3, #8
 8001fb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BUZZER_DEPRECATED_GPIO_Port, &GPIO_InitStruct);
 8001fc4:	f107 031c 	add.w	r3, r7, #28
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4816      	ldr	r0, [pc, #88]	; (8002024 <HAL_TIM_MspPostInit+0x144>)
 8001fcc:	f002 f94e 	bl	800426c <HAL_GPIO_Init>
}
 8001fd0:	e022      	b.n	8002018 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM9)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a17      	ldr	r2, [pc, #92]	; (8002034 <HAL_TIM_MspPostInit+0x154>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d11d      	bne.n	8002018 <HAL_TIM_MspPostInit+0x138>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fdc:	2300      	movs	r3, #0
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	4b0f      	ldr	r3, [pc, #60]	; (8002020 <HAL_TIM_MspPostInit+0x140>)
 8001fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe4:	4a0e      	ldr	r2, [pc, #56]	; (8002020 <HAL_TIM_MspPostInit+0x140>)
 8001fe6:	f043 0310 	orr.w	r3, r3, #16
 8001fea:	6313      	str	r3, [r2, #48]	; 0x30
 8001fec:	4b0c      	ldr	r3, [pc, #48]	; (8002020 <HAL_TIM_MspPostInit+0x140>)
 8001fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff0:	f003 0310 	and.w	r3, r3, #16
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8001ff8:	2320      	movs	r3, #32
 8001ffa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002000:	2300      	movs	r3, #0
 8002002:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002004:	2300      	movs	r3, #0
 8002006:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002008:	2303      	movs	r3, #3
 800200a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 800200c:	f107 031c 	add.w	r3, r7, #28
 8002010:	4619      	mov	r1, r3
 8002012:	4809      	ldr	r0, [pc, #36]	; (8002038 <HAL_TIM_MspPostInit+0x158>)
 8002014:	f002 f92a 	bl	800426c <HAL_GPIO_Init>
}
 8002018:	bf00      	nop
 800201a:	3730      	adds	r7, #48	; 0x30
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40023800 	.word	0x40023800
 8002024:	40020000 	.word	0x40020000
 8002028:	40000800 	.word	0x40000800
 800202c:	40020c00 	.word	0x40020c00
 8002030:	40000c00 	.word	0x40000c00
 8002034:	40014000 	.word	0x40014000
 8002038:	40021000 	.word	0x40021000

0800203c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b08c      	sub	sp, #48	; 0x30
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002044:	f107 031c 	add.w	r3, r7, #28
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	605a      	str	r2, [r3, #4]
 800204e:	609a      	str	r2, [r3, #8]
 8002050:	60da      	str	r2, [r3, #12]
 8002052:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a3a      	ldr	r2, [pc, #232]	; (8002144 <HAL_UART_MspInit+0x108>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d135      	bne.n	80020ca <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	61bb      	str	r3, [r7, #24]
 8002062:	4b39      	ldr	r3, [pc, #228]	; (8002148 <HAL_UART_MspInit+0x10c>)
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	4a38      	ldr	r2, [pc, #224]	; (8002148 <HAL_UART_MspInit+0x10c>)
 8002068:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800206c:	6413      	str	r3, [r2, #64]	; 0x40
 800206e:	4b36      	ldr	r3, [pc, #216]	; (8002148 <HAL_UART_MspInit+0x10c>)
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002076:	61bb      	str	r3, [r7, #24]
 8002078:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	617b      	str	r3, [r7, #20]
 800207e:	4b32      	ldr	r3, [pc, #200]	; (8002148 <HAL_UART_MspInit+0x10c>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	4a31      	ldr	r2, [pc, #196]	; (8002148 <HAL_UART_MspInit+0x10c>)
 8002084:	f043 0308 	orr.w	r3, r3, #8
 8002088:	6313      	str	r3, [r2, #48]	; 0x30
 800208a:	4b2f      	ldr	r3, [pc, #188]	; (8002148 <HAL_UART_MspInit+0x10c>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	f003 0308 	and.w	r3, r3, #8
 8002092:	617b      	str	r3, [r7, #20]
 8002094:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002096:	f44f 7340 	mov.w	r3, #768	; 0x300
 800209a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209c:	2302      	movs	r3, #2
 800209e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a4:	2303      	movs	r3, #3
 80020a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020a8:	2307      	movs	r3, #7
 80020aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020ac:	f107 031c 	add.w	r3, r7, #28
 80020b0:	4619      	mov	r1, r3
 80020b2:	4826      	ldr	r0, [pc, #152]	; (800214c <HAL_UART_MspInit+0x110>)
 80020b4:	f002 f8da 	bl	800426c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80020b8:	2200      	movs	r2, #0
 80020ba:	2100      	movs	r1, #0
 80020bc:	2027      	movs	r0, #39	; 0x27
 80020be:	f001 fce4 	bl	8003a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80020c2:	2027      	movs	r0, #39	; 0x27
 80020c4:	f001 fcfd 	bl	8003ac2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80020c8:	e038      	b.n	800213c <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART6)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a20      	ldr	r2, [pc, #128]	; (8002150 <HAL_UART_MspInit+0x114>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d133      	bne.n	800213c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART6_CLK_ENABLE();
 80020d4:	2300      	movs	r3, #0
 80020d6:	613b      	str	r3, [r7, #16]
 80020d8:	4b1b      	ldr	r3, [pc, #108]	; (8002148 <HAL_UART_MspInit+0x10c>)
 80020da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020dc:	4a1a      	ldr	r2, [pc, #104]	; (8002148 <HAL_UART_MspInit+0x10c>)
 80020de:	f043 0320 	orr.w	r3, r3, #32
 80020e2:	6453      	str	r3, [r2, #68]	; 0x44
 80020e4:	4b18      	ldr	r3, [pc, #96]	; (8002148 <HAL_UART_MspInit+0x10c>)
 80020e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e8:	f003 0320 	and.w	r3, r3, #32
 80020ec:	613b      	str	r3, [r7, #16]
 80020ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020f0:	2300      	movs	r3, #0
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	4b14      	ldr	r3, [pc, #80]	; (8002148 <HAL_UART_MspInit+0x10c>)
 80020f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f8:	4a13      	ldr	r2, [pc, #76]	; (8002148 <HAL_UART_MspInit+0x10c>)
 80020fa:	f043 0304 	orr.w	r3, r3, #4
 80020fe:	6313      	str	r3, [r2, #48]	; 0x30
 8002100:	4b11      	ldr	r3, [pc, #68]	; (8002148 <HAL_UART_MspInit+0x10c>)
 8002102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002104:	f003 0304 	and.w	r3, r3, #4
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800210c:	23c0      	movs	r3, #192	; 0xc0
 800210e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002110:	2302      	movs	r3, #2
 8002112:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002114:	2300      	movs	r3, #0
 8002116:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002118:	2303      	movs	r3, #3
 800211a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800211c:	2308      	movs	r3, #8
 800211e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002120:	f107 031c 	add.w	r3, r7, #28
 8002124:	4619      	mov	r1, r3
 8002126:	480b      	ldr	r0, [pc, #44]	; (8002154 <HAL_UART_MspInit+0x118>)
 8002128:	f002 f8a0 	bl	800426c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800212c:	2200      	movs	r2, #0
 800212e:	2100      	movs	r1, #0
 8002130:	2047      	movs	r0, #71	; 0x47
 8002132:	f001 fcaa 	bl	8003a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002136:	2047      	movs	r0, #71	; 0x47
 8002138:	f001 fcc3 	bl	8003ac2 <HAL_NVIC_EnableIRQ>
}
 800213c:	bf00      	nop
 800213e:	3730      	adds	r7, #48	; 0x30
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40004800 	.word	0x40004800
 8002148:	40023800 	.word	0x40023800
 800214c:	40020c00 	.word	0x40020c00
 8002150:	40011400 	.word	0x40011400
 8002154:	40020800 	.word	0x40020800

08002158 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b08a      	sub	sp, #40	; 0x28
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002160:	f107 0314 	add.w	r3, r7, #20
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]
 800216e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002178:	d13f      	bne.n	80021fa <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800217a:	2300      	movs	r3, #0
 800217c:	613b      	str	r3, [r7, #16]
 800217e:	4b21      	ldr	r3, [pc, #132]	; (8002204 <HAL_PCD_MspInit+0xac>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	4a20      	ldr	r2, [pc, #128]	; (8002204 <HAL_PCD_MspInit+0xac>)
 8002184:	f043 0301 	orr.w	r3, r3, #1
 8002188:	6313      	str	r3, [r2, #48]	; 0x30
 800218a:	4b1e      	ldr	r3, [pc, #120]	; (8002204 <HAL_PCD_MspInit+0xac>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	613b      	str	r3, [r7, #16]
 8002194:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002196:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800219a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219c:	2302      	movs	r3, #2
 800219e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a4:	2303      	movs	r3, #3
 80021a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80021a8:	230a      	movs	r3, #10
 80021aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ac:	f107 0314 	add.w	r3, r7, #20
 80021b0:	4619      	mov	r1, r3
 80021b2:	4815      	ldr	r0, [pc, #84]	; (8002208 <HAL_PCD_MspInit+0xb0>)
 80021b4:	f002 f85a 	bl	800426c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80021b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021be:	2300      	movs	r3, #0
 80021c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c2:	2300      	movs	r3, #0
 80021c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80021c6:	f107 0314 	add.w	r3, r7, #20
 80021ca:	4619      	mov	r1, r3
 80021cc:	480e      	ldr	r0, [pc, #56]	; (8002208 <HAL_PCD_MspInit+0xb0>)
 80021ce:	f002 f84d 	bl	800426c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80021d2:	4b0c      	ldr	r3, [pc, #48]	; (8002204 <HAL_PCD_MspInit+0xac>)
 80021d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021d6:	4a0b      	ldr	r2, [pc, #44]	; (8002204 <HAL_PCD_MspInit+0xac>)
 80021d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021dc:	6353      	str	r3, [r2, #52]	; 0x34
 80021de:	2300      	movs	r3, #0
 80021e0:	60fb      	str	r3, [r7, #12]
 80021e2:	4b08      	ldr	r3, [pc, #32]	; (8002204 <HAL_PCD_MspInit+0xac>)
 80021e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e6:	4a07      	ldr	r2, [pc, #28]	; (8002204 <HAL_PCD_MspInit+0xac>)
 80021e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021ec:	6453      	str	r3, [r2, #68]	; 0x44
 80021ee:	4b05      	ldr	r3, [pc, #20]	; (8002204 <HAL_PCD_MspInit+0xac>)
 80021f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80021fa:	bf00      	nop
 80021fc:	3728      	adds	r7, #40	; 0x28
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	40023800 	.word	0x40023800
 8002208:	40020000 	.word	0x40020000

0800220c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002210:	e7fe      	b.n	8002210 <NMI_Handler+0x4>

08002212 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002212:	b480      	push	{r7}
 8002214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002216:	e7fe      	b.n	8002216 <HardFault_Handler+0x4>

08002218 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800221c:	e7fe      	b.n	800221c <MemManage_Handler+0x4>

0800221e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800221e:	b480      	push	{r7}
 8002220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002222:	e7fe      	b.n	8002222 <BusFault_Handler+0x4>

08002224 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002228:	e7fe      	b.n	8002228 <UsageFault_Handler+0x4>

0800222a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800222a:	b480      	push	{r7}
 800222c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800222e:	bf00      	nop
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800223c:	bf00      	nop
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002246:	b480      	push	{r7}
 8002248:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800224a:	bf00      	nop
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002258:	f001 faf8 	bl	800384c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_STSTICK_Handler(); // ADD_kenGwon_231017
 800225c:	f7fe fdfa 	bl	8000e54 <HAL_STSTICK_Handler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8002260:	bf00      	nop
 8002262:	bd80      	pop	{r7, pc}

08002264 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8002268:	4802      	ldr	r0, [pc, #8]	; (8002274 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800226a:	f004 fd7d 	bl	8006d68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800226e:	bf00      	nop
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	20000584 	.word	0x20000584

08002278 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800227c:	4802      	ldr	r0, [pc, #8]	; (8002288 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800227e:	f004 fd73 	bl	8006d68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	200005cc 	.word	0x200005cc

0800228c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002290:	4802      	ldr	r0, [pc, #8]	; (800229c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002292:	f004 fd69 	bl	8006d68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002296:	bf00      	nop
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	20000614 	.word	0x20000614

080022a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80022a4:	4802      	ldr	r0, [pc, #8]	; (80022b0 <TIM2_IRQHandler+0x10>)
 80022a6:	f004 fd5f 	bl	8006d68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80022aa:	bf00      	nop
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	20000464 	.word	0x20000464

080022b4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80022b8:	4802      	ldr	r0, [pc, #8]	; (80022c4 <TIM3_IRQHandler+0x10>)
 80022ba:	f004 fd55 	bl	8006d68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80022be:	bf00      	nop
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	200004ac 	.word	0x200004ac

080022c8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80022cc:	4802      	ldr	r0, [pc, #8]	; (80022d8 <USART3_IRQHandler+0x10>)
 80022ce:	f005 feb5 	bl	800803c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	2000065c 	.word	0x2000065c

080022dc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80022e0:	4802      	ldr	r0, [pc, #8]	; (80022ec <TIM5_IRQHandler+0x10>)
 80022e2:	f004 fd41 	bl	8006d68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	2000053c 	.word	0x2000053c

080022f0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80022f4:	4802      	ldr	r0, [pc, #8]	; (8002300 <USART6_IRQHandler+0x10>)
 80022f6:	f005 fea1 	bl	800803c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80022fa:	bf00      	nop
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	200006a0 	.word	0x200006a0

08002304 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002310:	2300      	movs	r3, #0
 8002312:	617b      	str	r3, [r7, #20]
 8002314:	e00a      	b.n	800232c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002316:	f3af 8000 	nop.w
 800231a:	4601      	mov	r1, r0
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	1c5a      	adds	r2, r3, #1
 8002320:	60ba      	str	r2, [r7, #8]
 8002322:	b2ca      	uxtb	r2, r1
 8002324:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	3301      	adds	r3, #1
 800232a:	617b      	str	r3, [r7, #20]
 800232c:	697a      	ldr	r2, [r7, #20]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	429a      	cmp	r2, r3
 8002332:	dbf0      	blt.n	8002316 <_read+0x12>
  }

  return len;
 8002334:	687b      	ldr	r3, [r7, #4]
}
 8002336:	4618      	mov	r0, r3
 8002338:	3718      	adds	r7, #24
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b086      	sub	sp, #24
 8002342:	af00      	add	r7, sp, #0
 8002344:	60f8      	str	r0, [r7, #12]
 8002346:	60b9      	str	r1, [r7, #8]
 8002348:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800234a:	2300      	movs	r3, #0
 800234c:	617b      	str	r3, [r7, #20]
 800234e:	e009      	b.n	8002364 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	1c5a      	adds	r2, r3, #1
 8002354:	60ba      	str	r2, [r7, #8]
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	4618      	mov	r0, r3
 800235a:	f7fe fd89 	bl	8000e70 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	3301      	adds	r3, #1
 8002362:	617b      	str	r3, [r7, #20]
 8002364:	697a      	ldr	r2, [r7, #20]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	429a      	cmp	r2, r3
 800236a:	dbf1      	blt.n	8002350 <_write+0x12>
  }
  return len;
 800236c:	687b      	ldr	r3, [r7, #4]
}
 800236e:	4618      	mov	r0, r3
 8002370:	3718      	adds	r7, #24
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <_close>:

int _close(int file)
{
 8002376:	b480      	push	{r7}
 8002378:	b083      	sub	sp, #12
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800237e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002382:	4618      	mov	r0, r3
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800238e:	b480      	push	{r7}
 8002390:	b083      	sub	sp, #12
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
 8002396:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800239e:	605a      	str	r2, [r3, #4]
  return 0;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr

080023ae <_isatty>:

int _isatty(int file)
{
 80023ae:	b480      	push	{r7}
 80023b0:	b083      	sub	sp, #12
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023b6:	2301      	movs	r3, #1
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3714      	adds	r7, #20
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
	...

080023e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023e8:	4a14      	ldr	r2, [pc, #80]	; (800243c <_sbrk+0x5c>)
 80023ea:	4b15      	ldr	r3, [pc, #84]	; (8002440 <_sbrk+0x60>)
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023f4:	4b13      	ldr	r3, [pc, #76]	; (8002444 <_sbrk+0x64>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d102      	bne.n	8002402 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023fc:	4b11      	ldr	r3, [pc, #68]	; (8002444 <_sbrk+0x64>)
 80023fe:	4a12      	ldr	r2, [pc, #72]	; (8002448 <_sbrk+0x68>)
 8002400:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002402:	4b10      	ldr	r3, [pc, #64]	; (8002444 <_sbrk+0x64>)
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4413      	add	r3, r2
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	429a      	cmp	r2, r3
 800240e:	d207      	bcs.n	8002420 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002410:	f007 f87e 	bl	8009510 <__errno>
 8002414:	4603      	mov	r3, r0
 8002416:	220c      	movs	r2, #12
 8002418:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800241a:	f04f 33ff 	mov.w	r3, #4294967295
 800241e:	e009      	b.n	8002434 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002420:	4b08      	ldr	r3, [pc, #32]	; (8002444 <_sbrk+0x64>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002426:	4b07      	ldr	r3, [pc, #28]	; (8002444 <_sbrk+0x64>)
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4413      	add	r3, r2
 800242e:	4a05      	ldr	r2, [pc, #20]	; (8002444 <_sbrk+0x64>)
 8002430:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002432:	68fb      	ldr	r3, [r7, #12]
}
 8002434:	4618      	mov	r0, r3
 8002436:	3718      	adds	r7, #24
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	20030000 	.word	0x20030000
 8002440:	00000400 	.word	0x00000400
 8002444:	20000bfc 	.word	0x20000bfc
 8002448:	20001020 	.word	0x20001020

0800244c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002450:	4b06      	ldr	r3, [pc, #24]	; (800246c <SystemInit+0x20>)
 8002452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002456:	4a05      	ldr	r2, [pc, #20]	; (800246c <SystemInit+0x20>)
 8002458:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800245c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002460:	bf00      	nop
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	e000ed00 	.word	0xe000ed00

08002470 <HAL_TIM_PeriodElapsedCallback>:
/*
 * desc: 타이머가 counter period를 채울 때마다 콜백되는 함수이다.
 * param1: 타이머 구조체
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
	static uint8_t WM_forward_backward = 0;

	// 1MHz로 분주되어 있는 TIM10이 10000번의 counter period를 채울때마다 콜백되어 변수들을 1씩 증가시킨다.(즉 10ms 타이머 기능을 함)
	if (htim->Instance == TIM10)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a1f      	ldr	r2, [pc, #124]	; (80024fc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d136      	bne.n	80024f0 <HAL_TIM_PeriodElapsedCallback+0x80>
	{
		TIM10_10ms_counter_ledbar++;
 8002482:	4b1f      	ldr	r3, [pc, #124]	; (8002500 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	3301      	adds	r3, #1
 8002488:	4a1d      	ldr	r2, [pc, #116]	; (8002500 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800248a:	6013      	str	r3, [r2, #0]
		TIM10_10ms_counter_DHT11++;
 800248c:	4b1d      	ldr	r3, [pc, #116]	; (8002504 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	3301      	adds	r3, #1
 8002492:	4a1c      	ldr	r2, [pc, #112]	; (8002504 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002494:	6013      	str	r3, [r2, #0]
		TIM10_10ms_counter_ultrasonic++;
 8002496:	4b1c      	ldr	r3, [pc, #112]	; (8002508 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	3301      	adds	r3, #1
 800249c:	4a1a      	ldr	r2, [pc, #104]	; (8002508 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800249e:	6013      	str	r3, [r2, #0]
		TIM10_10ms_fan_auto_mode_remain_time_decrease++;
 80024a0:	4b1a      	ldr	r3, [pc, #104]	; (800250c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	3301      	adds	r3, #1
 80024a6:	4a19      	ldr	r2, [pc, #100]	; (800250c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80024a8:	6013      	str	r3, [r2, #0]
		TIM10_10ms_fan_rotate_direction_led++;
 80024aa:	4b19      	ldr	r3, [pc, #100]	; (8002510 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	3301      	adds	r3, #1
 80024b0:	4a17      	ldr	r2, [pc, #92]	; (8002510 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80024b2:	6013      	str	r3, [r2, #0]
		TIM10_10ms_fan_lcd_display_clear++;
 80024b4:	4b17      	ldr	r3, [pc, #92]	; (8002514 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	3301      	adds	r3, #1
 80024ba:	4a16      	ldr	r2, [pc, #88]	; (8002514 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80024bc:	6013      	str	r3, [r2, #0]
		TIM10_10ms_dcmotor_activate_time++;
 80024be:	4b16      	ldr	r3, [pc, #88]	; (8002518 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	3301      	adds	r3, #1
 80024c4:	4a14      	ldr	r2, [pc, #80]	; (8002518 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80024c6:	6013      	str	r3, [r2, #0]

		TIM10_10ms_WM_wash_timer++;
 80024c8:	4b14      	ldr	r3, [pc, #80]	; (800251c <HAL_TIM_PeriodElapsedCallback+0xac>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	3301      	adds	r3, #1
 80024ce:	4a13      	ldr	r2, [pc, #76]	; (800251c <HAL_TIM_PeriodElapsedCallback+0xac>)
 80024d0:	6013      	str	r3, [r2, #0]
		TIM10_10ms_WM_rinse_timer++;
 80024d2:	4b13      	ldr	r3, [pc, #76]	; (8002520 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	3301      	adds	r3, #1
 80024d8:	4a11      	ldr	r2, [pc, #68]	; (8002520 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80024da:	6013      	str	r3, [r2, #0]
		TIM10_10ms_WM_spin_timer++;
 80024dc:	4b11      	ldr	r3, [pc, #68]	; (8002524 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	3301      	adds	r3, #1
 80024e2:	4a10      	ldr	r2, [pc, #64]	; (8002524 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80024e4:	6013      	str	r3, [r2, #0]
		TIM10_10ms_WM_buzzer_timer++;
 80024e6:	4b10      	ldr	r3, [pc, #64]	; (8002528 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	3301      	adds	r3, #1
 80024ec:	4a0e      	ldr	r2, [pc, #56]	; (8002528 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80024ee:	6013      	str	r3, [r2, #0]
	}
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	40014400 	.word	0x40014400
 8002500:	20000c00 	.word	0x20000c00
 8002504:	20000c04 	.word	0x20000c04
 8002508:	20000c08 	.word	0x20000c08
 800250c:	20000c0c 	.word	0x20000c0c
 8002510:	20000c10 	.word	0x20000c10
 8002514:	20000c14 	.word	0x20000c14
 8002518:	20000c18 	.word	0x20000c18
 800251c:	20000c1c 	.word	0x20000c1c
 8002520:	20000c20 	.word	0x20000c20
 8002524:	20000c24 	.word	0x20000c24
 8002528:	20000c28 	.word	0x20000c28

0800252c <delay_us>:
/*
 * desc: HAL_Delay()를 대체하기 위한 함수
 * param1: 딜레이시킬 마이크로 세컨드 시간
 * */
void delay_us(uint32_t us)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim11, 0);
 8002534:	4b08      	ldr	r3, [pc, #32]	; (8002558 <delay_us+0x2c>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2200      	movs	r2, #0
 800253a:	625a      	str	r2, [r3, #36]	; 0x24

	while(__HAL_TIM_GET_COUNTER(&htim11) < us) // 파라미터로 들어온 us 시간동안 이 와일문에 잡혀있는 것임
 800253c:	bf00      	nop
 800253e:	4b06      	ldr	r3, [pc, #24]	; (8002558 <delay_us+0x2c>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	429a      	cmp	r2, r3
 8002548:	d8f9      	bhi.n	800253e <delay_us+0x12>
		;
}
 800254a:	bf00      	nop
 800254c:	bf00      	nop
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	20000614 	.word	0x20000614

0800255c <HAL_TIM_IC_CaptureCallback>:
/*
 * desc: Input Capture direct mode로 동작하는 타이머가 각 조건에 맞는 완료할때마다 콜백되는 함수이다.
 * param1: 타이머 구조체
 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
	// 초음파 센서의 ECHO핀와 연결되어 있는 TIM6가 상승edge 또는 하강edge 인풋을 캡쳐할 때마다 아래 동작을 실행한다.
	if (htim->Instance == TIM3)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a13      	ldr	r2, [pc, #76]	; (80025b8 <HAL_TIM_IC_CaptureCallback+0x5c>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d11f      	bne.n	80025ae <HAL_TIM_IC_CaptureCallback+0x52>
	{
		if (rising_falling_edge_capture_flag == 0) // 상승엣지 때문에 콜백 펑션에 들어온 경우
 800256e:	4b13      	ldr	r3, [pc, #76]	; (80025bc <HAL_TIM_IC_CaptureCallback+0x60>)
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	b2db      	uxtb	r3, r3
 8002574:	2b00      	cmp	r3, #0
 8002576:	d107      	bne.n	8002588 <HAL_TIM_IC_CaptureCallback+0x2c>
		{
			__HAL_TIM_SET_COUNTER(htim, 0); // 펄스를 셀 카운터를 초기화 하고 세기 시작하는 것이다.
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2200      	movs	r2, #0
 800257e:	625a      	str	r2, [r3, #36]	; 0x24
			rising_falling_edge_capture_flag = 1; // 다음에 콜백 펑선이 불릴 때는 당연히 하강 엣지일 때 일 것이므로 플래그변수를 1로 셋팅해준다.
 8002580:	4b0e      	ldr	r3, [pc, #56]	; (80025bc <HAL_TIM_IC_CaptureCallback+0x60>)
 8002582:	2201      	movs	r2, #1
 8002584:	701a      	strb	r2, [r3, #0]
			rising_falling_edge_capture_flag = 0; // 이제 다음 펄스를 또 카운트 하기 위해서 플래그 변수를 초기화 해준다.
			ultrasonic_distance = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // 상승엣지부터 하강엣지까지 펄스가 몇번 카운트 되었는지 그 값을 읽어온다.
			one_cycle_capture_finish_flag = 1; // 초음파 측정완료
		}
	}
}
 8002586:	e012      	b.n	80025ae <HAL_TIM_IC_CaptureCallback+0x52>
		else if (rising_falling_edge_capture_flag == 1) // 하강 엣지 때문에 콜백 펑션에 들어온 경우
 8002588:	4b0c      	ldr	r3, [pc, #48]	; (80025bc <HAL_TIM_IC_CaptureCallback+0x60>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b01      	cmp	r3, #1
 8002590:	d10d      	bne.n	80025ae <HAL_TIM_IC_CaptureCallback+0x52>
			rising_falling_edge_capture_flag = 0; // 이제 다음 펄스를 또 카운트 하기 위해서 플래그 변수를 초기화 해준다.
 8002592:	4b0a      	ldr	r3, [pc, #40]	; (80025bc <HAL_TIM_IC_CaptureCallback+0x60>)
 8002594:	2200      	movs	r2, #0
 8002596:	701a      	strb	r2, [r3, #0]
			ultrasonic_distance = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // 상승엣지부터 하강엣지까지 펄스가 몇번 카운트 되었는지 그 값을 읽어온다.
 8002598:	2100      	movs	r1, #0
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f004 ff12 	bl	80073c4 <HAL_TIM_ReadCapturedValue>
 80025a0:	4603      	mov	r3, r0
 80025a2:	461a      	mov	r2, r3
 80025a4:	4b06      	ldr	r3, [pc, #24]	; (80025c0 <HAL_TIM_IC_CaptureCallback+0x64>)
 80025a6:	601a      	str	r2, [r3, #0]
			one_cycle_capture_finish_flag = 1; // 초음파 측정완료
 80025a8:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <HAL_TIM_IC_CaptureCallback+0x68>)
 80025aa:	2201      	movs	r2, #1
 80025ac:	701a      	strb	r2, [r3, #0]
}
 80025ae:	bf00      	nop
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40000400 	.word	0x40000400
 80025bc:	20000c31 	.word	0x20000c31
 80025c0:	20000c2c 	.word	0x20000c2c
 80025c4:	20000c30 	.word	0x20000c30

080025c8 <HAL_UART_RxCpltCallback>:
 * desc: UART통신으로 MCU의 RX가 외부기기의 TX로부터 1데이터 프레임(1바이트)를 수신할 때마다 HW 인터럽트를 통해 콜백되어 실행되는 함수이다.
 *       (HW와 SW의 만나는 약속장소 = call back function)
 * param1: UART 구조체
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80025c8:	b590      	push	{r4, r7, lr}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
	// ComPortMaster의 TX를 통해 "ledallon\n"이 UART 통신으로 MCU의 RX로 송신되면,
	// MCU단에서는 1데이터 프레임(1바이트) 단위로 콜백 펑션이 호출되기 때문에 l, e, d, a, l, l, o, n, \n 하나하나에 이 콜백 펑션이 호출되는 것이다.
	if (huart == &huart3) // PC의 ComPortMaster와 연결된 huart3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a4c      	ldr	r2, [pc, #304]	; (8002704 <HAL_UART_RxCpltCallback+0x13c>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d160      	bne.n	800269a <HAL_UART_RxCpltCallback+0xd2>
	{
		if ((queue_rear+1)%QUEUE_MAX != queue_front)
 80025d8:	4b4b      	ldr	r3, [pc, #300]	; (8002708 <HAL_UART_RxCpltCallback+0x140>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	1c59      	adds	r1, r3, #1
 80025de:	4b4b      	ldr	r3, [pc, #300]	; (800270c <HAL_UART_RxCpltCallback+0x144>)
 80025e0:	fb83 2301 	smull	r2, r3, r3, r1
 80025e4:	10da      	asrs	r2, r3, #3
 80025e6:	17cb      	asrs	r3, r1, #31
 80025e8:	1ad2      	subs	r2, r2, r3
 80025ea:	4613      	mov	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	4413      	add	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	1aca      	subs	r2, r1, r3
 80025f4:	4b46      	ldr	r3, [pc, #280]	; (8002710 <HAL_UART_RxCpltCallback+0x148>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d049      	beq.n	8002690 <HAL_UART_RxCpltCallback+0xc8>
		{
			if (rx_index < COMMAND_LENGTH)
 80025fc:	4b45      	ldr	r3, [pc, #276]	; (8002714 <HAL_UART_RxCpltCallback+0x14c>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2b27      	cmp	r3, #39	; 0x27
 8002602:	dc3f      	bgt.n	8002684 <HAL_UART_RxCpltCallback+0xbc>
			{
				if (rx_data == '\n' || rx_data == '\r')
 8002604:	4b44      	ldr	r3, [pc, #272]	; (8002718 <HAL_UART_RxCpltCallback+0x150>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	2b0a      	cmp	r3, #10
 800260a:	d003      	beq.n	8002614 <HAL_UART_RxCpltCallback+0x4c>
 800260c:	4b42      	ldr	r3, [pc, #264]	; (8002718 <HAL_UART_RxCpltCallback+0x150>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	2b0d      	cmp	r3, #13
 8002612:	d124      	bne.n	800265e <HAL_UART_RxCpltCallback+0x96>
				{
					rx_buff[queue_rear][rx_index] = '\0';
 8002614:	4b3c      	ldr	r3, [pc, #240]	; (8002708 <HAL_UART_RxCpltCallback+0x140>)
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	4b3e      	ldr	r3, [pc, #248]	; (8002714 <HAL_UART_RxCpltCallback+0x14c>)
 800261a:	6819      	ldr	r1, [r3, #0]
 800261c:	483f      	ldr	r0, [pc, #252]	; (800271c <HAL_UART_RxCpltCallback+0x154>)
 800261e:	4613      	mov	r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4413      	add	r3, r2
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	4403      	add	r3, r0
 8002628:	440b      	add	r3, r1
 800262a:	2200      	movs	r2, #0
 800262c:	701a      	strb	r2, [r3, #0]
					rx_index = 0;
 800262e:	4b39      	ldr	r3, [pc, #228]	; (8002714 <HAL_UART_RxCpltCallback+0x14c>)
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
					queue_rear++;
 8002634:	4b34      	ldr	r3, [pc, #208]	; (8002708 <HAL_UART_RxCpltCallback+0x140>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	3301      	adds	r3, #1
 800263a:	4a33      	ldr	r2, [pc, #204]	; (8002708 <HAL_UART_RxCpltCallback+0x140>)
 800263c:	6013      	str	r3, [r2, #0]
					queue_rear %= QUEUE_MAX;
 800263e:	4b32      	ldr	r3, [pc, #200]	; (8002708 <HAL_UART_RxCpltCallback+0x140>)
 8002640:	6819      	ldr	r1, [r3, #0]
 8002642:	4b32      	ldr	r3, [pc, #200]	; (800270c <HAL_UART_RxCpltCallback+0x144>)
 8002644:	fb83 2301 	smull	r2, r3, r3, r1
 8002648:	10da      	asrs	r2, r3, #3
 800264a:	17cb      	asrs	r3, r1, #31
 800264c:	1ad2      	subs	r2, r2, r3
 800264e:	4613      	mov	r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	4413      	add	r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	1aca      	subs	r2, r1, r3
 8002658:	4b2b      	ldr	r3, [pc, #172]	; (8002708 <HAL_UART_RxCpltCallback+0x140>)
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	e018      	b.n	8002690 <HAL_UART_RxCpltCallback+0xc8>
				}
				else
				{
					rx_buff[queue_rear][rx_index++] = rx_data;
 800265e:	4b2a      	ldr	r3, [pc, #168]	; (8002708 <HAL_UART_RxCpltCallback+0x140>)
 8002660:	6819      	ldr	r1, [r3, #0]
 8002662:	4b2c      	ldr	r3, [pc, #176]	; (8002714 <HAL_UART_RxCpltCallback+0x14c>)
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	1c53      	adds	r3, r2, #1
 8002668:	482a      	ldr	r0, [pc, #168]	; (8002714 <HAL_UART_RxCpltCallback+0x14c>)
 800266a:	6003      	str	r3, [r0, #0]
 800266c:	4b2a      	ldr	r3, [pc, #168]	; (8002718 <HAL_UART_RxCpltCallback+0x150>)
 800266e:	781c      	ldrb	r4, [r3, #0]
 8002670:	482a      	ldr	r0, [pc, #168]	; (800271c <HAL_UART_RxCpltCallback+0x154>)
 8002672:	460b      	mov	r3, r1
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	440b      	add	r3, r1
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	4403      	add	r3, r0
 800267c:	4413      	add	r3, r2
 800267e:	4622      	mov	r2, r4
 8002680:	701a      	strb	r2, [r3, #0]
 8002682:	e005      	b.n	8002690 <HAL_UART_RxCpltCallback+0xc8>
				}
			}
			else
			{
				rx_index = 0;
 8002684:	4b23      	ldr	r3, [pc, #140]	; (8002714 <HAL_UART_RxCpltCallback+0x14c>)
 8002686:	2200      	movs	r2, #0
 8002688:	601a      	str	r2, [r3, #0]
				printf("Message Overflow !!!\n");
 800268a:	4825      	ldr	r0, [pc, #148]	; (8002720 <HAL_UART_RxCpltCallback+0x158>)
 800268c:	f006 ffe0 	bl	8009650 <puts>
		{

		}

		// 주의: 반드시 HAL_UART_Receive_IT() 함수를 call 해줘야 다음 인터럽트가 이어서 발생이 가능해진다.
		HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 8002690:	2201      	movs	r2, #1
 8002692:	4921      	ldr	r1, [pc, #132]	; (8002718 <HAL_UART_RxCpltCallback+0x150>)
 8002694:	481b      	ldr	r0, [pc, #108]	; (8002704 <HAL_UART_RxCpltCallback+0x13c>)
 8002696:	f005 fca0 	bl	8007fda <HAL_UART_Receive_IT>
	}

	if (huart == &huart6) // Bluetooth와 연결된 huart6
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a21      	ldr	r2, [pc, #132]	; (8002724 <HAL_UART_RxCpltCallback+0x15c>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d12c      	bne.n	80026fc <HAL_UART_RxCpltCallback+0x134>
	{
		if (bt_rx_index < COMMAND_LENGTH) // 현재까지 들어온 byte가 40byte를 넘지 않으면
 80026a2:	4b21      	ldr	r3, [pc, #132]	; (8002728 <HAL_UART_RxCpltCallback+0x160>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2b27      	cmp	r3, #39	; 0x27
 80026a8:	dc1d      	bgt.n	80026e6 <HAL_UART_RxCpltCallback+0x11e>
		{
			if(bt_rx_data == '\n' || bt_rx_data == '\r')
 80026aa:	4b20      	ldr	r3, [pc, #128]	; (800272c <HAL_UART_RxCpltCallback+0x164>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	2b0a      	cmp	r3, #10
 80026b0:	d003      	beq.n	80026ba <HAL_UART_RxCpltCallback+0xf2>
 80026b2:	4b1e      	ldr	r3, [pc, #120]	; (800272c <HAL_UART_RxCpltCallback+0x164>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	2b0d      	cmp	r3, #13
 80026b8:	d10b      	bne.n	80026d2 <HAL_UART_RxCpltCallback+0x10a>
			{
				bt_rx_buff[bt_rx_index] = 0; // '\0'
 80026ba:	4b1b      	ldr	r3, [pc, #108]	; (8002728 <HAL_UART_RxCpltCallback+0x160>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a1c      	ldr	r2, [pc, #112]	; (8002730 <HAL_UART_RxCpltCallback+0x168>)
 80026c0:	2100      	movs	r1, #0
 80026c2:	54d1      	strb	r1, [r2, r3]
				bt_newline_detect_flag = 1;
 80026c4:	4b1b      	ldr	r3, [pc, #108]	; (8002734 <HAL_UART_RxCpltCallback+0x16c>)
 80026c6:	2201      	movs	r2, #1
 80026c8:	701a      	strb	r2, [r3, #0]
				bt_rx_index = 0; // 다음 메시지 저장을 위해서 rx_index값을 0으로 한다.
 80026ca:	4b17      	ldr	r3, [pc, #92]	; (8002728 <HAL_UART_RxCpltCallback+0x160>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	e00f      	b.n	80026f2 <HAL_UART_RxCpltCallback+0x12a>
			}
			else
			{
				bt_rx_buff[bt_rx_index++] = bt_rx_data;
 80026d2:	4b15      	ldr	r3, [pc, #84]	; (8002728 <HAL_UART_RxCpltCallback+0x160>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	1c5a      	adds	r2, r3, #1
 80026d8:	4913      	ldr	r1, [pc, #76]	; (8002728 <HAL_UART_RxCpltCallback+0x160>)
 80026da:	600a      	str	r2, [r1, #0]
 80026dc:	4a13      	ldr	r2, [pc, #76]	; (800272c <HAL_UART_RxCpltCallback+0x164>)
 80026de:	7811      	ldrb	r1, [r2, #0]
 80026e0:	4a13      	ldr	r2, [pc, #76]	; (8002730 <HAL_UART_RxCpltCallback+0x168>)
 80026e2:	54d1      	strb	r1, [r2, r3]
 80026e4:	e005      	b.n	80026f2 <HAL_UART_RxCpltCallback+0x12a>
			}
		}
		else
		{
			bt_rx_index = 0;
 80026e6:	4b10      	ldr	r3, [pc, #64]	; (8002728 <HAL_UART_RxCpltCallback+0x160>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
			printf("Message Overflow !!!\n");
 80026ec:	480c      	ldr	r0, [pc, #48]	; (8002720 <HAL_UART_RxCpltCallback+0x158>)
 80026ee:	f006 ffaf 	bl	8009650 <puts>
		}

		// 주의: 반드시 HAL_UART_Receive_IT() 함수를 call 해줘야 다음 인터럽트가 이어서 발생이 가능해진다.
		HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1);
 80026f2:	2201      	movs	r2, #1
 80026f4:	490d      	ldr	r1, [pc, #52]	; (800272c <HAL_UART_RxCpltCallback+0x164>)
 80026f6:	480b      	ldr	r0, [pc, #44]	; (8002724 <HAL_UART_RxCpltCallback+0x15c>)
 80026f8:	f005 fc6f 	bl	8007fda <HAL_UART_Receive_IT>
	}
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	bd90      	pop	{r4, r7, pc}
 8002704:	2000065c 	.word	0x2000065c
 8002708:	20000f58 	.word	0x20000f58
 800270c:	66666667 	.word	0x66666667
 8002710:	20000f54 	.word	0x20000f54
 8002714:	20000f5c 	.word	0x20000f5c
 8002718:	20000f8d 	.word	0x20000f8d
 800271c:	20000c34 	.word	0x20000c34
 8002720:	0800a678 	.word	0x0800a678
 8002724:	200006a0 	.word	0x200006a0
 8002728:	20000f88 	.word	0x20000f88
 800272c:	20000f8e 	.word	0x20000f8e
 8002730:	20000f60 	.word	0x20000f60
 8002734:	20000f8c 	.word	0x20000f8c

08002738 <WashingMachine_Init>:

/*
 * desc: 세탁기 프로그램 구동에 필요한 H/W를 켠다.
 */
void WashingMachine_Init(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart3, &rx_data, 1); // activate interrupt from RX huart3
 800273c:	2201      	movs	r2, #1
 800273e:	4914      	ldr	r1, [pc, #80]	; (8002790 <WashingMachine_Init+0x58>)
 8002740:	4814      	ldr	r0, [pc, #80]	; (8002794 <WashingMachine_Init+0x5c>)
 8002742:	f005 fc4a 	bl	8007fda <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1); // activate interrupt from RX huart6
 8002746:	2201      	movs	r2, #1
 8002748:	4913      	ldr	r1, [pc, #76]	; (8002798 <WashingMachine_Init+0x60>)
 800274a:	4814      	ldr	r0, [pc, #80]	; (800279c <WashingMachine_Init+0x64>)
 800274c:	f005 fc45 	bl	8007fda <HAL_UART_Receive_IT>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // 세탁기 뚜껑 개폐용 SERVO motor 구동하기 위해 필요
 8002750:	2100      	movs	r1, #0
 8002752:	4813      	ldr	r0, [pc, #76]	; (80027a0 <WashingMachine_Init+0x68>)
 8002754:	f003 ffb2 	bl	80066bc <HAL_TIM_PWM_Start>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1); // 세탁기 뚜껑 개폐 상태 확인하는 초음파센서 활용하기 위해 필요
 8002758:	2100      	movs	r1, #0
 800275a:	4812      	ldr	r0, [pc, #72]	; (80027a4 <WashingMachine_Init+0x6c>)
 800275c:	f004 f9dc 	bl	8006b18 <HAL_TIM_IC_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1); // 드럼통 동작용 DC motor 구동하기 위해 필요
 8002760:	2100      	movs	r1, #0
 8002762:	4811      	ldr	r0, [pc, #68]	; (80027a8 <WashingMachine_Init+0x70>)
 8002764:	f004 f872 	bl	800684c <HAL_TIM_PWM_Start_IT>
	HAL_TIM_Base_Start_IT(&htim10); // 다수의 10ms 타이머 활옹하기 위해 필요
 8002768:	4810      	ldr	r0, [pc, #64]	; (80027ac <WashingMachine_Init+0x74>)
 800276a:	f003 fee7 	bl	800653c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim11); // DHT11센서에서 delay_us() 함수가 올바르게 작동해야 하므로 필요
 800276e:	4810      	ldr	r0, [pc, #64]	; (80027b0 <WashingMachine_Init+0x78>)
 8002770:	f003 fee4 	bl	800653c <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1); // 세탁, 헹굼, 탈수 동작완료 안내 부저 작동을 위해 필요
 8002774:	2100      	movs	r1, #0
 8002776:	480f      	ldr	r0, [pc, #60]	; (80027b4 <WashingMachine_Init+0x7c>)
 8002778:	f003 ffa0 	bl	80066bc <HAL_TIM_PWM_Start>

	Buzzer_Turn_Off(); // 최초에 부저 소리 안나게 초기화
 800277c:	f7fe f8b4 	bl	80008e8 <Buzzer_Turn_Off>
	I2C_LCD_Init(); // 세탁기 상태 보여주는 LCD 활용하기 위해 필요
 8002780:	f7fe f828 	bl	80007d4 <I2C_LCD_Init>
	Idle_Mode_Display(); // 최초에 idle 모드 I2C LED 화면 출력 위해 필요
 8002784:	f000 fe1e 	bl	80033c4 <Idle_Mode_Display>
	DHT11_Init(); // 탈수 완료 여부 확인하는 온습도 센서 활용하기 위해 필요
 8002788:	f7fd ff04 	bl	8000594 <DHT11_Init>
}
 800278c:	bf00      	nop
 800278e:	bd80      	pop	{r7, pc}
 8002790:	20000f8d 	.word	0x20000f8d
 8002794:	2000065c 	.word	0x2000065c
 8002798:	20000f8e 	.word	0x20000f8e
 800279c:	200006a0 	.word	0x200006a0
 80027a0:	20000464 	.word	0x20000464
 80027a4:	200004ac 	.word	0x200004ac
 80027a8:	200004f4 	.word	0x200004f4
 80027ac:	200005cc 	.word	0x200005cc
 80027b0:	20000614 	.word	0x20000614
 80027b4:	20000584 	.word	0x20000584

080027b8 <WashingMachine_Processing>:

/*
 * desc: 세탁기 프로그램의 메인 동작을 결정하는 함수이다.
 */
void WashingMachine_Processing(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
	switch (WashingMachine_curr_status)
 80027bc:	4b0f      	ldr	r3, [pc, #60]	; (80027fc <WashingMachine_Processing+0x44>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	2b03      	cmp	r3, #3
 80027c2:	d817      	bhi.n	80027f4 <WashingMachine_Processing+0x3c>
 80027c4:	a201      	add	r2, pc, #4	; (adr r2, 80027cc <WashingMachine_Processing+0x14>)
 80027c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ca:	bf00      	nop
 80027cc:	080027dd 	.word	0x080027dd
 80027d0:	080027e3 	.word	0x080027e3
 80027d4:	080027e9 	.word	0x080027e9
 80027d8:	080027ef 	.word	0x080027ef
	{
		case IDLE_MODE:
			Idle_Mode_Laundry();
 80027dc:	f000 f810 	bl	8002800 <Idle_Mode_Laundry>
			break;
 80027e0:	e009      	b.n	80027f6 <WashingMachine_Processing+0x3e>

		case WASH_MODE:
			Wash_Mode_Laundry();
 80027e2:	f000 f83d 	bl	8002860 <Wash_Mode_Laundry>
			break;
 80027e6:	e006      	b.n	80027f6 <WashingMachine_Processing+0x3e>

		case RINSE_MODE:
			Rinse_Mode_Laundry();
 80027e8:	f000 fa14 	bl	8002c14 <Rinse_Mode_Laundry>
			break;
 80027ec:	e003      	b.n	80027f6 <WashingMachine_Processing+0x3e>

		case SPIN_MODE:
			Spin_Mode_Laundry();
 80027ee:	f000 fbd3 	bl	8002f98 <Spin_Mode_Laundry>
			break;
 80027f2:	e000      	b.n	80027f6 <WashingMachine_Processing+0x3e>

		default:
			break;
 80027f4:	bf00      	nop
	}
}
 80027f6:	bf00      	nop
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	20000f90 	.word	0x20000f90

08002800 <Idle_Mode_Laundry>:

/*
 * desc: 대기 상태에 관련된 동작을 실행하는 함수이다.
 */
static void Idle_Mode_Laundry(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
	open_WashingMachine_Lid();
 8002804:	f7ff f8e2 	bl	80019cc <open_WashingMachine_Lid>
	Mode_Complete_Alarm(); // 이걸 여기서도 불르고 있어야 로직이 맞게 작동함..
 8002808:	f7fe f87a 	bl	8000900 <Mode_Complete_Alarm>

	DCmotor_Break();
 800280c:	f7fe f8f8 	bl	8000a00 <DCmotor_Break>
	LEDbar_All_Off();
 8002810:	f7fe fa8c 	bl	8000d2c <LEDbar_All_Off>
	FND4digit_off();
 8002814:	f7fe f918 	bl	8000a48 <FND4digit_off>

	Idle_Mode_Display(); // 아이들 모드일때는 fnd 안쓰고 있기 때문에 led가 핑글핑글 돌면서 시간 표시해줘도 됨
 8002818:	f000 fdd4 	bl	80033c4 <Idle_Mode_Display>

	if (Get_Button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)
 800281c:	2200      	movs	r2, #0
 800281e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002822:	480d      	ldr	r0, [pc, #52]	; (8002858 <Idle_Mode_Laundry+0x58>)
 8002824:	f7fe f81c 	bl	8000860 <Get_Button>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d111      	bne.n	8002852 <Idle_Mode_Laundry+0x52>
	{
		WashingMachine_curr_status++;
 800282e:	4b0b      	ldr	r3, [pc, #44]	; (800285c <Idle_Mode_Laundry+0x5c>)
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	3301      	adds	r3, #1
 8002834:	b2da      	uxtb	r2, r3
 8002836:	4b09      	ldr	r3, [pc, #36]	; (800285c <Idle_Mode_Laundry+0x5c>)
 8002838:	701a      	strb	r2, [r3, #0]
		WashingMachine_curr_status %= 4;
 800283a:	4b08      	ldr	r3, [pc, #32]	; (800285c <Idle_Mode_Laundry+0x5c>)
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	f003 0303 	and.w	r3, r3, #3
 8002842:	b2da      	uxtb	r2, r3
 8002844:	4b05      	ldr	r3, [pc, #20]	; (800285c <Idle_Mode_Laundry+0x5c>)
 8002846:	701a      	strb	r2, [r3, #0]
		LCD_Command(CLEAR_DISPLAY); // 버튼을 누르는 순간마다 clear display해줘서 쓰레기값 방지
 8002848:	2001      	movs	r0, #1
 800284a:	f7fd ff5b 	bl	8000704 <LCD_Command>
		Wash_Mode_Setting_display(); // 순환식 구조의 다음인 세탁모드를 출력
 800284e:	f000 fe13 	bl	8003478 <Wash_Mode_Setting_display>
	}
}
 8002852:	bf00      	nop
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	40021000 	.word	0x40021000
 800285c:	20000f90 	.word	0x20000f90

08002860 <Wash_Mode_Laundry>:
/*
 * desc: "세탁/헹굼/탈수" 중 "세탁"에 관련된 동작을 실행하는 함수이다.
 *       세탁모드에서 드럼통 모터는 70%의 고정 duty cycle 출력으로 작동한다.
 */
static void Wash_Mode_Laundry(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af02      	add	r7, sp, #8
	static uint8_t wash_mode_start_stop_flag = STOP;
	static uint8_t dcmotor_forward_backward_flag = FORWARD;


	/************************BEGIN 기본 동작 부분************************/
	close_WashingMachine_Lid();
 8002866:	f7ff f8bf 	bl	80019e8 <close_WashingMachine_Lid>
	Mode_Complete_Alarm();
 800286a:	f7fe f849 	bl	8000900 <Mode_Complete_Alarm>

	// 뚜껑이 열려있으면 동작을 중지하고 idle 화면으로 이동
	if (Check_Lid_Open())
 800286e:	f000 fd69 	bl	8003344 <Check_Lid_Open>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d00a      	beq.n	800288e <Wash_Mode_Laundry+0x2e>
	{
		mode_complete_alarm_stop_start_flag = STOP;
 8002878:	4b27      	ldr	r3, [pc, #156]	; (8002918 <Wash_Mode_Laundry+0xb8>)
 800287a:	2200      	movs	r2, #0
 800287c:	701a      	strb	r2, [r3, #0]
		WashingMachine_curr_status = 0;
 800287e:	4b27      	ldr	r3, [pc, #156]	; (800291c <Wash_Mode_Laundry+0xbc>)
 8002880:	2200      	movs	r2, #0
 8002882:	701a      	strb	r2, [r3, #0]
		LCD_Command(CLEAR_DISPLAY);
 8002884:	2001      	movs	r0, #1
 8002886:	f7fd ff3d 	bl	8000704 <LCD_Command>
		Idle_Mode_Display();
 800288a:	f000 fd9b 	bl	80033c4 <Idle_Mode_Display>
	}


	if (wash_mode_start_stop_flag == STOP)
 800288e:	4b24      	ldr	r3, [pc, #144]	; (8002920 <Wash_Mode_Laundry+0xc0>)
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d106      	bne.n	80028a4 <Wash_Mode_Laundry+0x44>
	{
		DCmotor_Break();
 8002896:	f7fe f8b3 	bl	8000a00 <DCmotor_Break>
		LEDbar_All_Off();
 800289a:	f7fe fa47 	bl	8000d2c <LEDbar_All_Off>
		FND4digit_off();
 800289e:	f7fe f8d3 	bl	8000a48 <FND4digit_off>
 80028a2:	e056      	b.n	8002952 <Wash_Mode_Laundry+0xf2>
	}
	else if (wash_mode_start_stop_flag == START && wash_remain_time > 0)
 80028a4:	4b1e      	ldr	r3, [pc, #120]	; (8002920 <Wash_Mode_Laundry+0xc0>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d141      	bne.n	8002930 <Wash_Mode_Laundry+0xd0>
 80028ac:	4b1d      	ldr	r3, [pc, #116]	; (8002924 <Wash_Mode_Laundry+0xc4>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	dd3d      	ble.n	8002930 <Wash_Mode_Laundry+0xd0>
	{
		// 완료부저가 실행중이더라도, 다시 모드가 시작되면 당연히 부저는 꺼져야함
		mode_complete_alarm_stop_start_flag = STOP;
 80028b4:	4b18      	ldr	r3, [pc, #96]	; (8002918 <Wash_Mode_Laundry+0xb8>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	701a      	strb	r2, [r3, #0]

		// 남은시간은 자동으로 1초씩 감소
		if (TIM10_10ms_WM_wash_timer > 100)
 80028ba:	4b1b      	ldr	r3, [pc, #108]	; (8002928 <Wash_Mode_Laundry+0xc8>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2b64      	cmp	r3, #100	; 0x64
 80028c0:	d919      	bls.n	80028f6 <Wash_Mode_Laundry+0x96>
		{
			TIM10_10ms_WM_wash_timer = 0;
 80028c2:	4b19      	ldr	r3, [pc, #100]	; (8002928 <Wash_Mode_Laundry+0xc8>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]
			wash_remain_time--;
 80028c8:	4b16      	ldr	r3, [pc, #88]	; (8002924 <Wash_Mode_Laundry+0xc4>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	3b01      	subs	r3, #1
 80028ce:	4a15      	ldr	r2, [pc, #84]	; (8002924 <Wash_Mode_Laundry+0xc4>)
 80028d0:	6013      	str	r3, [r2, #0]
			if (wash_remain_time < 0) {wash_remain_time = 0;}
 80028d2:	4b14      	ldr	r3, [pc, #80]	; (8002924 <Wash_Mode_Laundry+0xc4>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	da02      	bge.n	80028e0 <Wash_Mode_Laundry+0x80>
 80028da:	4b12      	ldr	r3, [pc, #72]	; (8002924 <Wash_Mode_Laundry+0xc4>)
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]

			if (dcmotor_forward_backward_flag == FORWARD)
 80028e0:	4b12      	ldr	r3, [pc, #72]	; (800292c <Wash_Mode_Laundry+0xcc>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d103      	bne.n	80028f0 <Wash_Mode_Laundry+0x90>
			{
				dcmotor_forward_backward_flag = BACKWARD;
 80028e8:	4b10      	ldr	r3, [pc, #64]	; (800292c <Wash_Mode_Laundry+0xcc>)
 80028ea:	2201      	movs	r2, #1
 80028ec:	701a      	strb	r2, [r3, #0]
 80028ee:	e002      	b.n	80028f6 <Wash_Mode_Laundry+0x96>
			}
			else
			{
				dcmotor_forward_backward_flag = FORWARD;
 80028f0:	4b0e      	ldr	r3, [pc, #56]	; (800292c <Wash_Mode_Laundry+0xcc>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	701a      	strb	r2, [r3, #0]
			}
		}

		// 세탁모드에서 드럼통을 앞뒤로 흔들어주기 위해서..
		if (dcmotor_forward_backward_flag == 0)
 80028f6:	4b0d      	ldr	r3, [pc, #52]	; (800292c <Wash_Mode_Laundry+0xcc>)
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d102      	bne.n	8002904 <Wash_Mode_Laundry+0xa4>
		{
			DCmotor_Forward_Rotate();
 80028fe:	f7fe f85b 	bl	80009b8 <DCmotor_Forward_Rotate>
 8002902:	e001      	b.n	8002908 <Wash_Mode_Laundry+0xa8>
		}
		else
		{
			DCmotor_Backward_Rotate();
 8002904:	f7fe f86a 	bl	80009dc <DCmotor_Backward_Rotate>
		}

		LEDbar_Flower_On();
 8002908:	f7fe fa6e 	bl	8000de8 <LEDbar_Flower_On>
		FND4digit_time_display(wash_remain_time);
 800290c:	4b05      	ldr	r3, [pc, #20]	; (8002924 <Wash_Mode_Laundry+0xc4>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4618      	mov	r0, r3
 8002912:	f7fe f8b7 	bl	8000a84 <FND4digit_time_display>
 8002916:	e01c      	b.n	8002952 <Wash_Mode_Laundry+0xf2>
 8002918:	20000f8f 	.word	0x20000f8f
 800291c:	20000f90 	.word	0x20000f90
 8002920:	20001008 	.word	0x20001008
 8002924:	20000fc0 	.word	0x20000fc0
 8002928:	20000c1c 	.word	0x20000c1c
 800292c:	20001009 	.word	0x20001009
	}
	else // 플래그는 start이지만 남은시간이 0이하가 된 경우 여기로 빠짐
	{
		mode_complete_alarm_stop_start_flag = START;
 8002930:	4bad      	ldr	r3, [pc, #692]	; (8002be8 <Wash_Mode_Laundry+0x388>)
 8002932:	2201      	movs	r2, #1
 8002934:	701a      	strb	r2, [r3, #0]
		wash_mode_start_stop_flag = STOP;
 8002936:	4bad      	ldr	r3, [pc, #692]	; (8002bec <Wash_Mode_Laundry+0x38c>)
 8002938:	2200      	movs	r2, #0
 800293a:	701a      	strb	r2, [r3, #0]

		DCmotor_Break();
 800293c:	f7fe f860 	bl	8000a00 <DCmotor_Break>
		LEDbar_All_Off();
 8002940:	f7fe f9f4 	bl	8000d2c <LEDbar_All_Off>
		FND4digit_off();
 8002944:	f7fe f880 	bl	8000a48 <FND4digit_off>

		// 완료가 되었다면 그냥 세탁 셋팅 화면을 다시 출력
		LCD_Command(CLEAR_DISPLAY);
 8002948:	2001      	movs	r0, #1
 800294a:	f7fd fedb 	bl	8000704 <LCD_Command>
		Wash_Mode_Setting_display();
 800294e:	f000 fd93 	bl	8003478 <Wash_Mode_Setting_display>
	}
	/************************END 기본 동작 부분************************/

	/************************BEGIN 버튼 입력 인터럽트 부분************************/
	// 세탁 모드 상태를 기억한 상태로 다음 모드로 이동
	if (Get_Button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)
 8002952:	2200      	movs	r2, #0
 8002954:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002958:	48a5      	ldr	r0, [pc, #660]	; (8002bf0 <Wash_Mode_Laundry+0x390>)
 800295a:	f7fd ff81 	bl	8000860 <Get_Button>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d114      	bne.n	800298e <Wash_Mode_Laundry+0x12e>
	{
		mode_complete_alarm_stop_start_flag = STOP; // 완료 부저가 진행중일 경우 아예 꺼버리는게 논리적으로 맞음
 8002964:	4ba0      	ldr	r3, [pc, #640]	; (8002be8 <Wash_Mode_Laundry+0x388>)
 8002966:	2200      	movs	r2, #0
 8002968:	701a      	strb	r2, [r3, #0]

		WashingMachine_curr_status++;
 800296a:	4ba2      	ldr	r3, [pc, #648]	; (8002bf4 <Wash_Mode_Laundry+0x394>)
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	3301      	adds	r3, #1
 8002970:	b2da      	uxtb	r2, r3
 8002972:	4ba0      	ldr	r3, [pc, #640]	; (8002bf4 <Wash_Mode_Laundry+0x394>)
 8002974:	701a      	strb	r2, [r3, #0]
		WashingMachine_curr_status %= 4;
 8002976:	4b9f      	ldr	r3, [pc, #636]	; (8002bf4 <Wash_Mode_Laundry+0x394>)
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	b2da      	uxtb	r2, r3
 8002980:	4b9c      	ldr	r3, [pc, #624]	; (8002bf4 <Wash_Mode_Laundry+0x394>)
 8002982:	701a      	strb	r2, [r3, #0]
		LCD_Command(CLEAR_DISPLAY); // 버튼을 누르는 순간마다 clear display해줘서 쓰레기값 방지
 8002984:	2001      	movs	r0, #1
 8002986:	f7fd febd 	bl	8000704 <LCD_Command>
		Rinse_Mode_Setting_display();
 800298a:	f000 fdef 	bl	800356c <Rinse_Mode_Setting_display>
	}

	// 세탁 횟수를 1회 증가시킨다(1회는 10초로 간주)
	if (Get_Button(BUTTON1_GPIO_Port, BUTTON1_Pin, 1) == BUTTON_PRESS)
 800298e:	2201      	movs	r2, #1
 8002990:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002994:	4896      	ldr	r0, [pc, #600]	; (8002bf0 <Wash_Mode_Laundry+0x390>)
 8002996:	f7fd ff63 	bl	8000860 <Get_Button>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d109      	bne.n	80029b4 <Wash_Mode_Laundry+0x154>
	{
		wash_remain_time += 10;
 80029a0:	4b95      	ldr	r3, [pc, #596]	; (8002bf8 <Wash_Mode_Laundry+0x398>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	330a      	adds	r3, #10
 80029a6:	4a94      	ldr	r2, [pc, #592]	; (8002bf8 <Wash_Mode_Laundry+0x398>)
 80029a8:	6013      	str	r3, [r2, #0]
		LCD_Command(CLEAR_DISPLAY); // 버튼을 누르는 순간마다 clear display해줘서 쓰레기값 방지
 80029aa:	2001      	movs	r0, #1
 80029ac:	f7fd feaa 	bl	8000704 <LCD_Command>
		Wash_Mode_Setting_display();
 80029b0:	f000 fd62 	bl	8003478 <Wash_Mode_Setting_display>
	}

	// 세탁 횟수를 1회 감소시킨다.(1회는 10초로 간주)
	if (Get_Button(BUTTON2_GPIO_Port, BUTTON2_Pin, 2) == BUTTON_PRESS)
 80029b4:	2202      	movs	r2, #2
 80029b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80029ba:	488d      	ldr	r0, [pc, #564]	; (8002bf0 <Wash_Mode_Laundry+0x390>)
 80029bc:	f7fd ff50 	bl	8000860 <Get_Button>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d110      	bne.n	80029e8 <Wash_Mode_Laundry+0x188>
	{
		wash_remain_time -= 10;
 80029c6:	4b8c      	ldr	r3, [pc, #560]	; (8002bf8 <Wash_Mode_Laundry+0x398>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	3b0a      	subs	r3, #10
 80029cc:	4a8a      	ldr	r2, [pc, #552]	; (8002bf8 <Wash_Mode_Laundry+0x398>)
 80029ce:	6013      	str	r3, [r2, #0]
		if (wash_remain_time < 0) {wash_remain_time = 0;}
 80029d0:	4b89      	ldr	r3, [pc, #548]	; (8002bf8 <Wash_Mode_Laundry+0x398>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	da02      	bge.n	80029de <Wash_Mode_Laundry+0x17e>
 80029d8:	4b87      	ldr	r3, [pc, #540]	; (8002bf8 <Wash_Mode_Laundry+0x398>)
 80029da:	2200      	movs	r2, #0
 80029dc:	601a      	str	r2, [r3, #0]
		LCD_Command(CLEAR_DISPLAY); // 버튼을 누르는 순간마다 clear display해줘서 쓰레기값 방지
 80029de:	2001      	movs	r0, #1
 80029e0:	f7fd fe90 	bl	8000704 <LCD_Command>
		Wash_Mode_Setting_display();
 80029e4:	f000 fd48 	bl	8003478 <Wash_Mode_Setting_display>
	}

	// 동작 시간을 설정 완료했다면, 세탁기 구동을 시작한다.
	if (Get_Button(BUTTON3_GPIO_Port, BUTTON3_Pin, 3) == BUTTON_PRESS)
 80029e8:	2203      	movs	r2, #3
 80029ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80029ee:	4880      	ldr	r0, [pc, #512]	; (8002bf0 <Wash_Mode_Laundry+0x390>)
 80029f0:	f7fd ff36 	bl	8000860 <Get_Button>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f040 80bc 	bne.w	8002b74 <Wash_Mode_Laundry+0x314>
	{
		wash_mode_start_stop_flag = START;
 80029fc:	4b7b      	ldr	r3, [pc, #492]	; (8002bec <Wash_Mode_Laundry+0x38c>)
 80029fe:	2201      	movs	r2, #1
 8002a00:	701a      	strb	r2, [r3, #0]

		HAL_RTC_GetTime(&hrtc, &wash_complete_time, RTC_FORMAT_BCD);
 8002a02:	2201      	movs	r2, #1
 8002a04:	497d      	ldr	r1, [pc, #500]	; (8002bfc <Wash_Mode_Laundry+0x39c>)
 8002a06:	487e      	ldr	r0, [pc, #504]	; (8002c00 <Wash_Mode_Laundry+0x3a0>)
 8002a08:	f003 fb5a 	bl	80060c0 <HAL_RTC_GetTime>
		wash_complete_time.Hours += dec2bcd(wash_remain_time / 3600);
 8002a0c:	4b7a      	ldr	r3, [pc, #488]	; (8002bf8 <Wash_Mode_Laundry+0x398>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a7c      	ldr	r2, [pc, #496]	; (8002c04 <Wash_Mode_Laundry+0x3a4>)
 8002a12:	fb82 1203 	smull	r1, r2, r2, r3
 8002a16:	441a      	add	r2, r3
 8002a18:	12d2      	asrs	r2, r2, #11
 8002a1a:	17db      	asrs	r3, r3, #31
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7fe f95f 	bl	8000ce4 <dec2bcd>
 8002a26:	4603      	mov	r3, r0
 8002a28:	461a      	mov	r2, r3
 8002a2a:	4b74      	ldr	r3, [pc, #464]	; (8002bfc <Wash_Mode_Laundry+0x39c>)
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	4413      	add	r3, r2
 8002a30:	b2da      	uxtb	r2, r3
 8002a32:	4b72      	ldr	r3, [pc, #456]	; (8002bfc <Wash_Mode_Laundry+0x39c>)
 8002a34:	701a      	strb	r2, [r3, #0]
		wash_complete_time.Minutes += dec2bcd((wash_remain_time % 3600) / 60);
 8002a36:	4b70      	ldr	r3, [pc, #448]	; (8002bf8 <Wash_Mode_Laundry+0x398>)
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	4b72      	ldr	r3, [pc, #456]	; (8002c04 <Wash_Mode_Laundry+0x3a4>)
 8002a3c:	fb83 1302 	smull	r1, r3, r3, r2
 8002a40:	4413      	add	r3, r2
 8002a42:	12d9      	asrs	r1, r3, #11
 8002a44:	17d3      	asrs	r3, r2, #31
 8002a46:	1acb      	subs	r3, r1, r3
 8002a48:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002a4c:	fb01 f303 	mul.w	r3, r1, r3
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	4a6d      	ldr	r2, [pc, #436]	; (8002c08 <Wash_Mode_Laundry+0x3a8>)
 8002a54:	fb82 1203 	smull	r1, r2, r2, r3
 8002a58:	441a      	add	r2, r3
 8002a5a:	1152      	asrs	r2, r2, #5
 8002a5c:	17db      	asrs	r3, r3, #31
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7fe f93e 	bl	8000ce4 <dec2bcd>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	4b63      	ldr	r3, [pc, #396]	; (8002bfc <Wash_Mode_Laundry+0x39c>)
 8002a6e:	785b      	ldrb	r3, [r3, #1]
 8002a70:	4413      	add	r3, r2
 8002a72:	b2da      	uxtb	r2, r3
 8002a74:	4b61      	ldr	r3, [pc, #388]	; (8002bfc <Wash_Mode_Laundry+0x39c>)
 8002a76:	705a      	strb	r2, [r3, #1]
		wash_complete_time.Seconds += dec2bcd((wash_remain_time % 3600) % 60);
 8002a78:	4b5f      	ldr	r3, [pc, #380]	; (8002bf8 <Wash_Mode_Laundry+0x398>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a61      	ldr	r2, [pc, #388]	; (8002c04 <Wash_Mode_Laundry+0x3a4>)
 8002a7e:	fb82 1203 	smull	r1, r2, r2, r3
 8002a82:	441a      	add	r2, r3
 8002a84:	12d1      	asrs	r1, r2, #11
 8002a86:	17da      	asrs	r2, r3, #31
 8002a88:	1a8a      	subs	r2, r1, r2
 8002a8a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002a8e:	fb01 f202 	mul.w	r2, r1, r2
 8002a92:	1a9a      	subs	r2, r3, r2
 8002a94:	4b5c      	ldr	r3, [pc, #368]	; (8002c08 <Wash_Mode_Laundry+0x3a8>)
 8002a96:	fb83 1302 	smull	r1, r3, r3, r2
 8002a9a:	4413      	add	r3, r2
 8002a9c:	1159      	asrs	r1, r3, #5
 8002a9e:	17d3      	asrs	r3, r2, #31
 8002aa0:	1ac9      	subs	r1, r1, r3
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	011b      	lsls	r3, r3, #4
 8002aa6:	1a5b      	subs	r3, r3, r1
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	1ad1      	subs	r1, r2, r3
 8002aac:	b2cb      	uxtb	r3, r1
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7fe f918 	bl	8000ce4 <dec2bcd>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	4b50      	ldr	r3, [pc, #320]	; (8002bfc <Wash_Mode_Laundry+0x39c>)
 8002aba:	789b      	ldrb	r3, [r3, #2]
 8002abc:	4413      	add	r3, r2
 8002abe:	b2da      	uxtb	r2, r3
 8002ac0:	4b4e      	ldr	r3, [pc, #312]	; (8002bfc <Wash_Mode_Laundry+0x39c>)
 8002ac2:	709a      	strb	r2, [r3, #2]

		if (bcd2dec(wash_complete_time.Seconds) >= 60)
 8002ac4:	4b4d      	ldr	r3, [pc, #308]	; (8002bfc <Wash_Mode_Laundry+0x39c>)
 8002ac6:	789b      	ldrb	r3, [r3, #2]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7fe f8ef 	bl	8000cac <bcd2dec>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b3b      	cmp	r3, #59	; 0x3b
 8002ad2:	d915      	bls.n	8002b00 <Wash_Mode_Laundry+0x2a0>
		{
			wash_complete_time.Minutes += dec2bcd(1);
 8002ad4:	2001      	movs	r0, #1
 8002ad6:	f7fe f905 	bl	8000ce4 <dec2bcd>
 8002ada:	4603      	mov	r3, r0
 8002adc:	461a      	mov	r2, r3
 8002ade:	4b47      	ldr	r3, [pc, #284]	; (8002bfc <Wash_Mode_Laundry+0x39c>)
 8002ae0:	785b      	ldrb	r3, [r3, #1]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	4b45      	ldr	r3, [pc, #276]	; (8002bfc <Wash_Mode_Laundry+0x39c>)
 8002ae8:	705a      	strb	r2, [r3, #1]
			wash_complete_time.Seconds -= dec2bcd(60);
 8002aea:	203c      	movs	r0, #60	; 0x3c
 8002aec:	f7fe f8fa 	bl	8000ce4 <dec2bcd>
 8002af0:	4603      	mov	r3, r0
 8002af2:	461a      	mov	r2, r3
 8002af4:	4b41      	ldr	r3, [pc, #260]	; (8002bfc <Wash_Mode_Laundry+0x39c>)
 8002af6:	789b      	ldrb	r3, [r3, #2]
 8002af8:	1a9b      	subs	r3, r3, r2
 8002afa:	b2da      	uxtb	r2, r3
 8002afc:	4b3f      	ldr	r3, [pc, #252]	; (8002bfc <Wash_Mode_Laundry+0x39c>)
 8002afe:	709a      	strb	r2, [r3, #2]
		}
		if (bcd2dec(wash_complete_time.Minutes) >= 60)
 8002b00:	4b3e      	ldr	r3, [pc, #248]	; (8002bfc <Wash_Mode_Laundry+0x39c>)
 8002b02:	785b      	ldrb	r3, [r3, #1]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7fe f8d1 	bl	8000cac <bcd2dec>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b3b      	cmp	r3, #59	; 0x3b
 8002b0e:	d915      	bls.n	8002b3c <Wash_Mode_Laundry+0x2dc>
		{
			wash_complete_time.Hours += dec2bcd(1);
 8002b10:	2001      	movs	r0, #1
 8002b12:	f7fe f8e7 	bl	8000ce4 <dec2bcd>
 8002b16:	4603      	mov	r3, r0
 8002b18:	461a      	mov	r2, r3
 8002b1a:	4b38      	ldr	r3, [pc, #224]	; (8002bfc <Wash_Mode_Laundry+0x39c>)
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	4413      	add	r3, r2
 8002b20:	b2da      	uxtb	r2, r3
 8002b22:	4b36      	ldr	r3, [pc, #216]	; (8002bfc <Wash_Mode_Laundry+0x39c>)
 8002b24:	701a      	strb	r2, [r3, #0]
			wash_complete_time.Minutes -= dec2bcd(60);
 8002b26:	203c      	movs	r0, #60	; 0x3c
 8002b28:	f7fe f8dc 	bl	8000ce4 <dec2bcd>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	461a      	mov	r2, r3
 8002b30:	4b32      	ldr	r3, [pc, #200]	; (8002bfc <Wash_Mode_Laundry+0x39c>)
 8002b32:	785b      	ldrb	r3, [r3, #1]
 8002b34:	1a9b      	subs	r3, r3, r2
 8002b36:	b2da      	uxtb	r2, r3
 8002b38:	4b30      	ldr	r3, [pc, #192]	; (8002bfc <Wash_Mode_Laundry+0x39c>)
 8002b3a:	705a      	strb	r2, [r3, #1]
		}
		if (bcd2dec(wash_complete_time.Hours) >= 24)
 8002b3c:	4b2f      	ldr	r3, [pc, #188]	; (8002bfc <Wash_Mode_Laundry+0x39c>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7fe f8b3 	bl	8000cac <bcd2dec>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b17      	cmp	r3, #23
 8002b4a:	d90a      	bls.n	8002b62 <Wash_Mode_Laundry+0x302>
		{
			// DATE를 1 올려야 하지만, 현재 해당 프로그램에서 date는 고려하고 있지 않음
			wash_complete_time.Hours -= dec2bcd(24);
 8002b4c:	2018      	movs	r0, #24
 8002b4e:	f7fe f8c9 	bl	8000ce4 <dec2bcd>
 8002b52:	4603      	mov	r3, r0
 8002b54:	461a      	mov	r2, r3
 8002b56:	4b29      	ldr	r3, [pc, #164]	; (8002bfc <Wash_Mode_Laundry+0x39c>)
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	1a9b      	subs	r3, r3, r2
 8002b5c:	b2da      	uxtb	r2, r3
 8002b5e:	4b27      	ldr	r3, [pc, #156]	; (8002bfc <Wash_Mode_Laundry+0x39c>)
 8002b60:	701a      	strb	r2, [r3, #0]
		}

		LCD_Command(CLEAR_DISPLAY); // 버튼을 누르는 순간마다 clear display해줘서 쓰레기값 방지
 8002b62:	2001      	movs	r0, #1
 8002b64:	f7fd fdce 	bl	8000704 <LCD_Command>
		Wash_Mode_Running_display(wash_complete_time);
 8002b68:	4b24      	ldr	r3, [pc, #144]	; (8002bfc <Wash_Mode_Laundry+0x39c>)
 8002b6a:	691a      	ldr	r2, [r3, #16]
 8002b6c:	9200      	str	r2, [sp, #0]
 8002b6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b70:	f000 fcb6 	bl	80034e0 <Wash_Mode_Running_display>
	}

	// 모터가 과열 되었거나, 버튼4를 눌렀을 때, 세탁 모드를 즉시 중지하고 세탁모드를 초기화해준다.
	if (Check_Motor_OverHeat() || Get_Button(BUTTON4_GPIO_Port, BUTTON4_Pin, 4) == BUTTON_PRESS)
 8002b74:	f000 fbee 	bl	8003354 <Check_Motor_OverHeat>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d108      	bne.n	8002b90 <Wash_Mode_Laundry+0x330>
 8002b7e:	2204      	movs	r2, #4
 8002b80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b84:	4821      	ldr	r0, [pc, #132]	; (8002c0c <Wash_Mode_Laundry+0x3ac>)
 8002b86:	f7fd fe6b 	bl	8000860 <Get_Button>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d128      	bne.n	8002be2 <Wash_Mode_Laundry+0x382>
	{
		mode_complete_alarm_stop_start_flag = STOP; // 완료 부저가 진행중일 경우 아예 꺼버리는게 논리적으로 맞음
 8002b90:	4b15      	ldr	r3, [pc, #84]	; (8002be8 <Wash_Mode_Laundry+0x388>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	701a      	strb	r2, [r3, #0]

		WashingMachine_curr_status = IDLE_MODE;
 8002b96:	4b17      	ldr	r3, [pc, #92]	; (8002bf4 <Wash_Mode_Laundry+0x394>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	701a      	strb	r2, [r3, #0]
		wash_mode_start_stop_flag = STOP;
 8002b9c:	4b13      	ldr	r3, [pc, #76]	; (8002bec <Wash_Mode_Laundry+0x38c>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	701a      	strb	r2, [r3, #0]
		dcmotor_forward_backward_flag = 0;
 8002ba2:	4b1b      	ldr	r3, [pc, #108]	; (8002c10 <Wash_Mode_Laundry+0x3b0>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	701a      	strb	r2, [r3, #0]
		wash_remain_time = 0;
 8002ba8:	4b13      	ldr	r3, [pc, #76]	; (8002bf8 <Wash_Mode_Laundry+0x398>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	601a      	str	r2, [r3, #0]
		wash_complete_time.Hours = dec2bcd(0);
 8002bae:	2000      	movs	r0, #0
 8002bb0:	f7fe f898 	bl	8000ce4 <dec2bcd>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	4b10      	ldr	r3, [pc, #64]	; (8002bfc <Wash_Mode_Laundry+0x39c>)
 8002bba:	701a      	strb	r2, [r3, #0]
		wash_complete_time.Minutes = dec2bcd(0);
 8002bbc:	2000      	movs	r0, #0
 8002bbe:	f7fe f891 	bl	8000ce4 <dec2bcd>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	4b0d      	ldr	r3, [pc, #52]	; (8002bfc <Wash_Mode_Laundry+0x39c>)
 8002bc8:	705a      	strb	r2, [r3, #1]
		wash_complete_time.Seconds = dec2bcd(0);
 8002bca:	2000      	movs	r0, #0
 8002bcc:	f7fe f88a 	bl	8000ce4 <dec2bcd>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	4b09      	ldr	r3, [pc, #36]	; (8002bfc <Wash_Mode_Laundry+0x39c>)
 8002bd6:	709a      	strb	r2, [r3, #2]

		LCD_Command(CLEAR_DISPLAY); // 버튼을 누르는 순간마다 clear display해줘서 쓰레기값 방지
 8002bd8:	2001      	movs	r0, #1
 8002bda:	f7fd fd93 	bl	8000704 <LCD_Command>
		Idle_Mode_Display(); // idle모드 화면으로 이동한다.
 8002bde:	f000 fbf1 	bl	80033c4 <Idle_Mode_Display>
	}
	/************************END 버튼 입력 인터럽트 부분************************/
}
 8002be2:	bf00      	nop
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	20000f8f 	.word	0x20000f8f
 8002bec:	20001008 	.word	0x20001008
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	20000f90 	.word	0x20000f90
 8002bf8:	20000fc0 	.word	0x20000fc0
 8002bfc:	20000fcc 	.word	0x20000fcc
 8002c00:	20000444 	.word	0x20000444
 8002c04:	91a2b3c5 	.word	0x91a2b3c5
 8002c08:	88888889 	.word	0x88888889
 8002c0c:	40020400 	.word	0x40020400
 8002c10:	20001009 	.word	0x20001009

08002c14 <Rinse_Mode_Laundry>:

/*
 * desc: "세탁/헹굼/탈수" 중 "헹굼"에 관련된 동작을 실행하는 함수이다.
 */
static void Rinse_Mode_Laundry(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af02      	add	r7, sp, #8
	static uint8_t rinse_mode_start_stop_flag = STOP;

	/************************BEGIN 기본 동작 부분************************/
	close_WashingMachine_Lid();
 8002c1a:	f7fe fee5 	bl	80019e8 <close_WashingMachine_Lid>
	Mode_Complete_Alarm();
 8002c1e:	f7fd fe6f 	bl	8000900 <Mode_Complete_Alarm>


	// 뚜껑이 열려있으면 동작을 중지하고 idle 화면으로 이동
	if (Check_Lid_Open())
 8002c22:	f000 fb8f 	bl	8003344 <Check_Lid_Open>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00a      	beq.n	8002c42 <Rinse_Mode_Laundry+0x2e>
	{
		mode_complete_alarm_stop_start_flag = STOP;
 8002c2c:	4b1e      	ldr	r3, [pc, #120]	; (8002ca8 <Rinse_Mode_Laundry+0x94>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	701a      	strb	r2, [r3, #0]
		WashingMachine_curr_status = 0;
 8002c32:	4b1e      	ldr	r3, [pc, #120]	; (8002cac <Rinse_Mode_Laundry+0x98>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	701a      	strb	r2, [r3, #0]
		LCD_Command(CLEAR_DISPLAY);
 8002c38:	2001      	movs	r0, #1
 8002c3a:	f7fd fd63 	bl	8000704 <LCD_Command>
		Idle_Mode_Display();
 8002c3e:	f000 fbc1 	bl	80033c4 <Idle_Mode_Display>
	}


	if (rinse_mode_start_stop_flag == STOP)
 8002c42:	4b1b      	ldr	r3, [pc, #108]	; (8002cb0 <Rinse_Mode_Laundry+0x9c>)
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d106      	bne.n	8002c58 <Rinse_Mode_Laundry+0x44>
	{
		DCmotor_Break();
 8002c4a:	f7fd fed9 	bl	8000a00 <DCmotor_Break>
		LEDbar_All_Off();
 8002c4e:	f7fe f86d 	bl	8000d2c <LEDbar_All_Off>
		FND4digit_off();
 8002c52:	f7fd fef9 	bl	8000a48 <FND4digit_off>
 8002c56:	e042      	b.n	8002cde <Rinse_Mode_Laundry+0xca>

	}
	else if (rinse_mode_start_stop_flag == START && rinse_remain_time > 0)
 8002c58:	4b15      	ldr	r3, [pc, #84]	; (8002cb0 <Rinse_Mode_Laundry+0x9c>)
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d12d      	bne.n	8002cbc <Rinse_Mode_Laundry+0xa8>
 8002c60:	4b14      	ldr	r3, [pc, #80]	; (8002cb4 <Rinse_Mode_Laundry+0xa0>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	dd29      	ble.n	8002cbc <Rinse_Mode_Laundry+0xa8>
	{
		// 완료부저가 실행중이더라도, 다시 모드가 시작되면 당연히 부저는 꺼져야함
		mode_complete_alarm_stop_start_flag = STOP;
 8002c68:	4b0f      	ldr	r3, [pc, #60]	; (8002ca8 <Rinse_Mode_Laundry+0x94>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	701a      	strb	r2, [r3, #0]

		// 남은시간은 자동으로 1초씩 감소
		if (TIM10_10ms_WM_rinse_timer > 100)
 8002c6e:	4b12      	ldr	r3, [pc, #72]	; (8002cb8 <Rinse_Mode_Laundry+0xa4>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2b64      	cmp	r3, #100	; 0x64
 8002c74:	d90e      	bls.n	8002c94 <Rinse_Mode_Laundry+0x80>
		{
			TIM10_10ms_WM_rinse_timer = 0;
 8002c76:	4b10      	ldr	r3, [pc, #64]	; (8002cb8 <Rinse_Mode_Laundry+0xa4>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]
			rinse_remain_time--;
 8002c7c:	4b0d      	ldr	r3, [pc, #52]	; (8002cb4 <Rinse_Mode_Laundry+0xa0>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	3b01      	subs	r3, #1
 8002c82:	4a0c      	ldr	r2, [pc, #48]	; (8002cb4 <Rinse_Mode_Laundry+0xa0>)
 8002c84:	6013      	str	r3, [r2, #0]
			if (rinse_remain_time < 0) {rinse_remain_time = 0;}
 8002c86:	4b0b      	ldr	r3, [pc, #44]	; (8002cb4 <Rinse_Mode_Laundry+0xa0>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	da02      	bge.n	8002c94 <Rinse_Mode_Laundry+0x80>
 8002c8e:	4b09      	ldr	r3, [pc, #36]	; (8002cb4 <Rinse_Mode_Laundry+0xa0>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]
		}

		DCmotor_Forward_Rotate();
 8002c94:	f7fd fe90 	bl	80009b8 <DCmotor_Forward_Rotate>

		LEDbar_On_Up();
 8002c98:	f7fe f854 	bl	8000d44 <LEDbar_On_Up>
		FND4digit_time_display(rinse_remain_time);
 8002c9c:	4b05      	ldr	r3, [pc, #20]	; (8002cb4 <Rinse_Mode_Laundry+0xa0>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7fd feef 	bl	8000a84 <FND4digit_time_display>
 8002ca6:	e01a      	b.n	8002cde <Rinse_Mode_Laundry+0xca>
 8002ca8:	20000f8f 	.word	0x20000f8f
 8002cac:	20000f90 	.word	0x20000f90
 8002cb0:	2000100a 	.word	0x2000100a
 8002cb4:	20000fc4 	.word	0x20000fc4
 8002cb8:	20000c20 	.word	0x20000c20
	}
	else // 플래그는 start이지만 남은시간이 0이하가 된 경우 여기로 빠짐
	{
		mode_complete_alarm_stop_start_flag = START;
 8002cbc:	4bac      	ldr	r3, [pc, #688]	; (8002f70 <Rinse_Mode_Laundry+0x35c>)
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	701a      	strb	r2, [r3, #0]
		rinse_mode_start_stop_flag = STOP;
 8002cc2:	4bac      	ldr	r3, [pc, #688]	; (8002f74 <Rinse_Mode_Laundry+0x360>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	701a      	strb	r2, [r3, #0]

		DCmotor_Break();
 8002cc8:	f7fd fe9a 	bl	8000a00 <DCmotor_Break>
		LEDbar_All_Off();
 8002ccc:	f7fe f82e 	bl	8000d2c <LEDbar_All_Off>
		FND4digit_off();
 8002cd0:	f7fd feba 	bl	8000a48 <FND4digit_off>

		// 완료가 되었다면 그냥 헹굼 셋팅 화면을 다시 출력
		LCD_Command(CLEAR_DISPLAY);
 8002cd4:	2001      	movs	r0, #1
 8002cd6:	f7fd fd15 	bl	8000704 <LCD_Command>
		Rinse_Mode_Setting_display();
 8002cda:	f000 fc47 	bl	800356c <Rinse_Mode_Setting_display>
	}
	/************************END 기본 동작 부분************************/

	/************************BEGIN 버튼 입력 인터럽트 부분************************/
	if (Get_Button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ce4:	48a4      	ldr	r0, [pc, #656]	; (8002f78 <Rinse_Mode_Laundry+0x364>)
 8002ce6:	f7fd fdbb 	bl	8000860 <Get_Button>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d114      	bne.n	8002d1a <Rinse_Mode_Laundry+0x106>
	{
		mode_complete_alarm_stop_start_flag = STOP; // 완료 부저가 진행중일 경우 아예 꺼버리는게 논리적으로 맞음
 8002cf0:	4b9f      	ldr	r3, [pc, #636]	; (8002f70 <Rinse_Mode_Laundry+0x35c>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	701a      	strb	r2, [r3, #0]

		WashingMachine_curr_status++;
 8002cf6:	4ba1      	ldr	r3, [pc, #644]	; (8002f7c <Rinse_Mode_Laundry+0x368>)
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	b2da      	uxtb	r2, r3
 8002cfe:	4b9f      	ldr	r3, [pc, #636]	; (8002f7c <Rinse_Mode_Laundry+0x368>)
 8002d00:	701a      	strb	r2, [r3, #0]
		WashingMachine_curr_status %= 4;
 8002d02:	4b9e      	ldr	r3, [pc, #632]	; (8002f7c <Rinse_Mode_Laundry+0x368>)
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	f003 0303 	and.w	r3, r3, #3
 8002d0a:	b2da      	uxtb	r2, r3
 8002d0c:	4b9b      	ldr	r3, [pc, #620]	; (8002f7c <Rinse_Mode_Laundry+0x368>)
 8002d0e:	701a      	strb	r2, [r3, #0]
		LCD_Command(CLEAR_DISPLAY); // 버튼을 누르는 순간마다 clear display해줘서 쓰레기값 방지
 8002d10:	2001      	movs	r0, #1
 8002d12:	f7fd fcf7 	bl	8000704 <LCD_Command>
		Spin_Mode_Setting_display();
 8002d16:	f000 fca3 	bl	8003660 <Spin_Mode_Setting_display>
	}

	// 헹굼 횟수를 1회 증가시킨다(1회는 7초로 간주)
	if (Get_Button(BUTTON1_GPIO_Port, BUTTON1_Pin, 1) == BUTTON_PRESS)
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002d20:	4895      	ldr	r0, [pc, #596]	; (8002f78 <Rinse_Mode_Laundry+0x364>)
 8002d22:	f7fd fd9d 	bl	8000860 <Get_Button>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d109      	bne.n	8002d40 <Rinse_Mode_Laundry+0x12c>
	{
		rinse_remain_time += 7;
 8002d2c:	4b94      	ldr	r3, [pc, #592]	; (8002f80 <Rinse_Mode_Laundry+0x36c>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	3307      	adds	r3, #7
 8002d32:	4a93      	ldr	r2, [pc, #588]	; (8002f80 <Rinse_Mode_Laundry+0x36c>)
 8002d34:	6013      	str	r3, [r2, #0]
		LCD_Command(CLEAR_DISPLAY); // 버튼을 누르는 순간마다 clear display해줘서 쓰레기값 방지
 8002d36:	2001      	movs	r0, #1
 8002d38:	f7fd fce4 	bl	8000704 <LCD_Command>
		Rinse_Mode_Setting_display();
 8002d3c:	f000 fc16 	bl	800356c <Rinse_Mode_Setting_display>
	}

	// 헹굼 횟수를 1회 감소시킨다(1회는 7초로 간주)
	if (Get_Button(BUTTON2_GPIO_Port, BUTTON2_Pin, 2) == BUTTON_PRESS)
 8002d40:	2202      	movs	r2, #2
 8002d42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d46:	488c      	ldr	r0, [pc, #560]	; (8002f78 <Rinse_Mode_Laundry+0x364>)
 8002d48:	f7fd fd8a 	bl	8000860 <Get_Button>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d110      	bne.n	8002d74 <Rinse_Mode_Laundry+0x160>
	{
		rinse_remain_time -= 7;
 8002d52:	4b8b      	ldr	r3, [pc, #556]	; (8002f80 <Rinse_Mode_Laundry+0x36c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	3b07      	subs	r3, #7
 8002d58:	4a89      	ldr	r2, [pc, #548]	; (8002f80 <Rinse_Mode_Laundry+0x36c>)
 8002d5a:	6013      	str	r3, [r2, #0]
		if (rinse_remain_time < 0) {rinse_remain_time = 0;}
 8002d5c:	4b88      	ldr	r3, [pc, #544]	; (8002f80 <Rinse_Mode_Laundry+0x36c>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	da02      	bge.n	8002d6a <Rinse_Mode_Laundry+0x156>
 8002d64:	4b86      	ldr	r3, [pc, #536]	; (8002f80 <Rinse_Mode_Laundry+0x36c>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	601a      	str	r2, [r3, #0]
		LCD_Command(CLEAR_DISPLAY); // 버튼을 누르는 순간마다 clear display해줘서 쓰레기값 방지
 8002d6a:	2001      	movs	r0, #1
 8002d6c:	f7fd fcca 	bl	8000704 <LCD_Command>
		Rinse_Mode_Setting_display();
 8002d70:	f000 fbfc 	bl	800356c <Rinse_Mode_Setting_display>
	}

	// 동작 시간을 설정 완료했다면, 세탁기 구동을 시작한다.
	if (Get_Button(BUTTON3_GPIO_Port, BUTTON3_Pin, 3) == BUTTON_PRESS)
 8002d74:	2203      	movs	r2, #3
 8002d76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d7a:	487f      	ldr	r0, [pc, #508]	; (8002f78 <Rinse_Mode_Laundry+0x364>)
 8002d7c:	f7fd fd70 	bl	8000860 <Get_Button>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	f040 80bc 	bne.w	8002f00 <Rinse_Mode_Laundry+0x2ec>
	{
		rinse_mode_start_stop_flag = START;
 8002d88:	4b7a      	ldr	r3, [pc, #488]	; (8002f74 <Rinse_Mode_Laundry+0x360>)
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	701a      	strb	r2, [r3, #0]

		HAL_RTC_GetTime(&hrtc, &rinse_complete_time, RTC_FORMAT_BCD);
 8002d8e:	2201      	movs	r2, #1
 8002d90:	497c      	ldr	r1, [pc, #496]	; (8002f84 <Rinse_Mode_Laundry+0x370>)
 8002d92:	487d      	ldr	r0, [pc, #500]	; (8002f88 <Rinse_Mode_Laundry+0x374>)
 8002d94:	f003 f994 	bl	80060c0 <HAL_RTC_GetTime>
		rinse_complete_time.Hours += dec2bcd(rinse_remain_time / 3600);
 8002d98:	4b79      	ldr	r3, [pc, #484]	; (8002f80 <Rinse_Mode_Laundry+0x36c>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a7b      	ldr	r2, [pc, #492]	; (8002f8c <Rinse_Mode_Laundry+0x378>)
 8002d9e:	fb82 1203 	smull	r1, r2, r2, r3
 8002da2:	441a      	add	r2, r3
 8002da4:	12d2      	asrs	r2, r2, #11
 8002da6:	17db      	asrs	r3, r3, #31
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7fd ff99 	bl	8000ce4 <dec2bcd>
 8002db2:	4603      	mov	r3, r0
 8002db4:	461a      	mov	r2, r3
 8002db6:	4b73      	ldr	r3, [pc, #460]	; (8002f84 <Rinse_Mode_Laundry+0x370>)
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	4413      	add	r3, r2
 8002dbc:	b2da      	uxtb	r2, r3
 8002dbe:	4b71      	ldr	r3, [pc, #452]	; (8002f84 <Rinse_Mode_Laundry+0x370>)
 8002dc0:	701a      	strb	r2, [r3, #0]
		rinse_complete_time.Minutes += dec2bcd((rinse_remain_time % 3600) / 60);
 8002dc2:	4b6f      	ldr	r3, [pc, #444]	; (8002f80 <Rinse_Mode_Laundry+0x36c>)
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	4b71      	ldr	r3, [pc, #452]	; (8002f8c <Rinse_Mode_Laundry+0x378>)
 8002dc8:	fb83 1302 	smull	r1, r3, r3, r2
 8002dcc:	4413      	add	r3, r2
 8002dce:	12d9      	asrs	r1, r3, #11
 8002dd0:	17d3      	asrs	r3, r2, #31
 8002dd2:	1acb      	subs	r3, r1, r3
 8002dd4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002dd8:	fb01 f303 	mul.w	r3, r1, r3
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	4a6c      	ldr	r2, [pc, #432]	; (8002f90 <Rinse_Mode_Laundry+0x37c>)
 8002de0:	fb82 1203 	smull	r1, r2, r2, r3
 8002de4:	441a      	add	r2, r3
 8002de6:	1152      	asrs	r2, r2, #5
 8002de8:	17db      	asrs	r3, r3, #31
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7fd ff78 	bl	8000ce4 <dec2bcd>
 8002df4:	4603      	mov	r3, r0
 8002df6:	461a      	mov	r2, r3
 8002df8:	4b62      	ldr	r3, [pc, #392]	; (8002f84 <Rinse_Mode_Laundry+0x370>)
 8002dfa:	785b      	ldrb	r3, [r3, #1]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	b2da      	uxtb	r2, r3
 8002e00:	4b60      	ldr	r3, [pc, #384]	; (8002f84 <Rinse_Mode_Laundry+0x370>)
 8002e02:	705a      	strb	r2, [r3, #1]
		rinse_complete_time.Seconds += dec2bcd((rinse_remain_time % 3600) % 60);
 8002e04:	4b5e      	ldr	r3, [pc, #376]	; (8002f80 <Rinse_Mode_Laundry+0x36c>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a60      	ldr	r2, [pc, #384]	; (8002f8c <Rinse_Mode_Laundry+0x378>)
 8002e0a:	fb82 1203 	smull	r1, r2, r2, r3
 8002e0e:	441a      	add	r2, r3
 8002e10:	12d1      	asrs	r1, r2, #11
 8002e12:	17da      	asrs	r2, r3, #31
 8002e14:	1a8a      	subs	r2, r1, r2
 8002e16:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002e1a:	fb01 f202 	mul.w	r2, r1, r2
 8002e1e:	1a9a      	subs	r2, r3, r2
 8002e20:	4b5b      	ldr	r3, [pc, #364]	; (8002f90 <Rinse_Mode_Laundry+0x37c>)
 8002e22:	fb83 1302 	smull	r1, r3, r3, r2
 8002e26:	4413      	add	r3, r2
 8002e28:	1159      	asrs	r1, r3, #5
 8002e2a:	17d3      	asrs	r3, r2, #31
 8002e2c:	1ac9      	subs	r1, r1, r3
 8002e2e:	460b      	mov	r3, r1
 8002e30:	011b      	lsls	r3, r3, #4
 8002e32:	1a5b      	subs	r3, r3, r1
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	1ad1      	subs	r1, r2, r3
 8002e38:	b2cb      	uxtb	r3, r1
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7fd ff52 	bl	8000ce4 <dec2bcd>
 8002e40:	4603      	mov	r3, r0
 8002e42:	461a      	mov	r2, r3
 8002e44:	4b4f      	ldr	r3, [pc, #316]	; (8002f84 <Rinse_Mode_Laundry+0x370>)
 8002e46:	789b      	ldrb	r3, [r3, #2]
 8002e48:	4413      	add	r3, r2
 8002e4a:	b2da      	uxtb	r2, r3
 8002e4c:	4b4d      	ldr	r3, [pc, #308]	; (8002f84 <Rinse_Mode_Laundry+0x370>)
 8002e4e:	709a      	strb	r2, [r3, #2]

		if (bcd2dec(rinse_complete_time.Seconds) >= 60)
 8002e50:	4b4c      	ldr	r3, [pc, #304]	; (8002f84 <Rinse_Mode_Laundry+0x370>)
 8002e52:	789b      	ldrb	r3, [r3, #2]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7fd ff29 	bl	8000cac <bcd2dec>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b3b      	cmp	r3, #59	; 0x3b
 8002e5e:	d915      	bls.n	8002e8c <Rinse_Mode_Laundry+0x278>
		{
			rinse_complete_time.Minutes += dec2bcd(1);
 8002e60:	2001      	movs	r0, #1
 8002e62:	f7fd ff3f 	bl	8000ce4 <dec2bcd>
 8002e66:	4603      	mov	r3, r0
 8002e68:	461a      	mov	r2, r3
 8002e6a:	4b46      	ldr	r3, [pc, #280]	; (8002f84 <Rinse_Mode_Laundry+0x370>)
 8002e6c:	785b      	ldrb	r3, [r3, #1]
 8002e6e:	4413      	add	r3, r2
 8002e70:	b2da      	uxtb	r2, r3
 8002e72:	4b44      	ldr	r3, [pc, #272]	; (8002f84 <Rinse_Mode_Laundry+0x370>)
 8002e74:	705a      	strb	r2, [r3, #1]
			rinse_complete_time.Seconds -= dec2bcd(60);
 8002e76:	203c      	movs	r0, #60	; 0x3c
 8002e78:	f7fd ff34 	bl	8000ce4 <dec2bcd>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	461a      	mov	r2, r3
 8002e80:	4b40      	ldr	r3, [pc, #256]	; (8002f84 <Rinse_Mode_Laundry+0x370>)
 8002e82:	789b      	ldrb	r3, [r3, #2]
 8002e84:	1a9b      	subs	r3, r3, r2
 8002e86:	b2da      	uxtb	r2, r3
 8002e88:	4b3e      	ldr	r3, [pc, #248]	; (8002f84 <Rinse_Mode_Laundry+0x370>)
 8002e8a:	709a      	strb	r2, [r3, #2]
		}
		if (bcd2dec(rinse_complete_time.Minutes) >= 60)
 8002e8c:	4b3d      	ldr	r3, [pc, #244]	; (8002f84 <Rinse_Mode_Laundry+0x370>)
 8002e8e:	785b      	ldrb	r3, [r3, #1]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7fd ff0b 	bl	8000cac <bcd2dec>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b3b      	cmp	r3, #59	; 0x3b
 8002e9a:	d915      	bls.n	8002ec8 <Rinse_Mode_Laundry+0x2b4>
		{
			rinse_complete_time.Hours += dec2bcd(1);
 8002e9c:	2001      	movs	r0, #1
 8002e9e:	f7fd ff21 	bl	8000ce4 <dec2bcd>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	4b37      	ldr	r3, [pc, #220]	; (8002f84 <Rinse_Mode_Laundry+0x370>)
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	4413      	add	r3, r2
 8002eac:	b2da      	uxtb	r2, r3
 8002eae:	4b35      	ldr	r3, [pc, #212]	; (8002f84 <Rinse_Mode_Laundry+0x370>)
 8002eb0:	701a      	strb	r2, [r3, #0]
			rinse_complete_time.Minutes -= dec2bcd(60);
 8002eb2:	203c      	movs	r0, #60	; 0x3c
 8002eb4:	f7fd ff16 	bl	8000ce4 <dec2bcd>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	461a      	mov	r2, r3
 8002ebc:	4b31      	ldr	r3, [pc, #196]	; (8002f84 <Rinse_Mode_Laundry+0x370>)
 8002ebe:	785b      	ldrb	r3, [r3, #1]
 8002ec0:	1a9b      	subs	r3, r3, r2
 8002ec2:	b2da      	uxtb	r2, r3
 8002ec4:	4b2f      	ldr	r3, [pc, #188]	; (8002f84 <Rinse_Mode_Laundry+0x370>)
 8002ec6:	705a      	strb	r2, [r3, #1]
		}
		if (bcd2dec(rinse_complete_time.Hours) >= 24)
 8002ec8:	4b2e      	ldr	r3, [pc, #184]	; (8002f84 <Rinse_Mode_Laundry+0x370>)
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7fd feed 	bl	8000cac <bcd2dec>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b17      	cmp	r3, #23
 8002ed6:	d90a      	bls.n	8002eee <Rinse_Mode_Laundry+0x2da>
		{
			// DATE를 1 올려야 하지만, 현재 해당 프로그램에서 date는 고려하고 있지 않음
			rinse_complete_time.Hours -= dec2bcd(24);
 8002ed8:	2018      	movs	r0, #24
 8002eda:	f7fd ff03 	bl	8000ce4 <dec2bcd>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	4b28      	ldr	r3, [pc, #160]	; (8002f84 <Rinse_Mode_Laundry+0x370>)
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	1a9b      	subs	r3, r3, r2
 8002ee8:	b2da      	uxtb	r2, r3
 8002eea:	4b26      	ldr	r3, [pc, #152]	; (8002f84 <Rinse_Mode_Laundry+0x370>)
 8002eec:	701a      	strb	r2, [r3, #0]
		}

		LCD_Command(CLEAR_DISPLAY); // 버튼을 누르는 순간마다 clear display해줘서 쓰레기값 방지
 8002eee:	2001      	movs	r0, #1
 8002ef0:	f7fd fc08 	bl	8000704 <LCD_Command>
		Rinse_Mode_Running_display(rinse_complete_time);
 8002ef4:	4b23      	ldr	r3, [pc, #140]	; (8002f84 <Rinse_Mode_Laundry+0x370>)
 8002ef6:	691a      	ldr	r2, [r3, #16]
 8002ef8:	9200      	str	r2, [sp, #0]
 8002efa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002efc:	f000 fb6a 	bl	80035d4 <Rinse_Mode_Running_display>
	}

	// 모터가 과열 되었거나, 버튼4를 눌렀을 때, 헹굼 모드를 즉시 중지하고 세탁모드를 초기화해준다.
	if (Check_Motor_OverHeat() || Get_Button(BUTTON4_GPIO_Port, BUTTON4_Pin, 4) == BUTTON_PRESS)
 8002f00:	f000 fa28 	bl	8003354 <Check_Motor_OverHeat>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d108      	bne.n	8002f1c <Rinse_Mode_Laundry+0x308>
 8002f0a:	2204      	movs	r2, #4
 8002f0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f10:	4820      	ldr	r0, [pc, #128]	; (8002f94 <Rinse_Mode_Laundry+0x380>)
 8002f12:	f7fd fca5 	bl	8000860 <Get_Button>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d125      	bne.n	8002f68 <Rinse_Mode_Laundry+0x354>
	{
		mode_complete_alarm_stop_start_flag = STOP; // 완료 부저가 진행중일 경우 아예 꺼버리는게 논리적으로 맞음
 8002f1c:	4b14      	ldr	r3, [pc, #80]	; (8002f70 <Rinse_Mode_Laundry+0x35c>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	701a      	strb	r2, [r3, #0]

		WashingMachine_curr_status = IDLE_MODE;
 8002f22:	4b16      	ldr	r3, [pc, #88]	; (8002f7c <Rinse_Mode_Laundry+0x368>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	701a      	strb	r2, [r3, #0]
		rinse_mode_start_stop_flag = STOP;
 8002f28:	4b12      	ldr	r3, [pc, #72]	; (8002f74 <Rinse_Mode_Laundry+0x360>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	701a      	strb	r2, [r3, #0]
		rinse_remain_time = 0;
 8002f2e:	4b14      	ldr	r3, [pc, #80]	; (8002f80 <Rinse_Mode_Laundry+0x36c>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	601a      	str	r2, [r3, #0]
		rinse_complete_time.Hours = dec2bcd(0);
 8002f34:	2000      	movs	r0, #0
 8002f36:	f7fd fed5 	bl	8000ce4 <dec2bcd>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	4b11      	ldr	r3, [pc, #68]	; (8002f84 <Rinse_Mode_Laundry+0x370>)
 8002f40:	701a      	strb	r2, [r3, #0]
		rinse_complete_time.Minutes = dec2bcd(0);
 8002f42:	2000      	movs	r0, #0
 8002f44:	f7fd fece 	bl	8000ce4 <dec2bcd>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	4b0d      	ldr	r3, [pc, #52]	; (8002f84 <Rinse_Mode_Laundry+0x370>)
 8002f4e:	705a      	strb	r2, [r3, #1]
		rinse_complete_time.Seconds = dec2bcd(0);
 8002f50:	2000      	movs	r0, #0
 8002f52:	f7fd fec7 	bl	8000ce4 <dec2bcd>
 8002f56:	4603      	mov	r3, r0
 8002f58:	461a      	mov	r2, r3
 8002f5a:	4b0a      	ldr	r3, [pc, #40]	; (8002f84 <Rinse_Mode_Laundry+0x370>)
 8002f5c:	709a      	strb	r2, [r3, #2]

		LCD_Command(CLEAR_DISPLAY); // 버튼을 누르는 순간마다 clear display해줘서 쓰레기값 방지
 8002f5e:	2001      	movs	r0, #1
 8002f60:	f7fd fbd0 	bl	8000704 <LCD_Command>
		Idle_Mode_Display(); // idle모드 화면으로 이동한다.
 8002f64:	f000 fa2e 	bl	80033c4 <Idle_Mode_Display>
	}
	/************************END 버튼 입력 인터럽트 부분************************/
}
 8002f68:	bf00      	nop
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	20000f8f 	.word	0x20000f8f
 8002f74:	2000100a 	.word	0x2000100a
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	20000f90 	.word	0x20000f90
 8002f80:	20000fc4 	.word	0x20000fc4
 8002f84:	20000fe0 	.word	0x20000fe0
 8002f88:	20000444 	.word	0x20000444
 8002f8c:	91a2b3c5 	.word	0x91a2b3c5
 8002f90:	88888889 	.word	0x88888889
 8002f94:	40020400 	.word	0x40020400

08002f98 <Spin_Mode_Laundry>:

/*
 * desc: "세탁/헹굼/탈수" 중 "탈수"에 관련된 동작을 실행하는 함수이다.
 */
static void Spin_Mode_Laundry(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af02      	add	r7, sp, #8
	static uint8_t spin_mode_start_stop_flag = STOP;
	static uint16_t dcmotor_duty_cycle = 30;


	/************************BEGIN 기본 동작 부분************************/
	close_WashingMachine_Lid();
 8002f9e:	f7fe fd23 	bl	80019e8 <close_WashingMachine_Lid>
	Mode_Complete_Alarm();
 8002fa2:	f7fd fcad 	bl	8000900 <Mode_Complete_Alarm>

	// 뚜껑이 열려있으면 동작을 중지하고 idle 화면으로 이동
	if (Check_Lid_Open())
 8002fa6:	f000 f9cd 	bl	8003344 <Check_Lid_Open>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d007      	beq.n	8002fc0 <Spin_Mode_Laundry+0x28>
	{
		WashingMachine_curr_status = 0;
 8002fb0:	4b26      	ldr	r3, [pc, #152]	; (800304c <Spin_Mode_Laundry+0xb4>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	701a      	strb	r2, [r3, #0]
		LCD_Command(CLEAR_DISPLAY);
 8002fb6:	2001      	movs	r0, #1
 8002fb8:	f7fd fba4 	bl	8000704 <LCD_Command>
		Idle_Mode_Display();
 8002fbc:	f000 fa02 	bl	80033c4 <Idle_Mode_Display>
	}


	if (spin_mode_start_stop_flag == STOP)
 8002fc0:	4b23      	ldr	r3, [pc, #140]	; (8003050 <Spin_Mode_Laundry+0xb8>)
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d106      	bne.n	8002fd6 <Spin_Mode_Laundry+0x3e>
	{
		DCmotor_Break();
 8002fc8:	f7fd fd1a 	bl	8000a00 <DCmotor_Break>
		LEDbar_All_Off();
 8002fcc:	f7fd feae 	bl	8000d2c <LEDbar_All_Off>
		FND4digit_off();
 8002fd0:	f7fd fd3a 	bl	8000a48 <FND4digit_off>
 8002fd4:	e05a      	b.n	800308c <Spin_Mode_Laundry+0xf4>
	}
	else if (spin_mode_start_stop_flag == START && spin_remain_time > 0)
 8002fd6:	4b1e      	ldr	r3, [pc, #120]	; (8003050 <Spin_Mode_Laundry+0xb8>)
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d142      	bne.n	8003064 <Spin_Mode_Laundry+0xcc>
 8002fde:	4b1d      	ldr	r3, [pc, #116]	; (8003054 <Spin_Mode_Laundry+0xbc>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	dd3e      	ble.n	8003064 <Spin_Mode_Laundry+0xcc>
	{
		// 완료부저가 실행중이더라도, 다시 모드가 시작되면 당연히 부저는 꺼져야함
		mode_complete_alarm_stop_start_flag = STOP;
 8002fe6:	4b1c      	ldr	r3, [pc, #112]	; (8003058 <Spin_Mode_Laundry+0xc0>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	701a      	strb	r2, [r3, #0]

		// 남은시간은 자동으로 1초씩 감소
		if (TIM10_10ms_WM_spin_timer > 100)
 8002fec:	4b1b      	ldr	r3, [pc, #108]	; (800305c <Spin_Mode_Laundry+0xc4>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2b64      	cmp	r3, #100	; 0x64
 8002ff2:	d920      	bls.n	8003036 <Spin_Mode_Laundry+0x9e>
		{
			TIM10_10ms_WM_spin_timer = 0;
 8002ff4:	4b19      	ldr	r3, [pc, #100]	; (800305c <Spin_Mode_Laundry+0xc4>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	601a      	str	r2, [r3, #0]
			spin_remain_time--;
 8002ffa:	4b16      	ldr	r3, [pc, #88]	; (8003054 <Spin_Mode_Laundry+0xbc>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	3b01      	subs	r3, #1
 8003000:	4a14      	ldr	r2, [pc, #80]	; (8003054 <Spin_Mode_Laundry+0xbc>)
 8003002:	6013      	str	r3, [r2, #0]
			if (spin_remain_time < 0) {spin_remain_time = 0;}
 8003004:	4b13      	ldr	r3, [pc, #76]	; (8003054 <Spin_Mode_Laundry+0xbc>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	da02      	bge.n	8003012 <Spin_Mode_Laundry+0x7a>
 800300c:	4b11      	ldr	r3, [pc, #68]	; (8003054 <Spin_Mode_Laundry+0xbc>)
 800300e:	2200      	movs	r2, #0
 8003010:	601a      	str	r2, [r3, #0]

			dcmotor_duty_cycle += 3;
 8003012:	4b13      	ldr	r3, [pc, #76]	; (8003060 <Spin_Mode_Laundry+0xc8>)
 8003014:	881b      	ldrh	r3, [r3, #0]
 8003016:	3303      	adds	r3, #3
 8003018:	b29a      	uxth	r2, r3
 800301a:	4b11      	ldr	r3, [pc, #68]	; (8003060 <Spin_Mode_Laundry+0xc8>)
 800301c:	801a      	strh	r2, [r3, #0]
			if (dcmotor_duty_cycle > 100)
 800301e:	4b10      	ldr	r3, [pc, #64]	; (8003060 <Spin_Mode_Laundry+0xc8>)
 8003020:	881b      	ldrh	r3, [r3, #0]
 8003022:	2b64      	cmp	r3, #100	; 0x64
 8003024:	d902      	bls.n	800302c <Spin_Mode_Laundry+0x94>
			{
				dcmotor_duty_cycle = 100;
 8003026:	4b0e      	ldr	r3, [pc, #56]	; (8003060 <Spin_Mode_Laundry+0xc8>)
 8003028:	2264      	movs	r2, #100	; 0x64
 800302a:	801a      	strh	r2, [r3, #0]
			}

			DCmotor_Set_DutyCycle(dcmotor_duty_cycle);
 800302c:	4b0c      	ldr	r3, [pc, #48]	; (8003060 <Spin_Mode_Laundry+0xc8>)
 800302e:	881b      	ldrh	r3, [r3, #0]
 8003030:	4618      	mov	r0, r3
 8003032:	f7fd fcf7 	bl	8000a24 <DCmotor_Set_DutyCycle>
		}

		DCmotor_Forward_Rotate();
 8003036:	f7fd fcbf 	bl	80009b8 <DCmotor_Forward_Rotate>

		LEDbar_Keepon_Up();
 800303a:	f7fd fead 	bl	8000d98 <LEDbar_Keepon_Up>
		FND4digit_time_display(spin_remain_time);
 800303e:	4b05      	ldr	r3, [pc, #20]	; (8003054 <Spin_Mode_Laundry+0xbc>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4618      	mov	r0, r3
 8003044:	f7fd fd1e 	bl	8000a84 <FND4digit_time_display>
 8003048:	e020      	b.n	800308c <Spin_Mode_Laundry+0xf4>
 800304a:	bf00      	nop
 800304c:	20000f90 	.word	0x20000f90
 8003050:	2000100b 	.word	0x2000100b
 8003054:	20000fc8 	.word	0x20000fc8
 8003058:	20000f8f 	.word	0x20000f8f
 800305c:	20000c24 	.word	0x20000c24
 8003060:	2000011c 	.word	0x2000011c
	}
	else // 플래그는 start이지만 남은시간이 0이하가 된 경우 여기로 빠짐
	{
		mode_complete_alarm_stop_start_flag = START;
 8003064:	4bac      	ldr	r3, [pc, #688]	; (8003318 <Spin_Mode_Laundry+0x380>)
 8003066:	2201      	movs	r2, #1
 8003068:	701a      	strb	r2, [r3, #0]
		spin_mode_start_stop_flag = STOP;
 800306a:	4bac      	ldr	r3, [pc, #688]	; (800331c <Spin_Mode_Laundry+0x384>)
 800306c:	2200      	movs	r2, #0
 800306e:	701a      	strb	r2, [r3, #0]
		dcmotor_duty_cycle = 30;
 8003070:	4bab      	ldr	r3, [pc, #684]	; (8003320 <Spin_Mode_Laundry+0x388>)
 8003072:	221e      	movs	r2, #30
 8003074:	801a      	strh	r2, [r3, #0]

		DCmotor_Break();
 8003076:	f7fd fcc3 	bl	8000a00 <DCmotor_Break>
		LEDbar_All_Off();
 800307a:	f7fd fe57 	bl	8000d2c <LEDbar_All_Off>
		FND4digit_off();
 800307e:	f7fd fce3 	bl	8000a48 <FND4digit_off>

		// 완료가 되었다면 그냥 탈수 셋팅 화면을 다시 출력
		LCD_Command(CLEAR_DISPLAY);
 8003082:	2001      	movs	r0, #1
 8003084:	f7fd fb3e 	bl	8000704 <LCD_Command>
		Spin_Mode_Setting_display();
 8003088:	f000 faea 	bl	8003660 <Spin_Mode_Setting_display>
//		Mode_Complete_Alarm();
	}
	/************************END 기본 동작 부분************************/

	/************************BEGIN 버튼 입력 인터럽트 부분************************/
	if (Get_Button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)
 800308c:	2200      	movs	r2, #0
 800308e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003092:	48a4      	ldr	r0, [pc, #656]	; (8003324 <Spin_Mode_Laundry+0x38c>)
 8003094:	f7fd fbe4 	bl	8000860 <Get_Button>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d114      	bne.n	80030c8 <Spin_Mode_Laundry+0x130>
	{
		mode_complete_alarm_stop_start_flag = STOP; // 완료 부저가 진행중일 경우 아예 꺼버리는게 논리적으로 맞음
 800309e:	4b9e      	ldr	r3, [pc, #632]	; (8003318 <Spin_Mode_Laundry+0x380>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	701a      	strb	r2, [r3, #0]

		WashingMachine_curr_status++;
 80030a4:	4ba0      	ldr	r3, [pc, #640]	; (8003328 <Spin_Mode_Laundry+0x390>)
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	3301      	adds	r3, #1
 80030aa:	b2da      	uxtb	r2, r3
 80030ac:	4b9e      	ldr	r3, [pc, #632]	; (8003328 <Spin_Mode_Laundry+0x390>)
 80030ae:	701a      	strb	r2, [r3, #0]
		WashingMachine_curr_status %= 4;
 80030b0:	4b9d      	ldr	r3, [pc, #628]	; (8003328 <Spin_Mode_Laundry+0x390>)
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	f003 0303 	and.w	r3, r3, #3
 80030b8:	b2da      	uxtb	r2, r3
 80030ba:	4b9b      	ldr	r3, [pc, #620]	; (8003328 <Spin_Mode_Laundry+0x390>)
 80030bc:	701a      	strb	r2, [r3, #0]
		LCD_Command(CLEAR_DISPLAY); // 버튼을 누르는 순간마다 clear display해줘서 쓰레기값 방지
 80030be:	2001      	movs	r0, #1
 80030c0:	f7fd fb20 	bl	8000704 <LCD_Command>
		Idle_Mode_Display();
 80030c4:	f000 f97e 	bl	80033c4 <Idle_Mode_Display>
	}

	// 탈수 횟수를 1회 증가시킨다(1회는 7초로 간주)
	if (Get_Button(BUTTON1_GPIO_Port, BUTTON1_Pin, 1) == BUTTON_PRESS)
 80030c8:	2201      	movs	r2, #1
 80030ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80030ce:	4895      	ldr	r0, [pc, #596]	; (8003324 <Spin_Mode_Laundry+0x38c>)
 80030d0:	f7fd fbc6 	bl	8000860 <Get_Button>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d109      	bne.n	80030ee <Spin_Mode_Laundry+0x156>
	{
		spin_remain_time += 7;
 80030da:	4b94      	ldr	r3, [pc, #592]	; (800332c <Spin_Mode_Laundry+0x394>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	3307      	adds	r3, #7
 80030e0:	4a92      	ldr	r2, [pc, #584]	; (800332c <Spin_Mode_Laundry+0x394>)
 80030e2:	6013      	str	r3, [r2, #0]
		LCD_Command(CLEAR_DISPLAY); // 버튼을 누르는 순간마다 clear display해줘서 쓰레기값 방지
 80030e4:	2001      	movs	r0, #1
 80030e6:	f7fd fb0d 	bl	8000704 <LCD_Command>
		Spin_Mode_Setting_display();
 80030ea:	f000 fab9 	bl	8003660 <Spin_Mode_Setting_display>
	}

	// 헹굼 횟수를 1회 감소시킨다(1회는 7초로 간주)
	if (Get_Button(BUTTON2_GPIO_Port, BUTTON2_Pin, 2) == BUTTON_PRESS)
 80030ee:	2202      	movs	r2, #2
 80030f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80030f4:	488b      	ldr	r0, [pc, #556]	; (8003324 <Spin_Mode_Laundry+0x38c>)
 80030f6:	f7fd fbb3 	bl	8000860 <Get_Button>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d110      	bne.n	8003122 <Spin_Mode_Laundry+0x18a>
	{
		spin_remain_time -= 7;
 8003100:	4b8a      	ldr	r3, [pc, #552]	; (800332c <Spin_Mode_Laundry+0x394>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	3b07      	subs	r3, #7
 8003106:	4a89      	ldr	r2, [pc, #548]	; (800332c <Spin_Mode_Laundry+0x394>)
 8003108:	6013      	str	r3, [r2, #0]
		if (spin_remain_time < 0) {spin_remain_time = 0;}
 800310a:	4b88      	ldr	r3, [pc, #544]	; (800332c <Spin_Mode_Laundry+0x394>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2b00      	cmp	r3, #0
 8003110:	da02      	bge.n	8003118 <Spin_Mode_Laundry+0x180>
 8003112:	4b86      	ldr	r3, [pc, #536]	; (800332c <Spin_Mode_Laundry+0x394>)
 8003114:	2200      	movs	r2, #0
 8003116:	601a      	str	r2, [r3, #0]
		LCD_Command(CLEAR_DISPLAY); // 버튼을 누르는 순간마다 clear display해줘서 쓰레기값 방지
 8003118:	2001      	movs	r0, #1
 800311a:	f7fd faf3 	bl	8000704 <LCD_Command>
		Spin_Mode_Setting_display();
 800311e:	f000 fa9f 	bl	8003660 <Spin_Mode_Setting_display>
	}

	// 동작 시간을 설정 완료했다면, 세탁기 구동을 시작한다.
	if (Get_Button(BUTTON3_GPIO_Port, BUTTON3_Pin, 3) == BUTTON_PRESS)
 8003122:	2203      	movs	r2, #3
 8003124:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003128:	487e      	ldr	r0, [pc, #504]	; (8003324 <Spin_Mode_Laundry+0x38c>)
 800312a:	f7fd fb99 	bl	8000860 <Get_Button>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	f040 80bc 	bne.w	80032ae <Spin_Mode_Laundry+0x316>
	{
		spin_mode_start_stop_flag = START;
 8003136:	4b79      	ldr	r3, [pc, #484]	; (800331c <Spin_Mode_Laundry+0x384>)
 8003138:	2201      	movs	r2, #1
 800313a:	701a      	strb	r2, [r3, #0]

		HAL_RTC_GetTime(&hrtc, &spin_complete_time, RTC_FORMAT_BCD);
 800313c:	2201      	movs	r2, #1
 800313e:	497c      	ldr	r1, [pc, #496]	; (8003330 <Spin_Mode_Laundry+0x398>)
 8003140:	487c      	ldr	r0, [pc, #496]	; (8003334 <Spin_Mode_Laundry+0x39c>)
 8003142:	f002 ffbd 	bl	80060c0 <HAL_RTC_GetTime>
		spin_complete_time.Hours += dec2bcd(spin_remain_time / 3600);
 8003146:	4b79      	ldr	r3, [pc, #484]	; (800332c <Spin_Mode_Laundry+0x394>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a7b      	ldr	r2, [pc, #492]	; (8003338 <Spin_Mode_Laundry+0x3a0>)
 800314c:	fb82 1203 	smull	r1, r2, r2, r3
 8003150:	441a      	add	r2, r3
 8003152:	12d2      	asrs	r2, r2, #11
 8003154:	17db      	asrs	r3, r3, #31
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	b2db      	uxtb	r3, r3
 800315a:	4618      	mov	r0, r3
 800315c:	f7fd fdc2 	bl	8000ce4 <dec2bcd>
 8003160:	4603      	mov	r3, r0
 8003162:	461a      	mov	r2, r3
 8003164:	4b72      	ldr	r3, [pc, #456]	; (8003330 <Spin_Mode_Laundry+0x398>)
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	4413      	add	r3, r2
 800316a:	b2da      	uxtb	r2, r3
 800316c:	4b70      	ldr	r3, [pc, #448]	; (8003330 <Spin_Mode_Laundry+0x398>)
 800316e:	701a      	strb	r2, [r3, #0]
		spin_complete_time.Minutes += dec2bcd((spin_remain_time % 3600) / 60);
 8003170:	4b6e      	ldr	r3, [pc, #440]	; (800332c <Spin_Mode_Laundry+0x394>)
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	4b70      	ldr	r3, [pc, #448]	; (8003338 <Spin_Mode_Laundry+0x3a0>)
 8003176:	fb83 1302 	smull	r1, r3, r3, r2
 800317a:	4413      	add	r3, r2
 800317c:	12d9      	asrs	r1, r3, #11
 800317e:	17d3      	asrs	r3, r2, #31
 8003180:	1acb      	subs	r3, r1, r3
 8003182:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8003186:	fb01 f303 	mul.w	r3, r1, r3
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	4a6b      	ldr	r2, [pc, #428]	; (800333c <Spin_Mode_Laundry+0x3a4>)
 800318e:	fb82 1203 	smull	r1, r2, r2, r3
 8003192:	441a      	add	r2, r3
 8003194:	1152      	asrs	r2, r2, #5
 8003196:	17db      	asrs	r3, r3, #31
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	b2db      	uxtb	r3, r3
 800319c:	4618      	mov	r0, r3
 800319e:	f7fd fda1 	bl	8000ce4 <dec2bcd>
 80031a2:	4603      	mov	r3, r0
 80031a4:	461a      	mov	r2, r3
 80031a6:	4b62      	ldr	r3, [pc, #392]	; (8003330 <Spin_Mode_Laundry+0x398>)
 80031a8:	785b      	ldrb	r3, [r3, #1]
 80031aa:	4413      	add	r3, r2
 80031ac:	b2da      	uxtb	r2, r3
 80031ae:	4b60      	ldr	r3, [pc, #384]	; (8003330 <Spin_Mode_Laundry+0x398>)
 80031b0:	705a      	strb	r2, [r3, #1]
		spin_complete_time.Seconds += dec2bcd((spin_remain_time % 3600) % 60);
 80031b2:	4b5e      	ldr	r3, [pc, #376]	; (800332c <Spin_Mode_Laundry+0x394>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a60      	ldr	r2, [pc, #384]	; (8003338 <Spin_Mode_Laundry+0x3a0>)
 80031b8:	fb82 1203 	smull	r1, r2, r2, r3
 80031bc:	441a      	add	r2, r3
 80031be:	12d1      	asrs	r1, r2, #11
 80031c0:	17da      	asrs	r2, r3, #31
 80031c2:	1a8a      	subs	r2, r1, r2
 80031c4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80031c8:	fb01 f202 	mul.w	r2, r1, r2
 80031cc:	1a9a      	subs	r2, r3, r2
 80031ce:	4b5b      	ldr	r3, [pc, #364]	; (800333c <Spin_Mode_Laundry+0x3a4>)
 80031d0:	fb83 1302 	smull	r1, r3, r3, r2
 80031d4:	4413      	add	r3, r2
 80031d6:	1159      	asrs	r1, r3, #5
 80031d8:	17d3      	asrs	r3, r2, #31
 80031da:	1ac9      	subs	r1, r1, r3
 80031dc:	460b      	mov	r3, r1
 80031de:	011b      	lsls	r3, r3, #4
 80031e0:	1a5b      	subs	r3, r3, r1
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	1ad1      	subs	r1, r2, r3
 80031e6:	b2cb      	uxtb	r3, r1
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7fd fd7b 	bl	8000ce4 <dec2bcd>
 80031ee:	4603      	mov	r3, r0
 80031f0:	461a      	mov	r2, r3
 80031f2:	4b4f      	ldr	r3, [pc, #316]	; (8003330 <Spin_Mode_Laundry+0x398>)
 80031f4:	789b      	ldrb	r3, [r3, #2]
 80031f6:	4413      	add	r3, r2
 80031f8:	b2da      	uxtb	r2, r3
 80031fa:	4b4d      	ldr	r3, [pc, #308]	; (8003330 <Spin_Mode_Laundry+0x398>)
 80031fc:	709a      	strb	r2, [r3, #2]

		if (bcd2dec(spin_complete_time.Seconds) >= 60)
 80031fe:	4b4c      	ldr	r3, [pc, #304]	; (8003330 <Spin_Mode_Laundry+0x398>)
 8003200:	789b      	ldrb	r3, [r3, #2]
 8003202:	4618      	mov	r0, r3
 8003204:	f7fd fd52 	bl	8000cac <bcd2dec>
 8003208:	4603      	mov	r3, r0
 800320a:	2b3b      	cmp	r3, #59	; 0x3b
 800320c:	d915      	bls.n	800323a <Spin_Mode_Laundry+0x2a2>
		{
			spin_complete_time.Minutes += dec2bcd(1);
 800320e:	2001      	movs	r0, #1
 8003210:	f7fd fd68 	bl	8000ce4 <dec2bcd>
 8003214:	4603      	mov	r3, r0
 8003216:	461a      	mov	r2, r3
 8003218:	4b45      	ldr	r3, [pc, #276]	; (8003330 <Spin_Mode_Laundry+0x398>)
 800321a:	785b      	ldrb	r3, [r3, #1]
 800321c:	4413      	add	r3, r2
 800321e:	b2da      	uxtb	r2, r3
 8003220:	4b43      	ldr	r3, [pc, #268]	; (8003330 <Spin_Mode_Laundry+0x398>)
 8003222:	705a      	strb	r2, [r3, #1]
			spin_complete_time.Seconds -= dec2bcd(60);
 8003224:	203c      	movs	r0, #60	; 0x3c
 8003226:	f7fd fd5d 	bl	8000ce4 <dec2bcd>
 800322a:	4603      	mov	r3, r0
 800322c:	461a      	mov	r2, r3
 800322e:	4b40      	ldr	r3, [pc, #256]	; (8003330 <Spin_Mode_Laundry+0x398>)
 8003230:	789b      	ldrb	r3, [r3, #2]
 8003232:	1a9b      	subs	r3, r3, r2
 8003234:	b2da      	uxtb	r2, r3
 8003236:	4b3e      	ldr	r3, [pc, #248]	; (8003330 <Spin_Mode_Laundry+0x398>)
 8003238:	709a      	strb	r2, [r3, #2]
		}
		if (bcd2dec(spin_complete_time.Minutes) >= 60)
 800323a:	4b3d      	ldr	r3, [pc, #244]	; (8003330 <Spin_Mode_Laundry+0x398>)
 800323c:	785b      	ldrb	r3, [r3, #1]
 800323e:	4618      	mov	r0, r3
 8003240:	f7fd fd34 	bl	8000cac <bcd2dec>
 8003244:	4603      	mov	r3, r0
 8003246:	2b3b      	cmp	r3, #59	; 0x3b
 8003248:	d915      	bls.n	8003276 <Spin_Mode_Laundry+0x2de>
		{
			spin_complete_time.Hours += dec2bcd(1);
 800324a:	2001      	movs	r0, #1
 800324c:	f7fd fd4a 	bl	8000ce4 <dec2bcd>
 8003250:	4603      	mov	r3, r0
 8003252:	461a      	mov	r2, r3
 8003254:	4b36      	ldr	r3, [pc, #216]	; (8003330 <Spin_Mode_Laundry+0x398>)
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	4413      	add	r3, r2
 800325a:	b2da      	uxtb	r2, r3
 800325c:	4b34      	ldr	r3, [pc, #208]	; (8003330 <Spin_Mode_Laundry+0x398>)
 800325e:	701a      	strb	r2, [r3, #0]
			spin_complete_time.Minutes -= dec2bcd(60);
 8003260:	203c      	movs	r0, #60	; 0x3c
 8003262:	f7fd fd3f 	bl	8000ce4 <dec2bcd>
 8003266:	4603      	mov	r3, r0
 8003268:	461a      	mov	r2, r3
 800326a:	4b31      	ldr	r3, [pc, #196]	; (8003330 <Spin_Mode_Laundry+0x398>)
 800326c:	785b      	ldrb	r3, [r3, #1]
 800326e:	1a9b      	subs	r3, r3, r2
 8003270:	b2da      	uxtb	r2, r3
 8003272:	4b2f      	ldr	r3, [pc, #188]	; (8003330 <Spin_Mode_Laundry+0x398>)
 8003274:	705a      	strb	r2, [r3, #1]
		}
		if (bcd2dec(spin_complete_time.Hours) >= 24)
 8003276:	4b2e      	ldr	r3, [pc, #184]	; (8003330 <Spin_Mode_Laundry+0x398>)
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	4618      	mov	r0, r3
 800327c:	f7fd fd16 	bl	8000cac <bcd2dec>
 8003280:	4603      	mov	r3, r0
 8003282:	2b17      	cmp	r3, #23
 8003284:	d90a      	bls.n	800329c <Spin_Mode_Laundry+0x304>
		{
			// DATE를 1 올려야 하지만, 현재 해당 프로그램에서 date는 고려하고 있지 않음
			spin_complete_time.Hours -= dec2bcd(24);
 8003286:	2018      	movs	r0, #24
 8003288:	f7fd fd2c 	bl	8000ce4 <dec2bcd>
 800328c:	4603      	mov	r3, r0
 800328e:	461a      	mov	r2, r3
 8003290:	4b27      	ldr	r3, [pc, #156]	; (8003330 <Spin_Mode_Laundry+0x398>)
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	1a9b      	subs	r3, r3, r2
 8003296:	b2da      	uxtb	r2, r3
 8003298:	4b25      	ldr	r3, [pc, #148]	; (8003330 <Spin_Mode_Laundry+0x398>)
 800329a:	701a      	strb	r2, [r3, #0]
		}

		LCD_Command(CLEAR_DISPLAY); // 버튼을 누르는 순간마다 clear display해줘서 쓰레기값 방지
 800329c:	2001      	movs	r0, #1
 800329e:	f7fd fa31 	bl	8000704 <LCD_Command>
		Spin_Mode_Running_display(spin_complete_time);
 80032a2:	4b23      	ldr	r3, [pc, #140]	; (8003330 <Spin_Mode_Laundry+0x398>)
 80032a4:	691a      	ldr	r2, [r3, #16]
 80032a6:	9200      	str	r2, [sp, #0]
 80032a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032aa:	f000 fa0d 	bl	80036c8 <Spin_Mode_Running_display>
	}

	// 모터가 과열 되었거나, 버튼4를 눌렀을 때, 탈수 모드를 즉시 중지하고 세탁모드를 초기화해준다.
	if (Get_Button(BUTTON4_GPIO_Port, BUTTON4_Pin, 4) == BUTTON_PRESS)
 80032ae:	2204      	movs	r2, #4
 80032b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80032b4:	4822      	ldr	r0, [pc, #136]	; (8003340 <Spin_Mode_Laundry+0x3a8>)
 80032b6:	f7fd fad3 	bl	8000860 <Get_Button>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d128      	bne.n	8003312 <Spin_Mode_Laundry+0x37a>
	{
		mode_complete_alarm_stop_start_flag = STOP; // 완료 부저가 진행중일 경우 아예 꺼버리는게 논리적으로 맞음
 80032c0:	4b15      	ldr	r3, [pc, #84]	; (8003318 <Spin_Mode_Laundry+0x380>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	701a      	strb	r2, [r3, #0]

		WashingMachine_curr_status = IDLE_MODE;
 80032c6:	4b18      	ldr	r3, [pc, #96]	; (8003328 <Spin_Mode_Laundry+0x390>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	701a      	strb	r2, [r3, #0]
		spin_mode_start_stop_flag = STOP;
 80032cc:	4b13      	ldr	r3, [pc, #76]	; (800331c <Spin_Mode_Laundry+0x384>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	701a      	strb	r2, [r3, #0]
		dcmotor_duty_cycle = 30;
 80032d2:	4b13      	ldr	r3, [pc, #76]	; (8003320 <Spin_Mode_Laundry+0x388>)
 80032d4:	221e      	movs	r2, #30
 80032d6:	801a      	strh	r2, [r3, #0]
		spin_remain_time = 0;
 80032d8:	4b14      	ldr	r3, [pc, #80]	; (800332c <Spin_Mode_Laundry+0x394>)
 80032da:	2200      	movs	r2, #0
 80032dc:	601a      	str	r2, [r3, #0]
		spin_complete_time.Hours = dec2bcd(0);
 80032de:	2000      	movs	r0, #0
 80032e0:	f7fd fd00 	bl	8000ce4 <dec2bcd>
 80032e4:	4603      	mov	r3, r0
 80032e6:	461a      	mov	r2, r3
 80032e8:	4b11      	ldr	r3, [pc, #68]	; (8003330 <Spin_Mode_Laundry+0x398>)
 80032ea:	701a      	strb	r2, [r3, #0]
		spin_complete_time.Minutes = dec2bcd(0);
 80032ec:	2000      	movs	r0, #0
 80032ee:	f7fd fcf9 	bl	8000ce4 <dec2bcd>
 80032f2:	4603      	mov	r3, r0
 80032f4:	461a      	mov	r2, r3
 80032f6:	4b0e      	ldr	r3, [pc, #56]	; (8003330 <Spin_Mode_Laundry+0x398>)
 80032f8:	705a      	strb	r2, [r3, #1]
		spin_complete_time.Seconds = dec2bcd(0);
 80032fa:	2000      	movs	r0, #0
 80032fc:	f7fd fcf2 	bl	8000ce4 <dec2bcd>
 8003300:	4603      	mov	r3, r0
 8003302:	461a      	mov	r2, r3
 8003304:	4b0a      	ldr	r3, [pc, #40]	; (8003330 <Spin_Mode_Laundry+0x398>)
 8003306:	709a      	strb	r2, [r3, #2]
		LCD_Command(CLEAR_DISPLAY); // 버튼을 누르는 순간마다 clear display해줘서 쓰레기값 방지
 8003308:	2001      	movs	r0, #1
 800330a:	f7fd f9fb 	bl	8000704 <LCD_Command>
		Idle_Mode_Display();
 800330e:	f000 f859 	bl	80033c4 <Idle_Mode_Display>
	}
	/************************END 버튼 입력 인터럽트 부분************************/
}
 8003312:	bf00      	nop
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	20000f8f 	.word	0x20000f8f
 800331c:	2000100b 	.word	0x2000100b
 8003320:	2000011c 	.word	0x2000011c
 8003324:	40021000 	.word	0x40021000
 8003328:	20000f90 	.word	0x20000f90
 800332c:	20000fc8 	.word	0x20000fc8
 8003330:	20000ff4 	.word	0x20000ff4
 8003334:	20000444 	.word	0x20000444
 8003338:	91a2b3c5 	.word	0x91a2b3c5
 800333c:	88888889 	.word	0x88888889
 8003340:	40020400 	.word	0x40020400

08003344 <Check_Lid_Open>:
 * desc: 세탁기의 뚜껑이 열린상태인지 닫힌 상태인지 파악한다. 뚜껑의 개폐 상태는 1초에 한번씩 체크한다.
 *       초음파센서와 뚜껑의 거리가 10cm 이하이면 닫힌 것으로 간주하고, 10cm 초과이면 열린 것으로 간주한다.
 * return: True(뚜껑이 열려있음) False(뚜껑이 닫혀있음)
 */
static bool Check_Lid_Open(void)
{
 8003344:	b480      	push	{r7}
 8003346:	af00      	add	r7, sp, #0
		return false;
	}

#else

	return false;
 8003348:	2300      	movs	r3, #0

#endif
}
 800334a:	4618      	mov	r0, r3
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <Check_Motor_OverHeat>:
 * desc: 세탁기의 모터가 과열 상태인지 파악한다. 세탁기의 과열 상태는 10초에 한번씩 파악한다.
 * 		 DHT11 센서가 리턴한 온도 값이 70도(섭씨) 초과이면 과열된 것으로 간주하고, 70도(섭씨) 미만이면 정상인 것으로 간주한다.
 * return: True(모터가 과열되어 있음) False(모터가 정상온도임)
 */
static bool Check_Motor_OverHeat(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
	uint8_t i_RH, d_RH, i_Tmp, d_Tmp;

	if (TIM10_10ms_counter_DHT11 >= MOTOR_HEAT_CHECK_TERM)
 800335a:	4b18      	ldr	r3, [pc, #96]	; (80033bc <Check_Motor_OverHeat+0x68>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003362:	d326      	bcc.n	80033b2 <Check_Motor_OverHeat+0x5e>
	{
		TIM10_10ms_counter_DHT11 = 0;
 8003364:	4b15      	ldr	r3, [pc, #84]	; (80033bc <Check_Motor_OverHeat+0x68>)
 8003366:	2200      	movs	r2, #0
 8003368:	601a      	str	r2, [r3, #0]

		// 아래 세줄은 DHT11과 MCU의 Hand-shaking과정이다.
		DHT11_Trriger();
 800336a:	f7fd f923 	bl	80005b4 <DHT11_Trriger>
		DHT11_DataLine_Input();
 800336e:	f7fd f959 	bl	8000624 <DHT11_DataLine_Input>
		DHT11_Dumi_Read();
 8003372:	f7fd f937 	bl	80005e4 <DHT11_Dumi_Read>

		// 여기부터 DHT11가 수집한 데이터를 읽어오는 것이다.
		i_RH = DHT11_rx_Data();
 8003376:	f7fd f98f 	bl	8000698 <DHT11_rx_Data>
 800337a:	4603      	mov	r3, r0
 800337c:	71fb      	strb	r3, [r7, #7]
		d_RH = DHT11_rx_Data();
 800337e:	f7fd f98b 	bl	8000698 <DHT11_rx_Data>
 8003382:	4603      	mov	r3, r0
 8003384:	71bb      	strb	r3, [r7, #6]
		i_Tmp = DHT11_rx_Data();
 8003386:	f7fd f987 	bl	8000698 <DHT11_rx_Data>
 800338a:	4603      	mov	r3, r0
 800338c:	717b      	strb	r3, [r7, #5]
		d_Tmp = DHT11_rx_Data();
 800338e:	f7fd f983 	bl	8000698 <DHT11_rx_Data>
 8003392:	4603      	mov	r3, r0
 8003394:	713b      	strb	r3, [r7, #4]

		DHT11_DataLine_Output();
 8003396:	f7fd f961 	bl	800065c <DHT11_DataLine_Output>
		HAL_GPIO_WritePin(DHT11_PORT, DHT11_DATA_RIN, GPIO_PIN_SET);
 800339a:	2201      	movs	r2, #1
 800339c:	2101      	movs	r1, #1
 800339e:	4808      	ldr	r0, [pc, #32]	; (80033c0 <Check_Motor_OverHeat+0x6c>)
 80033a0:	f001 f928 	bl	80045f4 <HAL_GPIO_WritePin>

		if (i_Tmp > MOTOTR_HEAT_SAFTY_LIMIT)
 80033a4:	797b      	ldrb	r3, [r7, #5]
 80033a6:	2b46      	cmp	r3, #70	; 0x46
 80033a8:	d901      	bls.n	80033ae <Check_Motor_OverHeat+0x5a>
		{
			return true;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e002      	b.n	80033b4 <Check_Motor_OverHeat+0x60>
		}
		else
		{
			return false;
 80033ae:	2300      	movs	r3, #0
 80033b0:	e000      	b.n	80033b4 <Check_Motor_OverHeat+0x60>
		}
	}
	else
	{
		return false;
 80033b2:	2300      	movs	r3, #0
	}
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3708      	adds	r7, #8
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	20000c04 	.word	0x20000c04
 80033c0:	40020000 	.word	0x40020000

080033c4 <Idle_Mode_Display>:

/*
 * desc: 세탁기가 IDLE 모드 일때의 화면을 I2C_LCD에 출력한다.
 */
static void Idle_Mode_Display(void)
{
 80033c4:	b5b0      	push	{r4, r5, r7, lr}
 80033c6:	b08c      	sub	sp, #48	; 0x30
 80033c8:	af02      	add	r7, sp, #8
	uint8_t lcd_buff_1[20], lcd_buff_2[20];

	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BCD);
 80033ca:	2201      	movs	r2, #1
 80033cc:	4924      	ldr	r1, [pc, #144]	; (8003460 <Idle_Mode_Display+0x9c>)
 80033ce:	4825      	ldr	r0, [pc, #148]	; (8003464 <Idle_Mode_Display+0xa0>)
 80033d0:	f002 fe76 	bl	80060c0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BCD);
 80033d4:	2201      	movs	r2, #1
 80033d6:	4924      	ldr	r1, [pc, #144]	; (8003468 <Idle_Mode_Display+0xa4>)
 80033d8:	4822      	ldr	r0, [pc, #136]	; (8003464 <Idle_Mode_Display+0xa0>)
 80033da:	f002 ff53 	bl	8006284 <HAL_RTC_GetDate>

	sprintf(lcd_buff_1, "select [MODE]");
 80033de:	f107 0314 	add.w	r3, r7, #20
 80033e2:	4922      	ldr	r1, [pc, #136]	; (800346c <Idle_Mode_Display+0xa8>)
 80033e4:	4618      	mov	r0, r3
 80033e6:	f006 f93b 	bl	8009660 <siprintf>
	Move_Cursor(0, 0);
 80033ea:	2100      	movs	r1, #0
 80033ec:	2000      	movs	r0, #0
 80033ee:	f7fd fa1f 	bl	8000830 <Move_Cursor>
	LCD_String(lcd_buff_1);
 80033f2:	f107 0314 	add.w	r3, r7, #20
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7fd fa05 	bl	8000806 <LCD_String>

	if (old_time.Seconds != current_time.Seconds)
 80033fc:	4b1c      	ldr	r3, [pc, #112]	; (8003470 <Idle_Mode_Display+0xac>)
 80033fe:	789a      	ldrb	r2, [r3, #2]
 8003400:	4b17      	ldr	r3, [pc, #92]	; (8003460 <Idle_Mode_Display+0x9c>)
 8003402:	789b      	ldrb	r3, [r3, #2]
 8003404:	429a      	cmp	r2, r3
 8003406:	d022      	beq.n	800344e <Idle_Mode_Display+0x8a>
	{
		sprintf(lcd_buff_2, "Now>> %02d:%02d:%02d", bcd2dec(current_time.Hours), bcd2dec(current_time.Minutes), bcd2dec(current_time.Seconds));
 8003408:	4b15      	ldr	r3, [pc, #84]	; (8003460 <Idle_Mode_Display+0x9c>)
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	4618      	mov	r0, r3
 800340e:	f7fd fc4d 	bl	8000cac <bcd2dec>
 8003412:	4603      	mov	r3, r0
 8003414:	461c      	mov	r4, r3
 8003416:	4b12      	ldr	r3, [pc, #72]	; (8003460 <Idle_Mode_Display+0x9c>)
 8003418:	785b      	ldrb	r3, [r3, #1]
 800341a:	4618      	mov	r0, r3
 800341c:	f7fd fc46 	bl	8000cac <bcd2dec>
 8003420:	4603      	mov	r3, r0
 8003422:	461d      	mov	r5, r3
 8003424:	4b0e      	ldr	r3, [pc, #56]	; (8003460 <Idle_Mode_Display+0x9c>)
 8003426:	789b      	ldrb	r3, [r3, #2]
 8003428:	4618      	mov	r0, r3
 800342a:	f7fd fc3f 	bl	8000cac <bcd2dec>
 800342e:	4603      	mov	r3, r0
 8003430:	4638      	mov	r0, r7
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	462b      	mov	r3, r5
 8003436:	4622      	mov	r2, r4
 8003438:	490e      	ldr	r1, [pc, #56]	; (8003474 <Idle_Mode_Display+0xb0>)
 800343a:	f006 f911 	bl	8009660 <siprintf>
		Move_Cursor(1, 0);
 800343e:	2100      	movs	r1, #0
 8003440:	2001      	movs	r0, #1
 8003442:	f7fd f9f5 	bl	8000830 <Move_Cursor>
		LCD_String(lcd_buff_2);
 8003446:	463b      	mov	r3, r7
 8003448:	4618      	mov	r0, r3
 800344a:	f7fd f9dc 	bl	8000806 <LCD_String>
	}
	old_time.Seconds = current_time.Seconds;
 800344e:	4b04      	ldr	r3, [pc, #16]	; (8003460 <Idle_Mode_Display+0x9c>)
 8003450:	789a      	ldrb	r2, [r3, #2]
 8003452:	4b07      	ldr	r3, [pc, #28]	; (8003470 <Idle_Mode_Display+0xac>)
 8003454:	709a      	strb	r2, [r3, #2]
}
 8003456:	bf00      	nop
 8003458:	3728      	adds	r7, #40	; 0x28
 800345a:	46bd      	mov	sp, r7
 800345c:	bdb0      	pop	{r4, r5, r7, pc}
 800345e:	bf00      	nop
 8003460:	20000fa8 	.word	0x20000fa8
 8003464:	20000444 	.word	0x20000444
 8003468:	20000fbc 	.word	0x20000fbc
 800346c:	0800a748 	.word	0x0800a748
 8003470:	20000f94 	.word	0x20000f94
 8003474:	0800a758 	.word	0x0800a758

08003478 <Wash_Mode_Setting_display>:

/*
 * desc: 세탁기가 세탁모드 일때, 세탁을 몇회 시행할 예정인지 대한 정보를 I2C_LCD에 출력한다.
 */
static void Wash_Mode_Setting_display(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b08a      	sub	sp, #40	; 0x28
 800347c:	af00      	add	r7, sp, #0
	uint8_t lcd_buff_1[20], lcd_buff_2[20];

	sprintf(lcd_buff_1, "  Manual [Wash]");
 800347e:	f107 0314 	add.w	r3, r7, #20
 8003482:	4913      	ldr	r1, [pc, #76]	; (80034d0 <Wash_Mode_Setting_display+0x58>)
 8003484:	4618      	mov	r0, r3
 8003486:	f006 f8eb 	bl	8009660 <siprintf>
	Move_Cursor(0, 0);
 800348a:	2100      	movs	r1, #0
 800348c:	2000      	movs	r0, #0
 800348e:	f7fd f9cf 	bl	8000830 <Move_Cursor>
	LCD_String(lcd_buff_1);
 8003492:	f107 0314 	add.w	r3, r7, #20
 8003496:	4618      	mov	r0, r3
 8003498:	f7fd f9b5 	bl	8000806 <LCD_String>

	sprintf(lcd_buff_2, "Repeat [%d]times", wash_remain_time / 10);
 800349c:	4b0d      	ldr	r3, [pc, #52]	; (80034d4 <Wash_Mode_Setting_display+0x5c>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a0d      	ldr	r2, [pc, #52]	; (80034d8 <Wash_Mode_Setting_display+0x60>)
 80034a2:	fb82 1203 	smull	r1, r2, r2, r3
 80034a6:	1092      	asrs	r2, r2, #2
 80034a8:	17db      	asrs	r3, r3, #31
 80034aa:	1ad2      	subs	r2, r2, r3
 80034ac:	463b      	mov	r3, r7
 80034ae:	490b      	ldr	r1, [pc, #44]	; (80034dc <Wash_Mode_Setting_display+0x64>)
 80034b0:	4618      	mov	r0, r3
 80034b2:	f006 f8d5 	bl	8009660 <siprintf>
	Move_Cursor(1, 0);
 80034b6:	2100      	movs	r1, #0
 80034b8:	2001      	movs	r0, #1
 80034ba:	f7fd f9b9 	bl	8000830 <Move_Cursor>
	LCD_String(lcd_buff_2);
 80034be:	463b      	mov	r3, r7
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7fd f9a0 	bl	8000806 <LCD_String>
}
 80034c6:	bf00      	nop
 80034c8:	3728      	adds	r7, #40	; 0x28
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	0800a770 	.word	0x0800a770
 80034d4:	20000fc0 	.word	0x20000fc0
 80034d8:	66666667 	.word	0x66666667
 80034dc:	0800a780 	.word	0x0800a780

080034e0 <Wash_Mode_Running_display>:
/*
 * desc: 세탁기가 세탁모드 일때, 예정된 세탁을 모두 시행할 경우 예상 완료시간이 언제인지에 대한 정보를 I2C_LCD에 출력한다.
 * param1: 예상 완료시간에 대한 정보를 담고 있는 RTC_Time 구조체
 */
static void Wash_Mode_Running_display(RTC_TimeTypeDef complete_time)
{
 80034e0:	b084      	sub	sp, #16
 80034e2:	b5b0      	push	{r4, r5, r7, lr}
 80034e4:	b08c      	sub	sp, #48	; 0x30
 80034e6:	af02      	add	r7, sp, #8
 80034e8:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80034ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t lcd_buff_1[20], lcd_buff_2[20];

	sprintf(lcd_buff_1, "  Manual [Wash]");
 80034f0:	f107 0314 	add.w	r3, r7, #20
 80034f4:	491b      	ldr	r1, [pc, #108]	; (8003564 <Wash_Mode_Running_display+0x84>)
 80034f6:	4618      	mov	r0, r3
 80034f8:	f006 f8b2 	bl	8009660 <siprintf>
	Move_Cursor(0, 0);
 80034fc:	2100      	movs	r1, #0
 80034fe:	2000      	movs	r0, #0
 8003500:	f7fd f996 	bl	8000830 <Move_Cursor>
	LCD_String(lcd_buff_1);
 8003504:	f107 0314 	add.w	r3, r7, #20
 8003508:	4618      	mov	r0, r3
 800350a:	f7fd f97c 	bl	8000806 <LCD_String>

	sprintf(lcd_buff_2, "Cplt>> %02d:%02d:%02d", bcd2dec(complete_time.Hours), bcd2dec(complete_time.Minutes), bcd2dec(complete_time.Seconds));
 800350e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8003512:	4618      	mov	r0, r3
 8003514:	f7fd fbca 	bl	8000cac <bcd2dec>
 8003518:	4603      	mov	r3, r0
 800351a:	461c      	mov	r4, r3
 800351c:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8003520:	4618      	mov	r0, r3
 8003522:	f7fd fbc3 	bl	8000cac <bcd2dec>
 8003526:	4603      	mov	r3, r0
 8003528:	461d      	mov	r5, r3
 800352a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800352e:	4618      	mov	r0, r3
 8003530:	f7fd fbbc 	bl	8000cac <bcd2dec>
 8003534:	4603      	mov	r3, r0
 8003536:	4638      	mov	r0, r7
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	462b      	mov	r3, r5
 800353c:	4622      	mov	r2, r4
 800353e:	490a      	ldr	r1, [pc, #40]	; (8003568 <Wash_Mode_Running_display+0x88>)
 8003540:	f006 f88e 	bl	8009660 <siprintf>
	Move_Cursor(1, 0);
 8003544:	2100      	movs	r1, #0
 8003546:	2001      	movs	r0, #1
 8003548:	f7fd f972 	bl	8000830 <Move_Cursor>
	LCD_String(lcd_buff_2);
 800354c:	463b      	mov	r3, r7
 800354e:	4618      	mov	r0, r3
 8003550:	f7fd f959 	bl	8000806 <LCD_String>
}
 8003554:	bf00      	nop
 8003556:	3728      	adds	r7, #40	; 0x28
 8003558:	46bd      	mov	sp, r7
 800355a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800355e:	b004      	add	sp, #16
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	0800a770 	.word	0x0800a770
 8003568:	0800a794 	.word	0x0800a794

0800356c <Rinse_Mode_Setting_display>:

/*
 * desc: 세탁기가 헹굼모드 일때, 헹굼을 몇회 시행할 예정인지 대한 정보를 I2C_LCD에 출력한다.
 */
static void Rinse_Mode_Setting_display(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b08a      	sub	sp, #40	; 0x28
 8003570:	af00      	add	r7, sp, #0
	uint8_t lcd_buff_1[20], lcd_buff_2[20];

	sprintf(lcd_buff_1, "  Manual [Rinse]");
 8003572:	f107 0314 	add.w	r3, r7, #20
 8003576:	4913      	ldr	r1, [pc, #76]	; (80035c4 <Rinse_Mode_Setting_display+0x58>)
 8003578:	4618      	mov	r0, r3
 800357a:	f006 f871 	bl	8009660 <siprintf>
	Move_Cursor(0, 0);
 800357e:	2100      	movs	r1, #0
 8003580:	2000      	movs	r0, #0
 8003582:	f7fd f955 	bl	8000830 <Move_Cursor>
	LCD_String(lcd_buff_1);
 8003586:	f107 0314 	add.w	r3, r7, #20
 800358a:	4618      	mov	r0, r3
 800358c:	f7fd f93b 	bl	8000806 <LCD_String>

	sprintf(lcd_buff_2, "Repeat [%d]times", rinse_remain_time / 10);
 8003590:	4b0d      	ldr	r3, [pc, #52]	; (80035c8 <Rinse_Mode_Setting_display+0x5c>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a0d      	ldr	r2, [pc, #52]	; (80035cc <Rinse_Mode_Setting_display+0x60>)
 8003596:	fb82 1203 	smull	r1, r2, r2, r3
 800359a:	1092      	asrs	r2, r2, #2
 800359c:	17db      	asrs	r3, r3, #31
 800359e:	1ad2      	subs	r2, r2, r3
 80035a0:	463b      	mov	r3, r7
 80035a2:	490b      	ldr	r1, [pc, #44]	; (80035d0 <Rinse_Mode_Setting_display+0x64>)
 80035a4:	4618      	mov	r0, r3
 80035a6:	f006 f85b 	bl	8009660 <siprintf>
	Move_Cursor(1, 0);
 80035aa:	2100      	movs	r1, #0
 80035ac:	2001      	movs	r0, #1
 80035ae:	f7fd f93f 	bl	8000830 <Move_Cursor>
	LCD_String(lcd_buff_2);
 80035b2:	463b      	mov	r3, r7
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7fd f926 	bl	8000806 <LCD_String>
}
 80035ba:	bf00      	nop
 80035bc:	3728      	adds	r7, #40	; 0x28
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	0800a7ac 	.word	0x0800a7ac
 80035c8:	20000fc4 	.word	0x20000fc4
 80035cc:	66666667 	.word	0x66666667
 80035d0:	0800a780 	.word	0x0800a780

080035d4 <Rinse_Mode_Running_display>:
/*
 * desc: 세탁기가 헹굼모드 일때, 예정된 헹굼을 모두 시행할 경우 예상 완료시간이 언제인지에 대한 정보를 I2C_LCD에 출력한다.
 * param1: 예상 완료시간에 대한 정보를 담고 있는 RTC_Time 구조체
 */
static void Rinse_Mode_Running_display(RTC_TimeTypeDef complete_time)
{
 80035d4:	b084      	sub	sp, #16
 80035d6:	b5b0      	push	{r4, r5, r7, lr}
 80035d8:	b08c      	sub	sp, #48	; 0x30
 80035da:	af02      	add	r7, sp, #8
 80035dc:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80035e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t lcd_buff_1[20], lcd_buff_2[20];

	sprintf(lcd_buff_1, "  Manual [Rinse]");
 80035e4:	f107 0314 	add.w	r3, r7, #20
 80035e8:	491b      	ldr	r1, [pc, #108]	; (8003658 <Rinse_Mode_Running_display+0x84>)
 80035ea:	4618      	mov	r0, r3
 80035ec:	f006 f838 	bl	8009660 <siprintf>
	Move_Cursor(0, 0);
 80035f0:	2100      	movs	r1, #0
 80035f2:	2000      	movs	r0, #0
 80035f4:	f7fd f91c 	bl	8000830 <Move_Cursor>
	LCD_String(lcd_buff_1);
 80035f8:	f107 0314 	add.w	r3, r7, #20
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7fd f902 	bl	8000806 <LCD_String>

	sprintf(lcd_buff_2, "Cplt>> %02d:%02d:%02d", bcd2dec(complete_time.Hours), bcd2dec(complete_time.Minutes), bcd2dec(complete_time.Seconds));
 8003602:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8003606:	4618      	mov	r0, r3
 8003608:	f7fd fb50 	bl	8000cac <bcd2dec>
 800360c:	4603      	mov	r3, r0
 800360e:	461c      	mov	r4, r3
 8003610:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8003614:	4618      	mov	r0, r3
 8003616:	f7fd fb49 	bl	8000cac <bcd2dec>
 800361a:	4603      	mov	r3, r0
 800361c:	461d      	mov	r5, r3
 800361e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8003622:	4618      	mov	r0, r3
 8003624:	f7fd fb42 	bl	8000cac <bcd2dec>
 8003628:	4603      	mov	r3, r0
 800362a:	4638      	mov	r0, r7
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	462b      	mov	r3, r5
 8003630:	4622      	mov	r2, r4
 8003632:	490a      	ldr	r1, [pc, #40]	; (800365c <Rinse_Mode_Running_display+0x88>)
 8003634:	f006 f814 	bl	8009660 <siprintf>
	Move_Cursor(1, 0);
 8003638:	2100      	movs	r1, #0
 800363a:	2001      	movs	r0, #1
 800363c:	f7fd f8f8 	bl	8000830 <Move_Cursor>
	LCD_String(lcd_buff_2);
 8003640:	463b      	mov	r3, r7
 8003642:	4618      	mov	r0, r3
 8003644:	f7fd f8df 	bl	8000806 <LCD_String>
}
 8003648:	bf00      	nop
 800364a:	3728      	adds	r7, #40	; 0x28
 800364c:	46bd      	mov	sp, r7
 800364e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8003652:	b004      	add	sp, #16
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	0800a7ac 	.word	0x0800a7ac
 800365c:	0800a794 	.word	0x0800a794

08003660 <Spin_Mode_Setting_display>:

/*
 * desc: 세탁기가 탈수모드 일때, 탈수를 몇회 시행할 예정인지 대한 정보를 I2C_LCD에 출력한다.
 */
static void Spin_Mode_Setting_display(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b08a      	sub	sp, #40	; 0x28
 8003664:	af00      	add	r7, sp, #0
	uint8_t lcd_buff_1[20], lcd_buff_2[20];

	sprintf(lcd_buff_1, "  Manual [Spin]");
 8003666:	f107 0314 	add.w	r3, r7, #20
 800366a:	4913      	ldr	r1, [pc, #76]	; (80036b8 <Spin_Mode_Setting_display+0x58>)
 800366c:	4618      	mov	r0, r3
 800366e:	f005 fff7 	bl	8009660 <siprintf>
	Move_Cursor(0, 0);
 8003672:	2100      	movs	r1, #0
 8003674:	2000      	movs	r0, #0
 8003676:	f7fd f8db 	bl	8000830 <Move_Cursor>
	LCD_String(lcd_buff_1);
 800367a:	f107 0314 	add.w	r3, r7, #20
 800367e:	4618      	mov	r0, r3
 8003680:	f7fd f8c1 	bl	8000806 <LCD_String>

	sprintf(lcd_buff_2, "Repeat [%d]times", spin_remain_time / 10);
 8003684:	4b0d      	ldr	r3, [pc, #52]	; (80036bc <Spin_Mode_Setting_display+0x5c>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a0d      	ldr	r2, [pc, #52]	; (80036c0 <Spin_Mode_Setting_display+0x60>)
 800368a:	fb82 1203 	smull	r1, r2, r2, r3
 800368e:	1092      	asrs	r2, r2, #2
 8003690:	17db      	asrs	r3, r3, #31
 8003692:	1ad2      	subs	r2, r2, r3
 8003694:	463b      	mov	r3, r7
 8003696:	490b      	ldr	r1, [pc, #44]	; (80036c4 <Spin_Mode_Setting_display+0x64>)
 8003698:	4618      	mov	r0, r3
 800369a:	f005 ffe1 	bl	8009660 <siprintf>
	Move_Cursor(1, 0);
 800369e:	2100      	movs	r1, #0
 80036a0:	2001      	movs	r0, #1
 80036a2:	f7fd f8c5 	bl	8000830 <Move_Cursor>
	LCD_String(lcd_buff_2);
 80036a6:	463b      	mov	r3, r7
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7fd f8ac 	bl	8000806 <LCD_String>
}
 80036ae:	bf00      	nop
 80036b0:	3728      	adds	r7, #40	; 0x28
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	0800a7c0 	.word	0x0800a7c0
 80036bc:	20000fc8 	.word	0x20000fc8
 80036c0:	66666667 	.word	0x66666667
 80036c4:	0800a780 	.word	0x0800a780

080036c8 <Spin_Mode_Running_display>:
/*
 * desc: 세탁기가 탈수모드 일때, 예정된 탈수를 모두 시행할 경우 예상 완료시간이 언제인지에 대한 정보를 I2C_LCD에 출력한다.
 * param1: 예상 완료시간에 대한 정보를 담고 있는 RTC_Time 구조체
 */
static void Spin_Mode_Running_display(RTC_TimeTypeDef complete_time)
{
 80036c8:	b084      	sub	sp, #16
 80036ca:	b5b0      	push	{r4, r5, r7, lr}
 80036cc:	b08c      	sub	sp, #48	; 0x30
 80036ce:	af02      	add	r7, sp, #8
 80036d0:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80036d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t lcd_buff_1[20], lcd_buff_2[20];

	sprintf(lcd_buff_1, "  Manual [Spin]");
 80036d8:	f107 0314 	add.w	r3, r7, #20
 80036dc:	491b      	ldr	r1, [pc, #108]	; (800374c <Spin_Mode_Running_display+0x84>)
 80036de:	4618      	mov	r0, r3
 80036e0:	f005 ffbe 	bl	8009660 <siprintf>
	Move_Cursor(0, 0);
 80036e4:	2100      	movs	r1, #0
 80036e6:	2000      	movs	r0, #0
 80036e8:	f7fd f8a2 	bl	8000830 <Move_Cursor>
	LCD_String(lcd_buff_1);
 80036ec:	f107 0314 	add.w	r3, r7, #20
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7fd f888 	bl	8000806 <LCD_String>

	sprintf(lcd_buff_2, "Cplt>> %02d:%02d:%02d", bcd2dec(complete_time.Hours), bcd2dec(complete_time.Minutes), bcd2dec(complete_time.Seconds));
 80036f6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7fd fad6 	bl	8000cac <bcd2dec>
 8003700:	4603      	mov	r3, r0
 8003702:	461c      	mov	r4, r3
 8003704:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8003708:	4618      	mov	r0, r3
 800370a:	f7fd facf 	bl	8000cac <bcd2dec>
 800370e:	4603      	mov	r3, r0
 8003710:	461d      	mov	r5, r3
 8003712:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8003716:	4618      	mov	r0, r3
 8003718:	f7fd fac8 	bl	8000cac <bcd2dec>
 800371c:	4603      	mov	r3, r0
 800371e:	4638      	mov	r0, r7
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	462b      	mov	r3, r5
 8003724:	4622      	mov	r2, r4
 8003726:	490a      	ldr	r1, [pc, #40]	; (8003750 <Spin_Mode_Running_display+0x88>)
 8003728:	f005 ff9a 	bl	8009660 <siprintf>
	Move_Cursor(1, 0);
 800372c:	2100      	movs	r1, #0
 800372e:	2001      	movs	r0, #1
 8003730:	f7fd f87e 	bl	8000830 <Move_Cursor>
	LCD_String(lcd_buff_2);
 8003734:	463b      	mov	r3, r7
 8003736:	4618      	mov	r0, r3
 8003738:	f7fd f865 	bl	8000806 <LCD_String>
}
 800373c:	bf00      	nop
 800373e:	3728      	adds	r7, #40	; 0x28
 8003740:	46bd      	mov	sp, r7
 8003742:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8003746:	b004      	add	sp, #16
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	0800a7c0 	.word	0x0800a7c0
 8003750:	0800a794 	.word	0x0800a794

08003754 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003754:	f8df d034 	ldr.w	sp, [pc, #52]	; 800378c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003758:	480d      	ldr	r0, [pc, #52]	; (8003790 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800375a:	490e      	ldr	r1, [pc, #56]	; (8003794 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800375c:	4a0e      	ldr	r2, [pc, #56]	; (8003798 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800375e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003760:	e002      	b.n	8003768 <LoopCopyDataInit>

08003762 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003762:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003764:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003766:	3304      	adds	r3, #4

08003768 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003768:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800376a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800376c:	d3f9      	bcc.n	8003762 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800376e:	4a0b      	ldr	r2, [pc, #44]	; (800379c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003770:	4c0b      	ldr	r4, [pc, #44]	; (80037a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003772:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003774:	e001      	b.n	800377a <LoopFillZerobss>

08003776 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003776:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003778:	3204      	adds	r2, #4

0800377a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800377a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800377c:	d3fb      	bcc.n	8003776 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800377e:	f7fe fe65 	bl	800244c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003782:	f005 fecb 	bl	800951c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003786:	f7fd fb85 	bl	8000e94 <main>
  bx  lr    
 800378a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800378c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003790:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003794:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 8003798:	0800a890 	.word	0x0800a890
  ldr r2, =_sbss
 800379c:	2000018c 	.word	0x2000018c
  ldr r4, =_ebss
 80037a0:	20001020 	.word	0x20001020

080037a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037a4:	e7fe      	b.n	80037a4 <ADC_IRQHandler>
	...

080037a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037ac:	4b0e      	ldr	r3, [pc, #56]	; (80037e8 <HAL_Init+0x40>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a0d      	ldr	r2, [pc, #52]	; (80037e8 <HAL_Init+0x40>)
 80037b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80037b8:	4b0b      	ldr	r3, [pc, #44]	; (80037e8 <HAL_Init+0x40>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a0a      	ldr	r2, [pc, #40]	; (80037e8 <HAL_Init+0x40>)
 80037be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037c4:	4b08      	ldr	r3, [pc, #32]	; (80037e8 <HAL_Init+0x40>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a07      	ldr	r2, [pc, #28]	; (80037e8 <HAL_Init+0x40>)
 80037ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037d0:	2003      	movs	r0, #3
 80037d2:	f000 f94f 	bl	8003a74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037d6:	2000      	movs	r0, #0
 80037d8:	f000 f808 	bl	80037ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037dc:	f7fe f912 	bl	8001a04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	40023c00 	.word	0x40023c00

080037ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037f4:	4b12      	ldr	r3, [pc, #72]	; (8003840 <HAL_InitTick+0x54>)
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	4b12      	ldr	r3, [pc, #72]	; (8003844 <HAL_InitTick+0x58>)
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	4619      	mov	r1, r3
 80037fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003802:	fbb3 f3f1 	udiv	r3, r3, r1
 8003806:	fbb2 f3f3 	udiv	r3, r2, r3
 800380a:	4618      	mov	r0, r3
 800380c:	f000 f967 	bl	8003ade <HAL_SYSTICK_Config>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e00e      	b.n	8003838 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2b0f      	cmp	r3, #15
 800381e:	d80a      	bhi.n	8003836 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003820:	2200      	movs	r2, #0
 8003822:	6879      	ldr	r1, [r7, #4]
 8003824:	f04f 30ff 	mov.w	r0, #4294967295
 8003828:	f000 f92f 	bl	8003a8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800382c:	4a06      	ldr	r2, [pc, #24]	; (8003848 <HAL_InitTick+0x5c>)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003832:	2300      	movs	r3, #0
 8003834:	e000      	b.n	8003838 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
}
 8003838:	4618      	mov	r0, r3
 800383a:	3708      	adds	r7, #8
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	20000118 	.word	0x20000118
 8003844:	20000124 	.word	0x20000124
 8003848:	20000120 	.word	0x20000120

0800384c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003850:	4b06      	ldr	r3, [pc, #24]	; (800386c <HAL_IncTick+0x20>)
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	461a      	mov	r2, r3
 8003856:	4b06      	ldr	r3, [pc, #24]	; (8003870 <HAL_IncTick+0x24>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4413      	add	r3, r2
 800385c:	4a04      	ldr	r2, [pc, #16]	; (8003870 <HAL_IncTick+0x24>)
 800385e:	6013      	str	r3, [r2, #0]
}
 8003860:	bf00      	nop
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	20000124 	.word	0x20000124
 8003870:	2000100c 	.word	0x2000100c

08003874 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003874:	b480      	push	{r7}
 8003876:	af00      	add	r7, sp, #0
  return uwTick;
 8003878:	4b03      	ldr	r3, [pc, #12]	; (8003888 <HAL_GetTick+0x14>)
 800387a:	681b      	ldr	r3, [r3, #0]
}
 800387c:	4618      	mov	r0, r3
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	2000100c 	.word	0x2000100c

0800388c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003894:	f7ff ffee 	bl	8003874 <HAL_GetTick>
 8003898:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a4:	d005      	beq.n	80038b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038a6:	4b0a      	ldr	r3, [pc, #40]	; (80038d0 <HAL_Delay+0x44>)
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	461a      	mov	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	4413      	add	r3, r2
 80038b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80038b2:	bf00      	nop
 80038b4:	f7ff ffde 	bl	8003874 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d8f7      	bhi.n	80038b4 <HAL_Delay+0x28>
  {
  }
}
 80038c4:	bf00      	nop
 80038c6:	bf00      	nop
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	20000124 	.word	0x20000124

080038d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f003 0307 	and.w	r3, r3, #7
 80038e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038e4:	4b0c      	ldr	r3, [pc, #48]	; (8003918 <__NVIC_SetPriorityGrouping+0x44>)
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038ea:	68ba      	ldr	r2, [r7, #8]
 80038ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038f0:	4013      	ands	r3, r2
 80038f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003904:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003906:	4a04      	ldr	r2, [pc, #16]	; (8003918 <__NVIC_SetPriorityGrouping+0x44>)
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	60d3      	str	r3, [r2, #12]
}
 800390c:	bf00      	nop
 800390e:	3714      	adds	r7, #20
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr
 8003918:	e000ed00 	.word	0xe000ed00

0800391c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003920:	4b04      	ldr	r3, [pc, #16]	; (8003934 <__NVIC_GetPriorityGrouping+0x18>)
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	0a1b      	lsrs	r3, r3, #8
 8003926:	f003 0307 	and.w	r3, r3, #7
}
 800392a:	4618      	mov	r0, r3
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr
 8003934:	e000ed00 	.word	0xe000ed00

08003938 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	4603      	mov	r3, r0
 8003940:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003946:	2b00      	cmp	r3, #0
 8003948:	db0b      	blt.n	8003962 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800394a:	79fb      	ldrb	r3, [r7, #7]
 800394c:	f003 021f 	and.w	r2, r3, #31
 8003950:	4907      	ldr	r1, [pc, #28]	; (8003970 <__NVIC_EnableIRQ+0x38>)
 8003952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003956:	095b      	lsrs	r3, r3, #5
 8003958:	2001      	movs	r0, #1
 800395a:	fa00 f202 	lsl.w	r2, r0, r2
 800395e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003962:	bf00      	nop
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	e000e100 	.word	0xe000e100

08003974 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	4603      	mov	r3, r0
 800397c:	6039      	str	r1, [r7, #0]
 800397e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003984:	2b00      	cmp	r3, #0
 8003986:	db0a      	blt.n	800399e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	b2da      	uxtb	r2, r3
 800398c:	490c      	ldr	r1, [pc, #48]	; (80039c0 <__NVIC_SetPriority+0x4c>)
 800398e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003992:	0112      	lsls	r2, r2, #4
 8003994:	b2d2      	uxtb	r2, r2
 8003996:	440b      	add	r3, r1
 8003998:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800399c:	e00a      	b.n	80039b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	b2da      	uxtb	r2, r3
 80039a2:	4908      	ldr	r1, [pc, #32]	; (80039c4 <__NVIC_SetPriority+0x50>)
 80039a4:	79fb      	ldrb	r3, [r7, #7]
 80039a6:	f003 030f 	and.w	r3, r3, #15
 80039aa:	3b04      	subs	r3, #4
 80039ac:	0112      	lsls	r2, r2, #4
 80039ae:	b2d2      	uxtb	r2, r2
 80039b0:	440b      	add	r3, r1
 80039b2:	761a      	strb	r2, [r3, #24]
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr
 80039c0:	e000e100 	.word	0xe000e100
 80039c4:	e000ed00 	.word	0xe000ed00

080039c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b089      	sub	sp, #36	; 0x24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f003 0307 	and.w	r3, r3, #7
 80039da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	f1c3 0307 	rsb	r3, r3, #7
 80039e2:	2b04      	cmp	r3, #4
 80039e4:	bf28      	it	cs
 80039e6:	2304      	movcs	r3, #4
 80039e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	3304      	adds	r3, #4
 80039ee:	2b06      	cmp	r3, #6
 80039f0:	d902      	bls.n	80039f8 <NVIC_EncodePriority+0x30>
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	3b03      	subs	r3, #3
 80039f6:	e000      	b.n	80039fa <NVIC_EncodePriority+0x32>
 80039f8:	2300      	movs	r3, #0
 80039fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	fa02 f303 	lsl.w	r3, r2, r3
 8003a06:	43da      	mvns	r2, r3
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	401a      	ands	r2, r3
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a10:	f04f 31ff 	mov.w	r1, #4294967295
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	fa01 f303 	lsl.w	r3, r1, r3
 8003a1a:	43d9      	mvns	r1, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a20:	4313      	orrs	r3, r2
         );
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3724      	adds	r7, #36	; 0x24
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
	...

08003a30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a40:	d301      	bcc.n	8003a46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a42:	2301      	movs	r3, #1
 8003a44:	e00f      	b.n	8003a66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a46:	4a0a      	ldr	r2, [pc, #40]	; (8003a70 <SysTick_Config+0x40>)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a4e:	210f      	movs	r1, #15
 8003a50:	f04f 30ff 	mov.w	r0, #4294967295
 8003a54:	f7ff ff8e 	bl	8003974 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a58:	4b05      	ldr	r3, [pc, #20]	; (8003a70 <SysTick_Config+0x40>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a5e:	4b04      	ldr	r3, [pc, #16]	; (8003a70 <SysTick_Config+0x40>)
 8003a60:	2207      	movs	r2, #7
 8003a62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	e000e010 	.word	0xe000e010

08003a74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f7ff ff29 	bl	80038d4 <__NVIC_SetPriorityGrouping>
}
 8003a82:	bf00      	nop
 8003a84:	3708      	adds	r7, #8
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b086      	sub	sp, #24
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	4603      	mov	r3, r0
 8003a92:	60b9      	str	r1, [r7, #8]
 8003a94:	607a      	str	r2, [r7, #4]
 8003a96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a9c:	f7ff ff3e 	bl	800391c <__NVIC_GetPriorityGrouping>
 8003aa0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	68b9      	ldr	r1, [r7, #8]
 8003aa6:	6978      	ldr	r0, [r7, #20]
 8003aa8:	f7ff ff8e 	bl	80039c8 <NVIC_EncodePriority>
 8003aac:	4602      	mov	r2, r0
 8003aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ab2:	4611      	mov	r1, r2
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7ff ff5d 	bl	8003974 <__NVIC_SetPriority>
}
 8003aba:	bf00      	nop
 8003abc:	3718      	adds	r7, #24
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b082      	sub	sp, #8
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	4603      	mov	r3, r0
 8003aca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7ff ff31 	bl	8003938 <__NVIC_EnableIRQ>
}
 8003ad6:	bf00      	nop
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b082      	sub	sp, #8
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7ff ffa2 	bl	8003a30 <SysTick_Config>
 8003aec:	4603      	mov	r3, r0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3708      	adds	r7, #8
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b084      	sub	sp, #16
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b02:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003b04:	f7ff feb6 	bl	8003874 <HAL_GetTick>
 8003b08:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d008      	beq.n	8003b28 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2280      	movs	r2, #128	; 0x80
 8003b1a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e052      	b.n	8003bce <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f022 0216 	bic.w	r2, r2, #22
 8003b36:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	695a      	ldr	r2, [r3, #20]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b46:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d103      	bne.n	8003b58 <HAL_DMA_Abort+0x62>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d007      	beq.n	8003b68 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f022 0208 	bic.w	r2, r2, #8
 8003b66:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f022 0201 	bic.w	r2, r2, #1
 8003b76:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b78:	e013      	b.n	8003ba2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b7a:	f7ff fe7b 	bl	8003874 <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	2b05      	cmp	r3, #5
 8003b86:	d90c      	bls.n	8003ba2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2220      	movs	r2, #32
 8003b8c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2203      	movs	r2, #3
 8003b92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e015      	b.n	8003bce <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0301 	and.w	r3, r3, #1
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1e4      	bne.n	8003b7a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb4:	223f      	movs	r2, #63	; 0x3f
 8003bb6:	409a      	lsls	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003bd6:	b480      	push	{r7}
 8003bd8:	b083      	sub	sp, #12
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d004      	beq.n	8003bf4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2280      	movs	r2, #128	; 0x80
 8003bee:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e00c      	b.n	8003c0e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2205      	movs	r2, #5
 8003bf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f022 0201 	bic.w	r2, r2, #1
 8003c0a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	370c      	adds	r7, #12
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
	...

08003c1c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e06c      	b.n	8003d08 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d106      	bne.n	8003c46 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2223      	movs	r2, #35	; 0x23
 8003c3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f7fd ff07 	bl	8001a54 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c46:	2300      	movs	r3, #0
 8003c48:	60bb      	str	r3, [r7, #8]
 8003c4a:	4b31      	ldr	r3, [pc, #196]	; (8003d10 <HAL_ETH_Init+0xf4>)
 8003c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4e:	4a30      	ldr	r2, [pc, #192]	; (8003d10 <HAL_ETH_Init+0xf4>)
 8003c50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c54:	6453      	str	r3, [r2, #68]	; 0x44
 8003c56:	4b2e      	ldr	r3, [pc, #184]	; (8003d10 <HAL_ETH_Init+0xf4>)
 8003c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c5e:	60bb      	str	r3, [r7, #8]
 8003c60:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003c62:	4b2c      	ldr	r3, [pc, #176]	; (8003d14 <HAL_ETH_Init+0xf8>)
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	4a2b      	ldr	r2, [pc, #172]	; (8003d14 <HAL_ETH_Init+0xf8>)
 8003c68:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003c6c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003c6e:	4b29      	ldr	r3, [pc, #164]	; (8003d14 <HAL_ETH_Init+0xf8>)
 8003c70:	685a      	ldr	r2, [r3, #4]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	4927      	ldr	r1, [pc, #156]	; (8003d14 <HAL_ETH_Init+0xf8>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003c7c:	4b25      	ldr	r3, [pc, #148]	; (8003d14 <HAL_ETH_Init+0xf8>)
 8003c7e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	6812      	ldr	r2, [r2, #0]
 8003c8e:	f043 0301 	orr.w	r3, r3, #1
 8003c92:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003c96:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c98:	f7ff fdec 	bl	8003874 <HAL_GetTick>
 8003c9c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003c9e:	e011      	b.n	8003cc4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003ca0:	f7ff fde8 	bl	8003874 <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003cae:	d909      	bls.n	8003cc4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2204      	movs	r2, #4
 8003cb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	22e0      	movs	r2, #224	; 0xe0
 8003cbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e021      	b.n	8003d08 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1e4      	bne.n	8003ca0 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 f958 	bl	8003f8c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 f9ff 	bl	80040e0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 fa55 	bl	8004192 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	461a      	mov	r2, r3
 8003cee:	2100      	movs	r1, #0
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 f9bd 	bl	8004070 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2210      	movs	r2, #16
 8003d02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3710      	adds	r7, #16
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	40023800 	.word	0x40023800
 8003d14:	40013800 	.word	0x40013800

08003d18 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	4b51      	ldr	r3, [pc, #324]	; (8003e74 <ETH_SetMACConfig+0x15c>)
 8003d2e:	4013      	ands	r3, r2
 8003d30:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	7c1b      	ldrb	r3, [r3, #16]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d102      	bne.n	8003d40 <ETH_SetMACConfig+0x28>
 8003d3a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003d3e:	e000      	b.n	8003d42 <ETH_SetMACConfig+0x2a>
 8003d40:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	7c5b      	ldrb	r3, [r3, #17]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d102      	bne.n	8003d50 <ETH_SetMACConfig+0x38>
 8003d4a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003d4e:	e000      	b.n	8003d52 <ETH_SetMACConfig+0x3a>
 8003d50:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003d52:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003d58:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	7fdb      	ldrb	r3, [r3, #31]
 8003d5e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003d60:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003d66:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003d68:	683a      	ldr	r2, [r7, #0]
 8003d6a:	7f92      	ldrb	r2, [r2, #30]
 8003d6c:	2a00      	cmp	r2, #0
 8003d6e:	d102      	bne.n	8003d76 <ETH_SetMACConfig+0x5e>
 8003d70:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d74:	e000      	b.n	8003d78 <ETH_SetMACConfig+0x60>
 8003d76:	2200      	movs	r2, #0
                        macconf->Speed |
 8003d78:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	7f1b      	ldrb	r3, [r3, #28]
 8003d7e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003d80:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003d86:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	791b      	ldrb	r3, [r3, #4]
 8003d8c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003d8e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003d90:	683a      	ldr	r2, [r7, #0]
 8003d92:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003d96:	2a00      	cmp	r2, #0
 8003d98:	d102      	bne.n	8003da0 <ETH_SetMACConfig+0x88>
 8003d9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d9e:	e000      	b.n	8003da2 <ETH_SetMACConfig+0x8a>
 8003da0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003da2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	7bdb      	ldrb	r3, [r3, #15]
 8003da8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003daa:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003db0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003db8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003dd2:	2001      	movs	r0, #1
 8003dd4:	f7ff fd5a 	bl	800388c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003dee:	4013      	ands	r3, r2
 8003df0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003df6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003dfe:	2a00      	cmp	r2, #0
 8003e00:	d101      	bne.n	8003e06 <ETH_SetMACConfig+0xee>
 8003e02:	2280      	movs	r2, #128	; 0x80
 8003e04:	e000      	b.n	8003e08 <ETH_SetMACConfig+0xf0>
 8003e06:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003e08:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003e0e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003e10:	683a      	ldr	r2, [r7, #0]
 8003e12:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8003e16:	2a01      	cmp	r2, #1
 8003e18:	d101      	bne.n	8003e1e <ETH_SetMACConfig+0x106>
 8003e1a:	2208      	movs	r2, #8
 8003e1c:	e000      	b.n	8003e20 <ETH_SetMACConfig+0x108>
 8003e1e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003e20:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003e22:	683a      	ldr	r2, [r7, #0]
 8003e24:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003e28:	2a01      	cmp	r2, #1
 8003e2a:	d101      	bne.n	8003e30 <ETH_SetMACConfig+0x118>
 8003e2c:	2204      	movs	r2, #4
 8003e2e:	e000      	b.n	8003e32 <ETH_SetMACConfig+0x11a>
 8003e30:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003e32:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003e34:	683a      	ldr	r2, [r7, #0]
 8003e36:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003e3a:	2a01      	cmp	r2, #1
 8003e3c:	d101      	bne.n	8003e42 <ETH_SetMACConfig+0x12a>
 8003e3e:	2202      	movs	r2, #2
 8003e40:	e000      	b.n	8003e44 <ETH_SetMACConfig+0x12c>
 8003e42:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003e44:	4313      	orrs	r3, r2
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e5c:	2001      	movs	r0, #1
 8003e5e:	f7ff fd15 	bl	800388c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	619a      	str	r2, [r3, #24]
}
 8003e6a:	bf00      	nop
 8003e6c:	3710      	adds	r7, #16
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	ff20810f 	.word	0xff20810f

08003e78 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	4b3d      	ldr	r3, [pc, #244]	; (8003f88 <ETH_SetDMAConfig+0x110>)
 8003e92:	4013      	ands	r3, r2
 8003e94:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	7b1b      	ldrb	r3, [r3, #12]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d102      	bne.n	8003ea4 <ETH_SetDMAConfig+0x2c>
 8003e9e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003ea2:	e000      	b.n	8003ea6 <ETH_SetDMAConfig+0x2e>
 8003ea4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	7b5b      	ldrb	r3, [r3, #13]
 8003eaa:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003eac:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003eae:	683a      	ldr	r2, [r7, #0]
 8003eb0:	7f52      	ldrb	r2, [r2, #29]
 8003eb2:	2a00      	cmp	r2, #0
 8003eb4:	d102      	bne.n	8003ebc <ETH_SetDMAConfig+0x44>
 8003eb6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003eba:	e000      	b.n	8003ebe <ETH_SetDMAConfig+0x46>
 8003ebc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003ebe:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	7b9b      	ldrb	r3, [r3, #14]
 8003ec4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003ec6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003ecc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	7f1b      	ldrb	r3, [r3, #28]
 8003ed2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003ed4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	7f9b      	ldrb	r3, [r3, #30]
 8003eda:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003edc:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003ee2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003eea:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003eec:	4313      	orrs	r3, r2
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003efc:	461a      	mov	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f0e:	2001      	movs	r0, #1
 8003f10:	f7ff fcbc 	bl	800388c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	791b      	ldrb	r3, [r3, #4]
 8003f26:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003f2c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003f32:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003f38:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003f40:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003f42:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f48:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003f4a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003f50:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	6812      	ldr	r2, [r2, #0]
 8003f56:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f5a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003f5e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f6c:	2001      	movs	r0, #1
 8003f6e:	f7ff fc8d 	bl	800388c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6013      	str	r3, [r2, #0]
}
 8003f80:	bf00      	nop
 8003f82:	3710      	adds	r7, #16
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	f8de3f23 	.word	0xf8de3f23

08003f8c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b0a6      	sub	sp, #152	; 0x98
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003f94:	2301      	movs	r3, #1
 8003f96:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003faa:	2301      	movs	r3, #1
 8003fac:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003fee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003ff2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003ff4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ff8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004000:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004004:	4619      	mov	r1, r3
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f7ff fe86 	bl	8003d18 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800400c:	2301      	movs	r3, #1
 800400e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004010:	2301      	movs	r3, #1
 8004012:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004014:	2301      	movs	r3, #1
 8004016:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800401a:	2301      	movs	r3, #1
 800401c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800401e:	2300      	movs	r3, #0
 8004020:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004022:	2300      	movs	r3, #0
 8004024:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004028:	2300      	movs	r3, #0
 800402a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800402e:	2300      	movs	r3, #0
 8004030:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8004032:	2301      	movs	r3, #1
 8004034:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004038:	2301      	movs	r3, #1
 800403a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800403c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004040:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004042:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004046:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004048:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800404c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800404e:	2301      	movs	r3, #1
 8004050:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004054:	2300      	movs	r3, #0
 8004056:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004058:	2300      	movs	r3, #0
 800405a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800405c:	f107 0308 	add.w	r3, r7, #8
 8004060:	4619      	mov	r1, r3
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7ff ff08 	bl	8003e78 <ETH_SetDMAConfig>
}
 8004068:	bf00      	nop
 800406a:	3798      	adds	r7, #152	; 0x98
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004070:	b480      	push	{r7}
 8004072:	b087      	sub	sp, #28
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	3305      	adds	r3, #5
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	021b      	lsls	r3, r3, #8
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	3204      	adds	r2, #4
 8004088:	7812      	ldrb	r2, [r2, #0]
 800408a:	4313      	orrs	r3, r2
 800408c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800408e:	68ba      	ldr	r2, [r7, #8]
 8004090:	4b11      	ldr	r3, [pc, #68]	; (80040d8 <ETH_MACAddressConfig+0x68>)
 8004092:	4413      	add	r3, r2
 8004094:	461a      	mov	r2, r3
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	3303      	adds	r3, #3
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	061a      	lsls	r2, r3, #24
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	3302      	adds	r3, #2
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	041b      	lsls	r3, r3, #16
 80040aa:	431a      	orrs	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	3301      	adds	r3, #1
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	021b      	lsls	r3, r3, #8
 80040b4:	4313      	orrs	r3, r2
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	7812      	ldrb	r2, [r2, #0]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80040be:	68ba      	ldr	r2, [r7, #8]
 80040c0:	4b06      	ldr	r3, [pc, #24]	; (80040dc <ETH_MACAddressConfig+0x6c>)
 80040c2:	4413      	add	r3, r2
 80040c4:	461a      	mov	r2, r3
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	6013      	str	r3, [r2, #0]
}
 80040ca:	bf00      	nop
 80040cc:	371c      	adds	r7, #28
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	40028040 	.word	0x40028040
 80040dc:	40028044 	.word	0x40028044

080040e0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80040e8:	2300      	movs	r3, #0
 80040ea:	60fb      	str	r3, [r7, #12]
 80040ec:	e03e      	b.n	800416c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	68d9      	ldr	r1, [r3, #12]
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	4613      	mov	r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	4413      	add	r3, r2
 80040fa:	00db      	lsls	r3, r3, #3
 80040fc:	440b      	add	r3, r1
 80040fe:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	2200      	movs	r2, #0
 8004104:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	2200      	movs	r2, #0
 800410a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	2200      	movs	r2, #0
 8004110:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	2200      	movs	r2, #0
 8004116:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004118:	68b9      	ldr	r1, [r7, #8]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	3206      	adds	r2, #6
 8004120:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2b02      	cmp	r3, #2
 8004134:	d80c      	bhi.n	8004150 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	68d9      	ldr	r1, [r3, #12]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	1c5a      	adds	r2, r3, #1
 800413e:	4613      	mov	r3, r2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	4413      	add	r3, r2
 8004144:	00db      	lsls	r3, r3, #3
 8004146:	440b      	add	r3, r1
 8004148:	461a      	mov	r2, r3
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	60da      	str	r2, [r3, #12]
 800414e:	e004      	b.n	800415a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	461a      	mov	r2, r3
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	3301      	adds	r3, #1
 800416a:	60fb      	str	r3, [r7, #12]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2b03      	cmp	r3, #3
 8004170:	d9bd      	bls.n	80040ee <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	68da      	ldr	r2, [r3, #12]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004184:	611a      	str	r2, [r3, #16]
}
 8004186:	bf00      	nop
 8004188:	3714      	adds	r7, #20
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr

08004192 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004192:	b480      	push	{r7}
 8004194:	b085      	sub	sp, #20
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800419a:	2300      	movs	r3, #0
 800419c:	60fb      	str	r3, [r7, #12]
 800419e:	e046      	b.n	800422e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6919      	ldr	r1, [r3, #16]
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	4613      	mov	r3, r2
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	4413      	add	r3, r2
 80041ac:	00db      	lsls	r3, r3, #3
 80041ae:	440b      	add	r3, r1
 80041b0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	2200      	movs	r2, #0
 80041b6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	2200      	movs	r2, #0
 80041bc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	2200      	movs	r2, #0
 80041c2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	2200      	movs	r2, #0
 80041c8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	2200      	movs	r2, #0
 80041ce:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	2200      	movs	r2, #0
 80041d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80041dc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80041e4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80041f2:	68b9      	ldr	r1, [r7, #8]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	3212      	adds	r2, #18
 80041fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2b02      	cmp	r3, #2
 8004202:	d80c      	bhi.n	800421e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6919      	ldr	r1, [r3, #16]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	1c5a      	adds	r2, r3, #1
 800420c:	4613      	mov	r3, r2
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	4413      	add	r3, r2
 8004212:	00db      	lsls	r3, r3, #3
 8004214:	440b      	add	r3, r1
 8004216:	461a      	mov	r2, r3
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	60da      	str	r2, [r3, #12]
 800421c:	e004      	b.n	8004228 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	461a      	mov	r2, r3
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	3301      	adds	r3, #1
 800422c:	60fb      	str	r3, [r7, #12]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2b03      	cmp	r3, #3
 8004232:	d9b5      	bls.n	80041a0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	691a      	ldr	r2, [r3, #16]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800425e:	60da      	str	r2, [r3, #12]
}
 8004260:	bf00      	nop
 8004262:	3714      	adds	r7, #20
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800426c:	b480      	push	{r7}
 800426e:	b089      	sub	sp, #36	; 0x24
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004276:	2300      	movs	r3, #0
 8004278:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800427a:	2300      	movs	r3, #0
 800427c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800427e:	2300      	movs	r3, #0
 8004280:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004282:	2300      	movs	r3, #0
 8004284:	61fb      	str	r3, [r7, #28]
 8004286:	e177      	b.n	8004578 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004288:	2201      	movs	r2, #1
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	fa02 f303 	lsl.w	r3, r2, r3
 8004290:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	4013      	ands	r3, r2
 800429a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	f040 8166 	bne.w	8004572 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	f003 0303 	and.w	r3, r3, #3
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d005      	beq.n	80042be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d130      	bne.n	8004320 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	005b      	lsls	r3, r3, #1
 80042c8:	2203      	movs	r2, #3
 80042ca:	fa02 f303 	lsl.w	r3, r2, r3
 80042ce:	43db      	mvns	r3, r3
 80042d0:	69ba      	ldr	r2, [r7, #24]
 80042d2:	4013      	ands	r3, r2
 80042d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	68da      	ldr	r2, [r3, #12]
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	005b      	lsls	r3, r3, #1
 80042de:	fa02 f303 	lsl.w	r3, r2, r3
 80042e2:	69ba      	ldr	r2, [r7, #24]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	69ba      	ldr	r2, [r7, #24]
 80042ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042f4:	2201      	movs	r2, #1
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	fa02 f303 	lsl.w	r3, r2, r3
 80042fc:	43db      	mvns	r3, r3
 80042fe:	69ba      	ldr	r2, [r7, #24]
 8004300:	4013      	ands	r3, r2
 8004302:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	091b      	lsrs	r3, r3, #4
 800430a:	f003 0201 	and.w	r2, r3, #1
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	fa02 f303 	lsl.w	r3, r2, r3
 8004314:	69ba      	ldr	r2, [r7, #24]
 8004316:	4313      	orrs	r3, r2
 8004318:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f003 0303 	and.w	r3, r3, #3
 8004328:	2b03      	cmp	r3, #3
 800432a:	d017      	beq.n	800435c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	005b      	lsls	r3, r3, #1
 8004336:	2203      	movs	r2, #3
 8004338:	fa02 f303 	lsl.w	r3, r2, r3
 800433c:	43db      	mvns	r3, r3
 800433e:	69ba      	ldr	r2, [r7, #24]
 8004340:	4013      	ands	r3, r2
 8004342:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	689a      	ldr	r2, [r3, #8]
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	005b      	lsls	r3, r3, #1
 800434c:	fa02 f303 	lsl.w	r3, r2, r3
 8004350:	69ba      	ldr	r2, [r7, #24]
 8004352:	4313      	orrs	r3, r2
 8004354:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f003 0303 	and.w	r3, r3, #3
 8004364:	2b02      	cmp	r3, #2
 8004366:	d123      	bne.n	80043b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	08da      	lsrs	r2, r3, #3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	3208      	adds	r2, #8
 8004370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004374:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	f003 0307 	and.w	r3, r3, #7
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	220f      	movs	r2, #15
 8004380:	fa02 f303 	lsl.w	r3, r2, r3
 8004384:	43db      	mvns	r3, r3
 8004386:	69ba      	ldr	r2, [r7, #24]
 8004388:	4013      	ands	r3, r2
 800438a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	691a      	ldr	r2, [r3, #16]
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	f003 0307 	and.w	r3, r3, #7
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	fa02 f303 	lsl.w	r3, r2, r3
 800439c:	69ba      	ldr	r2, [r7, #24]
 800439e:	4313      	orrs	r3, r2
 80043a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	08da      	lsrs	r2, r3, #3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	3208      	adds	r2, #8
 80043aa:	69b9      	ldr	r1, [r7, #24]
 80043ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	005b      	lsls	r3, r3, #1
 80043ba:	2203      	movs	r2, #3
 80043bc:	fa02 f303 	lsl.w	r3, r2, r3
 80043c0:	43db      	mvns	r3, r3
 80043c2:	69ba      	ldr	r2, [r7, #24]
 80043c4:	4013      	ands	r3, r2
 80043c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f003 0203 	and.w	r2, r3, #3
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	005b      	lsls	r3, r3, #1
 80043d4:	fa02 f303 	lsl.w	r3, r2, r3
 80043d8:	69ba      	ldr	r2, [r7, #24]
 80043da:	4313      	orrs	r3, r2
 80043dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	69ba      	ldr	r2, [r7, #24]
 80043e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f000 80c0 	beq.w	8004572 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043f2:	2300      	movs	r3, #0
 80043f4:	60fb      	str	r3, [r7, #12]
 80043f6:	4b66      	ldr	r3, [pc, #408]	; (8004590 <HAL_GPIO_Init+0x324>)
 80043f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043fa:	4a65      	ldr	r2, [pc, #404]	; (8004590 <HAL_GPIO_Init+0x324>)
 80043fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004400:	6453      	str	r3, [r2, #68]	; 0x44
 8004402:	4b63      	ldr	r3, [pc, #396]	; (8004590 <HAL_GPIO_Init+0x324>)
 8004404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800440a:	60fb      	str	r3, [r7, #12]
 800440c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800440e:	4a61      	ldr	r2, [pc, #388]	; (8004594 <HAL_GPIO_Init+0x328>)
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	089b      	lsrs	r3, r3, #2
 8004414:	3302      	adds	r3, #2
 8004416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800441a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	f003 0303 	and.w	r3, r3, #3
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	220f      	movs	r2, #15
 8004426:	fa02 f303 	lsl.w	r3, r2, r3
 800442a:	43db      	mvns	r3, r3
 800442c:	69ba      	ldr	r2, [r7, #24]
 800442e:	4013      	ands	r3, r2
 8004430:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a58      	ldr	r2, [pc, #352]	; (8004598 <HAL_GPIO_Init+0x32c>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d037      	beq.n	80044aa <HAL_GPIO_Init+0x23e>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a57      	ldr	r2, [pc, #348]	; (800459c <HAL_GPIO_Init+0x330>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d031      	beq.n	80044a6 <HAL_GPIO_Init+0x23a>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a56      	ldr	r2, [pc, #344]	; (80045a0 <HAL_GPIO_Init+0x334>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d02b      	beq.n	80044a2 <HAL_GPIO_Init+0x236>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a55      	ldr	r2, [pc, #340]	; (80045a4 <HAL_GPIO_Init+0x338>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d025      	beq.n	800449e <HAL_GPIO_Init+0x232>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a54      	ldr	r2, [pc, #336]	; (80045a8 <HAL_GPIO_Init+0x33c>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d01f      	beq.n	800449a <HAL_GPIO_Init+0x22e>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a53      	ldr	r2, [pc, #332]	; (80045ac <HAL_GPIO_Init+0x340>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d019      	beq.n	8004496 <HAL_GPIO_Init+0x22a>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a52      	ldr	r2, [pc, #328]	; (80045b0 <HAL_GPIO_Init+0x344>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d013      	beq.n	8004492 <HAL_GPIO_Init+0x226>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a51      	ldr	r2, [pc, #324]	; (80045b4 <HAL_GPIO_Init+0x348>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d00d      	beq.n	800448e <HAL_GPIO_Init+0x222>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a50      	ldr	r2, [pc, #320]	; (80045b8 <HAL_GPIO_Init+0x34c>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d007      	beq.n	800448a <HAL_GPIO_Init+0x21e>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a4f      	ldr	r2, [pc, #316]	; (80045bc <HAL_GPIO_Init+0x350>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d101      	bne.n	8004486 <HAL_GPIO_Init+0x21a>
 8004482:	2309      	movs	r3, #9
 8004484:	e012      	b.n	80044ac <HAL_GPIO_Init+0x240>
 8004486:	230a      	movs	r3, #10
 8004488:	e010      	b.n	80044ac <HAL_GPIO_Init+0x240>
 800448a:	2308      	movs	r3, #8
 800448c:	e00e      	b.n	80044ac <HAL_GPIO_Init+0x240>
 800448e:	2307      	movs	r3, #7
 8004490:	e00c      	b.n	80044ac <HAL_GPIO_Init+0x240>
 8004492:	2306      	movs	r3, #6
 8004494:	e00a      	b.n	80044ac <HAL_GPIO_Init+0x240>
 8004496:	2305      	movs	r3, #5
 8004498:	e008      	b.n	80044ac <HAL_GPIO_Init+0x240>
 800449a:	2304      	movs	r3, #4
 800449c:	e006      	b.n	80044ac <HAL_GPIO_Init+0x240>
 800449e:	2303      	movs	r3, #3
 80044a0:	e004      	b.n	80044ac <HAL_GPIO_Init+0x240>
 80044a2:	2302      	movs	r3, #2
 80044a4:	e002      	b.n	80044ac <HAL_GPIO_Init+0x240>
 80044a6:	2301      	movs	r3, #1
 80044a8:	e000      	b.n	80044ac <HAL_GPIO_Init+0x240>
 80044aa:	2300      	movs	r3, #0
 80044ac:	69fa      	ldr	r2, [r7, #28]
 80044ae:	f002 0203 	and.w	r2, r2, #3
 80044b2:	0092      	lsls	r2, r2, #2
 80044b4:	4093      	lsls	r3, r2
 80044b6:	69ba      	ldr	r2, [r7, #24]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80044bc:	4935      	ldr	r1, [pc, #212]	; (8004594 <HAL_GPIO_Init+0x328>)
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	089b      	lsrs	r3, r3, #2
 80044c2:	3302      	adds	r3, #2
 80044c4:	69ba      	ldr	r2, [r7, #24]
 80044c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80044ca:	4b3d      	ldr	r3, [pc, #244]	; (80045c0 <HAL_GPIO_Init+0x354>)
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	43db      	mvns	r3, r3
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	4013      	ands	r3, r2
 80044d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d003      	beq.n	80044ee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80044e6:	69ba      	ldr	r2, [r7, #24]
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80044ee:	4a34      	ldr	r2, [pc, #208]	; (80045c0 <HAL_GPIO_Init+0x354>)
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80044f4:	4b32      	ldr	r3, [pc, #200]	; (80045c0 <HAL_GPIO_Init+0x354>)
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	43db      	mvns	r3, r3
 80044fe:	69ba      	ldr	r2, [r7, #24]
 8004500:	4013      	ands	r3, r2
 8004502:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d003      	beq.n	8004518 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004510:	69ba      	ldr	r2, [r7, #24]
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	4313      	orrs	r3, r2
 8004516:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004518:	4a29      	ldr	r2, [pc, #164]	; (80045c0 <HAL_GPIO_Init+0x354>)
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800451e:	4b28      	ldr	r3, [pc, #160]	; (80045c0 <HAL_GPIO_Init+0x354>)
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	43db      	mvns	r3, r3
 8004528:	69ba      	ldr	r2, [r7, #24]
 800452a:	4013      	ands	r3, r2
 800452c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d003      	beq.n	8004542 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800453a:	69ba      	ldr	r2, [r7, #24]
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	4313      	orrs	r3, r2
 8004540:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004542:	4a1f      	ldr	r2, [pc, #124]	; (80045c0 <HAL_GPIO_Init+0x354>)
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004548:	4b1d      	ldr	r3, [pc, #116]	; (80045c0 <HAL_GPIO_Init+0x354>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	43db      	mvns	r3, r3
 8004552:	69ba      	ldr	r2, [r7, #24]
 8004554:	4013      	ands	r3, r2
 8004556:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d003      	beq.n	800456c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004564:	69ba      	ldr	r2, [r7, #24]
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	4313      	orrs	r3, r2
 800456a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800456c:	4a14      	ldr	r2, [pc, #80]	; (80045c0 <HAL_GPIO_Init+0x354>)
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	3301      	adds	r3, #1
 8004576:	61fb      	str	r3, [r7, #28]
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	2b0f      	cmp	r3, #15
 800457c:	f67f ae84 	bls.w	8004288 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004580:	bf00      	nop
 8004582:	bf00      	nop
 8004584:	3724      	adds	r7, #36	; 0x24
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	40023800 	.word	0x40023800
 8004594:	40013800 	.word	0x40013800
 8004598:	40020000 	.word	0x40020000
 800459c:	40020400 	.word	0x40020400
 80045a0:	40020800 	.word	0x40020800
 80045a4:	40020c00 	.word	0x40020c00
 80045a8:	40021000 	.word	0x40021000
 80045ac:	40021400 	.word	0x40021400
 80045b0:	40021800 	.word	0x40021800
 80045b4:	40021c00 	.word	0x40021c00
 80045b8:	40022000 	.word	0x40022000
 80045bc:	40022400 	.word	0x40022400
 80045c0:	40013c00 	.word	0x40013c00

080045c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b085      	sub	sp, #20
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	460b      	mov	r3, r1
 80045ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	691a      	ldr	r2, [r3, #16]
 80045d4:	887b      	ldrh	r3, [r7, #2]
 80045d6:	4013      	ands	r3, r2
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d002      	beq.n	80045e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80045dc:	2301      	movs	r3, #1
 80045de:	73fb      	strb	r3, [r7, #15]
 80045e0:	e001      	b.n	80045e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80045e2:	2300      	movs	r3, #0
 80045e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80045e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3714      	adds	r7, #20
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	460b      	mov	r3, r1
 80045fe:	807b      	strh	r3, [r7, #2]
 8004600:	4613      	mov	r3, r2
 8004602:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004604:	787b      	ldrb	r3, [r7, #1]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d003      	beq.n	8004612 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800460a:	887a      	ldrh	r2, [r7, #2]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004610:	e003      	b.n	800461a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004612:	887b      	ldrh	r3, [r7, #2]
 8004614:	041a      	lsls	r2, r3, #16
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	619a      	str	r2, [r3, #24]
}
 800461a:	bf00      	nop
 800461c:	370c      	adds	r7, #12
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
	...

08004628 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e12b      	b.n	8004892 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004640:	b2db      	uxtb	r3, r3
 8004642:	2b00      	cmp	r3, #0
 8004644:	d106      	bne.n	8004654 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f7fd fac6 	bl	8001be0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2224      	movs	r2, #36	; 0x24
 8004658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f022 0201 	bic.w	r2, r2, #1
 800466a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800467a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800468a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800468c:	f001 fa20 	bl	8005ad0 <HAL_RCC_GetPCLK1Freq>
 8004690:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	4a81      	ldr	r2, [pc, #516]	; (800489c <HAL_I2C_Init+0x274>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d807      	bhi.n	80046ac <HAL_I2C_Init+0x84>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	4a80      	ldr	r2, [pc, #512]	; (80048a0 <HAL_I2C_Init+0x278>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	bf94      	ite	ls
 80046a4:	2301      	movls	r3, #1
 80046a6:	2300      	movhi	r3, #0
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	e006      	b.n	80046ba <HAL_I2C_Init+0x92>
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	4a7d      	ldr	r2, [pc, #500]	; (80048a4 <HAL_I2C_Init+0x27c>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	bf94      	ite	ls
 80046b4:	2301      	movls	r3, #1
 80046b6:	2300      	movhi	r3, #0
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d001      	beq.n	80046c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e0e7      	b.n	8004892 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	4a78      	ldr	r2, [pc, #480]	; (80048a8 <HAL_I2C_Init+0x280>)
 80046c6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ca:	0c9b      	lsrs	r3, r3, #18
 80046cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68ba      	ldr	r2, [r7, #8]
 80046de:	430a      	orrs	r2, r1
 80046e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	6a1b      	ldr	r3, [r3, #32]
 80046e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	4a6a      	ldr	r2, [pc, #424]	; (800489c <HAL_I2C_Init+0x274>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d802      	bhi.n	80046fc <HAL_I2C_Init+0xd4>
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	3301      	adds	r3, #1
 80046fa:	e009      	b.n	8004710 <HAL_I2C_Init+0xe8>
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004702:	fb02 f303 	mul.w	r3, r2, r3
 8004706:	4a69      	ldr	r2, [pc, #420]	; (80048ac <HAL_I2C_Init+0x284>)
 8004708:	fba2 2303 	umull	r2, r3, r2, r3
 800470c:	099b      	lsrs	r3, r3, #6
 800470e:	3301      	adds	r3, #1
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	6812      	ldr	r2, [r2, #0]
 8004714:	430b      	orrs	r3, r1
 8004716:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	69db      	ldr	r3, [r3, #28]
 800471e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004722:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	495c      	ldr	r1, [pc, #368]	; (800489c <HAL_I2C_Init+0x274>)
 800472c:	428b      	cmp	r3, r1
 800472e:	d819      	bhi.n	8004764 <HAL_I2C_Init+0x13c>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	1e59      	subs	r1, r3, #1
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	005b      	lsls	r3, r3, #1
 800473a:	fbb1 f3f3 	udiv	r3, r1, r3
 800473e:	1c59      	adds	r1, r3, #1
 8004740:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004744:	400b      	ands	r3, r1
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00a      	beq.n	8004760 <HAL_I2C_Init+0x138>
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	1e59      	subs	r1, r3, #1
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	005b      	lsls	r3, r3, #1
 8004754:	fbb1 f3f3 	udiv	r3, r1, r3
 8004758:	3301      	adds	r3, #1
 800475a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800475e:	e051      	b.n	8004804 <HAL_I2C_Init+0x1dc>
 8004760:	2304      	movs	r3, #4
 8004762:	e04f      	b.n	8004804 <HAL_I2C_Init+0x1dc>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d111      	bne.n	8004790 <HAL_I2C_Init+0x168>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	1e58      	subs	r0, r3, #1
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6859      	ldr	r1, [r3, #4]
 8004774:	460b      	mov	r3, r1
 8004776:	005b      	lsls	r3, r3, #1
 8004778:	440b      	add	r3, r1
 800477a:	fbb0 f3f3 	udiv	r3, r0, r3
 800477e:	3301      	adds	r3, #1
 8004780:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004784:	2b00      	cmp	r3, #0
 8004786:	bf0c      	ite	eq
 8004788:	2301      	moveq	r3, #1
 800478a:	2300      	movne	r3, #0
 800478c:	b2db      	uxtb	r3, r3
 800478e:	e012      	b.n	80047b6 <HAL_I2C_Init+0x18e>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	1e58      	subs	r0, r3, #1
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6859      	ldr	r1, [r3, #4]
 8004798:	460b      	mov	r3, r1
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	440b      	add	r3, r1
 800479e:	0099      	lsls	r1, r3, #2
 80047a0:	440b      	add	r3, r1
 80047a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80047a6:	3301      	adds	r3, #1
 80047a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	bf0c      	ite	eq
 80047b0:	2301      	moveq	r3, #1
 80047b2:	2300      	movne	r3, #0
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d001      	beq.n	80047be <HAL_I2C_Init+0x196>
 80047ba:	2301      	movs	r3, #1
 80047bc:	e022      	b.n	8004804 <HAL_I2C_Init+0x1dc>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10e      	bne.n	80047e4 <HAL_I2C_Init+0x1bc>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	1e58      	subs	r0, r3, #1
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6859      	ldr	r1, [r3, #4]
 80047ce:	460b      	mov	r3, r1
 80047d0:	005b      	lsls	r3, r3, #1
 80047d2:	440b      	add	r3, r1
 80047d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80047d8:	3301      	adds	r3, #1
 80047da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047e2:	e00f      	b.n	8004804 <HAL_I2C_Init+0x1dc>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	1e58      	subs	r0, r3, #1
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6859      	ldr	r1, [r3, #4]
 80047ec:	460b      	mov	r3, r1
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	440b      	add	r3, r1
 80047f2:	0099      	lsls	r1, r3, #2
 80047f4:	440b      	add	r3, r1
 80047f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80047fa:	3301      	adds	r3, #1
 80047fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004800:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004804:	6879      	ldr	r1, [r7, #4]
 8004806:	6809      	ldr	r1, [r1, #0]
 8004808:	4313      	orrs	r3, r2
 800480a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	69da      	ldr	r2, [r3, #28]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a1b      	ldr	r3, [r3, #32]
 800481e:	431a      	orrs	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004832:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	6911      	ldr	r1, [r2, #16]
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	68d2      	ldr	r2, [r2, #12]
 800483e:	4311      	orrs	r1, r2
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	6812      	ldr	r2, [r2, #0]
 8004844:	430b      	orrs	r3, r1
 8004846:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	695a      	ldr	r2, [r3, #20]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	431a      	orrs	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	430a      	orrs	r2, r1
 8004862:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f042 0201 	orr.w	r2, r2, #1
 8004872:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2220      	movs	r2, #32
 800487e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3710      	adds	r7, #16
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	000186a0 	.word	0x000186a0
 80048a0:	001e847f 	.word	0x001e847f
 80048a4:	003d08ff 	.word	0x003d08ff
 80048a8:	431bde83 	.word	0x431bde83
 80048ac:	10624dd3 	.word	0x10624dd3

080048b0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b088      	sub	sp, #32
 80048b4:	af02      	add	r7, sp, #8
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	607a      	str	r2, [r7, #4]
 80048ba:	461a      	mov	r2, r3
 80048bc:	460b      	mov	r3, r1
 80048be:	817b      	strh	r3, [r7, #10]
 80048c0:	4613      	mov	r3, r2
 80048c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80048c4:	f7fe ffd6 	bl	8003874 <HAL_GetTick>
 80048c8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	2b20      	cmp	r3, #32
 80048d4:	f040 80e0 	bne.w	8004a98 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	9300      	str	r3, [sp, #0]
 80048dc:	2319      	movs	r3, #25
 80048de:	2201      	movs	r2, #1
 80048e0:	4970      	ldr	r1, [pc, #448]	; (8004aa4 <HAL_I2C_Master_Transmit+0x1f4>)
 80048e2:	68f8      	ldr	r0, [r7, #12]
 80048e4:	f000 f964 	bl	8004bb0 <I2C_WaitOnFlagUntilTimeout>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d001      	beq.n	80048f2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80048ee:	2302      	movs	r3, #2
 80048f0:	e0d3      	b.n	8004a9a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d101      	bne.n	8004900 <HAL_I2C_Master_Transmit+0x50>
 80048fc:	2302      	movs	r3, #2
 80048fe:	e0cc      	b.n	8004a9a <HAL_I2C_Master_Transmit+0x1ea>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	2b01      	cmp	r3, #1
 8004914:	d007      	beq.n	8004926 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f042 0201 	orr.w	r2, r2, #1
 8004924:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004934:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2221      	movs	r2, #33	; 0x21
 800493a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2210      	movs	r2, #16
 8004942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2200      	movs	r2, #0
 800494a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	893a      	ldrh	r2, [r7, #8]
 8004956:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800495c:	b29a      	uxth	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	4a50      	ldr	r2, [pc, #320]	; (8004aa8 <HAL_I2C_Master_Transmit+0x1f8>)
 8004966:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004968:	8979      	ldrh	r1, [r7, #10]
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	6a3a      	ldr	r2, [r7, #32]
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f000 f89c 	bl	8004aac <I2C_MasterRequestWrite>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d001      	beq.n	800497e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e08d      	b.n	8004a9a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800497e:	2300      	movs	r3, #0
 8004980:	613b      	str	r3, [r7, #16]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	695b      	ldr	r3, [r3, #20]
 8004988:	613b      	str	r3, [r7, #16]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	613b      	str	r3, [r7, #16]
 8004992:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004994:	e066      	b.n	8004a64 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	6a39      	ldr	r1, [r7, #32]
 800499a:	68f8      	ldr	r0, [r7, #12]
 800499c:	f000 f9de 	bl	8004d5c <I2C_WaitOnTXEFlagUntilTimeout>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00d      	beq.n	80049c2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049aa:	2b04      	cmp	r3, #4
 80049ac:	d107      	bne.n	80049be <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e06b      	b.n	8004a9a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c6:	781a      	ldrb	r2, [r3, #0]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d2:	1c5a      	adds	r2, r3, #1
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049dc:	b29b      	uxth	r3, r3
 80049de:	3b01      	subs	r3, #1
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ea:	3b01      	subs	r3, #1
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	695b      	ldr	r3, [r3, #20]
 80049f8:	f003 0304 	and.w	r3, r3, #4
 80049fc:	2b04      	cmp	r3, #4
 80049fe:	d11b      	bne.n	8004a38 <HAL_I2C_Master_Transmit+0x188>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d017      	beq.n	8004a38 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0c:	781a      	ldrb	r2, [r3, #0]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a18:	1c5a      	adds	r2, r3, #1
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	3b01      	subs	r3, #1
 8004a26:	b29a      	uxth	r2, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a30:	3b01      	subs	r3, #1
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a38:	697a      	ldr	r2, [r7, #20]
 8004a3a:	6a39      	ldr	r1, [r7, #32]
 8004a3c:	68f8      	ldr	r0, [r7, #12]
 8004a3e:	f000 f9ce 	bl	8004dde <I2C_WaitOnBTFFlagUntilTimeout>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00d      	beq.n	8004a64 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4c:	2b04      	cmp	r3, #4
 8004a4e:	d107      	bne.n	8004a60 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a5e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e01a      	b.n	8004a9a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d194      	bne.n	8004996 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2220      	movs	r2, #32
 8004a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a94:	2300      	movs	r3, #0
 8004a96:	e000      	b.n	8004a9a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004a98:	2302      	movs	r3, #2
  }
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3718      	adds	r7, #24
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	00100002 	.word	0x00100002
 8004aa8:	ffff0000 	.word	0xffff0000

08004aac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b088      	sub	sp, #32
 8004ab0:	af02      	add	r7, sp, #8
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	607a      	str	r2, [r7, #4]
 8004ab6:	603b      	str	r3, [r7, #0]
 8004ab8:	460b      	mov	r3, r1
 8004aba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	2b08      	cmp	r3, #8
 8004ac6:	d006      	beq.n	8004ad6 <I2C_MasterRequestWrite+0x2a>
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d003      	beq.n	8004ad6 <I2C_MasterRequestWrite+0x2a>
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ad4:	d108      	bne.n	8004ae8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ae4:	601a      	str	r2, [r3, #0]
 8004ae6:	e00b      	b.n	8004b00 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aec:	2b12      	cmp	r3, #18
 8004aee:	d107      	bne.n	8004b00 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004afe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	9300      	str	r3, [sp, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	f000 f84f 	bl	8004bb0 <I2C_WaitOnFlagUntilTimeout>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d00d      	beq.n	8004b34 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b26:	d103      	bne.n	8004b30 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b2e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	e035      	b.n	8004ba0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b3c:	d108      	bne.n	8004b50 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b3e:	897b      	ldrh	r3, [r7, #10]
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	461a      	mov	r2, r3
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b4c:	611a      	str	r2, [r3, #16]
 8004b4e:	e01b      	b.n	8004b88 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004b50:	897b      	ldrh	r3, [r7, #10]
 8004b52:	11db      	asrs	r3, r3, #7
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	f003 0306 	and.w	r3, r3, #6
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	f063 030f 	orn	r3, r3, #15
 8004b60:	b2da      	uxtb	r2, r3
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	490e      	ldr	r1, [pc, #56]	; (8004ba8 <I2C_MasterRequestWrite+0xfc>)
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f000 f875 	bl	8004c5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d001      	beq.n	8004b7e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e010      	b.n	8004ba0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004b7e:	897b      	ldrh	r3, [r7, #10]
 8004b80:	b2da      	uxtb	r2, r3
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	4907      	ldr	r1, [pc, #28]	; (8004bac <I2C_MasterRequestWrite+0x100>)
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f000 f865 	bl	8004c5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e000      	b.n	8004ba0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3718      	adds	r7, #24
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	00010008 	.word	0x00010008
 8004bac:	00010002 	.word	0x00010002

08004bb0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	603b      	str	r3, [r7, #0]
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bc0:	e025      	b.n	8004c0e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc8:	d021      	beq.n	8004c0e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bca:	f7fe fe53 	bl	8003874 <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	683a      	ldr	r2, [r7, #0]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d302      	bcc.n	8004be0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d116      	bne.n	8004c0e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2200      	movs	r2, #0
 8004be4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2220      	movs	r2, #32
 8004bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfa:	f043 0220 	orr.w	r2, r3, #32
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e023      	b.n	8004c56 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	0c1b      	lsrs	r3, r3, #16
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d10d      	bne.n	8004c34 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	43da      	mvns	r2, r3
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	4013      	ands	r3, r2
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	bf0c      	ite	eq
 8004c2a:	2301      	moveq	r3, #1
 8004c2c:	2300      	movne	r3, #0
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	461a      	mov	r2, r3
 8004c32:	e00c      	b.n	8004c4e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	43da      	mvns	r2, r3
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	4013      	ands	r3, r2
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	bf0c      	ite	eq
 8004c46:	2301      	moveq	r3, #1
 8004c48:	2300      	movne	r3, #0
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	79fb      	ldrb	r3, [r7, #7]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d0b6      	beq.n	8004bc2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3710      	adds	r7, #16
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}

08004c5e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	b084      	sub	sp, #16
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	60f8      	str	r0, [r7, #12]
 8004c66:	60b9      	str	r1, [r7, #8]
 8004c68:	607a      	str	r2, [r7, #4]
 8004c6a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c6c:	e051      	b.n	8004d12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	695b      	ldr	r3, [r3, #20]
 8004c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c7c:	d123      	bne.n	8004cc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c8c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c96:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2220      	movs	r2, #32
 8004ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb2:	f043 0204 	orr.w	r2, r3, #4
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e046      	b.n	8004d54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ccc:	d021      	beq.n	8004d12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cce:	f7fe fdd1 	bl	8003874 <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d302      	bcc.n	8004ce4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d116      	bne.n	8004d12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2220      	movs	r2, #32
 8004cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfe:	f043 0220 	orr.w	r2, r3, #32
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e020      	b.n	8004d54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	0c1b      	lsrs	r3, r3, #16
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d10c      	bne.n	8004d36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	695b      	ldr	r3, [r3, #20]
 8004d22:	43da      	mvns	r2, r3
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	4013      	ands	r3, r2
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	bf14      	ite	ne
 8004d2e:	2301      	movne	r3, #1
 8004d30:	2300      	moveq	r3, #0
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	e00b      	b.n	8004d4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	43da      	mvns	r2, r3
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	4013      	ands	r3, r2
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	bf14      	ite	ne
 8004d48:	2301      	movne	r3, #1
 8004d4a:	2300      	moveq	r3, #0
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d18d      	bne.n	8004c6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004d52:	2300      	movs	r3, #0
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3710      	adds	r7, #16
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d68:	e02d      	b.n	8004dc6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d6a:	68f8      	ldr	r0, [r7, #12]
 8004d6c:	f000 f878 	bl	8004e60 <I2C_IsAcknowledgeFailed>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d001      	beq.n	8004d7a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e02d      	b.n	8004dd6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d80:	d021      	beq.n	8004dc6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d82:	f7fe fd77 	bl	8003874 <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d302      	bcc.n	8004d98 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d116      	bne.n	8004dc6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2220      	movs	r2, #32
 8004da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db2:	f043 0220 	orr.w	r2, r3, #32
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e007      	b.n	8004dd6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	695b      	ldr	r3, [r3, #20]
 8004dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dd0:	2b80      	cmp	r3, #128	; 0x80
 8004dd2:	d1ca      	bne.n	8004d6a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3710      	adds	r7, #16
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}

08004dde <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004dde:	b580      	push	{r7, lr}
 8004de0:	b084      	sub	sp, #16
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	60f8      	str	r0, [r7, #12]
 8004de6:	60b9      	str	r1, [r7, #8]
 8004de8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004dea:	e02d      	b.n	8004e48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004dec:	68f8      	ldr	r0, [r7, #12]
 8004dee:	f000 f837 	bl	8004e60 <I2C_IsAcknowledgeFailed>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d001      	beq.n	8004dfc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e02d      	b.n	8004e58 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e02:	d021      	beq.n	8004e48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e04:	f7fe fd36 	bl	8003874 <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	68ba      	ldr	r2, [r7, #8]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d302      	bcc.n	8004e1a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d116      	bne.n	8004e48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2220      	movs	r2, #32
 8004e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e34:	f043 0220 	orr.w	r2, r3, #32
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e007      	b.n	8004e58 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	695b      	ldr	r3, [r3, #20]
 8004e4e:	f003 0304 	and.w	r3, r3, #4
 8004e52:	2b04      	cmp	r3, #4
 8004e54:	d1ca      	bne.n	8004dec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3710      	adds	r7, #16
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e76:	d11b      	bne.n	8004eb0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e80:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9c:	f043 0204 	orr.w	r2, r3, #4
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e000      	b.n	8004eb2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	370c      	adds	r7, #12
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr

08004ebe <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ebe:	b480      	push	{r7}
 8004ec0:	b083      	sub	sp, #12
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
 8004ec6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2b20      	cmp	r3, #32
 8004ed2:	d129      	bne.n	8004f28 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2224      	movs	r2, #36	; 0x24
 8004ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f022 0201 	bic.w	r2, r2, #1
 8004eea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f022 0210 	bic.w	r2, r2, #16
 8004efa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	683a      	ldr	r2, [r7, #0]
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f042 0201 	orr.w	r2, r2, #1
 8004f1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2220      	movs	r2, #32
 8004f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004f24:	2300      	movs	r3, #0
 8004f26:	e000      	b.n	8004f2a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004f28:	2302      	movs	r3, #2
  }
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	370c      	adds	r7, #12
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004f36:	b480      	push	{r7}
 8004f38:	b085      	sub	sp, #20
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
 8004f3e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004f40:	2300      	movs	r3, #0
 8004f42:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	2b20      	cmp	r3, #32
 8004f4e:	d12a      	bne.n	8004fa6 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2224      	movs	r2, #36	; 0x24
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f022 0201 	bic.w	r2, r2, #1
 8004f66:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004f70:	89fb      	ldrh	r3, [r7, #14]
 8004f72:	f023 030f 	bic.w	r3, r3, #15
 8004f76:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	89fb      	ldrh	r3, [r7, #14]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	89fa      	ldrh	r2, [r7, #14]
 8004f88:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f042 0201 	orr.w	r2, r2, #1
 8004f98:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2220      	movs	r2, #32
 8004f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	e000      	b.n	8004fa8 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004fa6:	2302      	movs	r3, #2
  }
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3714      	adds	r7, #20
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fb6:	b08f      	sub	sp, #60	; 0x3c
 8004fb8:	af0a      	add	r7, sp, #40	; 0x28
 8004fba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d101      	bne.n	8004fc6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e10f      	b.n	80051e6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d106      	bne.n	8004fe6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f7fd f8b9 	bl	8002158 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2203      	movs	r2, #3
 8004fea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d102      	bne.n	8005000 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4618      	mov	r0, r3
 8005006:	f003 ffe2 	bl	8008fce <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	603b      	str	r3, [r7, #0]
 8005010:	687e      	ldr	r6, [r7, #4]
 8005012:	466d      	mov	r5, sp
 8005014:	f106 0410 	add.w	r4, r6, #16
 8005018:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800501a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800501c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800501e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005020:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005024:	e885 0003 	stmia.w	r5, {r0, r1}
 8005028:	1d33      	adds	r3, r6, #4
 800502a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800502c:	6838      	ldr	r0, [r7, #0]
 800502e:	f003 ff6d 	bl	8008f0c <USB_CoreInit>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d005      	beq.n	8005044 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2202      	movs	r2, #2
 800503c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e0d0      	b.n	80051e6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2100      	movs	r1, #0
 800504a:	4618      	mov	r0, r3
 800504c:	f003 ffd0 	bl	8008ff0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005050:	2300      	movs	r3, #0
 8005052:	73fb      	strb	r3, [r7, #15]
 8005054:	e04a      	b.n	80050ec <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005056:	7bfa      	ldrb	r2, [r7, #15]
 8005058:	6879      	ldr	r1, [r7, #4]
 800505a:	4613      	mov	r3, r2
 800505c:	00db      	lsls	r3, r3, #3
 800505e:	4413      	add	r3, r2
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	440b      	add	r3, r1
 8005064:	333d      	adds	r3, #61	; 0x3d
 8005066:	2201      	movs	r2, #1
 8005068:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800506a:	7bfa      	ldrb	r2, [r7, #15]
 800506c:	6879      	ldr	r1, [r7, #4]
 800506e:	4613      	mov	r3, r2
 8005070:	00db      	lsls	r3, r3, #3
 8005072:	4413      	add	r3, r2
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	440b      	add	r3, r1
 8005078:	333c      	adds	r3, #60	; 0x3c
 800507a:	7bfa      	ldrb	r2, [r7, #15]
 800507c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800507e:	7bfa      	ldrb	r2, [r7, #15]
 8005080:	7bfb      	ldrb	r3, [r7, #15]
 8005082:	b298      	uxth	r0, r3
 8005084:	6879      	ldr	r1, [r7, #4]
 8005086:	4613      	mov	r3, r2
 8005088:	00db      	lsls	r3, r3, #3
 800508a:	4413      	add	r3, r2
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	440b      	add	r3, r1
 8005090:	3344      	adds	r3, #68	; 0x44
 8005092:	4602      	mov	r2, r0
 8005094:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005096:	7bfa      	ldrb	r2, [r7, #15]
 8005098:	6879      	ldr	r1, [r7, #4]
 800509a:	4613      	mov	r3, r2
 800509c:	00db      	lsls	r3, r3, #3
 800509e:	4413      	add	r3, r2
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	440b      	add	r3, r1
 80050a4:	3340      	adds	r3, #64	; 0x40
 80050a6:	2200      	movs	r2, #0
 80050a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80050aa:	7bfa      	ldrb	r2, [r7, #15]
 80050ac:	6879      	ldr	r1, [r7, #4]
 80050ae:	4613      	mov	r3, r2
 80050b0:	00db      	lsls	r3, r3, #3
 80050b2:	4413      	add	r3, r2
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	440b      	add	r3, r1
 80050b8:	3348      	adds	r3, #72	; 0x48
 80050ba:	2200      	movs	r2, #0
 80050bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80050be:	7bfa      	ldrb	r2, [r7, #15]
 80050c0:	6879      	ldr	r1, [r7, #4]
 80050c2:	4613      	mov	r3, r2
 80050c4:	00db      	lsls	r3, r3, #3
 80050c6:	4413      	add	r3, r2
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	440b      	add	r3, r1
 80050cc:	334c      	adds	r3, #76	; 0x4c
 80050ce:	2200      	movs	r2, #0
 80050d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80050d2:	7bfa      	ldrb	r2, [r7, #15]
 80050d4:	6879      	ldr	r1, [r7, #4]
 80050d6:	4613      	mov	r3, r2
 80050d8:	00db      	lsls	r3, r3, #3
 80050da:	4413      	add	r3, r2
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	440b      	add	r3, r1
 80050e0:	3354      	adds	r3, #84	; 0x54
 80050e2:	2200      	movs	r2, #0
 80050e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050e6:	7bfb      	ldrb	r3, [r7, #15]
 80050e8:	3301      	adds	r3, #1
 80050ea:	73fb      	strb	r3, [r7, #15]
 80050ec:	7bfa      	ldrb	r2, [r7, #15]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d3af      	bcc.n	8005056 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050f6:	2300      	movs	r3, #0
 80050f8:	73fb      	strb	r3, [r7, #15]
 80050fa:	e044      	b.n	8005186 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80050fc:	7bfa      	ldrb	r2, [r7, #15]
 80050fe:	6879      	ldr	r1, [r7, #4]
 8005100:	4613      	mov	r3, r2
 8005102:	00db      	lsls	r3, r3, #3
 8005104:	4413      	add	r3, r2
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	440b      	add	r3, r1
 800510a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800510e:	2200      	movs	r2, #0
 8005110:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005112:	7bfa      	ldrb	r2, [r7, #15]
 8005114:	6879      	ldr	r1, [r7, #4]
 8005116:	4613      	mov	r3, r2
 8005118:	00db      	lsls	r3, r3, #3
 800511a:	4413      	add	r3, r2
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	440b      	add	r3, r1
 8005120:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005124:	7bfa      	ldrb	r2, [r7, #15]
 8005126:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005128:	7bfa      	ldrb	r2, [r7, #15]
 800512a:	6879      	ldr	r1, [r7, #4]
 800512c:	4613      	mov	r3, r2
 800512e:	00db      	lsls	r3, r3, #3
 8005130:	4413      	add	r3, r2
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	440b      	add	r3, r1
 8005136:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800513a:	2200      	movs	r2, #0
 800513c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800513e:	7bfa      	ldrb	r2, [r7, #15]
 8005140:	6879      	ldr	r1, [r7, #4]
 8005142:	4613      	mov	r3, r2
 8005144:	00db      	lsls	r3, r3, #3
 8005146:	4413      	add	r3, r2
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	440b      	add	r3, r1
 800514c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005150:	2200      	movs	r2, #0
 8005152:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005154:	7bfa      	ldrb	r2, [r7, #15]
 8005156:	6879      	ldr	r1, [r7, #4]
 8005158:	4613      	mov	r3, r2
 800515a:	00db      	lsls	r3, r3, #3
 800515c:	4413      	add	r3, r2
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	440b      	add	r3, r1
 8005162:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005166:	2200      	movs	r2, #0
 8005168:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800516a:	7bfa      	ldrb	r2, [r7, #15]
 800516c:	6879      	ldr	r1, [r7, #4]
 800516e:	4613      	mov	r3, r2
 8005170:	00db      	lsls	r3, r3, #3
 8005172:	4413      	add	r3, r2
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	440b      	add	r3, r1
 8005178:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800517c:	2200      	movs	r2, #0
 800517e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005180:	7bfb      	ldrb	r3, [r7, #15]
 8005182:	3301      	adds	r3, #1
 8005184:	73fb      	strb	r3, [r7, #15]
 8005186:	7bfa      	ldrb	r2, [r7, #15]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	429a      	cmp	r2, r3
 800518e:	d3b5      	bcc.n	80050fc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	603b      	str	r3, [r7, #0]
 8005196:	687e      	ldr	r6, [r7, #4]
 8005198:	466d      	mov	r5, sp
 800519a:	f106 0410 	add.w	r4, r6, #16
 800519e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80051aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80051ae:	1d33      	adds	r3, r6, #4
 80051b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80051b2:	6838      	ldr	r0, [r7, #0]
 80051b4:	f003 ff68 	bl	8009088 <USB_DevInit>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d005      	beq.n	80051ca <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2202      	movs	r2, #2
 80051c2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e00d      	b.n	80051e6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2201      	movs	r2, #1
 80051d6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4618      	mov	r0, r3
 80051e0:	f004 f933 	bl	800944a <USB_DevDisconnect>

  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3714      	adds	r7, #20
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080051f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b086      	sub	sp, #24
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d101      	bne.n	8005202 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e267      	b.n	80056d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0301 	and.w	r3, r3, #1
 800520a:	2b00      	cmp	r3, #0
 800520c:	d075      	beq.n	80052fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800520e:	4b88      	ldr	r3, [pc, #544]	; (8005430 <HAL_RCC_OscConfig+0x240>)
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f003 030c 	and.w	r3, r3, #12
 8005216:	2b04      	cmp	r3, #4
 8005218:	d00c      	beq.n	8005234 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800521a:	4b85      	ldr	r3, [pc, #532]	; (8005430 <HAL_RCC_OscConfig+0x240>)
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005222:	2b08      	cmp	r3, #8
 8005224:	d112      	bne.n	800524c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005226:	4b82      	ldr	r3, [pc, #520]	; (8005430 <HAL_RCC_OscConfig+0x240>)
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800522e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005232:	d10b      	bne.n	800524c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005234:	4b7e      	ldr	r3, [pc, #504]	; (8005430 <HAL_RCC_OscConfig+0x240>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d05b      	beq.n	80052f8 <HAL_RCC_OscConfig+0x108>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d157      	bne.n	80052f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e242      	b.n	80056d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005254:	d106      	bne.n	8005264 <HAL_RCC_OscConfig+0x74>
 8005256:	4b76      	ldr	r3, [pc, #472]	; (8005430 <HAL_RCC_OscConfig+0x240>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a75      	ldr	r2, [pc, #468]	; (8005430 <HAL_RCC_OscConfig+0x240>)
 800525c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005260:	6013      	str	r3, [r2, #0]
 8005262:	e01d      	b.n	80052a0 <HAL_RCC_OscConfig+0xb0>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800526c:	d10c      	bne.n	8005288 <HAL_RCC_OscConfig+0x98>
 800526e:	4b70      	ldr	r3, [pc, #448]	; (8005430 <HAL_RCC_OscConfig+0x240>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a6f      	ldr	r2, [pc, #444]	; (8005430 <HAL_RCC_OscConfig+0x240>)
 8005274:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005278:	6013      	str	r3, [r2, #0]
 800527a:	4b6d      	ldr	r3, [pc, #436]	; (8005430 <HAL_RCC_OscConfig+0x240>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a6c      	ldr	r2, [pc, #432]	; (8005430 <HAL_RCC_OscConfig+0x240>)
 8005280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005284:	6013      	str	r3, [r2, #0]
 8005286:	e00b      	b.n	80052a0 <HAL_RCC_OscConfig+0xb0>
 8005288:	4b69      	ldr	r3, [pc, #420]	; (8005430 <HAL_RCC_OscConfig+0x240>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a68      	ldr	r2, [pc, #416]	; (8005430 <HAL_RCC_OscConfig+0x240>)
 800528e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005292:	6013      	str	r3, [r2, #0]
 8005294:	4b66      	ldr	r3, [pc, #408]	; (8005430 <HAL_RCC_OscConfig+0x240>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a65      	ldr	r2, [pc, #404]	; (8005430 <HAL_RCC_OscConfig+0x240>)
 800529a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800529e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d013      	beq.n	80052d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052a8:	f7fe fae4 	bl	8003874 <HAL_GetTick>
 80052ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ae:	e008      	b.n	80052c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052b0:	f7fe fae0 	bl	8003874 <HAL_GetTick>
 80052b4:	4602      	mov	r2, r0
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	2b64      	cmp	r3, #100	; 0x64
 80052bc:	d901      	bls.n	80052c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e207      	b.n	80056d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052c2:	4b5b      	ldr	r3, [pc, #364]	; (8005430 <HAL_RCC_OscConfig+0x240>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d0f0      	beq.n	80052b0 <HAL_RCC_OscConfig+0xc0>
 80052ce:	e014      	b.n	80052fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052d0:	f7fe fad0 	bl	8003874 <HAL_GetTick>
 80052d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052d6:	e008      	b.n	80052ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052d8:	f7fe facc 	bl	8003874 <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	2b64      	cmp	r3, #100	; 0x64
 80052e4:	d901      	bls.n	80052ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e1f3      	b.n	80056d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052ea:	4b51      	ldr	r3, [pc, #324]	; (8005430 <HAL_RCC_OscConfig+0x240>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d1f0      	bne.n	80052d8 <HAL_RCC_OscConfig+0xe8>
 80052f6:	e000      	b.n	80052fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0302 	and.w	r3, r3, #2
 8005302:	2b00      	cmp	r3, #0
 8005304:	d063      	beq.n	80053ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005306:	4b4a      	ldr	r3, [pc, #296]	; (8005430 <HAL_RCC_OscConfig+0x240>)
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f003 030c 	and.w	r3, r3, #12
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00b      	beq.n	800532a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005312:	4b47      	ldr	r3, [pc, #284]	; (8005430 <HAL_RCC_OscConfig+0x240>)
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800531a:	2b08      	cmp	r3, #8
 800531c:	d11c      	bne.n	8005358 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800531e:	4b44      	ldr	r3, [pc, #272]	; (8005430 <HAL_RCC_OscConfig+0x240>)
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d116      	bne.n	8005358 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800532a:	4b41      	ldr	r3, [pc, #260]	; (8005430 <HAL_RCC_OscConfig+0x240>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 0302 	and.w	r3, r3, #2
 8005332:	2b00      	cmp	r3, #0
 8005334:	d005      	beq.n	8005342 <HAL_RCC_OscConfig+0x152>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	2b01      	cmp	r3, #1
 800533c:	d001      	beq.n	8005342 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e1c7      	b.n	80056d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005342:	4b3b      	ldr	r3, [pc, #236]	; (8005430 <HAL_RCC_OscConfig+0x240>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	00db      	lsls	r3, r3, #3
 8005350:	4937      	ldr	r1, [pc, #220]	; (8005430 <HAL_RCC_OscConfig+0x240>)
 8005352:	4313      	orrs	r3, r2
 8005354:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005356:	e03a      	b.n	80053ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d020      	beq.n	80053a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005360:	4b34      	ldr	r3, [pc, #208]	; (8005434 <HAL_RCC_OscConfig+0x244>)
 8005362:	2201      	movs	r2, #1
 8005364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005366:	f7fe fa85 	bl	8003874 <HAL_GetTick>
 800536a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800536c:	e008      	b.n	8005380 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800536e:	f7fe fa81 	bl	8003874 <HAL_GetTick>
 8005372:	4602      	mov	r2, r0
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	2b02      	cmp	r3, #2
 800537a:	d901      	bls.n	8005380 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800537c:	2303      	movs	r3, #3
 800537e:	e1a8      	b.n	80056d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005380:	4b2b      	ldr	r3, [pc, #172]	; (8005430 <HAL_RCC_OscConfig+0x240>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0302 	and.w	r3, r3, #2
 8005388:	2b00      	cmp	r3, #0
 800538a:	d0f0      	beq.n	800536e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800538c:	4b28      	ldr	r3, [pc, #160]	; (8005430 <HAL_RCC_OscConfig+0x240>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	00db      	lsls	r3, r3, #3
 800539a:	4925      	ldr	r1, [pc, #148]	; (8005430 <HAL_RCC_OscConfig+0x240>)
 800539c:	4313      	orrs	r3, r2
 800539e:	600b      	str	r3, [r1, #0]
 80053a0:	e015      	b.n	80053ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053a2:	4b24      	ldr	r3, [pc, #144]	; (8005434 <HAL_RCC_OscConfig+0x244>)
 80053a4:	2200      	movs	r2, #0
 80053a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053a8:	f7fe fa64 	bl	8003874 <HAL_GetTick>
 80053ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053ae:	e008      	b.n	80053c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053b0:	f7fe fa60 	bl	8003874 <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d901      	bls.n	80053c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e187      	b.n	80056d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053c2:	4b1b      	ldr	r3, [pc, #108]	; (8005430 <HAL_RCC_OscConfig+0x240>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0302 	and.w	r3, r3, #2
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1f0      	bne.n	80053b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0308 	and.w	r3, r3, #8
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d036      	beq.n	8005448 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	695b      	ldr	r3, [r3, #20]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d016      	beq.n	8005410 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053e2:	4b15      	ldr	r3, [pc, #84]	; (8005438 <HAL_RCC_OscConfig+0x248>)
 80053e4:	2201      	movs	r2, #1
 80053e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053e8:	f7fe fa44 	bl	8003874 <HAL_GetTick>
 80053ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053ee:	e008      	b.n	8005402 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053f0:	f7fe fa40 	bl	8003874 <HAL_GetTick>
 80053f4:	4602      	mov	r2, r0
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d901      	bls.n	8005402 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e167      	b.n	80056d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005402:	4b0b      	ldr	r3, [pc, #44]	; (8005430 <HAL_RCC_OscConfig+0x240>)
 8005404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005406:	f003 0302 	and.w	r3, r3, #2
 800540a:	2b00      	cmp	r3, #0
 800540c:	d0f0      	beq.n	80053f0 <HAL_RCC_OscConfig+0x200>
 800540e:	e01b      	b.n	8005448 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005410:	4b09      	ldr	r3, [pc, #36]	; (8005438 <HAL_RCC_OscConfig+0x248>)
 8005412:	2200      	movs	r2, #0
 8005414:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005416:	f7fe fa2d 	bl	8003874 <HAL_GetTick>
 800541a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800541c:	e00e      	b.n	800543c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800541e:	f7fe fa29 	bl	8003874 <HAL_GetTick>
 8005422:	4602      	mov	r2, r0
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	2b02      	cmp	r3, #2
 800542a:	d907      	bls.n	800543c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800542c:	2303      	movs	r3, #3
 800542e:	e150      	b.n	80056d2 <HAL_RCC_OscConfig+0x4e2>
 8005430:	40023800 	.word	0x40023800
 8005434:	42470000 	.word	0x42470000
 8005438:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800543c:	4b88      	ldr	r3, [pc, #544]	; (8005660 <HAL_RCC_OscConfig+0x470>)
 800543e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005440:	f003 0302 	and.w	r3, r3, #2
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1ea      	bne.n	800541e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0304 	and.w	r3, r3, #4
 8005450:	2b00      	cmp	r3, #0
 8005452:	f000 8097 	beq.w	8005584 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005456:	2300      	movs	r3, #0
 8005458:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800545a:	4b81      	ldr	r3, [pc, #516]	; (8005660 <HAL_RCC_OscConfig+0x470>)
 800545c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d10f      	bne.n	8005486 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005466:	2300      	movs	r3, #0
 8005468:	60bb      	str	r3, [r7, #8]
 800546a:	4b7d      	ldr	r3, [pc, #500]	; (8005660 <HAL_RCC_OscConfig+0x470>)
 800546c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546e:	4a7c      	ldr	r2, [pc, #496]	; (8005660 <HAL_RCC_OscConfig+0x470>)
 8005470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005474:	6413      	str	r3, [r2, #64]	; 0x40
 8005476:	4b7a      	ldr	r3, [pc, #488]	; (8005660 <HAL_RCC_OscConfig+0x470>)
 8005478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800547e:	60bb      	str	r3, [r7, #8]
 8005480:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005482:	2301      	movs	r3, #1
 8005484:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005486:	4b77      	ldr	r3, [pc, #476]	; (8005664 <HAL_RCC_OscConfig+0x474>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800548e:	2b00      	cmp	r3, #0
 8005490:	d118      	bne.n	80054c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005492:	4b74      	ldr	r3, [pc, #464]	; (8005664 <HAL_RCC_OscConfig+0x474>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a73      	ldr	r2, [pc, #460]	; (8005664 <HAL_RCC_OscConfig+0x474>)
 8005498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800549c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800549e:	f7fe f9e9 	bl	8003874 <HAL_GetTick>
 80054a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054a4:	e008      	b.n	80054b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054a6:	f7fe f9e5 	bl	8003874 <HAL_GetTick>
 80054aa:	4602      	mov	r2, r0
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d901      	bls.n	80054b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e10c      	b.n	80056d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054b8:	4b6a      	ldr	r3, [pc, #424]	; (8005664 <HAL_RCC_OscConfig+0x474>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d0f0      	beq.n	80054a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d106      	bne.n	80054da <HAL_RCC_OscConfig+0x2ea>
 80054cc:	4b64      	ldr	r3, [pc, #400]	; (8005660 <HAL_RCC_OscConfig+0x470>)
 80054ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054d0:	4a63      	ldr	r2, [pc, #396]	; (8005660 <HAL_RCC_OscConfig+0x470>)
 80054d2:	f043 0301 	orr.w	r3, r3, #1
 80054d6:	6713      	str	r3, [r2, #112]	; 0x70
 80054d8:	e01c      	b.n	8005514 <HAL_RCC_OscConfig+0x324>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	2b05      	cmp	r3, #5
 80054e0:	d10c      	bne.n	80054fc <HAL_RCC_OscConfig+0x30c>
 80054e2:	4b5f      	ldr	r3, [pc, #380]	; (8005660 <HAL_RCC_OscConfig+0x470>)
 80054e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054e6:	4a5e      	ldr	r2, [pc, #376]	; (8005660 <HAL_RCC_OscConfig+0x470>)
 80054e8:	f043 0304 	orr.w	r3, r3, #4
 80054ec:	6713      	str	r3, [r2, #112]	; 0x70
 80054ee:	4b5c      	ldr	r3, [pc, #368]	; (8005660 <HAL_RCC_OscConfig+0x470>)
 80054f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054f2:	4a5b      	ldr	r2, [pc, #364]	; (8005660 <HAL_RCC_OscConfig+0x470>)
 80054f4:	f043 0301 	orr.w	r3, r3, #1
 80054f8:	6713      	str	r3, [r2, #112]	; 0x70
 80054fa:	e00b      	b.n	8005514 <HAL_RCC_OscConfig+0x324>
 80054fc:	4b58      	ldr	r3, [pc, #352]	; (8005660 <HAL_RCC_OscConfig+0x470>)
 80054fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005500:	4a57      	ldr	r2, [pc, #348]	; (8005660 <HAL_RCC_OscConfig+0x470>)
 8005502:	f023 0301 	bic.w	r3, r3, #1
 8005506:	6713      	str	r3, [r2, #112]	; 0x70
 8005508:	4b55      	ldr	r3, [pc, #340]	; (8005660 <HAL_RCC_OscConfig+0x470>)
 800550a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800550c:	4a54      	ldr	r2, [pc, #336]	; (8005660 <HAL_RCC_OscConfig+0x470>)
 800550e:	f023 0304 	bic.w	r3, r3, #4
 8005512:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d015      	beq.n	8005548 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800551c:	f7fe f9aa 	bl	8003874 <HAL_GetTick>
 8005520:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005522:	e00a      	b.n	800553a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005524:	f7fe f9a6 	bl	8003874 <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005532:	4293      	cmp	r3, r2
 8005534:	d901      	bls.n	800553a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e0cb      	b.n	80056d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800553a:	4b49      	ldr	r3, [pc, #292]	; (8005660 <HAL_RCC_OscConfig+0x470>)
 800553c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800553e:	f003 0302 	and.w	r3, r3, #2
 8005542:	2b00      	cmp	r3, #0
 8005544:	d0ee      	beq.n	8005524 <HAL_RCC_OscConfig+0x334>
 8005546:	e014      	b.n	8005572 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005548:	f7fe f994 	bl	8003874 <HAL_GetTick>
 800554c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800554e:	e00a      	b.n	8005566 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005550:	f7fe f990 	bl	8003874 <HAL_GetTick>
 8005554:	4602      	mov	r2, r0
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	f241 3288 	movw	r2, #5000	; 0x1388
 800555e:	4293      	cmp	r3, r2
 8005560:	d901      	bls.n	8005566 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e0b5      	b.n	80056d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005566:	4b3e      	ldr	r3, [pc, #248]	; (8005660 <HAL_RCC_OscConfig+0x470>)
 8005568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800556a:	f003 0302 	and.w	r3, r3, #2
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1ee      	bne.n	8005550 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005572:	7dfb      	ldrb	r3, [r7, #23]
 8005574:	2b01      	cmp	r3, #1
 8005576:	d105      	bne.n	8005584 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005578:	4b39      	ldr	r3, [pc, #228]	; (8005660 <HAL_RCC_OscConfig+0x470>)
 800557a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557c:	4a38      	ldr	r2, [pc, #224]	; (8005660 <HAL_RCC_OscConfig+0x470>)
 800557e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005582:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	699b      	ldr	r3, [r3, #24]
 8005588:	2b00      	cmp	r3, #0
 800558a:	f000 80a1 	beq.w	80056d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800558e:	4b34      	ldr	r3, [pc, #208]	; (8005660 <HAL_RCC_OscConfig+0x470>)
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	f003 030c 	and.w	r3, r3, #12
 8005596:	2b08      	cmp	r3, #8
 8005598:	d05c      	beq.n	8005654 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	699b      	ldr	r3, [r3, #24]
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d141      	bne.n	8005626 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055a2:	4b31      	ldr	r3, [pc, #196]	; (8005668 <HAL_RCC_OscConfig+0x478>)
 80055a4:	2200      	movs	r2, #0
 80055a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055a8:	f7fe f964 	bl	8003874 <HAL_GetTick>
 80055ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055ae:	e008      	b.n	80055c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055b0:	f7fe f960 	bl	8003874 <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d901      	bls.n	80055c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e087      	b.n	80056d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055c2:	4b27      	ldr	r3, [pc, #156]	; (8005660 <HAL_RCC_OscConfig+0x470>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1f0      	bne.n	80055b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	69da      	ldr	r2, [r3, #28]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a1b      	ldr	r3, [r3, #32]
 80055d6:	431a      	orrs	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055dc:	019b      	lsls	r3, r3, #6
 80055de:	431a      	orrs	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e4:	085b      	lsrs	r3, r3, #1
 80055e6:	3b01      	subs	r3, #1
 80055e8:	041b      	lsls	r3, r3, #16
 80055ea:	431a      	orrs	r2, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f0:	061b      	lsls	r3, r3, #24
 80055f2:	491b      	ldr	r1, [pc, #108]	; (8005660 <HAL_RCC_OscConfig+0x470>)
 80055f4:	4313      	orrs	r3, r2
 80055f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055f8:	4b1b      	ldr	r3, [pc, #108]	; (8005668 <HAL_RCC_OscConfig+0x478>)
 80055fa:	2201      	movs	r2, #1
 80055fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055fe:	f7fe f939 	bl	8003874 <HAL_GetTick>
 8005602:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005604:	e008      	b.n	8005618 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005606:	f7fe f935 	bl	8003874 <HAL_GetTick>
 800560a:	4602      	mov	r2, r0
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	2b02      	cmp	r3, #2
 8005612:	d901      	bls.n	8005618 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005614:	2303      	movs	r3, #3
 8005616:	e05c      	b.n	80056d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005618:	4b11      	ldr	r3, [pc, #68]	; (8005660 <HAL_RCC_OscConfig+0x470>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005620:	2b00      	cmp	r3, #0
 8005622:	d0f0      	beq.n	8005606 <HAL_RCC_OscConfig+0x416>
 8005624:	e054      	b.n	80056d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005626:	4b10      	ldr	r3, [pc, #64]	; (8005668 <HAL_RCC_OscConfig+0x478>)
 8005628:	2200      	movs	r2, #0
 800562a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800562c:	f7fe f922 	bl	8003874 <HAL_GetTick>
 8005630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005632:	e008      	b.n	8005646 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005634:	f7fe f91e 	bl	8003874 <HAL_GetTick>
 8005638:	4602      	mov	r2, r0
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	2b02      	cmp	r3, #2
 8005640:	d901      	bls.n	8005646 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e045      	b.n	80056d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005646:	4b06      	ldr	r3, [pc, #24]	; (8005660 <HAL_RCC_OscConfig+0x470>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800564e:	2b00      	cmp	r3, #0
 8005650:	d1f0      	bne.n	8005634 <HAL_RCC_OscConfig+0x444>
 8005652:	e03d      	b.n	80056d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	699b      	ldr	r3, [r3, #24]
 8005658:	2b01      	cmp	r3, #1
 800565a:	d107      	bne.n	800566c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e038      	b.n	80056d2 <HAL_RCC_OscConfig+0x4e2>
 8005660:	40023800 	.word	0x40023800
 8005664:	40007000 	.word	0x40007000
 8005668:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800566c:	4b1b      	ldr	r3, [pc, #108]	; (80056dc <HAL_RCC_OscConfig+0x4ec>)
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	699b      	ldr	r3, [r3, #24]
 8005676:	2b01      	cmp	r3, #1
 8005678:	d028      	beq.n	80056cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005684:	429a      	cmp	r2, r3
 8005686:	d121      	bne.n	80056cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005692:	429a      	cmp	r2, r3
 8005694:	d11a      	bne.n	80056cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800569c:	4013      	ands	r3, r2
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80056a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d111      	bne.n	80056cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b2:	085b      	lsrs	r3, r3, #1
 80056b4:	3b01      	subs	r3, #1
 80056b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d107      	bne.n	80056cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d001      	beq.n	80056d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e000      	b.n	80056d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3718      	adds	r7, #24
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	40023800 	.word	0x40023800

080056e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d101      	bne.n	80056f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	e0cc      	b.n	800588e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80056f4:	4b68      	ldr	r3, [pc, #416]	; (8005898 <HAL_RCC_ClockConfig+0x1b8>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 030f 	and.w	r3, r3, #15
 80056fc:	683a      	ldr	r2, [r7, #0]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d90c      	bls.n	800571c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005702:	4b65      	ldr	r3, [pc, #404]	; (8005898 <HAL_RCC_ClockConfig+0x1b8>)
 8005704:	683a      	ldr	r2, [r7, #0]
 8005706:	b2d2      	uxtb	r2, r2
 8005708:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800570a:	4b63      	ldr	r3, [pc, #396]	; (8005898 <HAL_RCC_ClockConfig+0x1b8>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 030f 	and.w	r3, r3, #15
 8005712:	683a      	ldr	r2, [r7, #0]
 8005714:	429a      	cmp	r2, r3
 8005716:	d001      	beq.n	800571c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e0b8      	b.n	800588e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 0302 	and.w	r3, r3, #2
 8005724:	2b00      	cmp	r3, #0
 8005726:	d020      	beq.n	800576a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 0304 	and.w	r3, r3, #4
 8005730:	2b00      	cmp	r3, #0
 8005732:	d005      	beq.n	8005740 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005734:	4b59      	ldr	r3, [pc, #356]	; (800589c <HAL_RCC_ClockConfig+0x1bc>)
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	4a58      	ldr	r2, [pc, #352]	; (800589c <HAL_RCC_ClockConfig+0x1bc>)
 800573a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800573e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0308 	and.w	r3, r3, #8
 8005748:	2b00      	cmp	r3, #0
 800574a:	d005      	beq.n	8005758 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800574c:	4b53      	ldr	r3, [pc, #332]	; (800589c <HAL_RCC_ClockConfig+0x1bc>)
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	4a52      	ldr	r2, [pc, #328]	; (800589c <HAL_RCC_ClockConfig+0x1bc>)
 8005752:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005756:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005758:	4b50      	ldr	r3, [pc, #320]	; (800589c <HAL_RCC_ClockConfig+0x1bc>)
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	494d      	ldr	r1, [pc, #308]	; (800589c <HAL_RCC_ClockConfig+0x1bc>)
 8005766:	4313      	orrs	r3, r2
 8005768:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0301 	and.w	r3, r3, #1
 8005772:	2b00      	cmp	r3, #0
 8005774:	d044      	beq.n	8005800 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	2b01      	cmp	r3, #1
 800577c:	d107      	bne.n	800578e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800577e:	4b47      	ldr	r3, [pc, #284]	; (800589c <HAL_RCC_ClockConfig+0x1bc>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d119      	bne.n	80057be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e07f      	b.n	800588e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	2b02      	cmp	r3, #2
 8005794:	d003      	beq.n	800579e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800579a:	2b03      	cmp	r3, #3
 800579c:	d107      	bne.n	80057ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800579e:	4b3f      	ldr	r3, [pc, #252]	; (800589c <HAL_RCC_ClockConfig+0x1bc>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d109      	bne.n	80057be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e06f      	b.n	800588e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057ae:	4b3b      	ldr	r3, [pc, #236]	; (800589c <HAL_RCC_ClockConfig+0x1bc>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 0302 	and.w	r3, r3, #2
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d101      	bne.n	80057be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e067      	b.n	800588e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057be:	4b37      	ldr	r3, [pc, #220]	; (800589c <HAL_RCC_ClockConfig+0x1bc>)
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	f023 0203 	bic.w	r2, r3, #3
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	4934      	ldr	r1, [pc, #208]	; (800589c <HAL_RCC_ClockConfig+0x1bc>)
 80057cc:	4313      	orrs	r3, r2
 80057ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057d0:	f7fe f850 	bl	8003874 <HAL_GetTick>
 80057d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057d6:	e00a      	b.n	80057ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057d8:	f7fe f84c 	bl	8003874 <HAL_GetTick>
 80057dc:	4602      	mov	r2, r0
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	1ad3      	subs	r3, r2, r3
 80057e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d901      	bls.n	80057ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80057ea:	2303      	movs	r3, #3
 80057ec:	e04f      	b.n	800588e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057ee:	4b2b      	ldr	r3, [pc, #172]	; (800589c <HAL_RCC_ClockConfig+0x1bc>)
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	f003 020c 	and.w	r2, r3, #12
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d1eb      	bne.n	80057d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005800:	4b25      	ldr	r3, [pc, #148]	; (8005898 <HAL_RCC_ClockConfig+0x1b8>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 030f 	and.w	r3, r3, #15
 8005808:	683a      	ldr	r2, [r7, #0]
 800580a:	429a      	cmp	r2, r3
 800580c:	d20c      	bcs.n	8005828 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800580e:	4b22      	ldr	r3, [pc, #136]	; (8005898 <HAL_RCC_ClockConfig+0x1b8>)
 8005810:	683a      	ldr	r2, [r7, #0]
 8005812:	b2d2      	uxtb	r2, r2
 8005814:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005816:	4b20      	ldr	r3, [pc, #128]	; (8005898 <HAL_RCC_ClockConfig+0x1b8>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 030f 	and.w	r3, r3, #15
 800581e:	683a      	ldr	r2, [r7, #0]
 8005820:	429a      	cmp	r2, r3
 8005822:	d001      	beq.n	8005828 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e032      	b.n	800588e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 0304 	and.w	r3, r3, #4
 8005830:	2b00      	cmp	r3, #0
 8005832:	d008      	beq.n	8005846 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005834:	4b19      	ldr	r3, [pc, #100]	; (800589c <HAL_RCC_ClockConfig+0x1bc>)
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	4916      	ldr	r1, [pc, #88]	; (800589c <HAL_RCC_ClockConfig+0x1bc>)
 8005842:	4313      	orrs	r3, r2
 8005844:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 0308 	and.w	r3, r3, #8
 800584e:	2b00      	cmp	r3, #0
 8005850:	d009      	beq.n	8005866 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005852:	4b12      	ldr	r3, [pc, #72]	; (800589c <HAL_RCC_ClockConfig+0x1bc>)
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	00db      	lsls	r3, r3, #3
 8005860:	490e      	ldr	r1, [pc, #56]	; (800589c <HAL_RCC_ClockConfig+0x1bc>)
 8005862:	4313      	orrs	r3, r2
 8005864:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005866:	f000 f821 	bl	80058ac <HAL_RCC_GetSysClockFreq>
 800586a:	4602      	mov	r2, r0
 800586c:	4b0b      	ldr	r3, [pc, #44]	; (800589c <HAL_RCC_ClockConfig+0x1bc>)
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	091b      	lsrs	r3, r3, #4
 8005872:	f003 030f 	and.w	r3, r3, #15
 8005876:	490a      	ldr	r1, [pc, #40]	; (80058a0 <HAL_RCC_ClockConfig+0x1c0>)
 8005878:	5ccb      	ldrb	r3, [r1, r3]
 800587a:	fa22 f303 	lsr.w	r3, r2, r3
 800587e:	4a09      	ldr	r2, [pc, #36]	; (80058a4 <HAL_RCC_ClockConfig+0x1c4>)
 8005880:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005882:	4b09      	ldr	r3, [pc, #36]	; (80058a8 <HAL_RCC_ClockConfig+0x1c8>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4618      	mov	r0, r3
 8005888:	f7fd ffb0 	bl	80037ec <HAL_InitTick>

  return HAL_OK;
 800588c:	2300      	movs	r3, #0
}
 800588e:	4618      	mov	r0, r3
 8005890:	3710      	adds	r7, #16
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	40023c00 	.word	0x40023c00
 800589c:	40023800 	.word	0x40023800
 80058a0:	0800a7d0 	.word	0x0800a7d0
 80058a4:	20000118 	.word	0x20000118
 80058a8:	20000120 	.word	0x20000120

080058ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058b0:	b094      	sub	sp, #80	; 0x50
 80058b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80058b4:	2300      	movs	r3, #0
 80058b6:	647b      	str	r3, [r7, #68]	; 0x44
 80058b8:	2300      	movs	r3, #0
 80058ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058bc:	2300      	movs	r3, #0
 80058be:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80058c0:	2300      	movs	r3, #0
 80058c2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058c4:	4b79      	ldr	r3, [pc, #484]	; (8005aac <HAL_RCC_GetSysClockFreq+0x200>)
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	f003 030c 	and.w	r3, r3, #12
 80058cc:	2b08      	cmp	r3, #8
 80058ce:	d00d      	beq.n	80058ec <HAL_RCC_GetSysClockFreq+0x40>
 80058d0:	2b08      	cmp	r3, #8
 80058d2:	f200 80e1 	bhi.w	8005a98 <HAL_RCC_GetSysClockFreq+0x1ec>
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d002      	beq.n	80058e0 <HAL_RCC_GetSysClockFreq+0x34>
 80058da:	2b04      	cmp	r3, #4
 80058dc:	d003      	beq.n	80058e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80058de:	e0db      	b.n	8005a98 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80058e0:	4b73      	ldr	r3, [pc, #460]	; (8005ab0 <HAL_RCC_GetSysClockFreq+0x204>)
 80058e2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80058e4:	e0db      	b.n	8005a9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80058e6:	4b73      	ldr	r3, [pc, #460]	; (8005ab4 <HAL_RCC_GetSysClockFreq+0x208>)
 80058e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80058ea:	e0d8      	b.n	8005a9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80058ec:	4b6f      	ldr	r3, [pc, #444]	; (8005aac <HAL_RCC_GetSysClockFreq+0x200>)
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058f4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80058f6:	4b6d      	ldr	r3, [pc, #436]	; (8005aac <HAL_RCC_GetSysClockFreq+0x200>)
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d063      	beq.n	80059ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005902:	4b6a      	ldr	r3, [pc, #424]	; (8005aac <HAL_RCC_GetSysClockFreq+0x200>)
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	099b      	lsrs	r3, r3, #6
 8005908:	2200      	movs	r2, #0
 800590a:	63bb      	str	r3, [r7, #56]	; 0x38
 800590c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800590e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005910:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005914:	633b      	str	r3, [r7, #48]	; 0x30
 8005916:	2300      	movs	r3, #0
 8005918:	637b      	str	r3, [r7, #52]	; 0x34
 800591a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800591e:	4622      	mov	r2, r4
 8005920:	462b      	mov	r3, r5
 8005922:	f04f 0000 	mov.w	r0, #0
 8005926:	f04f 0100 	mov.w	r1, #0
 800592a:	0159      	lsls	r1, r3, #5
 800592c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005930:	0150      	lsls	r0, r2, #5
 8005932:	4602      	mov	r2, r0
 8005934:	460b      	mov	r3, r1
 8005936:	4621      	mov	r1, r4
 8005938:	1a51      	subs	r1, r2, r1
 800593a:	6139      	str	r1, [r7, #16]
 800593c:	4629      	mov	r1, r5
 800593e:	eb63 0301 	sbc.w	r3, r3, r1
 8005942:	617b      	str	r3, [r7, #20]
 8005944:	f04f 0200 	mov.w	r2, #0
 8005948:	f04f 0300 	mov.w	r3, #0
 800594c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005950:	4659      	mov	r1, fp
 8005952:	018b      	lsls	r3, r1, #6
 8005954:	4651      	mov	r1, sl
 8005956:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800595a:	4651      	mov	r1, sl
 800595c:	018a      	lsls	r2, r1, #6
 800595e:	4651      	mov	r1, sl
 8005960:	ebb2 0801 	subs.w	r8, r2, r1
 8005964:	4659      	mov	r1, fp
 8005966:	eb63 0901 	sbc.w	r9, r3, r1
 800596a:	f04f 0200 	mov.w	r2, #0
 800596e:	f04f 0300 	mov.w	r3, #0
 8005972:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005976:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800597a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800597e:	4690      	mov	r8, r2
 8005980:	4699      	mov	r9, r3
 8005982:	4623      	mov	r3, r4
 8005984:	eb18 0303 	adds.w	r3, r8, r3
 8005988:	60bb      	str	r3, [r7, #8]
 800598a:	462b      	mov	r3, r5
 800598c:	eb49 0303 	adc.w	r3, r9, r3
 8005990:	60fb      	str	r3, [r7, #12]
 8005992:	f04f 0200 	mov.w	r2, #0
 8005996:	f04f 0300 	mov.w	r3, #0
 800599a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800599e:	4629      	mov	r1, r5
 80059a0:	024b      	lsls	r3, r1, #9
 80059a2:	4621      	mov	r1, r4
 80059a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80059a8:	4621      	mov	r1, r4
 80059aa:	024a      	lsls	r2, r1, #9
 80059ac:	4610      	mov	r0, r2
 80059ae:	4619      	mov	r1, r3
 80059b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059b2:	2200      	movs	r2, #0
 80059b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80059b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80059bc:	f7fa fc68 	bl	8000290 <__aeabi_uldivmod>
 80059c0:	4602      	mov	r2, r0
 80059c2:	460b      	mov	r3, r1
 80059c4:	4613      	mov	r3, r2
 80059c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059c8:	e058      	b.n	8005a7c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059ca:	4b38      	ldr	r3, [pc, #224]	; (8005aac <HAL_RCC_GetSysClockFreq+0x200>)
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	099b      	lsrs	r3, r3, #6
 80059d0:	2200      	movs	r2, #0
 80059d2:	4618      	mov	r0, r3
 80059d4:	4611      	mov	r1, r2
 80059d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80059da:	623b      	str	r3, [r7, #32]
 80059dc:	2300      	movs	r3, #0
 80059de:	627b      	str	r3, [r7, #36]	; 0x24
 80059e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80059e4:	4642      	mov	r2, r8
 80059e6:	464b      	mov	r3, r9
 80059e8:	f04f 0000 	mov.w	r0, #0
 80059ec:	f04f 0100 	mov.w	r1, #0
 80059f0:	0159      	lsls	r1, r3, #5
 80059f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059f6:	0150      	lsls	r0, r2, #5
 80059f8:	4602      	mov	r2, r0
 80059fa:	460b      	mov	r3, r1
 80059fc:	4641      	mov	r1, r8
 80059fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8005a02:	4649      	mov	r1, r9
 8005a04:	eb63 0b01 	sbc.w	fp, r3, r1
 8005a08:	f04f 0200 	mov.w	r2, #0
 8005a0c:	f04f 0300 	mov.w	r3, #0
 8005a10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005a14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005a18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005a1c:	ebb2 040a 	subs.w	r4, r2, sl
 8005a20:	eb63 050b 	sbc.w	r5, r3, fp
 8005a24:	f04f 0200 	mov.w	r2, #0
 8005a28:	f04f 0300 	mov.w	r3, #0
 8005a2c:	00eb      	lsls	r3, r5, #3
 8005a2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a32:	00e2      	lsls	r2, r4, #3
 8005a34:	4614      	mov	r4, r2
 8005a36:	461d      	mov	r5, r3
 8005a38:	4643      	mov	r3, r8
 8005a3a:	18e3      	adds	r3, r4, r3
 8005a3c:	603b      	str	r3, [r7, #0]
 8005a3e:	464b      	mov	r3, r9
 8005a40:	eb45 0303 	adc.w	r3, r5, r3
 8005a44:	607b      	str	r3, [r7, #4]
 8005a46:	f04f 0200 	mov.w	r2, #0
 8005a4a:	f04f 0300 	mov.w	r3, #0
 8005a4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a52:	4629      	mov	r1, r5
 8005a54:	028b      	lsls	r3, r1, #10
 8005a56:	4621      	mov	r1, r4
 8005a58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a5c:	4621      	mov	r1, r4
 8005a5e:	028a      	lsls	r2, r1, #10
 8005a60:	4610      	mov	r0, r2
 8005a62:	4619      	mov	r1, r3
 8005a64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a66:	2200      	movs	r2, #0
 8005a68:	61bb      	str	r3, [r7, #24]
 8005a6a:	61fa      	str	r2, [r7, #28]
 8005a6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a70:	f7fa fc0e 	bl	8000290 <__aeabi_uldivmod>
 8005a74:	4602      	mov	r2, r0
 8005a76:	460b      	mov	r3, r1
 8005a78:	4613      	mov	r3, r2
 8005a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005a7c:	4b0b      	ldr	r3, [pc, #44]	; (8005aac <HAL_RCC_GetSysClockFreq+0x200>)
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	0c1b      	lsrs	r3, r3, #16
 8005a82:	f003 0303 	and.w	r3, r3, #3
 8005a86:	3301      	adds	r3, #1
 8005a88:	005b      	lsls	r3, r3, #1
 8005a8a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005a8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a94:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a96:	e002      	b.n	8005a9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a98:	4b05      	ldr	r3, [pc, #20]	; (8005ab0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a9a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3750      	adds	r7, #80	; 0x50
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005aaa:	bf00      	nop
 8005aac:	40023800 	.word	0x40023800
 8005ab0:	00f42400 	.word	0x00f42400
 8005ab4:	007a1200 	.word	0x007a1200

08005ab8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005abc:	4b03      	ldr	r3, [pc, #12]	; (8005acc <HAL_RCC_GetHCLKFreq+0x14>)
 8005abe:	681b      	ldr	r3, [r3, #0]
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	20000118 	.word	0x20000118

08005ad0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005ad4:	f7ff fff0 	bl	8005ab8 <HAL_RCC_GetHCLKFreq>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	4b05      	ldr	r3, [pc, #20]	; (8005af0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	0a9b      	lsrs	r3, r3, #10
 8005ae0:	f003 0307 	and.w	r3, r3, #7
 8005ae4:	4903      	ldr	r1, [pc, #12]	; (8005af4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ae6:	5ccb      	ldrb	r3, [r1, r3]
 8005ae8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	40023800 	.word	0x40023800
 8005af4:	0800a7e0 	.word	0x0800a7e0

08005af8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005afc:	f7ff ffdc 	bl	8005ab8 <HAL_RCC_GetHCLKFreq>
 8005b00:	4602      	mov	r2, r0
 8005b02:	4b05      	ldr	r3, [pc, #20]	; (8005b18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	0b5b      	lsrs	r3, r3, #13
 8005b08:	f003 0307 	and.w	r3, r3, #7
 8005b0c:	4903      	ldr	r1, [pc, #12]	; (8005b1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b0e:	5ccb      	ldrb	r3, [r1, r3]
 8005b10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	40023800 	.word	0x40023800
 8005b1c:	0800a7e0 	.word	0x0800a7e0

08005b20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b086      	sub	sp, #24
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0301 	and.w	r3, r3, #1
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d10b      	bne.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d105      	bne.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d075      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005b54:	4b91      	ldr	r3, [pc, #580]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005b56:	2200      	movs	r2, #0
 8005b58:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b5a:	f7fd fe8b 	bl	8003874 <HAL_GetTick>
 8005b5e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b60:	e008      	b.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005b62:	f7fd fe87 	bl	8003874 <HAL_GetTick>
 8005b66:	4602      	mov	r2, r0
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	2b02      	cmp	r3, #2
 8005b6e:	d901      	bls.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b70:	2303      	movs	r3, #3
 8005b72:	e189      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b74:	4b8a      	ldr	r3, [pc, #552]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d1f0      	bne.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 0301 	and.w	r3, r3, #1
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d009      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	019a      	lsls	r2, r3, #6
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	071b      	lsls	r3, r3, #28
 8005b98:	4981      	ldr	r1, [pc, #516]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 0302 	and.w	r3, r3, #2
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d01f      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005bac:	4b7c      	ldr	r3, [pc, #496]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bb2:	0f1b      	lsrs	r3, r3, #28
 8005bb4:	f003 0307 	and.w	r3, r3, #7
 8005bb8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	019a      	lsls	r2, r3, #6
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	061b      	lsls	r3, r3, #24
 8005bc6:	431a      	orrs	r2, r3
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	071b      	lsls	r3, r3, #28
 8005bcc:	4974      	ldr	r1, [pc, #464]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005bd4:	4b72      	ldr	r3, [pc, #456]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bda:	f023 021f 	bic.w	r2, r3, #31
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	69db      	ldr	r3, [r3, #28]
 8005be2:	3b01      	subs	r3, #1
 8005be4:	496e      	ldr	r1, [pc, #440]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005be6:	4313      	orrs	r3, r2
 8005be8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d00d      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	019a      	lsls	r2, r3, #6
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	061b      	lsls	r3, r3, #24
 8005c04:	431a      	orrs	r2, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	071b      	lsls	r3, r3, #28
 8005c0c:	4964      	ldr	r1, [pc, #400]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005c14:	4b61      	ldr	r3, [pc, #388]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005c16:	2201      	movs	r2, #1
 8005c18:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c1a:	f7fd fe2b 	bl	8003874 <HAL_GetTick>
 8005c1e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c20:	e008      	b.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005c22:	f7fd fe27 	bl	8003874 <HAL_GetTick>
 8005c26:	4602      	mov	r2, r0
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	1ad3      	subs	r3, r2, r3
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	d901      	bls.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c30:	2303      	movs	r3, #3
 8005c32:	e129      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c34:	4b5a      	ldr	r3, [pc, #360]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d0f0      	beq.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 0304 	and.w	r3, r3, #4
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d105      	bne.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d079      	beq.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005c58:	4b52      	ldr	r3, [pc, #328]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c5e:	f7fd fe09 	bl	8003874 <HAL_GetTick>
 8005c62:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005c64:	e008      	b.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005c66:	f7fd fe05 	bl	8003874 <HAL_GetTick>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	1ad3      	subs	r3, r2, r3
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	d901      	bls.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c74:	2303      	movs	r3, #3
 8005c76:	e107      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005c78:	4b49      	ldr	r3, [pc, #292]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c84:	d0ef      	beq.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 0304 	and.w	r3, r3, #4
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d020      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005c92:	4b43      	ldr	r3, [pc, #268]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c98:	0f1b      	lsrs	r3, r3, #28
 8005c9a:	f003 0307 	and.w	r3, r3, #7
 8005c9e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	019a      	lsls	r2, r3, #6
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	695b      	ldr	r3, [r3, #20]
 8005caa:	061b      	lsls	r3, r3, #24
 8005cac:	431a      	orrs	r2, r3
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	071b      	lsls	r3, r3, #28
 8005cb2:	493b      	ldr	r1, [pc, #236]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005cba:	4b39      	ldr	r3, [pc, #228]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cc0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6a1b      	ldr	r3, [r3, #32]
 8005cc8:	3b01      	subs	r3, #1
 8005cca:	021b      	lsls	r3, r3, #8
 8005ccc:	4934      	ldr	r1, [pc, #208]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 0308 	and.w	r3, r3, #8
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d01e      	beq.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005ce0:	4b2f      	ldr	r3, [pc, #188]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ce6:	0e1b      	lsrs	r3, r3, #24
 8005ce8:	f003 030f 	and.w	r3, r3, #15
 8005cec:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	019a      	lsls	r2, r3, #6
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	061b      	lsls	r3, r3, #24
 8005cf8:	431a      	orrs	r2, r3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	699b      	ldr	r3, [r3, #24]
 8005cfe:	071b      	lsls	r3, r3, #28
 8005d00:	4927      	ldr	r1, [pc, #156]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d02:	4313      	orrs	r3, r2
 8005d04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005d08:	4b25      	ldr	r3, [pc, #148]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d0e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d16:	4922      	ldr	r1, [pc, #136]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005d1e:	4b21      	ldr	r3, [pc, #132]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005d20:	2201      	movs	r2, #1
 8005d22:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d24:	f7fd fda6 	bl	8003874 <HAL_GetTick>
 8005d28:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005d2a:	e008      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005d2c:	f7fd fda2 	bl	8003874 <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d901      	bls.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e0a4      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005d3e:	4b18      	ldr	r3, [pc, #96]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d4a:	d1ef      	bne.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 0320 	and.w	r3, r3, #32
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	f000 808b 	beq.w	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	60fb      	str	r3, [r7, #12]
 8005d5e:	4b10      	ldr	r3, [pc, #64]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d62:	4a0f      	ldr	r2, [pc, #60]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d68:	6413      	str	r3, [r2, #64]	; 0x40
 8005d6a:	4b0d      	ldr	r3, [pc, #52]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d72:	60fb      	str	r3, [r7, #12]
 8005d74:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005d76:	4b0c      	ldr	r3, [pc, #48]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a0b      	ldr	r2, [pc, #44]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d80:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d82:	f7fd fd77 	bl	8003874 <HAL_GetTick>
 8005d86:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005d88:	e010      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005d8a:	f7fd fd73 	bl	8003874 <HAL_GetTick>
 8005d8e:	4602      	mov	r2, r0
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	1ad3      	subs	r3, r2, r3
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	d909      	bls.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005d98:	2303      	movs	r3, #3
 8005d9a:	e075      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005d9c:	42470068 	.word	0x42470068
 8005da0:	40023800 	.word	0x40023800
 8005da4:	42470070 	.word	0x42470070
 8005da8:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005dac:	4b38      	ldr	r3, [pc, #224]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d0e8      	beq.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005db8:	4b36      	ldr	r3, [pc, #216]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dc0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d02f      	beq.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dd0:	693a      	ldr	r2, [r7, #16]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d028      	beq.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005dd6:	4b2f      	ldr	r3, [pc, #188]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dde:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005de0:	4b2d      	ldr	r3, [pc, #180]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005de2:	2201      	movs	r2, #1
 8005de4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005de6:	4b2c      	ldr	r3, [pc, #176]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005de8:	2200      	movs	r2, #0
 8005dea:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005dec:	4a29      	ldr	r2, [pc, #164]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005df2:	4b28      	ldr	r3, [pc, #160]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005df6:	f003 0301 	and.w	r3, r3, #1
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d114      	bne.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005dfe:	f7fd fd39 	bl	8003874 <HAL_GetTick>
 8005e02:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e04:	e00a      	b.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e06:	f7fd fd35 	bl	8003874 <HAL_GetTick>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	1ad3      	subs	r3, r2, r3
 8005e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d901      	bls.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005e18:	2303      	movs	r3, #3
 8005e1a:	e035      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e1c:	4b1d      	ldr	r3, [pc, #116]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e20:	f003 0302 	and.w	r3, r3, #2
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d0ee      	beq.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e34:	d10d      	bne.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005e36:	4b17      	ldr	r3, [pc, #92]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e42:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005e46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e4a:	4912      	ldr	r1, [pc, #72]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	608b      	str	r3, [r1, #8]
 8005e50:	e005      	b.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005e52:	4b10      	ldr	r3, [pc, #64]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	4a0f      	ldr	r2, [pc, #60]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e58:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005e5c:	6093      	str	r3, [r2, #8]
 8005e5e:	4b0d      	ldr	r3, [pc, #52]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e60:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e6a:	490a      	ldr	r1, [pc, #40]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0310 	and.w	r3, r3, #16
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d004      	beq.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005e82:	4b06      	ldr	r3, [pc, #24]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005e84:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3718      	adds	r7, #24
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	40007000 	.word	0x40007000
 8005e94:	40023800 	.word	0x40023800
 8005e98:	42470e40 	.word	0x42470e40
 8005e9c:	424711e0 	.word	0x424711e0

08005ea0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d101      	bne.n	8005eb6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e066      	b.n	8005f84 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	7f5b      	ldrb	r3, [r3, #29]
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d105      	bne.n	8005ecc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f7fb fed2 	bl	8001c70 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2202      	movs	r2, #2
 8005ed0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	22ca      	movs	r2, #202	; 0xca
 8005ed8:	625a      	str	r2, [r3, #36]	; 0x24
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	2253      	movs	r2, #83	; 0x53
 8005ee0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 fa45 	bl	8006372 <RTC_EnterInitMode>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005eec:	7bfb      	ldrb	r3, [r7, #15]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d12c      	bne.n	8005f4c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	6812      	ldr	r2, [r2, #0]
 8005efc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005f00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f04:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	6899      	ldr	r1, [r3, #8]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	685a      	ldr	r2, [r3, #4]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	691b      	ldr	r3, [r3, #16]
 8005f14:	431a      	orrs	r2, r3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	695b      	ldr	r3, [r3, #20]
 8005f1a:	431a      	orrs	r2, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	430a      	orrs	r2, r1
 8005f22:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	68d2      	ldr	r2, [r2, #12]
 8005f2c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	6919      	ldr	r1, [r3, #16]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	041a      	lsls	r2, r3, #16
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	430a      	orrs	r2, r1
 8005f40:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 fa4c 	bl	80063e0 <RTC_ExitInitMode>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005f4c:	7bfb      	ldrb	r3, [r7, #15]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d113      	bne.n	8005f7a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005f60:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	699a      	ldr	r2, [r3, #24]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	430a      	orrs	r2, r1
 8005f72:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	22ff      	movs	r2, #255	; 0xff
 8005f80:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3710      	adds	r7, #16
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005f8c:	b590      	push	{r4, r7, lr}
 8005f8e:	b087      	sub	sp, #28
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	7f1b      	ldrb	r3, [r3, #28]
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d101      	bne.n	8005fa8 <HAL_RTC_SetTime+0x1c>
 8005fa4:	2302      	movs	r3, #2
 8005fa6:	e087      	b.n	80060b8 <HAL_RTC_SetTime+0x12c>
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2201      	movs	r2, #1
 8005fac:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2202      	movs	r2, #2
 8005fb2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d126      	bne.n	8006008 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d102      	bne.n	8005fce <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f000 fa29 	bl	800642a <RTC_ByteToBcd2>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	785b      	ldrb	r3, [r3, #1]
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f000 fa22 	bl	800642a <RTC_ByteToBcd2>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005fea:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	789b      	ldrb	r3, [r3, #2]
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f000 fa1a 	bl	800642a <RTC_ByteToBcd2>
 8005ff6:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005ff8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	78db      	ldrb	r3, [r3, #3]
 8006000:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006002:	4313      	orrs	r3, r2
 8006004:	617b      	str	r3, [r7, #20]
 8006006:	e018      	b.n	800603a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006012:	2b00      	cmp	r3, #0
 8006014:	d102      	bne.n	800601c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	2200      	movs	r2, #0
 800601a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	785b      	ldrb	r3, [r3, #1]
 8006026:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006028:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800602a:	68ba      	ldr	r2, [r7, #8]
 800602c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800602e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	78db      	ldrb	r3, [r3, #3]
 8006034:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006036:	4313      	orrs	r3, r2
 8006038:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	22ca      	movs	r2, #202	; 0xca
 8006040:	625a      	str	r2, [r3, #36]	; 0x24
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2253      	movs	r2, #83	; 0x53
 8006048:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800604a:	68f8      	ldr	r0, [r7, #12]
 800604c:	f000 f991 	bl	8006372 <RTC_EnterInitMode>
 8006050:	4603      	mov	r3, r0
 8006052:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006054:	7cfb      	ldrb	r3, [r7, #19]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d120      	bne.n	800609c <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006064:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006068:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	689a      	ldr	r2, [r3, #8]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006078:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	6899      	ldr	r1, [r3, #8]
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	68da      	ldr	r2, [r3, #12]
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	431a      	orrs	r2, r3
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	430a      	orrs	r2, r1
 8006090:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006092:	68f8      	ldr	r0, [r7, #12]
 8006094:	f000 f9a4 	bl	80063e0 <RTC_ExitInitMode>
 8006098:	4603      	mov	r3, r0
 800609a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800609c:	7cfb      	ldrb	r3, [r7, #19]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d102      	bne.n	80060a8 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2201      	movs	r2, #1
 80060a6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	22ff      	movs	r2, #255	; 0xff
 80060ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2200      	movs	r2, #0
 80060b4:	771a      	strb	r2, [r3, #28]

  return status;
 80060b6:	7cfb      	ldrb	r3, [r7, #19]
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	371c      	adds	r7, #28
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd90      	pop	{r4, r7, pc}

080060c0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b086      	sub	sp, #24
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80060cc:	2300      	movs	r3, #0
 80060ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	691b      	ldr	r3, [r3, #16]
 80060e0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80060f2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80060f6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	0c1b      	lsrs	r3, r3, #16
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006102:	b2da      	uxtb	r2, r3
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	0a1b      	lsrs	r3, r3, #8
 800610c:	b2db      	uxtb	r3, r3
 800610e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006112:	b2da      	uxtb	r2, r3
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	b2db      	uxtb	r3, r3
 800611c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006120:	b2da      	uxtb	r2, r3
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	0d9b      	lsrs	r3, r3, #22
 800612a:	b2db      	uxtb	r3, r3
 800612c:	f003 0301 	and.w	r3, r3, #1
 8006130:	b2da      	uxtb	r2, r3
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d11a      	bne.n	8006172 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	4618      	mov	r0, r3
 8006142:	f000 f98f 	bl	8006464 <RTC_Bcd2ToByte>
 8006146:	4603      	mov	r3, r0
 8006148:	461a      	mov	r2, r3
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	785b      	ldrb	r3, [r3, #1]
 8006152:	4618      	mov	r0, r3
 8006154:	f000 f986 	bl	8006464 <RTC_Bcd2ToByte>
 8006158:	4603      	mov	r3, r0
 800615a:	461a      	mov	r2, r3
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	789b      	ldrb	r3, [r3, #2]
 8006164:	4618      	mov	r0, r3
 8006166:	f000 f97d 	bl	8006464 <RTC_Bcd2ToByte>
 800616a:	4603      	mov	r3, r0
 800616c:	461a      	mov	r2, r3
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006172:	2300      	movs	r3, #0
}
 8006174:	4618      	mov	r0, r3
 8006176:	3718      	adds	r7, #24
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800617c:	b590      	push	{r4, r7, lr}
 800617e:	b087      	sub	sp, #28
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006188:	2300      	movs	r3, #0
 800618a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	7f1b      	ldrb	r3, [r3, #28]
 8006190:	2b01      	cmp	r3, #1
 8006192:	d101      	bne.n	8006198 <HAL_RTC_SetDate+0x1c>
 8006194:	2302      	movs	r3, #2
 8006196:	e071      	b.n	800627c <HAL_RTC_SetDate+0x100>
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2201      	movs	r2, #1
 800619c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2202      	movs	r2, #2
 80061a2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d10e      	bne.n	80061c8 <HAL_RTC_SetDate+0x4c>
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	785b      	ldrb	r3, [r3, #1]
 80061ae:	f003 0310 	and.w	r3, r3, #16
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d008      	beq.n	80061c8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	785b      	ldrb	r3, [r3, #1]
 80061ba:	f023 0310 	bic.w	r3, r3, #16
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	330a      	adds	r3, #10
 80061c2:	b2da      	uxtb	r2, r3
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d11c      	bne.n	8006208 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	78db      	ldrb	r3, [r3, #3]
 80061d2:	4618      	mov	r0, r3
 80061d4:	f000 f929 	bl	800642a <RTC_ByteToBcd2>
 80061d8:	4603      	mov	r3, r0
 80061da:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	785b      	ldrb	r3, [r3, #1]
 80061e0:	4618      	mov	r0, r3
 80061e2:	f000 f922 	bl	800642a <RTC_ByteToBcd2>
 80061e6:	4603      	mov	r3, r0
 80061e8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80061ea:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	789b      	ldrb	r3, [r3, #2]
 80061f0:	4618      	mov	r0, r3
 80061f2:	f000 f91a 	bl	800642a <RTC_ByteToBcd2>
 80061f6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80061f8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	781b      	ldrb	r3, [r3, #0]
 8006200:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006202:	4313      	orrs	r3, r2
 8006204:	617b      	str	r3, [r7, #20]
 8006206:	e00e      	b.n	8006226 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	78db      	ldrb	r3, [r3, #3]
 800620c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	785b      	ldrb	r3, [r3, #1]
 8006212:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006214:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006216:	68ba      	ldr	r2, [r7, #8]
 8006218:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800621a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006222:	4313      	orrs	r3, r2
 8006224:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	22ca      	movs	r2, #202	; 0xca
 800622c:	625a      	str	r2, [r3, #36]	; 0x24
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	2253      	movs	r2, #83	; 0x53
 8006234:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006236:	68f8      	ldr	r0, [r7, #12]
 8006238:	f000 f89b 	bl	8006372 <RTC_EnterInitMode>
 800623c:	4603      	mov	r3, r0
 800623e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006240:	7cfb      	ldrb	r3, [r7, #19]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d10c      	bne.n	8006260 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006250:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006254:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006256:	68f8      	ldr	r0, [r7, #12]
 8006258:	f000 f8c2 	bl	80063e0 <RTC_ExitInitMode>
 800625c:	4603      	mov	r3, r0
 800625e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006260:	7cfb      	ldrb	r3, [r7, #19]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d102      	bne.n	800626c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2201      	movs	r2, #1
 800626a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	22ff      	movs	r2, #255	; 0xff
 8006272:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2200      	movs	r2, #0
 8006278:	771a      	strb	r2, [r3, #28]

  return status;
 800627a:	7cfb      	ldrb	r3, [r7, #19]
}
 800627c:	4618      	mov	r0, r3
 800627e:	371c      	adds	r7, #28
 8006280:	46bd      	mov	sp, r7
 8006282:	bd90      	pop	{r4, r7, pc}

08006284 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b086      	sub	sp, #24
 8006288:	af00      	add	r7, sp, #0
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006290:	2300      	movs	r3, #0
 8006292:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800629e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80062a2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	0c1b      	lsrs	r3, r3, #16
 80062a8:	b2da      	uxtb	r2, r3
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	0a1b      	lsrs	r3, r3, #8
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	f003 031f 	and.w	r3, r3, #31
 80062b8:	b2da      	uxtb	r2, r3
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062c6:	b2da      	uxtb	r2, r3
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	0b5b      	lsrs	r3, r3, #13
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	f003 0307 	and.w	r3, r3, #7
 80062d6:	b2da      	uxtb	r2, r3
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d11a      	bne.n	8006318 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	78db      	ldrb	r3, [r3, #3]
 80062e6:	4618      	mov	r0, r3
 80062e8:	f000 f8bc 	bl	8006464 <RTC_Bcd2ToByte>
 80062ec:	4603      	mov	r3, r0
 80062ee:	461a      	mov	r2, r3
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	785b      	ldrb	r3, [r3, #1]
 80062f8:	4618      	mov	r0, r3
 80062fa:	f000 f8b3 	bl	8006464 <RTC_Bcd2ToByte>
 80062fe:	4603      	mov	r3, r0
 8006300:	461a      	mov	r2, r3
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	789b      	ldrb	r3, [r3, #2]
 800630a:	4618      	mov	r0, r3
 800630c:	f000 f8aa 	bl	8006464 <RTC_Bcd2ToByte>
 8006310:	4603      	mov	r3, r0
 8006312:	461a      	mov	r2, r3
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006318:	2300      	movs	r3, #0
}
 800631a:	4618      	mov	r0, r3
 800631c:	3718      	adds	r7, #24
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}

08006322 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006322:	b580      	push	{r7, lr}
 8006324:	b084      	sub	sp, #16
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800632a:	2300      	movs	r3, #0
 800632c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68da      	ldr	r2, [r3, #12]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800633c:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800633e:	f7fd fa99 	bl	8003874 <HAL_GetTick>
 8006342:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006344:	e009      	b.n	800635a <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006346:	f7fd fa95 	bl	8003874 <HAL_GetTick>
 800634a:	4602      	mov	r2, r0
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	1ad3      	subs	r3, r2, r3
 8006350:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006354:	d901      	bls.n	800635a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006356:	2303      	movs	r3, #3
 8006358:	e007      	b.n	800636a <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	f003 0320 	and.w	r3, r3, #32
 8006364:	2b00      	cmp	r3, #0
 8006366:	d0ee      	beq.n	8006346 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	3710      	adds	r7, #16
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}

08006372 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006372:	b580      	push	{r7, lr}
 8006374:	b084      	sub	sp, #16
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800637a:	2300      	movs	r3, #0
 800637c:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800637e:	2300      	movs	r3, #0
 8006380:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800638c:	2b00      	cmp	r3, #0
 800638e:	d122      	bne.n	80063d6 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68da      	ldr	r2, [r3, #12]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800639e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80063a0:	f7fd fa68 	bl	8003874 <HAL_GetTick>
 80063a4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80063a6:	e00c      	b.n	80063c2 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80063a8:	f7fd fa64 	bl	8003874 <HAL_GetTick>
 80063ac:	4602      	mov	r2, r0
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	1ad3      	subs	r3, r2, r3
 80063b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063b6:	d904      	bls.n	80063c2 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2204      	movs	r2, #4
 80063bc:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d102      	bne.n	80063d6 <RTC_EnterInitMode+0x64>
 80063d0:	7bfb      	ldrb	r3, [r7, #15]
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d1e8      	bne.n	80063a8 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80063d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3710      	adds	r7, #16
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063e8:	2300      	movs	r3, #0
 80063ea:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	68da      	ldr	r2, [r3, #12]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063fa:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	f003 0320 	and.w	r3, r3, #32
 8006406:	2b00      	cmp	r3, #0
 8006408:	d10a      	bne.n	8006420 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f7ff ff89 	bl	8006322 <HAL_RTC_WaitForSynchro>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d004      	beq.n	8006420 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2204      	movs	r2, #4
 800641a:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006420:	7bfb      	ldrb	r3, [r7, #15]
}
 8006422:	4618      	mov	r0, r3
 8006424:	3710      	adds	r7, #16
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}

0800642a <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800642a:	b480      	push	{r7}
 800642c:	b085      	sub	sp, #20
 800642e:	af00      	add	r7, sp, #0
 8006430:	4603      	mov	r3, r0
 8006432:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8006434:	2300      	movs	r3, #0
 8006436:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8006438:	e005      	b.n	8006446 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800643a:	7bfb      	ldrb	r3, [r7, #15]
 800643c:	3301      	adds	r3, #1
 800643e:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8006440:	79fb      	ldrb	r3, [r7, #7]
 8006442:	3b0a      	subs	r3, #10
 8006444:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006446:	79fb      	ldrb	r3, [r7, #7]
 8006448:	2b09      	cmp	r3, #9
 800644a:	d8f6      	bhi.n	800643a <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800644c:	7bfb      	ldrb	r3, [r7, #15]
 800644e:	011b      	lsls	r3, r3, #4
 8006450:	b2da      	uxtb	r2, r3
 8006452:	79fb      	ldrb	r3, [r7, #7]
 8006454:	4313      	orrs	r3, r2
 8006456:	b2db      	uxtb	r3, r3
}
 8006458:	4618      	mov	r0, r3
 800645a:	3714      	adds	r7, #20
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8006464:	b480      	push	{r7}
 8006466:	b085      	sub	sp, #20
 8006468:	af00      	add	r7, sp, #0
 800646a:	4603      	mov	r3, r0
 800646c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800646e:	2300      	movs	r3, #0
 8006470:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8006472:	79fb      	ldrb	r3, [r7, #7]
 8006474:	091b      	lsrs	r3, r3, #4
 8006476:	b2db      	uxtb	r3, r3
 8006478:	461a      	mov	r2, r3
 800647a:	0092      	lsls	r2, r2, #2
 800647c:	4413      	add	r3, r2
 800647e:	005b      	lsls	r3, r3, #1
 8006480:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8006482:	79fb      	ldrb	r3, [r7, #7]
 8006484:	f003 030f 	and.w	r3, r3, #15
 8006488:	b2da      	uxtb	r2, r3
 800648a:	7bfb      	ldrb	r3, [r7, #15]
 800648c:	4413      	add	r3, r2
 800648e:	b2db      	uxtb	r3, r3
}
 8006490:	4618      	mov	r0, r3
 8006492:	3714      	adds	r7, #20
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b082      	sub	sp, #8
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d101      	bne.n	80064ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e041      	b.n	8006532 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d106      	bne.n	80064c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f7fb fc74 	bl	8001db0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2202      	movs	r2, #2
 80064cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	3304      	adds	r3, #4
 80064d8:	4619      	mov	r1, r3
 80064da:	4610      	mov	r0, r2
 80064dc:	f000 ffd4 	bl	8007488 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3708      	adds	r7, #8
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
	...

0800653c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800653c:	b480      	push	{r7}
 800653e:	b085      	sub	sp, #20
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800654a:	b2db      	uxtb	r3, r3
 800654c:	2b01      	cmp	r3, #1
 800654e:	d001      	beq.n	8006554 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e04e      	b.n	80065f2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2202      	movs	r2, #2
 8006558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	68da      	ldr	r2, [r3, #12]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f042 0201 	orr.w	r2, r2, #1
 800656a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a23      	ldr	r2, [pc, #140]	; (8006600 <HAL_TIM_Base_Start_IT+0xc4>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d022      	beq.n	80065bc <HAL_TIM_Base_Start_IT+0x80>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800657e:	d01d      	beq.n	80065bc <HAL_TIM_Base_Start_IT+0x80>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a1f      	ldr	r2, [pc, #124]	; (8006604 <HAL_TIM_Base_Start_IT+0xc8>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d018      	beq.n	80065bc <HAL_TIM_Base_Start_IT+0x80>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a1e      	ldr	r2, [pc, #120]	; (8006608 <HAL_TIM_Base_Start_IT+0xcc>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d013      	beq.n	80065bc <HAL_TIM_Base_Start_IT+0x80>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a1c      	ldr	r2, [pc, #112]	; (800660c <HAL_TIM_Base_Start_IT+0xd0>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d00e      	beq.n	80065bc <HAL_TIM_Base_Start_IT+0x80>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a1b      	ldr	r2, [pc, #108]	; (8006610 <HAL_TIM_Base_Start_IT+0xd4>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d009      	beq.n	80065bc <HAL_TIM_Base_Start_IT+0x80>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a19      	ldr	r2, [pc, #100]	; (8006614 <HAL_TIM_Base_Start_IT+0xd8>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d004      	beq.n	80065bc <HAL_TIM_Base_Start_IT+0x80>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a18      	ldr	r2, [pc, #96]	; (8006618 <HAL_TIM_Base_Start_IT+0xdc>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d111      	bne.n	80065e0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	f003 0307 	and.w	r3, r3, #7
 80065c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2b06      	cmp	r3, #6
 80065cc:	d010      	beq.n	80065f0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f042 0201 	orr.w	r2, r2, #1
 80065dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065de:	e007      	b.n	80065f0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f042 0201 	orr.w	r2, r2, #1
 80065ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3714      	adds	r7, #20
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr
 80065fe:	bf00      	nop
 8006600:	40010000 	.word	0x40010000
 8006604:	40000400 	.word	0x40000400
 8006608:	40000800 	.word	0x40000800
 800660c:	40000c00 	.word	0x40000c00
 8006610:	40010400 	.word	0x40010400
 8006614:	40014000 	.word	0x40014000
 8006618:	40001800 	.word	0x40001800

0800661c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b082      	sub	sp, #8
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d101      	bne.n	800662e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	e041      	b.n	80066b2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006634:	b2db      	uxtb	r3, r3
 8006636:	2b00      	cmp	r3, #0
 8006638:	d106      	bne.n	8006648 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f7fb fb3e 	bl	8001cc4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2202      	movs	r2, #2
 800664c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	3304      	adds	r3, #4
 8006658:	4619      	mov	r1, r3
 800665a:	4610      	mov	r0, r2
 800665c:	f000 ff14 	bl	8007488 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2201      	movs	r2, #1
 8006664:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2201      	movs	r2, #1
 8006674:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3708      	adds	r7, #8
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
	...

080066bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d109      	bne.n	80066e0 <HAL_TIM_PWM_Start+0x24>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	bf14      	ite	ne
 80066d8:	2301      	movne	r3, #1
 80066da:	2300      	moveq	r3, #0
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	e022      	b.n	8006726 <HAL_TIM_PWM_Start+0x6a>
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	2b04      	cmp	r3, #4
 80066e4:	d109      	bne.n	80066fa <HAL_TIM_PWM_Start+0x3e>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	bf14      	ite	ne
 80066f2:	2301      	movne	r3, #1
 80066f4:	2300      	moveq	r3, #0
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	e015      	b.n	8006726 <HAL_TIM_PWM_Start+0x6a>
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	2b08      	cmp	r3, #8
 80066fe:	d109      	bne.n	8006714 <HAL_TIM_PWM_Start+0x58>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006706:	b2db      	uxtb	r3, r3
 8006708:	2b01      	cmp	r3, #1
 800670a:	bf14      	ite	ne
 800670c:	2301      	movne	r3, #1
 800670e:	2300      	moveq	r3, #0
 8006710:	b2db      	uxtb	r3, r3
 8006712:	e008      	b.n	8006726 <HAL_TIM_PWM_Start+0x6a>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800671a:	b2db      	uxtb	r3, r3
 800671c:	2b01      	cmp	r3, #1
 800671e:	bf14      	ite	ne
 8006720:	2301      	movne	r3, #1
 8006722:	2300      	moveq	r3, #0
 8006724:	b2db      	uxtb	r3, r3
 8006726:	2b00      	cmp	r3, #0
 8006728:	d001      	beq.n	800672e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e07c      	b.n	8006828 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d104      	bne.n	800673e <HAL_TIM_PWM_Start+0x82>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2202      	movs	r2, #2
 8006738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800673c:	e013      	b.n	8006766 <HAL_TIM_PWM_Start+0xaa>
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	2b04      	cmp	r3, #4
 8006742:	d104      	bne.n	800674e <HAL_TIM_PWM_Start+0x92>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2202      	movs	r2, #2
 8006748:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800674c:	e00b      	b.n	8006766 <HAL_TIM_PWM_Start+0xaa>
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	2b08      	cmp	r3, #8
 8006752:	d104      	bne.n	800675e <HAL_TIM_PWM_Start+0xa2>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2202      	movs	r2, #2
 8006758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800675c:	e003      	b.n	8006766 <HAL_TIM_PWM_Start+0xaa>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2202      	movs	r2, #2
 8006762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2201      	movs	r2, #1
 800676c:	6839      	ldr	r1, [r7, #0]
 800676e:	4618      	mov	r0, r3
 8006770:	f001 fa9e 	bl	8007cb0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a2d      	ldr	r2, [pc, #180]	; (8006830 <HAL_TIM_PWM_Start+0x174>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d004      	beq.n	8006788 <HAL_TIM_PWM_Start+0xcc>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a2c      	ldr	r2, [pc, #176]	; (8006834 <HAL_TIM_PWM_Start+0x178>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d101      	bne.n	800678c <HAL_TIM_PWM_Start+0xd0>
 8006788:	2301      	movs	r3, #1
 800678a:	e000      	b.n	800678e <HAL_TIM_PWM_Start+0xd2>
 800678c:	2300      	movs	r3, #0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d007      	beq.n	80067a2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80067a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a22      	ldr	r2, [pc, #136]	; (8006830 <HAL_TIM_PWM_Start+0x174>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d022      	beq.n	80067f2 <HAL_TIM_PWM_Start+0x136>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067b4:	d01d      	beq.n	80067f2 <HAL_TIM_PWM_Start+0x136>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a1f      	ldr	r2, [pc, #124]	; (8006838 <HAL_TIM_PWM_Start+0x17c>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d018      	beq.n	80067f2 <HAL_TIM_PWM_Start+0x136>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a1d      	ldr	r2, [pc, #116]	; (800683c <HAL_TIM_PWM_Start+0x180>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d013      	beq.n	80067f2 <HAL_TIM_PWM_Start+0x136>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a1c      	ldr	r2, [pc, #112]	; (8006840 <HAL_TIM_PWM_Start+0x184>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d00e      	beq.n	80067f2 <HAL_TIM_PWM_Start+0x136>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a16      	ldr	r2, [pc, #88]	; (8006834 <HAL_TIM_PWM_Start+0x178>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d009      	beq.n	80067f2 <HAL_TIM_PWM_Start+0x136>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a18      	ldr	r2, [pc, #96]	; (8006844 <HAL_TIM_PWM_Start+0x188>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d004      	beq.n	80067f2 <HAL_TIM_PWM_Start+0x136>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a16      	ldr	r2, [pc, #88]	; (8006848 <HAL_TIM_PWM_Start+0x18c>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d111      	bne.n	8006816 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	f003 0307 	and.w	r3, r3, #7
 80067fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2b06      	cmp	r3, #6
 8006802:	d010      	beq.n	8006826 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f042 0201 	orr.w	r2, r2, #1
 8006812:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006814:	e007      	b.n	8006826 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f042 0201 	orr.w	r2, r2, #1
 8006824:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	3710      	adds	r7, #16
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}
 8006830:	40010000 	.word	0x40010000
 8006834:	40010400 	.word	0x40010400
 8006838:	40000400 	.word	0x40000400
 800683c:	40000800 	.word	0x40000800
 8006840:	40000c00 	.word	0x40000c00
 8006844:	40014000 	.word	0x40014000
 8006848:	40001800 	.word	0x40001800

0800684c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006856:	2300      	movs	r3, #0
 8006858:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d109      	bne.n	8006874 <HAL_TIM_PWM_Start_IT+0x28>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006866:	b2db      	uxtb	r3, r3
 8006868:	2b01      	cmp	r3, #1
 800686a:	bf14      	ite	ne
 800686c:	2301      	movne	r3, #1
 800686e:	2300      	moveq	r3, #0
 8006870:	b2db      	uxtb	r3, r3
 8006872:	e022      	b.n	80068ba <HAL_TIM_PWM_Start_IT+0x6e>
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	2b04      	cmp	r3, #4
 8006878:	d109      	bne.n	800688e <HAL_TIM_PWM_Start_IT+0x42>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006880:	b2db      	uxtb	r3, r3
 8006882:	2b01      	cmp	r3, #1
 8006884:	bf14      	ite	ne
 8006886:	2301      	movne	r3, #1
 8006888:	2300      	moveq	r3, #0
 800688a:	b2db      	uxtb	r3, r3
 800688c:	e015      	b.n	80068ba <HAL_TIM_PWM_Start_IT+0x6e>
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	2b08      	cmp	r3, #8
 8006892:	d109      	bne.n	80068a8 <HAL_TIM_PWM_Start_IT+0x5c>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800689a:	b2db      	uxtb	r3, r3
 800689c:	2b01      	cmp	r3, #1
 800689e:	bf14      	ite	ne
 80068a0:	2301      	movne	r3, #1
 80068a2:	2300      	moveq	r3, #0
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	e008      	b.n	80068ba <HAL_TIM_PWM_Start_IT+0x6e>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	bf14      	ite	ne
 80068b4:	2301      	movne	r3, #1
 80068b6:	2300      	moveq	r3, #0
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d001      	beq.n	80068c2 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	e0c7      	b.n	8006a52 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d104      	bne.n	80068d2 <HAL_TIM_PWM_Start_IT+0x86>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2202      	movs	r2, #2
 80068cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068d0:	e013      	b.n	80068fa <HAL_TIM_PWM_Start_IT+0xae>
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	2b04      	cmp	r3, #4
 80068d6:	d104      	bne.n	80068e2 <HAL_TIM_PWM_Start_IT+0x96>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2202      	movs	r2, #2
 80068dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068e0:	e00b      	b.n	80068fa <HAL_TIM_PWM_Start_IT+0xae>
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	2b08      	cmp	r3, #8
 80068e6:	d104      	bne.n	80068f2 <HAL_TIM_PWM_Start_IT+0xa6>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2202      	movs	r2, #2
 80068ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068f0:	e003      	b.n	80068fa <HAL_TIM_PWM_Start_IT+0xae>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2202      	movs	r2, #2
 80068f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	2b0c      	cmp	r3, #12
 80068fe:	d841      	bhi.n	8006984 <HAL_TIM_PWM_Start_IT+0x138>
 8006900:	a201      	add	r2, pc, #4	; (adr r2, 8006908 <HAL_TIM_PWM_Start_IT+0xbc>)
 8006902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006906:	bf00      	nop
 8006908:	0800693d 	.word	0x0800693d
 800690c:	08006985 	.word	0x08006985
 8006910:	08006985 	.word	0x08006985
 8006914:	08006985 	.word	0x08006985
 8006918:	0800694f 	.word	0x0800694f
 800691c:	08006985 	.word	0x08006985
 8006920:	08006985 	.word	0x08006985
 8006924:	08006985 	.word	0x08006985
 8006928:	08006961 	.word	0x08006961
 800692c:	08006985 	.word	0x08006985
 8006930:	08006985 	.word	0x08006985
 8006934:	08006985 	.word	0x08006985
 8006938:	08006973 	.word	0x08006973
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	68da      	ldr	r2, [r3, #12]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f042 0202 	orr.w	r2, r2, #2
 800694a:	60da      	str	r2, [r3, #12]
      break;
 800694c:	e01d      	b.n	800698a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	68da      	ldr	r2, [r3, #12]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f042 0204 	orr.w	r2, r2, #4
 800695c:	60da      	str	r2, [r3, #12]
      break;
 800695e:	e014      	b.n	800698a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68da      	ldr	r2, [r3, #12]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f042 0208 	orr.w	r2, r2, #8
 800696e:	60da      	str	r2, [r3, #12]
      break;
 8006970:	e00b      	b.n	800698a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	68da      	ldr	r2, [r3, #12]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f042 0210 	orr.w	r2, r2, #16
 8006980:	60da      	str	r2, [r3, #12]
      break;
 8006982:	e002      	b.n	800698a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	73fb      	strb	r3, [r7, #15]
      break;
 8006988:	bf00      	nop
  }

  if (status == HAL_OK)
 800698a:	7bfb      	ldrb	r3, [r7, #15]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d15f      	bne.n	8006a50 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	2201      	movs	r2, #1
 8006996:	6839      	ldr	r1, [r7, #0]
 8006998:	4618      	mov	r0, r3
 800699a:	f001 f989 	bl	8007cb0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a2e      	ldr	r2, [pc, #184]	; (8006a5c <HAL_TIM_PWM_Start_IT+0x210>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d004      	beq.n	80069b2 <HAL_TIM_PWM_Start_IT+0x166>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a2c      	ldr	r2, [pc, #176]	; (8006a60 <HAL_TIM_PWM_Start_IT+0x214>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d101      	bne.n	80069b6 <HAL_TIM_PWM_Start_IT+0x16a>
 80069b2:	2301      	movs	r3, #1
 80069b4:	e000      	b.n	80069b8 <HAL_TIM_PWM_Start_IT+0x16c>
 80069b6:	2300      	movs	r3, #0
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d007      	beq.n	80069cc <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80069ca:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a22      	ldr	r2, [pc, #136]	; (8006a5c <HAL_TIM_PWM_Start_IT+0x210>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d022      	beq.n	8006a1c <HAL_TIM_PWM_Start_IT+0x1d0>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069de:	d01d      	beq.n	8006a1c <HAL_TIM_PWM_Start_IT+0x1d0>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a1f      	ldr	r2, [pc, #124]	; (8006a64 <HAL_TIM_PWM_Start_IT+0x218>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d018      	beq.n	8006a1c <HAL_TIM_PWM_Start_IT+0x1d0>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a1e      	ldr	r2, [pc, #120]	; (8006a68 <HAL_TIM_PWM_Start_IT+0x21c>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d013      	beq.n	8006a1c <HAL_TIM_PWM_Start_IT+0x1d0>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a1c      	ldr	r2, [pc, #112]	; (8006a6c <HAL_TIM_PWM_Start_IT+0x220>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d00e      	beq.n	8006a1c <HAL_TIM_PWM_Start_IT+0x1d0>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a17      	ldr	r2, [pc, #92]	; (8006a60 <HAL_TIM_PWM_Start_IT+0x214>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d009      	beq.n	8006a1c <HAL_TIM_PWM_Start_IT+0x1d0>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a18      	ldr	r2, [pc, #96]	; (8006a70 <HAL_TIM_PWM_Start_IT+0x224>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d004      	beq.n	8006a1c <HAL_TIM_PWM_Start_IT+0x1d0>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a17      	ldr	r2, [pc, #92]	; (8006a74 <HAL_TIM_PWM_Start_IT+0x228>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d111      	bne.n	8006a40 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	f003 0307 	and.w	r3, r3, #7
 8006a26:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	2b06      	cmp	r3, #6
 8006a2c:	d010      	beq.n	8006a50 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f042 0201 	orr.w	r2, r2, #1
 8006a3c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a3e:	e007      	b.n	8006a50 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f042 0201 	orr.w	r2, r2, #1
 8006a4e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	40010000 	.word	0x40010000
 8006a60:	40010400 	.word	0x40010400
 8006a64:	40000400 	.word	0x40000400
 8006a68:	40000800 	.word	0x40000800
 8006a6c:	40000c00 	.word	0x40000c00
 8006a70:	40014000 	.word	0x40014000
 8006a74:	40001800 	.word	0x40001800

08006a78 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b082      	sub	sp, #8
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d101      	bne.n	8006a8a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	e041      	b.n	8006b0e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d106      	bne.n	8006aa4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f7fb f936 	bl	8001d10 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2202      	movs	r2, #2
 8006aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	3304      	adds	r3, #4
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	4610      	mov	r0, r2
 8006ab8:	f000 fce6 	bl	8007488 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b0c:	2300      	movs	r3, #0
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3708      	adds	r7, #8
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
	...

08006b18 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b22:	2300      	movs	r3, #0
 8006b24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d104      	bne.n	8006b36 <HAL_TIM_IC_Start_IT+0x1e>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	e013      	b.n	8006b5e <HAL_TIM_IC_Start_IT+0x46>
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	2b04      	cmp	r3, #4
 8006b3a:	d104      	bne.n	8006b46 <HAL_TIM_IC_Start_IT+0x2e>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006b42:	b2db      	uxtb	r3, r3
 8006b44:	e00b      	b.n	8006b5e <HAL_TIM_IC_Start_IT+0x46>
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	2b08      	cmp	r3, #8
 8006b4a:	d104      	bne.n	8006b56 <HAL_TIM_IC_Start_IT+0x3e>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	e003      	b.n	8006b5e <HAL_TIM_IC_Start_IT+0x46>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d104      	bne.n	8006b70 <HAL_TIM_IC_Start_IT+0x58>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	e013      	b.n	8006b98 <HAL_TIM_IC_Start_IT+0x80>
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	2b04      	cmp	r3, #4
 8006b74:	d104      	bne.n	8006b80 <HAL_TIM_IC_Start_IT+0x68>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	e00b      	b.n	8006b98 <HAL_TIM_IC_Start_IT+0x80>
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	2b08      	cmp	r3, #8
 8006b84:	d104      	bne.n	8006b90 <HAL_TIM_IC_Start_IT+0x78>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	e003      	b.n	8006b98 <HAL_TIM_IC_Start_IT+0x80>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b9a:	7bbb      	ldrb	r3, [r7, #14]
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d102      	bne.n	8006ba6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006ba0:	7b7b      	ldrb	r3, [r7, #13]
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d001      	beq.n	8006baa <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e0cc      	b.n	8006d44 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d104      	bne.n	8006bba <HAL_TIM_IC_Start_IT+0xa2>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2202      	movs	r2, #2
 8006bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bb8:	e013      	b.n	8006be2 <HAL_TIM_IC_Start_IT+0xca>
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	2b04      	cmp	r3, #4
 8006bbe:	d104      	bne.n	8006bca <HAL_TIM_IC_Start_IT+0xb2>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2202      	movs	r2, #2
 8006bc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006bc8:	e00b      	b.n	8006be2 <HAL_TIM_IC_Start_IT+0xca>
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	2b08      	cmp	r3, #8
 8006bce:	d104      	bne.n	8006bda <HAL_TIM_IC_Start_IT+0xc2>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2202      	movs	r2, #2
 8006bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006bd8:	e003      	b.n	8006be2 <HAL_TIM_IC_Start_IT+0xca>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2202      	movs	r2, #2
 8006bde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d104      	bne.n	8006bf2 <HAL_TIM_IC_Start_IT+0xda>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2202      	movs	r2, #2
 8006bec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bf0:	e013      	b.n	8006c1a <HAL_TIM_IC_Start_IT+0x102>
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	2b04      	cmp	r3, #4
 8006bf6:	d104      	bne.n	8006c02 <HAL_TIM_IC_Start_IT+0xea>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2202      	movs	r2, #2
 8006bfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c00:	e00b      	b.n	8006c1a <HAL_TIM_IC_Start_IT+0x102>
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	2b08      	cmp	r3, #8
 8006c06:	d104      	bne.n	8006c12 <HAL_TIM_IC_Start_IT+0xfa>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2202      	movs	r2, #2
 8006c0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c10:	e003      	b.n	8006c1a <HAL_TIM_IC_Start_IT+0x102>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2202      	movs	r2, #2
 8006c16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	2b0c      	cmp	r3, #12
 8006c1e:	d841      	bhi.n	8006ca4 <HAL_TIM_IC_Start_IT+0x18c>
 8006c20:	a201      	add	r2, pc, #4	; (adr r2, 8006c28 <HAL_TIM_IC_Start_IT+0x110>)
 8006c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c26:	bf00      	nop
 8006c28:	08006c5d 	.word	0x08006c5d
 8006c2c:	08006ca5 	.word	0x08006ca5
 8006c30:	08006ca5 	.word	0x08006ca5
 8006c34:	08006ca5 	.word	0x08006ca5
 8006c38:	08006c6f 	.word	0x08006c6f
 8006c3c:	08006ca5 	.word	0x08006ca5
 8006c40:	08006ca5 	.word	0x08006ca5
 8006c44:	08006ca5 	.word	0x08006ca5
 8006c48:	08006c81 	.word	0x08006c81
 8006c4c:	08006ca5 	.word	0x08006ca5
 8006c50:	08006ca5 	.word	0x08006ca5
 8006c54:	08006ca5 	.word	0x08006ca5
 8006c58:	08006c93 	.word	0x08006c93
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68da      	ldr	r2, [r3, #12]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f042 0202 	orr.w	r2, r2, #2
 8006c6a:	60da      	str	r2, [r3, #12]
      break;
 8006c6c:	e01d      	b.n	8006caa <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	68da      	ldr	r2, [r3, #12]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f042 0204 	orr.w	r2, r2, #4
 8006c7c:	60da      	str	r2, [r3, #12]
      break;
 8006c7e:	e014      	b.n	8006caa <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	68da      	ldr	r2, [r3, #12]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f042 0208 	orr.w	r2, r2, #8
 8006c8e:	60da      	str	r2, [r3, #12]
      break;
 8006c90:	e00b      	b.n	8006caa <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	68da      	ldr	r2, [r3, #12]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f042 0210 	orr.w	r2, r2, #16
 8006ca0:	60da      	str	r2, [r3, #12]
      break;
 8006ca2:	e002      	b.n	8006caa <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	73fb      	strb	r3, [r7, #15]
      break;
 8006ca8:	bf00      	nop
  }

  if (status == HAL_OK)
 8006caa:	7bfb      	ldrb	r3, [r7, #15]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d148      	bne.n	8006d42 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	6839      	ldr	r1, [r7, #0]
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f000 fff9 	bl	8007cb0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a22      	ldr	r2, [pc, #136]	; (8006d4c <HAL_TIM_IC_Start_IT+0x234>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d022      	beq.n	8006d0e <HAL_TIM_IC_Start_IT+0x1f6>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cd0:	d01d      	beq.n	8006d0e <HAL_TIM_IC_Start_IT+0x1f6>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a1e      	ldr	r2, [pc, #120]	; (8006d50 <HAL_TIM_IC_Start_IT+0x238>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d018      	beq.n	8006d0e <HAL_TIM_IC_Start_IT+0x1f6>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a1c      	ldr	r2, [pc, #112]	; (8006d54 <HAL_TIM_IC_Start_IT+0x23c>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d013      	beq.n	8006d0e <HAL_TIM_IC_Start_IT+0x1f6>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a1b      	ldr	r2, [pc, #108]	; (8006d58 <HAL_TIM_IC_Start_IT+0x240>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d00e      	beq.n	8006d0e <HAL_TIM_IC_Start_IT+0x1f6>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a19      	ldr	r2, [pc, #100]	; (8006d5c <HAL_TIM_IC_Start_IT+0x244>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d009      	beq.n	8006d0e <HAL_TIM_IC_Start_IT+0x1f6>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a18      	ldr	r2, [pc, #96]	; (8006d60 <HAL_TIM_IC_Start_IT+0x248>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d004      	beq.n	8006d0e <HAL_TIM_IC_Start_IT+0x1f6>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a16      	ldr	r2, [pc, #88]	; (8006d64 <HAL_TIM_IC_Start_IT+0x24c>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d111      	bne.n	8006d32 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	f003 0307 	and.w	r3, r3, #7
 8006d18:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	2b06      	cmp	r3, #6
 8006d1e:	d010      	beq.n	8006d42 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f042 0201 	orr.w	r2, r2, #1
 8006d2e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d30:	e007      	b.n	8006d42 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f042 0201 	orr.w	r2, r2, #1
 8006d40:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3710      	adds	r7, #16
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}
 8006d4c:	40010000 	.word	0x40010000
 8006d50:	40000400 	.word	0x40000400
 8006d54:	40000800 	.word	0x40000800
 8006d58:	40000c00 	.word	0x40000c00
 8006d5c:	40010400 	.word	0x40010400
 8006d60:	40014000 	.word	0x40014000
 8006d64:	40001800 	.word	0x40001800

08006d68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	691b      	ldr	r3, [r3, #16]
 8006d76:	f003 0302 	and.w	r3, r3, #2
 8006d7a:	2b02      	cmp	r3, #2
 8006d7c:	d122      	bne.n	8006dc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	f003 0302 	and.w	r3, r3, #2
 8006d88:	2b02      	cmp	r3, #2
 8006d8a:	d11b      	bne.n	8006dc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f06f 0202 	mvn.w	r2, #2
 8006d94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	699b      	ldr	r3, [r3, #24]
 8006da2:	f003 0303 	and.w	r3, r3, #3
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d003      	beq.n	8006db2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f7fb fbd6 	bl	800255c <HAL_TIM_IC_CaptureCallback>
 8006db0:	e005      	b.n	8006dbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 fb4a 	bl	800744c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 fb51 	bl	8007460 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	f003 0304 	and.w	r3, r3, #4
 8006dce:	2b04      	cmp	r3, #4
 8006dd0:	d122      	bne.n	8006e18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	f003 0304 	and.w	r3, r3, #4
 8006ddc:	2b04      	cmp	r3, #4
 8006dde:	d11b      	bne.n	8006e18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f06f 0204 	mvn.w	r2, #4
 8006de8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2202      	movs	r2, #2
 8006dee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	699b      	ldr	r3, [r3, #24]
 8006df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d003      	beq.n	8006e06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f7fb fbac 	bl	800255c <HAL_TIM_IC_CaptureCallback>
 8006e04:	e005      	b.n	8006e12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 fb20 	bl	800744c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 fb27 	bl	8007460 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	f003 0308 	and.w	r3, r3, #8
 8006e22:	2b08      	cmp	r3, #8
 8006e24:	d122      	bne.n	8006e6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	f003 0308 	and.w	r3, r3, #8
 8006e30:	2b08      	cmp	r3, #8
 8006e32:	d11b      	bne.n	8006e6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f06f 0208 	mvn.w	r2, #8
 8006e3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2204      	movs	r2, #4
 8006e42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	69db      	ldr	r3, [r3, #28]
 8006e4a:	f003 0303 	and.w	r3, r3, #3
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d003      	beq.n	8006e5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f7fb fb82 	bl	800255c <HAL_TIM_IC_CaptureCallback>
 8006e58:	e005      	b.n	8006e66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 faf6 	bl	800744c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 fafd 	bl	8007460 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	691b      	ldr	r3, [r3, #16]
 8006e72:	f003 0310 	and.w	r3, r3, #16
 8006e76:	2b10      	cmp	r3, #16
 8006e78:	d122      	bne.n	8006ec0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	f003 0310 	and.w	r3, r3, #16
 8006e84:	2b10      	cmp	r3, #16
 8006e86:	d11b      	bne.n	8006ec0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f06f 0210 	mvn.w	r2, #16
 8006e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2208      	movs	r2, #8
 8006e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	69db      	ldr	r3, [r3, #28]
 8006e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d003      	beq.n	8006eae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f7fb fb58 	bl	800255c <HAL_TIM_IC_CaptureCallback>
 8006eac:	e005      	b.n	8006eba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 facc 	bl	800744c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f000 fad3 	bl	8007460 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	691b      	ldr	r3, [r3, #16]
 8006ec6:	f003 0301 	and.w	r3, r3, #1
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d10e      	bne.n	8006eec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	f003 0301 	and.w	r3, r3, #1
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d107      	bne.n	8006eec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f06f 0201 	mvn.w	r2, #1
 8006ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f7fb fac2 	bl	8002470 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	691b      	ldr	r3, [r3, #16]
 8006ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ef6:	2b80      	cmp	r3, #128	; 0x80
 8006ef8:	d10e      	bne.n	8006f18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f04:	2b80      	cmp	r3, #128	; 0x80
 8006f06:	d107      	bne.n	8006f18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 ff78 	bl	8007e08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	691b      	ldr	r3, [r3, #16]
 8006f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f22:	2b40      	cmp	r3, #64	; 0x40
 8006f24:	d10e      	bne.n	8006f44 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f30:	2b40      	cmp	r3, #64	; 0x40
 8006f32:	d107      	bne.n	8006f44 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 fa98 	bl	8007474 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	691b      	ldr	r3, [r3, #16]
 8006f4a:	f003 0320 	and.w	r3, r3, #32
 8006f4e:	2b20      	cmp	r3, #32
 8006f50:	d10e      	bne.n	8006f70 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	68db      	ldr	r3, [r3, #12]
 8006f58:	f003 0320 	and.w	r3, r3, #32
 8006f5c:	2b20      	cmp	r3, #32
 8006f5e:	d107      	bne.n	8006f70 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f06f 0220 	mvn.w	r2, #32
 8006f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 ff42 	bl	8007df4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f70:	bf00      	nop
 8006f72:	3708      	adds	r7, #8
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b086      	sub	sp, #24
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f84:	2300      	movs	r3, #0
 8006f86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d101      	bne.n	8006f96 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006f92:	2302      	movs	r3, #2
 8006f94:	e088      	b.n	80070a8 <HAL_TIM_IC_ConfigChannel+0x130>
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d11b      	bne.n	8006fdc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6818      	ldr	r0, [r3, #0]
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	6819      	ldr	r1, [r3, #0]
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	685a      	ldr	r2, [r3, #4]
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	f000 fcb8 	bl	8007928 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	699a      	ldr	r2, [r3, #24]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f022 020c 	bic.w	r2, r2, #12
 8006fc6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	6999      	ldr	r1, [r3, #24]
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	689a      	ldr	r2, [r3, #8]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	430a      	orrs	r2, r1
 8006fd8:	619a      	str	r2, [r3, #24]
 8006fda:	e060      	b.n	800709e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2b04      	cmp	r3, #4
 8006fe0:	d11c      	bne.n	800701c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	6818      	ldr	r0, [r3, #0]
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	6819      	ldr	r1, [r3, #0]
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	685a      	ldr	r2, [r3, #4]
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	f000 fd3c 	bl	8007a6e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	699a      	ldr	r2, [r3, #24]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007004:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	6999      	ldr	r1, [r3, #24]
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	021a      	lsls	r2, r3, #8
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	430a      	orrs	r2, r1
 8007018:	619a      	str	r2, [r3, #24]
 800701a:	e040      	b.n	800709e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2b08      	cmp	r3, #8
 8007020:	d11b      	bne.n	800705a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	6818      	ldr	r0, [r3, #0]
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	6819      	ldr	r1, [r3, #0]
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	685a      	ldr	r2, [r3, #4]
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	f000 fd89 	bl	8007b48 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	69da      	ldr	r2, [r3, #28]
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f022 020c 	bic.w	r2, r2, #12
 8007044:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	69d9      	ldr	r1, [r3, #28]
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	689a      	ldr	r2, [r3, #8]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	430a      	orrs	r2, r1
 8007056:	61da      	str	r2, [r3, #28]
 8007058:	e021      	b.n	800709e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2b0c      	cmp	r3, #12
 800705e:	d11c      	bne.n	800709a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6818      	ldr	r0, [r3, #0]
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	6819      	ldr	r1, [r3, #0]
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	685a      	ldr	r2, [r3, #4]
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	f000 fda6 	bl	8007bc0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	69da      	ldr	r2, [r3, #28]
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007082:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	69d9      	ldr	r1, [r3, #28]
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	021a      	lsls	r2, r3, #8
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	430a      	orrs	r2, r1
 8007096:	61da      	str	r2, [r3, #28]
 8007098:	e001      	b.n	800709e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2200      	movs	r2, #0
 80070a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80070a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3718      	adds	r7, #24
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b086      	sub	sp, #24
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	60b9      	str	r1, [r7, #8]
 80070ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070bc:	2300      	movs	r3, #0
 80070be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d101      	bne.n	80070ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80070ca:	2302      	movs	r3, #2
 80070cc:	e0ae      	b.n	800722c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2201      	movs	r2, #1
 80070d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2b0c      	cmp	r3, #12
 80070da:	f200 809f 	bhi.w	800721c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80070de:	a201      	add	r2, pc, #4	; (adr r2, 80070e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80070e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070e4:	08007119 	.word	0x08007119
 80070e8:	0800721d 	.word	0x0800721d
 80070ec:	0800721d 	.word	0x0800721d
 80070f0:	0800721d 	.word	0x0800721d
 80070f4:	08007159 	.word	0x08007159
 80070f8:	0800721d 	.word	0x0800721d
 80070fc:	0800721d 	.word	0x0800721d
 8007100:	0800721d 	.word	0x0800721d
 8007104:	0800719b 	.word	0x0800719b
 8007108:	0800721d 	.word	0x0800721d
 800710c:	0800721d 	.word	0x0800721d
 8007110:	0800721d 	.word	0x0800721d
 8007114:	080071db 	.word	0x080071db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	68b9      	ldr	r1, [r7, #8]
 800711e:	4618      	mov	r0, r3
 8007120:	f000 fa52 	bl	80075c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	699a      	ldr	r2, [r3, #24]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f042 0208 	orr.w	r2, r2, #8
 8007132:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	699a      	ldr	r2, [r3, #24]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f022 0204 	bic.w	r2, r2, #4
 8007142:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	6999      	ldr	r1, [r3, #24]
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	691a      	ldr	r2, [r3, #16]
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	430a      	orrs	r2, r1
 8007154:	619a      	str	r2, [r3, #24]
      break;
 8007156:	e064      	b.n	8007222 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	68b9      	ldr	r1, [r7, #8]
 800715e:	4618      	mov	r0, r3
 8007160:	f000 faa2 	bl	80076a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	699a      	ldr	r2, [r3, #24]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007172:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	699a      	ldr	r2, [r3, #24]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007182:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	6999      	ldr	r1, [r3, #24]
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	691b      	ldr	r3, [r3, #16]
 800718e:	021a      	lsls	r2, r3, #8
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	430a      	orrs	r2, r1
 8007196:	619a      	str	r2, [r3, #24]
      break;
 8007198:	e043      	b.n	8007222 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	68b9      	ldr	r1, [r7, #8]
 80071a0:	4618      	mov	r0, r3
 80071a2:	f000 faf7 	bl	8007794 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	69da      	ldr	r2, [r3, #28]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f042 0208 	orr.w	r2, r2, #8
 80071b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	69da      	ldr	r2, [r3, #28]
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f022 0204 	bic.w	r2, r2, #4
 80071c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	69d9      	ldr	r1, [r3, #28]
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	691a      	ldr	r2, [r3, #16]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	430a      	orrs	r2, r1
 80071d6:	61da      	str	r2, [r3, #28]
      break;
 80071d8:	e023      	b.n	8007222 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	68b9      	ldr	r1, [r7, #8]
 80071e0:	4618      	mov	r0, r3
 80071e2:	f000 fb4b 	bl	800787c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	69da      	ldr	r2, [r3, #28]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	69da      	ldr	r2, [r3, #28]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007204:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	69d9      	ldr	r1, [r3, #28]
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	691b      	ldr	r3, [r3, #16]
 8007210:	021a      	lsls	r2, r3, #8
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	430a      	orrs	r2, r1
 8007218:	61da      	str	r2, [r3, #28]
      break;
 800721a:	e002      	b.n	8007222 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	75fb      	strb	r3, [r7, #23]
      break;
 8007220:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2200      	movs	r2, #0
 8007226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800722a:	7dfb      	ldrb	r3, [r7, #23]
}
 800722c:	4618      	mov	r0, r3
 800722e:	3718      	adds	r7, #24
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800723e:	2300      	movs	r3, #0
 8007240:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007248:	2b01      	cmp	r3, #1
 800724a:	d101      	bne.n	8007250 <HAL_TIM_ConfigClockSource+0x1c>
 800724c:	2302      	movs	r3, #2
 800724e:	e0b4      	b.n	80073ba <HAL_TIM_ConfigClockSource+0x186>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2201      	movs	r2, #1
 8007254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2202      	movs	r2, #2
 800725c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800726e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007276:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	68ba      	ldr	r2, [r7, #8]
 800727e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007288:	d03e      	beq.n	8007308 <HAL_TIM_ConfigClockSource+0xd4>
 800728a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800728e:	f200 8087 	bhi.w	80073a0 <HAL_TIM_ConfigClockSource+0x16c>
 8007292:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007296:	f000 8086 	beq.w	80073a6 <HAL_TIM_ConfigClockSource+0x172>
 800729a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800729e:	d87f      	bhi.n	80073a0 <HAL_TIM_ConfigClockSource+0x16c>
 80072a0:	2b70      	cmp	r3, #112	; 0x70
 80072a2:	d01a      	beq.n	80072da <HAL_TIM_ConfigClockSource+0xa6>
 80072a4:	2b70      	cmp	r3, #112	; 0x70
 80072a6:	d87b      	bhi.n	80073a0 <HAL_TIM_ConfigClockSource+0x16c>
 80072a8:	2b60      	cmp	r3, #96	; 0x60
 80072aa:	d050      	beq.n	800734e <HAL_TIM_ConfigClockSource+0x11a>
 80072ac:	2b60      	cmp	r3, #96	; 0x60
 80072ae:	d877      	bhi.n	80073a0 <HAL_TIM_ConfigClockSource+0x16c>
 80072b0:	2b50      	cmp	r3, #80	; 0x50
 80072b2:	d03c      	beq.n	800732e <HAL_TIM_ConfigClockSource+0xfa>
 80072b4:	2b50      	cmp	r3, #80	; 0x50
 80072b6:	d873      	bhi.n	80073a0 <HAL_TIM_ConfigClockSource+0x16c>
 80072b8:	2b40      	cmp	r3, #64	; 0x40
 80072ba:	d058      	beq.n	800736e <HAL_TIM_ConfigClockSource+0x13a>
 80072bc:	2b40      	cmp	r3, #64	; 0x40
 80072be:	d86f      	bhi.n	80073a0 <HAL_TIM_ConfigClockSource+0x16c>
 80072c0:	2b30      	cmp	r3, #48	; 0x30
 80072c2:	d064      	beq.n	800738e <HAL_TIM_ConfigClockSource+0x15a>
 80072c4:	2b30      	cmp	r3, #48	; 0x30
 80072c6:	d86b      	bhi.n	80073a0 <HAL_TIM_ConfigClockSource+0x16c>
 80072c8:	2b20      	cmp	r3, #32
 80072ca:	d060      	beq.n	800738e <HAL_TIM_ConfigClockSource+0x15a>
 80072cc:	2b20      	cmp	r3, #32
 80072ce:	d867      	bhi.n	80073a0 <HAL_TIM_ConfigClockSource+0x16c>
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d05c      	beq.n	800738e <HAL_TIM_ConfigClockSource+0x15a>
 80072d4:	2b10      	cmp	r3, #16
 80072d6:	d05a      	beq.n	800738e <HAL_TIM_ConfigClockSource+0x15a>
 80072d8:	e062      	b.n	80073a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6818      	ldr	r0, [r3, #0]
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	6899      	ldr	r1, [r3, #8]
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	685a      	ldr	r2, [r3, #4]
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	68db      	ldr	r3, [r3, #12]
 80072ea:	f000 fcc1 	bl	8007c70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80072fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	68ba      	ldr	r2, [r7, #8]
 8007304:	609a      	str	r2, [r3, #8]
      break;
 8007306:	e04f      	b.n	80073a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6818      	ldr	r0, [r3, #0]
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	6899      	ldr	r1, [r3, #8]
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	685a      	ldr	r2, [r3, #4]
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	68db      	ldr	r3, [r3, #12]
 8007318:	f000 fcaa 	bl	8007c70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	689a      	ldr	r2, [r3, #8]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800732a:	609a      	str	r2, [r3, #8]
      break;
 800732c:	e03c      	b.n	80073a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6818      	ldr	r0, [r3, #0]
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	6859      	ldr	r1, [r3, #4]
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	68db      	ldr	r3, [r3, #12]
 800733a:	461a      	mov	r2, r3
 800733c:	f000 fb68 	bl	8007a10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	2150      	movs	r1, #80	; 0x50
 8007346:	4618      	mov	r0, r3
 8007348:	f000 fc77 	bl	8007c3a <TIM_ITRx_SetConfig>
      break;
 800734c:	e02c      	b.n	80073a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6818      	ldr	r0, [r3, #0]
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	6859      	ldr	r1, [r3, #4]
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	461a      	mov	r2, r3
 800735c:	f000 fbc4 	bl	8007ae8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	2160      	movs	r1, #96	; 0x60
 8007366:	4618      	mov	r0, r3
 8007368:	f000 fc67 	bl	8007c3a <TIM_ITRx_SetConfig>
      break;
 800736c:	e01c      	b.n	80073a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6818      	ldr	r0, [r3, #0]
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	6859      	ldr	r1, [r3, #4]
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	68db      	ldr	r3, [r3, #12]
 800737a:	461a      	mov	r2, r3
 800737c:	f000 fb48 	bl	8007a10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2140      	movs	r1, #64	; 0x40
 8007386:	4618      	mov	r0, r3
 8007388:	f000 fc57 	bl	8007c3a <TIM_ITRx_SetConfig>
      break;
 800738c:	e00c      	b.n	80073a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4619      	mov	r1, r3
 8007398:	4610      	mov	r0, r2
 800739a:	f000 fc4e 	bl	8007c3a <TIM_ITRx_SetConfig>
      break;
 800739e:	e003      	b.n	80073a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80073a0:	2301      	movs	r3, #1
 80073a2:	73fb      	strb	r3, [r7, #15]
      break;
 80073a4:	e000      	b.n	80073a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80073a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2201      	movs	r2, #1
 80073ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80073b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3710      	adds	r7, #16
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
	...

080073c4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b085      	sub	sp, #20
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80073ce:	2300      	movs	r3, #0
 80073d0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	2b0c      	cmp	r3, #12
 80073d6:	d831      	bhi.n	800743c <HAL_TIM_ReadCapturedValue+0x78>
 80073d8:	a201      	add	r2, pc, #4	; (adr r2, 80073e0 <HAL_TIM_ReadCapturedValue+0x1c>)
 80073da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073de:	bf00      	nop
 80073e0:	08007415 	.word	0x08007415
 80073e4:	0800743d 	.word	0x0800743d
 80073e8:	0800743d 	.word	0x0800743d
 80073ec:	0800743d 	.word	0x0800743d
 80073f0:	0800741f 	.word	0x0800741f
 80073f4:	0800743d 	.word	0x0800743d
 80073f8:	0800743d 	.word	0x0800743d
 80073fc:	0800743d 	.word	0x0800743d
 8007400:	08007429 	.word	0x08007429
 8007404:	0800743d 	.word	0x0800743d
 8007408:	0800743d 	.word	0x0800743d
 800740c:	0800743d 	.word	0x0800743d
 8007410:	08007433 	.word	0x08007433
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800741a:	60fb      	str	r3, [r7, #12]

      break;
 800741c:	e00f      	b.n	800743e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007424:	60fb      	str	r3, [r7, #12]

      break;
 8007426:	e00a      	b.n	800743e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800742e:	60fb      	str	r3, [r7, #12]

      break;
 8007430:	e005      	b.n	800743e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007438:	60fb      	str	r3, [r7, #12]

      break;
 800743a:	e000      	b.n	800743e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800743c:	bf00      	nop
  }

  return tmpreg;
 800743e:	68fb      	ldr	r3, [r7, #12]
}
 8007440:	4618      	mov	r0, r3
 8007442:	3714      	adds	r7, #20
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr

0800744c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007454:	bf00      	nop
 8007456:	370c      	adds	r7, #12
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr

08007460 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007460:	b480      	push	{r7}
 8007462:	b083      	sub	sp, #12
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007468:	bf00      	nop
 800746a:	370c      	adds	r7, #12
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr

08007474 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007474:	b480      	push	{r7}
 8007476:	b083      	sub	sp, #12
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800747c:	bf00      	nop
 800747e:	370c      	adds	r7, #12
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr

08007488 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007488:	b480      	push	{r7}
 800748a:	b085      	sub	sp, #20
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	4a40      	ldr	r2, [pc, #256]	; (800759c <TIM_Base_SetConfig+0x114>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d013      	beq.n	80074c8 <TIM_Base_SetConfig+0x40>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074a6:	d00f      	beq.n	80074c8 <TIM_Base_SetConfig+0x40>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	4a3d      	ldr	r2, [pc, #244]	; (80075a0 <TIM_Base_SetConfig+0x118>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d00b      	beq.n	80074c8 <TIM_Base_SetConfig+0x40>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	4a3c      	ldr	r2, [pc, #240]	; (80075a4 <TIM_Base_SetConfig+0x11c>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d007      	beq.n	80074c8 <TIM_Base_SetConfig+0x40>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	4a3b      	ldr	r2, [pc, #236]	; (80075a8 <TIM_Base_SetConfig+0x120>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d003      	beq.n	80074c8 <TIM_Base_SetConfig+0x40>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	4a3a      	ldr	r2, [pc, #232]	; (80075ac <TIM_Base_SetConfig+0x124>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d108      	bne.n	80074da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	68fa      	ldr	r2, [r7, #12]
 80074d6:	4313      	orrs	r3, r2
 80074d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	4a2f      	ldr	r2, [pc, #188]	; (800759c <TIM_Base_SetConfig+0x114>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d02b      	beq.n	800753a <TIM_Base_SetConfig+0xb2>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074e8:	d027      	beq.n	800753a <TIM_Base_SetConfig+0xb2>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4a2c      	ldr	r2, [pc, #176]	; (80075a0 <TIM_Base_SetConfig+0x118>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d023      	beq.n	800753a <TIM_Base_SetConfig+0xb2>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	4a2b      	ldr	r2, [pc, #172]	; (80075a4 <TIM_Base_SetConfig+0x11c>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d01f      	beq.n	800753a <TIM_Base_SetConfig+0xb2>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	4a2a      	ldr	r2, [pc, #168]	; (80075a8 <TIM_Base_SetConfig+0x120>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d01b      	beq.n	800753a <TIM_Base_SetConfig+0xb2>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	4a29      	ldr	r2, [pc, #164]	; (80075ac <TIM_Base_SetConfig+0x124>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d017      	beq.n	800753a <TIM_Base_SetConfig+0xb2>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	4a28      	ldr	r2, [pc, #160]	; (80075b0 <TIM_Base_SetConfig+0x128>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d013      	beq.n	800753a <TIM_Base_SetConfig+0xb2>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	4a27      	ldr	r2, [pc, #156]	; (80075b4 <TIM_Base_SetConfig+0x12c>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d00f      	beq.n	800753a <TIM_Base_SetConfig+0xb2>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4a26      	ldr	r2, [pc, #152]	; (80075b8 <TIM_Base_SetConfig+0x130>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d00b      	beq.n	800753a <TIM_Base_SetConfig+0xb2>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4a25      	ldr	r2, [pc, #148]	; (80075bc <TIM_Base_SetConfig+0x134>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d007      	beq.n	800753a <TIM_Base_SetConfig+0xb2>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4a24      	ldr	r2, [pc, #144]	; (80075c0 <TIM_Base_SetConfig+0x138>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d003      	beq.n	800753a <TIM_Base_SetConfig+0xb2>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	4a23      	ldr	r2, [pc, #140]	; (80075c4 <TIM_Base_SetConfig+0x13c>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d108      	bne.n	800754c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007540:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	68db      	ldr	r3, [r3, #12]
 8007546:	68fa      	ldr	r2, [r7, #12]
 8007548:	4313      	orrs	r3, r2
 800754a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	695b      	ldr	r3, [r3, #20]
 8007556:	4313      	orrs	r3, r2
 8007558:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	68fa      	ldr	r2, [r7, #12]
 800755e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	689a      	ldr	r2, [r3, #8]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	4a0a      	ldr	r2, [pc, #40]	; (800759c <TIM_Base_SetConfig+0x114>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d003      	beq.n	8007580 <TIM_Base_SetConfig+0xf8>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	4a0c      	ldr	r2, [pc, #48]	; (80075ac <TIM_Base_SetConfig+0x124>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d103      	bne.n	8007588 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	691a      	ldr	r2, [r3, #16]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2201      	movs	r2, #1
 800758c:	615a      	str	r2, [r3, #20]
}
 800758e:	bf00      	nop
 8007590:	3714      	adds	r7, #20
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr
 800759a:	bf00      	nop
 800759c:	40010000 	.word	0x40010000
 80075a0:	40000400 	.word	0x40000400
 80075a4:	40000800 	.word	0x40000800
 80075a8:	40000c00 	.word	0x40000c00
 80075ac:	40010400 	.word	0x40010400
 80075b0:	40014000 	.word	0x40014000
 80075b4:	40014400 	.word	0x40014400
 80075b8:	40014800 	.word	0x40014800
 80075bc:	40001800 	.word	0x40001800
 80075c0:	40001c00 	.word	0x40001c00
 80075c4:	40002000 	.word	0x40002000

080075c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b087      	sub	sp, #28
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6a1b      	ldr	r3, [r3, #32]
 80075d6:	f023 0201 	bic.w	r2, r3, #1
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6a1b      	ldr	r3, [r3, #32]
 80075e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	699b      	ldr	r3, [r3, #24]
 80075ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f023 0303 	bic.w	r3, r3, #3
 80075fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	68fa      	ldr	r2, [r7, #12]
 8007606:	4313      	orrs	r3, r2
 8007608:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	f023 0302 	bic.w	r3, r3, #2
 8007610:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	689b      	ldr	r3, [r3, #8]
 8007616:	697a      	ldr	r2, [r7, #20]
 8007618:	4313      	orrs	r3, r2
 800761a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	4a20      	ldr	r2, [pc, #128]	; (80076a0 <TIM_OC1_SetConfig+0xd8>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d003      	beq.n	800762c <TIM_OC1_SetConfig+0x64>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	4a1f      	ldr	r2, [pc, #124]	; (80076a4 <TIM_OC1_SetConfig+0xdc>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d10c      	bne.n	8007646 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	f023 0308 	bic.w	r3, r3, #8
 8007632:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	697a      	ldr	r2, [r7, #20]
 800763a:	4313      	orrs	r3, r2
 800763c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	f023 0304 	bic.w	r3, r3, #4
 8007644:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	4a15      	ldr	r2, [pc, #84]	; (80076a0 <TIM_OC1_SetConfig+0xd8>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d003      	beq.n	8007656 <TIM_OC1_SetConfig+0x8e>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	4a14      	ldr	r2, [pc, #80]	; (80076a4 <TIM_OC1_SetConfig+0xdc>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d111      	bne.n	800767a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800765c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007664:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	695b      	ldr	r3, [r3, #20]
 800766a:	693a      	ldr	r2, [r7, #16]
 800766c:	4313      	orrs	r3, r2
 800766e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	699b      	ldr	r3, [r3, #24]
 8007674:	693a      	ldr	r2, [r7, #16]
 8007676:	4313      	orrs	r3, r2
 8007678:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	693a      	ldr	r2, [r7, #16]
 800767e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	68fa      	ldr	r2, [r7, #12]
 8007684:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	685a      	ldr	r2, [r3, #4]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	697a      	ldr	r2, [r7, #20]
 8007692:	621a      	str	r2, [r3, #32]
}
 8007694:	bf00      	nop
 8007696:	371c      	adds	r7, #28
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr
 80076a0:	40010000 	.word	0x40010000
 80076a4:	40010400 	.word	0x40010400

080076a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b087      	sub	sp, #28
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6a1b      	ldr	r3, [r3, #32]
 80076b6:	f023 0210 	bic.w	r2, r3, #16
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6a1b      	ldr	r3, [r3, #32]
 80076c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	699b      	ldr	r3, [r3, #24]
 80076ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	021b      	lsls	r3, r3, #8
 80076e6:	68fa      	ldr	r2, [r7, #12]
 80076e8:	4313      	orrs	r3, r2
 80076ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	f023 0320 	bic.w	r3, r3, #32
 80076f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	011b      	lsls	r3, r3, #4
 80076fa:	697a      	ldr	r2, [r7, #20]
 80076fc:	4313      	orrs	r3, r2
 80076fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	4a22      	ldr	r2, [pc, #136]	; (800778c <TIM_OC2_SetConfig+0xe4>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d003      	beq.n	8007710 <TIM_OC2_SetConfig+0x68>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	4a21      	ldr	r2, [pc, #132]	; (8007790 <TIM_OC2_SetConfig+0xe8>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d10d      	bne.n	800772c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007716:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	68db      	ldr	r3, [r3, #12]
 800771c:	011b      	lsls	r3, r3, #4
 800771e:	697a      	ldr	r2, [r7, #20]
 8007720:	4313      	orrs	r3, r2
 8007722:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800772a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	4a17      	ldr	r2, [pc, #92]	; (800778c <TIM_OC2_SetConfig+0xe4>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d003      	beq.n	800773c <TIM_OC2_SetConfig+0x94>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	4a16      	ldr	r2, [pc, #88]	; (8007790 <TIM_OC2_SetConfig+0xe8>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d113      	bne.n	8007764 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007742:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800774a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	695b      	ldr	r3, [r3, #20]
 8007750:	009b      	lsls	r3, r3, #2
 8007752:	693a      	ldr	r2, [r7, #16]
 8007754:	4313      	orrs	r3, r2
 8007756:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	699b      	ldr	r3, [r3, #24]
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	693a      	ldr	r2, [r7, #16]
 8007760:	4313      	orrs	r3, r2
 8007762:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	693a      	ldr	r2, [r7, #16]
 8007768:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	68fa      	ldr	r2, [r7, #12]
 800776e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	685a      	ldr	r2, [r3, #4]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	697a      	ldr	r2, [r7, #20]
 800777c:	621a      	str	r2, [r3, #32]
}
 800777e:	bf00      	nop
 8007780:	371c      	adds	r7, #28
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr
 800778a:	bf00      	nop
 800778c:	40010000 	.word	0x40010000
 8007790:	40010400 	.word	0x40010400

08007794 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007794:	b480      	push	{r7}
 8007796:	b087      	sub	sp, #28
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6a1b      	ldr	r3, [r3, #32]
 80077a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a1b      	ldr	r3, [r3, #32]
 80077ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	69db      	ldr	r3, [r3, #28]
 80077ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f023 0303 	bic.w	r3, r3, #3
 80077ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	68fa      	ldr	r2, [r7, #12]
 80077d2:	4313      	orrs	r3, r2
 80077d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80077dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	689b      	ldr	r3, [r3, #8]
 80077e2:	021b      	lsls	r3, r3, #8
 80077e4:	697a      	ldr	r2, [r7, #20]
 80077e6:	4313      	orrs	r3, r2
 80077e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	4a21      	ldr	r2, [pc, #132]	; (8007874 <TIM_OC3_SetConfig+0xe0>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d003      	beq.n	80077fa <TIM_OC3_SetConfig+0x66>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	4a20      	ldr	r2, [pc, #128]	; (8007878 <TIM_OC3_SetConfig+0xe4>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d10d      	bne.n	8007816 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007800:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	68db      	ldr	r3, [r3, #12]
 8007806:	021b      	lsls	r3, r3, #8
 8007808:	697a      	ldr	r2, [r7, #20]
 800780a:	4313      	orrs	r3, r2
 800780c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007814:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	4a16      	ldr	r2, [pc, #88]	; (8007874 <TIM_OC3_SetConfig+0xe0>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d003      	beq.n	8007826 <TIM_OC3_SetConfig+0x92>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	4a15      	ldr	r2, [pc, #84]	; (8007878 <TIM_OC3_SetConfig+0xe4>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d113      	bne.n	800784e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800782c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007834:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	695b      	ldr	r3, [r3, #20]
 800783a:	011b      	lsls	r3, r3, #4
 800783c:	693a      	ldr	r2, [r7, #16]
 800783e:	4313      	orrs	r3, r2
 8007840:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	699b      	ldr	r3, [r3, #24]
 8007846:	011b      	lsls	r3, r3, #4
 8007848:	693a      	ldr	r2, [r7, #16]
 800784a:	4313      	orrs	r3, r2
 800784c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	693a      	ldr	r2, [r7, #16]
 8007852:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	68fa      	ldr	r2, [r7, #12]
 8007858:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	685a      	ldr	r2, [r3, #4]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	697a      	ldr	r2, [r7, #20]
 8007866:	621a      	str	r2, [r3, #32]
}
 8007868:	bf00      	nop
 800786a:	371c      	adds	r7, #28
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr
 8007874:	40010000 	.word	0x40010000
 8007878:	40010400 	.word	0x40010400

0800787c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800787c:	b480      	push	{r7}
 800787e:	b087      	sub	sp, #28
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6a1b      	ldr	r3, [r3, #32]
 800788a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6a1b      	ldr	r3, [r3, #32]
 8007896:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	69db      	ldr	r3, [r3, #28]
 80078a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	021b      	lsls	r3, r3, #8
 80078ba:	68fa      	ldr	r2, [r7, #12]
 80078bc:	4313      	orrs	r3, r2
 80078be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80078c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	031b      	lsls	r3, r3, #12
 80078ce:	693a      	ldr	r2, [r7, #16]
 80078d0:	4313      	orrs	r3, r2
 80078d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	4a12      	ldr	r2, [pc, #72]	; (8007920 <TIM_OC4_SetConfig+0xa4>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d003      	beq.n	80078e4 <TIM_OC4_SetConfig+0x68>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	4a11      	ldr	r2, [pc, #68]	; (8007924 <TIM_OC4_SetConfig+0xa8>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d109      	bne.n	80078f8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	695b      	ldr	r3, [r3, #20]
 80078f0:	019b      	lsls	r3, r3, #6
 80078f2:	697a      	ldr	r2, [r7, #20]
 80078f4:	4313      	orrs	r3, r2
 80078f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	697a      	ldr	r2, [r7, #20]
 80078fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	68fa      	ldr	r2, [r7, #12]
 8007902:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	685a      	ldr	r2, [r3, #4]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	693a      	ldr	r2, [r7, #16]
 8007910:	621a      	str	r2, [r3, #32]
}
 8007912:	bf00      	nop
 8007914:	371c      	adds	r7, #28
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr
 800791e:	bf00      	nop
 8007920:	40010000 	.word	0x40010000
 8007924:	40010400 	.word	0x40010400

08007928 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007928:	b480      	push	{r7}
 800792a:	b087      	sub	sp, #28
 800792c:	af00      	add	r7, sp, #0
 800792e:	60f8      	str	r0, [r7, #12]
 8007930:	60b9      	str	r1, [r7, #8]
 8007932:	607a      	str	r2, [r7, #4]
 8007934:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	6a1b      	ldr	r3, [r3, #32]
 800793a:	f023 0201 	bic.w	r2, r3, #1
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	699b      	ldr	r3, [r3, #24]
 8007946:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	6a1b      	ldr	r3, [r3, #32]
 800794c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	4a28      	ldr	r2, [pc, #160]	; (80079f4 <TIM_TI1_SetConfig+0xcc>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d01b      	beq.n	800798e <TIM_TI1_SetConfig+0x66>
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800795c:	d017      	beq.n	800798e <TIM_TI1_SetConfig+0x66>
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	4a25      	ldr	r2, [pc, #148]	; (80079f8 <TIM_TI1_SetConfig+0xd0>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d013      	beq.n	800798e <TIM_TI1_SetConfig+0x66>
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	4a24      	ldr	r2, [pc, #144]	; (80079fc <TIM_TI1_SetConfig+0xd4>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d00f      	beq.n	800798e <TIM_TI1_SetConfig+0x66>
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	4a23      	ldr	r2, [pc, #140]	; (8007a00 <TIM_TI1_SetConfig+0xd8>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d00b      	beq.n	800798e <TIM_TI1_SetConfig+0x66>
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	4a22      	ldr	r2, [pc, #136]	; (8007a04 <TIM_TI1_SetConfig+0xdc>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d007      	beq.n	800798e <TIM_TI1_SetConfig+0x66>
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	4a21      	ldr	r2, [pc, #132]	; (8007a08 <TIM_TI1_SetConfig+0xe0>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d003      	beq.n	800798e <TIM_TI1_SetConfig+0x66>
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	4a20      	ldr	r2, [pc, #128]	; (8007a0c <TIM_TI1_SetConfig+0xe4>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d101      	bne.n	8007992 <TIM_TI1_SetConfig+0x6a>
 800798e:	2301      	movs	r3, #1
 8007990:	e000      	b.n	8007994 <TIM_TI1_SetConfig+0x6c>
 8007992:	2300      	movs	r3, #0
 8007994:	2b00      	cmp	r3, #0
 8007996:	d008      	beq.n	80079aa <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	f023 0303 	bic.w	r3, r3, #3
 800799e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80079a0:	697a      	ldr	r2, [r7, #20]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	4313      	orrs	r3, r2
 80079a6:	617b      	str	r3, [r7, #20]
 80079a8:	e003      	b.n	80079b2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	f043 0301 	orr.w	r3, r3, #1
 80079b0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80079b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	011b      	lsls	r3, r3, #4
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	697a      	ldr	r2, [r7, #20]
 80079c2:	4313      	orrs	r3, r2
 80079c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	f023 030a 	bic.w	r3, r3, #10
 80079cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	f003 030a 	and.w	r3, r3, #10
 80079d4:	693a      	ldr	r2, [r7, #16]
 80079d6:	4313      	orrs	r3, r2
 80079d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	697a      	ldr	r2, [r7, #20]
 80079de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	693a      	ldr	r2, [r7, #16]
 80079e4:	621a      	str	r2, [r3, #32]
}
 80079e6:	bf00      	nop
 80079e8:	371c      	adds	r7, #28
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr
 80079f2:	bf00      	nop
 80079f4:	40010000 	.word	0x40010000
 80079f8:	40000400 	.word	0x40000400
 80079fc:	40000800 	.word	0x40000800
 8007a00:	40000c00 	.word	0x40000c00
 8007a04:	40010400 	.word	0x40010400
 8007a08:	40014000 	.word	0x40014000
 8007a0c:	40001800 	.word	0x40001800

08007a10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b087      	sub	sp, #28
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	60f8      	str	r0, [r7, #12]
 8007a18:	60b9      	str	r1, [r7, #8]
 8007a1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6a1b      	ldr	r3, [r3, #32]
 8007a20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	6a1b      	ldr	r3, [r3, #32]
 8007a26:	f023 0201 	bic.w	r2, r3, #1
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	699b      	ldr	r3, [r3, #24]
 8007a32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	011b      	lsls	r3, r3, #4
 8007a40:	693a      	ldr	r2, [r7, #16]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	f023 030a 	bic.w	r3, r3, #10
 8007a4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007a4e:	697a      	ldr	r2, [r7, #20]
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	4313      	orrs	r3, r2
 8007a54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	693a      	ldr	r2, [r7, #16]
 8007a5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	697a      	ldr	r2, [r7, #20]
 8007a60:	621a      	str	r2, [r3, #32]
}
 8007a62:	bf00      	nop
 8007a64:	371c      	adds	r7, #28
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr

08007a6e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007a6e:	b480      	push	{r7}
 8007a70:	b087      	sub	sp, #28
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	60f8      	str	r0, [r7, #12]
 8007a76:	60b9      	str	r1, [r7, #8]
 8007a78:	607a      	str	r2, [r7, #4]
 8007a7a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	6a1b      	ldr	r3, [r3, #32]
 8007a80:	f023 0210 	bic.w	r2, r3, #16
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	699b      	ldr	r3, [r3, #24]
 8007a8c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	6a1b      	ldr	r3, [r3, #32]
 8007a92:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a9a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	021b      	lsls	r3, r3, #8
 8007aa0:	697a      	ldr	r2, [r7, #20]
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007aac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	031b      	lsls	r3, r3, #12
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	697a      	ldr	r2, [r7, #20]
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007ac0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	011b      	lsls	r3, r3, #4
 8007ac6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007aca:	693a      	ldr	r2, [r7, #16]
 8007acc:	4313      	orrs	r3, r2
 8007ace:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	697a      	ldr	r2, [r7, #20]
 8007ad4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	693a      	ldr	r2, [r7, #16]
 8007ada:	621a      	str	r2, [r3, #32]
}
 8007adc:	bf00      	nop
 8007ade:	371c      	adds	r7, #28
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr

08007ae8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b087      	sub	sp, #28
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	60f8      	str	r0, [r7, #12]
 8007af0:	60b9      	str	r1, [r7, #8]
 8007af2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	6a1b      	ldr	r3, [r3, #32]
 8007af8:	f023 0210 	bic.w	r2, r3, #16
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	699b      	ldr	r3, [r3, #24]
 8007b04:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	6a1b      	ldr	r3, [r3, #32]
 8007b0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b12:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	031b      	lsls	r3, r3, #12
 8007b18:	697a      	ldr	r2, [r7, #20]
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b24:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	011b      	lsls	r3, r3, #4
 8007b2a:	693a      	ldr	r2, [r7, #16]
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	697a      	ldr	r2, [r7, #20]
 8007b34:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	693a      	ldr	r2, [r7, #16]
 8007b3a:	621a      	str	r2, [r3, #32]
}
 8007b3c:	bf00      	nop
 8007b3e:	371c      	adds	r7, #28
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr

08007b48 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b087      	sub	sp, #28
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	60b9      	str	r1, [r7, #8]
 8007b52:	607a      	str	r2, [r7, #4]
 8007b54:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	6a1b      	ldr	r3, [r3, #32]
 8007b5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	69db      	ldr	r3, [r3, #28]
 8007b66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	6a1b      	ldr	r3, [r3, #32]
 8007b6c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	f023 0303 	bic.w	r3, r3, #3
 8007b74:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007b76:	697a      	ldr	r2, [r7, #20]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b84:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	011b      	lsls	r3, r3, #4
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	697a      	ldr	r2, [r7, #20]
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007b98:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	021b      	lsls	r3, r3, #8
 8007b9e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007ba2:	693a      	ldr	r2, [r7, #16]
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	697a      	ldr	r2, [r7, #20]
 8007bac:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	693a      	ldr	r2, [r7, #16]
 8007bb2:	621a      	str	r2, [r3, #32]
}
 8007bb4:	bf00      	nop
 8007bb6:	371c      	adds	r7, #28
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr

08007bc0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b087      	sub	sp, #28
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	60f8      	str	r0, [r7, #12]
 8007bc8:	60b9      	str	r1, [r7, #8]
 8007bca:	607a      	str	r2, [r7, #4]
 8007bcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6a1b      	ldr	r3, [r3, #32]
 8007bd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	69db      	ldr	r3, [r3, #28]
 8007bde:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6a1b      	ldr	r3, [r3, #32]
 8007be4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	021b      	lsls	r3, r3, #8
 8007bf2:	697a      	ldr	r2, [r7, #20]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007bfe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	031b      	lsls	r3, r3, #12
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	697a      	ldr	r2, [r7, #20]
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007c12:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	031b      	lsls	r3, r3, #12
 8007c18:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007c1c:	693a      	ldr	r2, [r7, #16]
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	697a      	ldr	r2, [r7, #20]
 8007c26:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	693a      	ldr	r2, [r7, #16]
 8007c2c:	621a      	str	r2, [r3, #32]
}
 8007c2e:	bf00      	nop
 8007c30:	371c      	adds	r7, #28
 8007c32:	46bd      	mov	sp, r7
 8007c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c38:	4770      	bx	lr

08007c3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c3a:	b480      	push	{r7}
 8007c3c:	b085      	sub	sp, #20
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
 8007c42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	689b      	ldr	r3, [r3, #8]
 8007c48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c52:	683a      	ldr	r2, [r7, #0]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	4313      	orrs	r3, r2
 8007c58:	f043 0307 	orr.w	r3, r3, #7
 8007c5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	68fa      	ldr	r2, [r7, #12]
 8007c62:	609a      	str	r2, [r3, #8]
}
 8007c64:	bf00      	nop
 8007c66:	3714      	adds	r7, #20
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr

08007c70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b087      	sub	sp, #28
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	60f8      	str	r0, [r7, #12]
 8007c78:	60b9      	str	r1, [r7, #8]
 8007c7a:	607a      	str	r2, [r7, #4]
 8007c7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	021a      	lsls	r2, r3, #8
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	431a      	orrs	r2, r3
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	4313      	orrs	r3, r2
 8007c98:	697a      	ldr	r2, [r7, #20]
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	697a      	ldr	r2, [r7, #20]
 8007ca2:	609a      	str	r2, [r3, #8]
}
 8007ca4:	bf00      	nop
 8007ca6:	371c      	adds	r7, #28
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr

08007cb0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b087      	sub	sp, #28
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	60f8      	str	r0, [r7, #12]
 8007cb8:	60b9      	str	r1, [r7, #8]
 8007cba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	f003 031f 	and.w	r3, r3, #31
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8007cc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	6a1a      	ldr	r2, [r3, #32]
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	43db      	mvns	r3, r3
 8007cd2:	401a      	ands	r2, r3
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	6a1a      	ldr	r2, [r3, #32]
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	f003 031f 	and.w	r3, r3, #31
 8007ce2:	6879      	ldr	r1, [r7, #4]
 8007ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8007ce8:	431a      	orrs	r2, r3
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	621a      	str	r2, [r3, #32]
}
 8007cee:	bf00      	nop
 8007cf0:	371c      	adds	r7, #28
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr
	...

08007cfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b085      	sub	sp, #20
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d101      	bne.n	8007d14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d10:	2302      	movs	r3, #2
 8007d12:	e05a      	b.n	8007dca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2201      	movs	r2, #1
 8007d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2202      	movs	r2, #2
 8007d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	689b      	ldr	r3, [r3, #8]
 8007d32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	68fa      	ldr	r2, [r7, #12]
 8007d42:	4313      	orrs	r3, r2
 8007d44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	68fa      	ldr	r2, [r7, #12]
 8007d4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a21      	ldr	r2, [pc, #132]	; (8007dd8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d022      	beq.n	8007d9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d60:	d01d      	beq.n	8007d9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a1d      	ldr	r2, [pc, #116]	; (8007ddc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d018      	beq.n	8007d9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a1b      	ldr	r2, [pc, #108]	; (8007de0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d013      	beq.n	8007d9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a1a      	ldr	r2, [pc, #104]	; (8007de4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d00e      	beq.n	8007d9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a18      	ldr	r2, [pc, #96]	; (8007de8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d009      	beq.n	8007d9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a17      	ldr	r2, [pc, #92]	; (8007dec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d004      	beq.n	8007d9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a15      	ldr	r2, [pc, #84]	; (8007df0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d10c      	bne.n	8007db8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007da4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	68ba      	ldr	r2, [r7, #8]
 8007dac:	4313      	orrs	r3, r2
 8007dae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	68ba      	ldr	r2, [r7, #8]
 8007db6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007dc8:	2300      	movs	r3, #0
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3714      	adds	r7, #20
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd4:	4770      	bx	lr
 8007dd6:	bf00      	nop
 8007dd8:	40010000 	.word	0x40010000
 8007ddc:	40000400 	.word	0x40000400
 8007de0:	40000800 	.word	0x40000800
 8007de4:	40000c00 	.word	0x40000c00
 8007de8:	40010400 	.word	0x40010400
 8007dec:	40014000 	.word	0x40014000
 8007df0:	40001800 	.word	0x40001800

08007df4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b083      	sub	sp, #12
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007dfc:	bf00      	nop
 8007dfe:	370c      	adds	r7, #12
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr

08007e08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b083      	sub	sp, #12
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e10:	bf00      	nop
 8007e12:	370c      	adds	r7, #12
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr

08007e1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d101      	bne.n	8007e2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	e03f      	b.n	8007eae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d106      	bne.n	8007e48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f7fa f8fa 	bl	800203c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2224      	movs	r2, #36	; 0x24
 8007e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	68da      	ldr	r2, [r3, #12]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 fddf 	bl	8008a24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	691a      	ldr	r2, [r3, #16]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	695a      	ldr	r2, [r3, #20]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	68da      	ldr	r2, [r3, #12]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2220      	movs	r2, #32
 8007ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2220      	movs	r2, #32
 8007ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007eac:	2300      	movs	r3, #0
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3708      	adds	r7, #8
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}

08007eb6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007eb6:	b580      	push	{r7, lr}
 8007eb8:	b08a      	sub	sp, #40	; 0x28
 8007eba:	af02      	add	r7, sp, #8
 8007ebc:	60f8      	str	r0, [r7, #12]
 8007ebe:	60b9      	str	r1, [r7, #8]
 8007ec0:	603b      	str	r3, [r7, #0]
 8007ec2:	4613      	mov	r3, r2
 8007ec4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ed0:	b2db      	uxtb	r3, r3
 8007ed2:	2b20      	cmp	r3, #32
 8007ed4:	d17c      	bne.n	8007fd0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d002      	beq.n	8007ee2 <HAL_UART_Transmit+0x2c>
 8007edc:	88fb      	ldrh	r3, [r7, #6]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d101      	bne.n	8007ee6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e075      	b.n	8007fd2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	d101      	bne.n	8007ef4 <HAL_UART_Transmit+0x3e>
 8007ef0:	2302      	movs	r3, #2
 8007ef2:	e06e      	b.n	8007fd2 <HAL_UART_Transmit+0x11c>
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2200      	movs	r2, #0
 8007f00:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2221      	movs	r2, #33	; 0x21
 8007f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f0a:	f7fb fcb3 	bl	8003874 <HAL_GetTick>
 8007f0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	88fa      	ldrh	r2, [r7, #6]
 8007f14:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	88fa      	ldrh	r2, [r7, #6]
 8007f1a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	689b      	ldr	r3, [r3, #8]
 8007f20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f24:	d108      	bne.n	8007f38 <HAL_UART_Transmit+0x82>
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	691b      	ldr	r3, [r3, #16]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d104      	bne.n	8007f38 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	61bb      	str	r3, [r7, #24]
 8007f36:	e003      	b.n	8007f40 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2200      	movs	r2, #0
 8007f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007f48:	e02a      	b.n	8007fa0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	9300      	str	r3, [sp, #0]
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	2200      	movs	r2, #0
 8007f52:	2180      	movs	r1, #128	; 0x80
 8007f54:	68f8      	ldr	r0, [r7, #12]
 8007f56:	f000 fb1f 	bl	8008598 <UART_WaitOnFlagUntilTimeout>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d001      	beq.n	8007f64 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007f60:	2303      	movs	r3, #3
 8007f62:	e036      	b.n	8007fd2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007f64:	69fb      	ldr	r3, [r7, #28]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d10b      	bne.n	8007f82 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f6a:	69bb      	ldr	r3, [r7, #24]
 8007f6c:	881b      	ldrh	r3, [r3, #0]
 8007f6e:	461a      	mov	r2, r3
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f78:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007f7a:	69bb      	ldr	r3, [r7, #24]
 8007f7c:	3302      	adds	r3, #2
 8007f7e:	61bb      	str	r3, [r7, #24]
 8007f80:	e007      	b.n	8007f92 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007f82:	69fb      	ldr	r3, [r7, #28]
 8007f84:	781a      	ldrb	r2, [r3, #0]
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007f8c:	69fb      	ldr	r3, [r7, #28]
 8007f8e:	3301      	adds	r3, #1
 8007f90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	3b01      	subs	r3, #1
 8007f9a:	b29a      	uxth	r2, r3
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007fa4:	b29b      	uxth	r3, r3
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d1cf      	bne.n	8007f4a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	9300      	str	r3, [sp, #0]
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	2140      	movs	r1, #64	; 0x40
 8007fb4:	68f8      	ldr	r0, [r7, #12]
 8007fb6:	f000 faef 	bl	8008598 <UART_WaitOnFlagUntilTimeout>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d001      	beq.n	8007fc4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007fc0:	2303      	movs	r3, #3
 8007fc2:	e006      	b.n	8007fd2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2220      	movs	r2, #32
 8007fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	e000      	b.n	8007fd2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007fd0:	2302      	movs	r3, #2
  }
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3720      	adds	r7, #32
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}

08007fda <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007fda:	b580      	push	{r7, lr}
 8007fdc:	b084      	sub	sp, #16
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	60f8      	str	r0, [r7, #12]
 8007fe2:	60b9      	str	r1, [r7, #8]
 8007fe4:	4613      	mov	r3, r2
 8007fe6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	2b20      	cmp	r3, #32
 8007ff2:	d11d      	bne.n	8008030 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d002      	beq.n	8008000 <HAL_UART_Receive_IT+0x26>
 8007ffa:	88fb      	ldrh	r3, [r7, #6]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d101      	bne.n	8008004 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008000:	2301      	movs	r3, #1
 8008002:	e016      	b.n	8008032 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800800a:	2b01      	cmp	r3, #1
 800800c:	d101      	bne.n	8008012 <HAL_UART_Receive_IT+0x38>
 800800e:	2302      	movs	r3, #2
 8008010:	e00f      	b.n	8008032 <HAL_UART_Receive_IT+0x58>
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2201      	movs	r2, #1
 8008016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2200      	movs	r2, #0
 800801e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008020:	88fb      	ldrh	r3, [r7, #6]
 8008022:	461a      	mov	r2, r3
 8008024:	68b9      	ldr	r1, [r7, #8]
 8008026:	68f8      	ldr	r0, [r7, #12]
 8008028:	f000 fb24 	bl	8008674 <UART_Start_Receive_IT>
 800802c:	4603      	mov	r3, r0
 800802e:	e000      	b.n	8008032 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008030:	2302      	movs	r3, #2
  }
}
 8008032:	4618      	mov	r0, r3
 8008034:	3710      	adds	r7, #16
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
	...

0800803c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b0ba      	sub	sp, #232	; 0xe8
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	68db      	ldr	r3, [r3, #12]
 8008054:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	695b      	ldr	r3, [r3, #20]
 800805e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008062:	2300      	movs	r3, #0
 8008064:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008068:	2300      	movs	r3, #0
 800806a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800806e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008072:	f003 030f 	and.w	r3, r3, #15
 8008076:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800807a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800807e:	2b00      	cmp	r3, #0
 8008080:	d10f      	bne.n	80080a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008086:	f003 0320 	and.w	r3, r3, #32
 800808a:	2b00      	cmp	r3, #0
 800808c:	d009      	beq.n	80080a2 <HAL_UART_IRQHandler+0x66>
 800808e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008092:	f003 0320 	and.w	r3, r3, #32
 8008096:	2b00      	cmp	r3, #0
 8008098:	d003      	beq.n	80080a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 fc07 	bl	80088ae <UART_Receive_IT>
      return;
 80080a0:	e256      	b.n	8008550 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80080a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	f000 80de 	beq.w	8008268 <HAL_UART_IRQHandler+0x22c>
 80080ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080b0:	f003 0301 	and.w	r3, r3, #1
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d106      	bne.n	80080c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80080b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080bc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	f000 80d1 	beq.w	8008268 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80080c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080ca:	f003 0301 	and.w	r3, r3, #1
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d00b      	beq.n	80080ea <HAL_UART_IRQHandler+0xae>
 80080d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d005      	beq.n	80080ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e2:	f043 0201 	orr.w	r2, r3, #1
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80080ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080ee:	f003 0304 	and.w	r3, r3, #4
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d00b      	beq.n	800810e <HAL_UART_IRQHandler+0xd2>
 80080f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080fa:	f003 0301 	and.w	r3, r3, #1
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d005      	beq.n	800810e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008106:	f043 0202 	orr.w	r2, r3, #2
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800810e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008112:	f003 0302 	and.w	r3, r3, #2
 8008116:	2b00      	cmp	r3, #0
 8008118:	d00b      	beq.n	8008132 <HAL_UART_IRQHandler+0xf6>
 800811a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800811e:	f003 0301 	and.w	r3, r3, #1
 8008122:	2b00      	cmp	r3, #0
 8008124:	d005      	beq.n	8008132 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800812a:	f043 0204 	orr.w	r2, r3, #4
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008136:	f003 0308 	and.w	r3, r3, #8
 800813a:	2b00      	cmp	r3, #0
 800813c:	d011      	beq.n	8008162 <HAL_UART_IRQHandler+0x126>
 800813e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008142:	f003 0320 	and.w	r3, r3, #32
 8008146:	2b00      	cmp	r3, #0
 8008148:	d105      	bne.n	8008156 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800814a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800814e:	f003 0301 	and.w	r3, r3, #1
 8008152:	2b00      	cmp	r3, #0
 8008154:	d005      	beq.n	8008162 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800815a:	f043 0208 	orr.w	r2, r3, #8
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008166:	2b00      	cmp	r3, #0
 8008168:	f000 81ed 	beq.w	8008546 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800816c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008170:	f003 0320 	and.w	r3, r3, #32
 8008174:	2b00      	cmp	r3, #0
 8008176:	d008      	beq.n	800818a <HAL_UART_IRQHandler+0x14e>
 8008178:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800817c:	f003 0320 	and.w	r3, r3, #32
 8008180:	2b00      	cmp	r3, #0
 8008182:	d002      	beq.n	800818a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 fb92 	bl	80088ae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	695b      	ldr	r3, [r3, #20]
 8008190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008194:	2b40      	cmp	r3, #64	; 0x40
 8008196:	bf0c      	ite	eq
 8008198:	2301      	moveq	r3, #1
 800819a:	2300      	movne	r3, #0
 800819c:	b2db      	uxtb	r3, r3
 800819e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081a6:	f003 0308 	and.w	r3, r3, #8
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d103      	bne.n	80081b6 <HAL_UART_IRQHandler+0x17a>
 80081ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d04f      	beq.n	8008256 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 fa9a 	bl	80086f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	695b      	ldr	r3, [r3, #20]
 80081c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081c6:	2b40      	cmp	r3, #64	; 0x40
 80081c8:	d141      	bne.n	800824e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	3314      	adds	r3, #20
 80081d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80081d8:	e853 3f00 	ldrex	r3, [r3]
 80081dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80081e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80081e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	3314      	adds	r3, #20
 80081f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80081f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80081fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008202:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008206:	e841 2300 	strex	r3, r2, [r1]
 800820a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800820e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008212:	2b00      	cmp	r3, #0
 8008214:	d1d9      	bne.n	80081ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800821a:	2b00      	cmp	r3, #0
 800821c:	d013      	beq.n	8008246 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008222:	4a7d      	ldr	r2, [pc, #500]	; (8008418 <HAL_UART_IRQHandler+0x3dc>)
 8008224:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800822a:	4618      	mov	r0, r3
 800822c:	f7fb fcd3 	bl	8003bd6 <HAL_DMA_Abort_IT>
 8008230:	4603      	mov	r3, r0
 8008232:	2b00      	cmp	r3, #0
 8008234:	d016      	beq.n	8008264 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800823a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008240:	4610      	mov	r0, r2
 8008242:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008244:	e00e      	b.n	8008264 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 f990 	bl	800856c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800824c:	e00a      	b.n	8008264 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f000 f98c 	bl	800856c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008254:	e006      	b.n	8008264 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 f988 	bl	800856c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2200      	movs	r2, #0
 8008260:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008262:	e170      	b.n	8008546 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008264:	bf00      	nop
    return;
 8008266:	e16e      	b.n	8008546 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800826c:	2b01      	cmp	r3, #1
 800826e:	f040 814a 	bne.w	8008506 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008276:	f003 0310 	and.w	r3, r3, #16
 800827a:	2b00      	cmp	r3, #0
 800827c:	f000 8143 	beq.w	8008506 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008284:	f003 0310 	and.w	r3, r3, #16
 8008288:	2b00      	cmp	r3, #0
 800828a:	f000 813c 	beq.w	8008506 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800828e:	2300      	movs	r3, #0
 8008290:	60bb      	str	r3, [r7, #8]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	60bb      	str	r3, [r7, #8]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	60bb      	str	r3, [r7, #8]
 80082a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	695b      	ldr	r3, [r3, #20]
 80082aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082ae:	2b40      	cmp	r3, #64	; 0x40
 80082b0:	f040 80b4 	bne.w	800841c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80082c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	f000 8140 	beq.w	800854a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80082ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80082d2:	429a      	cmp	r2, r3
 80082d4:	f080 8139 	bcs.w	800854a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80082de:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082e4:	69db      	ldr	r3, [r3, #28]
 80082e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082ea:	f000 8088 	beq.w	80083fe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	330c      	adds	r3, #12
 80082f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80082fc:	e853 3f00 	ldrex	r3, [r3]
 8008300:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008304:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008308:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800830c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	330c      	adds	r3, #12
 8008316:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800831a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800831e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008322:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008326:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800832a:	e841 2300 	strex	r3, r2, [r1]
 800832e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008332:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008336:	2b00      	cmp	r3, #0
 8008338:	d1d9      	bne.n	80082ee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	3314      	adds	r3, #20
 8008340:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008342:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008344:	e853 3f00 	ldrex	r3, [r3]
 8008348:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800834a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800834c:	f023 0301 	bic.w	r3, r3, #1
 8008350:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	3314      	adds	r3, #20
 800835a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800835e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008362:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008364:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008366:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800836a:	e841 2300 	strex	r3, r2, [r1]
 800836e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008370:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008372:	2b00      	cmp	r3, #0
 8008374:	d1e1      	bne.n	800833a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	3314      	adds	r3, #20
 800837c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800837e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008380:	e853 3f00 	ldrex	r3, [r3]
 8008384:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008386:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008388:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800838c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	3314      	adds	r3, #20
 8008396:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800839a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800839c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800839e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80083a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80083a2:	e841 2300 	strex	r3, r2, [r1]
 80083a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80083a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d1e3      	bne.n	8008376 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2220      	movs	r2, #32
 80083b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2200      	movs	r2, #0
 80083ba:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	330c      	adds	r3, #12
 80083c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083c6:	e853 3f00 	ldrex	r3, [r3]
 80083ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80083cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083ce:	f023 0310 	bic.w	r3, r3, #16
 80083d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	330c      	adds	r3, #12
 80083dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80083e0:	65ba      	str	r2, [r7, #88]	; 0x58
 80083e2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80083e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80083e8:	e841 2300 	strex	r3, r2, [r1]
 80083ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80083ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d1e3      	bne.n	80083bc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083f8:	4618      	mov	r0, r3
 80083fa:	f7fb fb7c 	bl	8003af6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008406:	b29b      	uxth	r3, r3
 8008408:	1ad3      	subs	r3, r2, r3
 800840a:	b29b      	uxth	r3, r3
 800840c:	4619      	mov	r1, r3
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 f8b6 	bl	8008580 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008414:	e099      	b.n	800854a <HAL_UART_IRQHandler+0x50e>
 8008416:	bf00      	nop
 8008418:	080087b7 	.word	0x080087b7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008424:	b29b      	uxth	r3, r3
 8008426:	1ad3      	subs	r3, r2, r3
 8008428:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008430:	b29b      	uxth	r3, r3
 8008432:	2b00      	cmp	r3, #0
 8008434:	f000 808b 	beq.w	800854e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008438:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800843c:	2b00      	cmp	r3, #0
 800843e:	f000 8086 	beq.w	800854e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	330c      	adds	r3, #12
 8008448:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800844a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800844c:	e853 3f00 	ldrex	r3, [r3]
 8008450:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008454:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008458:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	330c      	adds	r3, #12
 8008462:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008466:	647a      	str	r2, [r7, #68]	; 0x44
 8008468:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800846a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800846c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800846e:	e841 2300 	strex	r3, r2, [r1]
 8008472:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008476:	2b00      	cmp	r3, #0
 8008478:	d1e3      	bne.n	8008442 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	3314      	adds	r3, #20
 8008480:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008484:	e853 3f00 	ldrex	r3, [r3]
 8008488:	623b      	str	r3, [r7, #32]
   return(result);
 800848a:	6a3b      	ldr	r3, [r7, #32]
 800848c:	f023 0301 	bic.w	r3, r3, #1
 8008490:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	3314      	adds	r3, #20
 800849a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800849e:	633a      	str	r2, [r7, #48]	; 0x30
 80084a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084a6:	e841 2300 	strex	r3, r2, [r1]
 80084aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80084ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d1e3      	bne.n	800847a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2220      	movs	r2, #32
 80084b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2200      	movs	r2, #0
 80084be:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	330c      	adds	r3, #12
 80084c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	e853 3f00 	ldrex	r3, [r3]
 80084ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f023 0310 	bic.w	r3, r3, #16
 80084d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	330c      	adds	r3, #12
 80084e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80084e4:	61fa      	str	r2, [r7, #28]
 80084e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e8:	69b9      	ldr	r1, [r7, #24]
 80084ea:	69fa      	ldr	r2, [r7, #28]
 80084ec:	e841 2300 	strex	r3, r2, [r1]
 80084f0:	617b      	str	r3, [r7, #20]
   return(result);
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d1e3      	bne.n	80084c0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80084f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80084fc:	4619      	mov	r1, r3
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 f83e 	bl	8008580 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008504:	e023      	b.n	800854e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800850a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800850e:	2b00      	cmp	r3, #0
 8008510:	d009      	beq.n	8008526 <HAL_UART_IRQHandler+0x4ea>
 8008512:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800851a:	2b00      	cmp	r3, #0
 800851c:	d003      	beq.n	8008526 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 f95d 	bl	80087de <UART_Transmit_IT>
    return;
 8008524:	e014      	b.n	8008550 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800852a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800852e:	2b00      	cmp	r3, #0
 8008530:	d00e      	beq.n	8008550 <HAL_UART_IRQHandler+0x514>
 8008532:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800853a:	2b00      	cmp	r3, #0
 800853c:	d008      	beq.n	8008550 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 f99d 	bl	800887e <UART_EndTransmit_IT>
    return;
 8008544:	e004      	b.n	8008550 <HAL_UART_IRQHandler+0x514>
    return;
 8008546:	bf00      	nop
 8008548:	e002      	b.n	8008550 <HAL_UART_IRQHandler+0x514>
      return;
 800854a:	bf00      	nop
 800854c:	e000      	b.n	8008550 <HAL_UART_IRQHandler+0x514>
      return;
 800854e:	bf00      	nop
  }
}
 8008550:	37e8      	adds	r7, #232	; 0xe8
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}
 8008556:	bf00      	nop

08008558 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008560:	bf00      	nop
 8008562:	370c      	adds	r7, #12
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr

0800856c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008574:	bf00      	nop
 8008576:	370c      	adds	r7, #12
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr

08008580 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008580:	b480      	push	{r7}
 8008582:	b083      	sub	sp, #12
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	460b      	mov	r3, r1
 800858a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800858c:	bf00      	nop
 800858e:	370c      	adds	r7, #12
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr

08008598 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b090      	sub	sp, #64	; 0x40
 800859c:	af00      	add	r7, sp, #0
 800859e:	60f8      	str	r0, [r7, #12]
 80085a0:	60b9      	str	r1, [r7, #8]
 80085a2:	603b      	str	r3, [r7, #0]
 80085a4:	4613      	mov	r3, r2
 80085a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085a8:	e050      	b.n	800864c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085b0:	d04c      	beq.n	800864c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80085b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d007      	beq.n	80085c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80085b8:	f7fb f95c 	bl	8003874 <HAL_GetTick>
 80085bc:	4602      	mov	r2, r0
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	1ad3      	subs	r3, r2, r3
 80085c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d241      	bcs.n	800864c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	330c      	adds	r3, #12
 80085ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d2:	e853 3f00 	ldrex	r3, [r3]
 80085d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80085de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	330c      	adds	r3, #12
 80085e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80085e8:	637a      	str	r2, [r7, #52]	; 0x34
 80085ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80085ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80085f0:	e841 2300 	strex	r3, r2, [r1]
 80085f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80085f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d1e5      	bne.n	80085c8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	3314      	adds	r3, #20
 8008602:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	e853 3f00 	ldrex	r3, [r3]
 800860a:	613b      	str	r3, [r7, #16]
   return(result);
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	f023 0301 	bic.w	r3, r3, #1
 8008612:	63bb      	str	r3, [r7, #56]	; 0x38
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	3314      	adds	r3, #20
 800861a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800861c:	623a      	str	r2, [r7, #32]
 800861e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008620:	69f9      	ldr	r1, [r7, #28]
 8008622:	6a3a      	ldr	r2, [r7, #32]
 8008624:	e841 2300 	strex	r3, r2, [r1]
 8008628:	61bb      	str	r3, [r7, #24]
   return(result);
 800862a:	69bb      	ldr	r3, [r7, #24]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d1e5      	bne.n	80085fc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2220      	movs	r2, #32
 8008634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2220      	movs	r2, #32
 800863c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2200      	movs	r2, #0
 8008644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008648:	2303      	movs	r3, #3
 800864a:	e00f      	b.n	800866c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	4013      	ands	r3, r2
 8008656:	68ba      	ldr	r2, [r7, #8]
 8008658:	429a      	cmp	r2, r3
 800865a:	bf0c      	ite	eq
 800865c:	2301      	moveq	r3, #1
 800865e:	2300      	movne	r3, #0
 8008660:	b2db      	uxtb	r3, r3
 8008662:	461a      	mov	r2, r3
 8008664:	79fb      	ldrb	r3, [r7, #7]
 8008666:	429a      	cmp	r2, r3
 8008668:	d09f      	beq.n	80085aa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800866a:	2300      	movs	r3, #0
}
 800866c:	4618      	mov	r0, r3
 800866e:	3740      	adds	r7, #64	; 0x40
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008674:	b480      	push	{r7}
 8008676:	b085      	sub	sp, #20
 8008678:	af00      	add	r7, sp, #0
 800867a:	60f8      	str	r0, [r7, #12]
 800867c:	60b9      	str	r1, [r7, #8]
 800867e:	4613      	mov	r3, r2
 8008680:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	68ba      	ldr	r2, [r7, #8]
 8008686:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	88fa      	ldrh	r2, [r7, #6]
 800868c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	88fa      	ldrh	r2, [r7, #6]
 8008692:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2200      	movs	r2, #0
 8008698:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2222      	movs	r2, #34	; 0x22
 800869e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	2200      	movs	r2, #0
 80086a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	691b      	ldr	r3, [r3, #16]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d007      	beq.n	80086c2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	68da      	ldr	r2, [r3, #12]
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80086c0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	695a      	ldr	r2, [r3, #20]
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f042 0201 	orr.w	r2, r2, #1
 80086d0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	68da      	ldr	r2, [r3, #12]
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f042 0220 	orr.w	r2, r2, #32
 80086e0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80086e2:	2300      	movs	r3, #0
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3714      	adds	r7, #20
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr

080086f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b095      	sub	sp, #84	; 0x54
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	330c      	adds	r3, #12
 80086fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008702:	e853 3f00 	ldrex	r3, [r3]
 8008706:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800870a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800870e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	330c      	adds	r3, #12
 8008716:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008718:	643a      	str	r2, [r7, #64]	; 0x40
 800871a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800871c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800871e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008720:	e841 2300 	strex	r3, r2, [r1]
 8008724:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008728:	2b00      	cmp	r3, #0
 800872a:	d1e5      	bne.n	80086f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	3314      	adds	r3, #20
 8008732:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008734:	6a3b      	ldr	r3, [r7, #32]
 8008736:	e853 3f00 	ldrex	r3, [r3]
 800873a:	61fb      	str	r3, [r7, #28]
   return(result);
 800873c:	69fb      	ldr	r3, [r7, #28]
 800873e:	f023 0301 	bic.w	r3, r3, #1
 8008742:	64bb      	str	r3, [r7, #72]	; 0x48
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	3314      	adds	r3, #20
 800874a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800874c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800874e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008750:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008752:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008754:	e841 2300 	strex	r3, r2, [r1]
 8008758:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800875a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800875c:	2b00      	cmp	r3, #0
 800875e:	d1e5      	bne.n	800872c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008764:	2b01      	cmp	r3, #1
 8008766:	d119      	bne.n	800879c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	330c      	adds	r3, #12
 800876e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	e853 3f00 	ldrex	r3, [r3]
 8008776:	60bb      	str	r3, [r7, #8]
   return(result);
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	f023 0310 	bic.w	r3, r3, #16
 800877e:	647b      	str	r3, [r7, #68]	; 0x44
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	330c      	adds	r3, #12
 8008786:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008788:	61ba      	str	r2, [r7, #24]
 800878a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800878c:	6979      	ldr	r1, [r7, #20]
 800878e:	69ba      	ldr	r2, [r7, #24]
 8008790:	e841 2300 	strex	r3, r2, [r1]
 8008794:	613b      	str	r3, [r7, #16]
   return(result);
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d1e5      	bne.n	8008768 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2220      	movs	r2, #32
 80087a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2200      	movs	r2, #0
 80087a8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80087aa:	bf00      	nop
 80087ac:	3754      	adds	r7, #84	; 0x54
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr

080087b6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80087b6:	b580      	push	{r7, lr}
 80087b8:	b084      	sub	sp, #16
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2200      	movs	r2, #0
 80087c8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2200      	movs	r2, #0
 80087ce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087d0:	68f8      	ldr	r0, [r7, #12]
 80087d2:	f7ff fecb 	bl	800856c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087d6:	bf00      	nop
 80087d8:	3710      	adds	r7, #16
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}

080087de <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80087de:	b480      	push	{r7}
 80087e0:	b085      	sub	sp, #20
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	2b21      	cmp	r3, #33	; 0x21
 80087f0:	d13e      	bne.n	8008870 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	689b      	ldr	r3, [r3, #8]
 80087f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087fa:	d114      	bne.n	8008826 <UART_Transmit_IT+0x48>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	691b      	ldr	r3, [r3, #16]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d110      	bne.n	8008826 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6a1b      	ldr	r3, [r3, #32]
 8008808:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	881b      	ldrh	r3, [r3, #0]
 800880e:	461a      	mov	r2, r3
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008818:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6a1b      	ldr	r3, [r3, #32]
 800881e:	1c9a      	adds	r2, r3, #2
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	621a      	str	r2, [r3, #32]
 8008824:	e008      	b.n	8008838 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6a1b      	ldr	r3, [r3, #32]
 800882a:	1c59      	adds	r1, r3, #1
 800882c:	687a      	ldr	r2, [r7, #4]
 800882e:	6211      	str	r1, [r2, #32]
 8008830:	781a      	ldrb	r2, [r3, #0]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800883c:	b29b      	uxth	r3, r3
 800883e:	3b01      	subs	r3, #1
 8008840:	b29b      	uxth	r3, r3
 8008842:	687a      	ldr	r2, [r7, #4]
 8008844:	4619      	mov	r1, r3
 8008846:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008848:	2b00      	cmp	r3, #0
 800884a:	d10f      	bne.n	800886c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	68da      	ldr	r2, [r3, #12]
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800885a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	68da      	ldr	r2, [r3, #12]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800886a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800886c:	2300      	movs	r3, #0
 800886e:	e000      	b.n	8008872 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008870:	2302      	movs	r3, #2
  }
}
 8008872:	4618      	mov	r0, r3
 8008874:	3714      	adds	r7, #20
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr

0800887e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800887e:	b580      	push	{r7, lr}
 8008880:	b082      	sub	sp, #8
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	68da      	ldr	r2, [r3, #12]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008894:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2220      	movs	r2, #32
 800889a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f7ff fe5a 	bl	8008558 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80088a4:	2300      	movs	r3, #0
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3708      	adds	r7, #8
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}

080088ae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b08c      	sub	sp, #48	; 0x30
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	2b22      	cmp	r3, #34	; 0x22
 80088c0:	f040 80ab 	bne.w	8008a1a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	689b      	ldr	r3, [r3, #8]
 80088c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088cc:	d117      	bne.n	80088fe <UART_Receive_IT+0x50>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	691b      	ldr	r3, [r3, #16]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d113      	bne.n	80088fe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80088d6:	2300      	movs	r3, #0
 80088d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088de:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	b29b      	uxth	r3, r3
 80088e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088ec:	b29a      	uxth	r2, r3
 80088ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088f6:	1c9a      	adds	r2, r3, #2
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	629a      	str	r2, [r3, #40]	; 0x28
 80088fc:	e026      	b.n	800894c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008902:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008904:	2300      	movs	r3, #0
 8008906:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	689b      	ldr	r3, [r3, #8]
 800890c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008910:	d007      	beq.n	8008922 <UART_Receive_IT+0x74>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	689b      	ldr	r3, [r3, #8]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d10a      	bne.n	8008930 <UART_Receive_IT+0x82>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	691b      	ldr	r3, [r3, #16]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d106      	bne.n	8008930 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	b2da      	uxtb	r2, r3
 800892a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800892c:	701a      	strb	r2, [r3, #0]
 800892e:	e008      	b.n	8008942 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	685b      	ldr	r3, [r3, #4]
 8008936:	b2db      	uxtb	r3, r3
 8008938:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800893c:	b2da      	uxtb	r2, r3
 800893e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008940:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008946:	1c5a      	adds	r2, r3, #1
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008950:	b29b      	uxth	r3, r3
 8008952:	3b01      	subs	r3, #1
 8008954:	b29b      	uxth	r3, r3
 8008956:	687a      	ldr	r2, [r7, #4]
 8008958:	4619      	mov	r1, r3
 800895a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800895c:	2b00      	cmp	r3, #0
 800895e:	d15a      	bne.n	8008a16 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	68da      	ldr	r2, [r3, #12]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f022 0220 	bic.w	r2, r2, #32
 800896e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	68da      	ldr	r2, [r3, #12]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800897e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	695a      	ldr	r2, [r3, #20]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f022 0201 	bic.w	r2, r2, #1
 800898e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2220      	movs	r2, #32
 8008994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800899c:	2b01      	cmp	r3, #1
 800899e:	d135      	bne.n	8008a0c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2200      	movs	r2, #0
 80089a4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	330c      	adds	r3, #12
 80089ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	e853 3f00 	ldrex	r3, [r3]
 80089b4:	613b      	str	r3, [r7, #16]
   return(result);
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	f023 0310 	bic.w	r3, r3, #16
 80089bc:	627b      	str	r3, [r7, #36]	; 0x24
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	330c      	adds	r3, #12
 80089c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089c6:	623a      	str	r2, [r7, #32]
 80089c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ca:	69f9      	ldr	r1, [r7, #28]
 80089cc:	6a3a      	ldr	r2, [r7, #32]
 80089ce:	e841 2300 	strex	r3, r2, [r1]
 80089d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80089d4:	69bb      	ldr	r3, [r7, #24]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d1e5      	bne.n	80089a6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f003 0310 	and.w	r3, r3, #16
 80089e4:	2b10      	cmp	r3, #16
 80089e6:	d10a      	bne.n	80089fe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80089e8:	2300      	movs	r3, #0
 80089ea:	60fb      	str	r3, [r7, #12]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	60fb      	str	r3, [r7, #12]
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	60fb      	str	r3, [r7, #12]
 80089fc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008a02:	4619      	mov	r1, r3
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f7ff fdbb 	bl	8008580 <HAL_UARTEx_RxEventCallback>
 8008a0a:	e002      	b.n	8008a12 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f7f9 fddb 	bl	80025c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008a12:	2300      	movs	r3, #0
 8008a14:	e002      	b.n	8008a1c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008a16:	2300      	movs	r3, #0
 8008a18:	e000      	b.n	8008a1c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008a1a:	2302      	movs	r3, #2
  }
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3730      	adds	r7, #48	; 0x30
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}

08008a24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a28:	b0c0      	sub	sp, #256	; 0x100
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	691b      	ldr	r3, [r3, #16]
 8008a38:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a40:	68d9      	ldr	r1, [r3, #12]
 8008a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	ea40 0301 	orr.w	r3, r0, r1
 8008a4c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a52:	689a      	ldr	r2, [r3, #8]
 8008a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a58:	691b      	ldr	r3, [r3, #16]
 8008a5a:	431a      	orrs	r2, r3
 8008a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a60:	695b      	ldr	r3, [r3, #20]
 8008a62:	431a      	orrs	r2, r3
 8008a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a68:	69db      	ldr	r3, [r3, #28]
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	68db      	ldr	r3, [r3, #12]
 8008a78:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008a7c:	f021 010c 	bic.w	r1, r1, #12
 8008a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a84:	681a      	ldr	r2, [r3, #0]
 8008a86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008a8a:	430b      	orrs	r3, r1
 8008a8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	695b      	ldr	r3, [r3, #20]
 8008a96:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a9e:	6999      	ldr	r1, [r3, #24]
 8008aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008aa4:	681a      	ldr	r2, [r3, #0]
 8008aa6:	ea40 0301 	orr.w	r3, r0, r1
 8008aaa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ab0:	681a      	ldr	r2, [r3, #0]
 8008ab2:	4b8f      	ldr	r3, [pc, #572]	; (8008cf0 <UART_SetConfig+0x2cc>)
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d005      	beq.n	8008ac4 <UART_SetConfig+0xa0>
 8008ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008abc:	681a      	ldr	r2, [r3, #0]
 8008abe:	4b8d      	ldr	r3, [pc, #564]	; (8008cf4 <UART_SetConfig+0x2d0>)
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d104      	bne.n	8008ace <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008ac4:	f7fd f818 	bl	8005af8 <HAL_RCC_GetPCLK2Freq>
 8008ac8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008acc:	e003      	b.n	8008ad6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008ace:	f7fc ffff 	bl	8005ad0 <HAL_RCC_GetPCLK1Freq>
 8008ad2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ada:	69db      	ldr	r3, [r3, #28]
 8008adc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ae0:	f040 810c 	bne.w	8008cfc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008ae4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ae8:	2200      	movs	r2, #0
 8008aea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008aee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008af2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008af6:	4622      	mov	r2, r4
 8008af8:	462b      	mov	r3, r5
 8008afa:	1891      	adds	r1, r2, r2
 8008afc:	65b9      	str	r1, [r7, #88]	; 0x58
 8008afe:	415b      	adcs	r3, r3
 8008b00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b02:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008b06:	4621      	mov	r1, r4
 8008b08:	eb12 0801 	adds.w	r8, r2, r1
 8008b0c:	4629      	mov	r1, r5
 8008b0e:	eb43 0901 	adc.w	r9, r3, r1
 8008b12:	f04f 0200 	mov.w	r2, #0
 8008b16:	f04f 0300 	mov.w	r3, #0
 8008b1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008b1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008b22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008b26:	4690      	mov	r8, r2
 8008b28:	4699      	mov	r9, r3
 8008b2a:	4623      	mov	r3, r4
 8008b2c:	eb18 0303 	adds.w	r3, r8, r3
 8008b30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008b34:	462b      	mov	r3, r5
 8008b36:	eb49 0303 	adc.w	r3, r9, r3
 8008b3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b42:	685b      	ldr	r3, [r3, #4]
 8008b44:	2200      	movs	r2, #0
 8008b46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008b4a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008b4e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008b52:	460b      	mov	r3, r1
 8008b54:	18db      	adds	r3, r3, r3
 8008b56:	653b      	str	r3, [r7, #80]	; 0x50
 8008b58:	4613      	mov	r3, r2
 8008b5a:	eb42 0303 	adc.w	r3, r2, r3
 8008b5e:	657b      	str	r3, [r7, #84]	; 0x54
 8008b60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008b64:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008b68:	f7f7 fb92 	bl	8000290 <__aeabi_uldivmod>
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	460b      	mov	r3, r1
 8008b70:	4b61      	ldr	r3, [pc, #388]	; (8008cf8 <UART_SetConfig+0x2d4>)
 8008b72:	fba3 2302 	umull	r2, r3, r3, r2
 8008b76:	095b      	lsrs	r3, r3, #5
 8008b78:	011c      	lsls	r4, r3, #4
 8008b7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b7e:	2200      	movs	r2, #0
 8008b80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008b84:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008b88:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008b8c:	4642      	mov	r2, r8
 8008b8e:	464b      	mov	r3, r9
 8008b90:	1891      	adds	r1, r2, r2
 8008b92:	64b9      	str	r1, [r7, #72]	; 0x48
 8008b94:	415b      	adcs	r3, r3
 8008b96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b98:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008b9c:	4641      	mov	r1, r8
 8008b9e:	eb12 0a01 	adds.w	sl, r2, r1
 8008ba2:	4649      	mov	r1, r9
 8008ba4:	eb43 0b01 	adc.w	fp, r3, r1
 8008ba8:	f04f 0200 	mov.w	r2, #0
 8008bac:	f04f 0300 	mov.w	r3, #0
 8008bb0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008bb4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008bb8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008bbc:	4692      	mov	sl, r2
 8008bbe:	469b      	mov	fp, r3
 8008bc0:	4643      	mov	r3, r8
 8008bc2:	eb1a 0303 	adds.w	r3, sl, r3
 8008bc6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008bca:	464b      	mov	r3, r9
 8008bcc:	eb4b 0303 	adc.w	r3, fp, r3
 8008bd0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008be0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008be4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008be8:	460b      	mov	r3, r1
 8008bea:	18db      	adds	r3, r3, r3
 8008bec:	643b      	str	r3, [r7, #64]	; 0x40
 8008bee:	4613      	mov	r3, r2
 8008bf0:	eb42 0303 	adc.w	r3, r2, r3
 8008bf4:	647b      	str	r3, [r7, #68]	; 0x44
 8008bf6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008bfa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008bfe:	f7f7 fb47 	bl	8000290 <__aeabi_uldivmod>
 8008c02:	4602      	mov	r2, r0
 8008c04:	460b      	mov	r3, r1
 8008c06:	4611      	mov	r1, r2
 8008c08:	4b3b      	ldr	r3, [pc, #236]	; (8008cf8 <UART_SetConfig+0x2d4>)
 8008c0a:	fba3 2301 	umull	r2, r3, r3, r1
 8008c0e:	095b      	lsrs	r3, r3, #5
 8008c10:	2264      	movs	r2, #100	; 0x64
 8008c12:	fb02 f303 	mul.w	r3, r2, r3
 8008c16:	1acb      	subs	r3, r1, r3
 8008c18:	00db      	lsls	r3, r3, #3
 8008c1a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008c1e:	4b36      	ldr	r3, [pc, #216]	; (8008cf8 <UART_SetConfig+0x2d4>)
 8008c20:	fba3 2302 	umull	r2, r3, r3, r2
 8008c24:	095b      	lsrs	r3, r3, #5
 8008c26:	005b      	lsls	r3, r3, #1
 8008c28:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008c2c:	441c      	add	r4, r3
 8008c2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c32:	2200      	movs	r2, #0
 8008c34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008c38:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008c3c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008c40:	4642      	mov	r2, r8
 8008c42:	464b      	mov	r3, r9
 8008c44:	1891      	adds	r1, r2, r2
 8008c46:	63b9      	str	r1, [r7, #56]	; 0x38
 8008c48:	415b      	adcs	r3, r3
 8008c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008c50:	4641      	mov	r1, r8
 8008c52:	1851      	adds	r1, r2, r1
 8008c54:	6339      	str	r1, [r7, #48]	; 0x30
 8008c56:	4649      	mov	r1, r9
 8008c58:	414b      	adcs	r3, r1
 8008c5a:	637b      	str	r3, [r7, #52]	; 0x34
 8008c5c:	f04f 0200 	mov.w	r2, #0
 8008c60:	f04f 0300 	mov.w	r3, #0
 8008c64:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008c68:	4659      	mov	r1, fp
 8008c6a:	00cb      	lsls	r3, r1, #3
 8008c6c:	4651      	mov	r1, sl
 8008c6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008c72:	4651      	mov	r1, sl
 8008c74:	00ca      	lsls	r2, r1, #3
 8008c76:	4610      	mov	r0, r2
 8008c78:	4619      	mov	r1, r3
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	4642      	mov	r2, r8
 8008c7e:	189b      	adds	r3, r3, r2
 8008c80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008c84:	464b      	mov	r3, r9
 8008c86:	460a      	mov	r2, r1
 8008c88:	eb42 0303 	adc.w	r3, r2, r3
 8008c8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	2200      	movs	r2, #0
 8008c98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008c9c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008ca0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008ca4:	460b      	mov	r3, r1
 8008ca6:	18db      	adds	r3, r3, r3
 8008ca8:	62bb      	str	r3, [r7, #40]	; 0x28
 8008caa:	4613      	mov	r3, r2
 8008cac:	eb42 0303 	adc.w	r3, r2, r3
 8008cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008cb2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008cb6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008cba:	f7f7 fae9 	bl	8000290 <__aeabi_uldivmod>
 8008cbe:	4602      	mov	r2, r0
 8008cc0:	460b      	mov	r3, r1
 8008cc2:	4b0d      	ldr	r3, [pc, #52]	; (8008cf8 <UART_SetConfig+0x2d4>)
 8008cc4:	fba3 1302 	umull	r1, r3, r3, r2
 8008cc8:	095b      	lsrs	r3, r3, #5
 8008cca:	2164      	movs	r1, #100	; 0x64
 8008ccc:	fb01 f303 	mul.w	r3, r1, r3
 8008cd0:	1ad3      	subs	r3, r2, r3
 8008cd2:	00db      	lsls	r3, r3, #3
 8008cd4:	3332      	adds	r3, #50	; 0x32
 8008cd6:	4a08      	ldr	r2, [pc, #32]	; (8008cf8 <UART_SetConfig+0x2d4>)
 8008cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8008cdc:	095b      	lsrs	r3, r3, #5
 8008cde:	f003 0207 	and.w	r2, r3, #7
 8008ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4422      	add	r2, r4
 8008cea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008cec:	e105      	b.n	8008efa <UART_SetConfig+0x4d6>
 8008cee:	bf00      	nop
 8008cf0:	40011000 	.word	0x40011000
 8008cf4:	40011400 	.word	0x40011400
 8008cf8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008cfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d00:	2200      	movs	r2, #0
 8008d02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008d06:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008d0a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008d0e:	4642      	mov	r2, r8
 8008d10:	464b      	mov	r3, r9
 8008d12:	1891      	adds	r1, r2, r2
 8008d14:	6239      	str	r1, [r7, #32]
 8008d16:	415b      	adcs	r3, r3
 8008d18:	627b      	str	r3, [r7, #36]	; 0x24
 8008d1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008d1e:	4641      	mov	r1, r8
 8008d20:	1854      	adds	r4, r2, r1
 8008d22:	4649      	mov	r1, r9
 8008d24:	eb43 0501 	adc.w	r5, r3, r1
 8008d28:	f04f 0200 	mov.w	r2, #0
 8008d2c:	f04f 0300 	mov.w	r3, #0
 8008d30:	00eb      	lsls	r3, r5, #3
 8008d32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008d36:	00e2      	lsls	r2, r4, #3
 8008d38:	4614      	mov	r4, r2
 8008d3a:	461d      	mov	r5, r3
 8008d3c:	4643      	mov	r3, r8
 8008d3e:	18e3      	adds	r3, r4, r3
 8008d40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008d44:	464b      	mov	r3, r9
 8008d46:	eb45 0303 	adc.w	r3, r5, r3
 8008d4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	2200      	movs	r2, #0
 8008d56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008d5a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008d5e:	f04f 0200 	mov.w	r2, #0
 8008d62:	f04f 0300 	mov.w	r3, #0
 8008d66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008d6a:	4629      	mov	r1, r5
 8008d6c:	008b      	lsls	r3, r1, #2
 8008d6e:	4621      	mov	r1, r4
 8008d70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008d74:	4621      	mov	r1, r4
 8008d76:	008a      	lsls	r2, r1, #2
 8008d78:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008d7c:	f7f7 fa88 	bl	8000290 <__aeabi_uldivmod>
 8008d80:	4602      	mov	r2, r0
 8008d82:	460b      	mov	r3, r1
 8008d84:	4b60      	ldr	r3, [pc, #384]	; (8008f08 <UART_SetConfig+0x4e4>)
 8008d86:	fba3 2302 	umull	r2, r3, r3, r2
 8008d8a:	095b      	lsrs	r3, r3, #5
 8008d8c:	011c      	lsls	r4, r3, #4
 8008d8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d92:	2200      	movs	r2, #0
 8008d94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008d98:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008d9c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008da0:	4642      	mov	r2, r8
 8008da2:	464b      	mov	r3, r9
 8008da4:	1891      	adds	r1, r2, r2
 8008da6:	61b9      	str	r1, [r7, #24]
 8008da8:	415b      	adcs	r3, r3
 8008daa:	61fb      	str	r3, [r7, #28]
 8008dac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008db0:	4641      	mov	r1, r8
 8008db2:	1851      	adds	r1, r2, r1
 8008db4:	6139      	str	r1, [r7, #16]
 8008db6:	4649      	mov	r1, r9
 8008db8:	414b      	adcs	r3, r1
 8008dba:	617b      	str	r3, [r7, #20]
 8008dbc:	f04f 0200 	mov.w	r2, #0
 8008dc0:	f04f 0300 	mov.w	r3, #0
 8008dc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008dc8:	4659      	mov	r1, fp
 8008dca:	00cb      	lsls	r3, r1, #3
 8008dcc:	4651      	mov	r1, sl
 8008dce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008dd2:	4651      	mov	r1, sl
 8008dd4:	00ca      	lsls	r2, r1, #3
 8008dd6:	4610      	mov	r0, r2
 8008dd8:	4619      	mov	r1, r3
 8008dda:	4603      	mov	r3, r0
 8008ddc:	4642      	mov	r2, r8
 8008dde:	189b      	adds	r3, r3, r2
 8008de0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008de4:	464b      	mov	r3, r9
 8008de6:	460a      	mov	r2, r1
 8008de8:	eb42 0303 	adc.w	r3, r2, r3
 8008dec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	2200      	movs	r2, #0
 8008df8:	67bb      	str	r3, [r7, #120]	; 0x78
 8008dfa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008dfc:	f04f 0200 	mov.w	r2, #0
 8008e00:	f04f 0300 	mov.w	r3, #0
 8008e04:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008e08:	4649      	mov	r1, r9
 8008e0a:	008b      	lsls	r3, r1, #2
 8008e0c:	4641      	mov	r1, r8
 8008e0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e12:	4641      	mov	r1, r8
 8008e14:	008a      	lsls	r2, r1, #2
 8008e16:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008e1a:	f7f7 fa39 	bl	8000290 <__aeabi_uldivmod>
 8008e1e:	4602      	mov	r2, r0
 8008e20:	460b      	mov	r3, r1
 8008e22:	4b39      	ldr	r3, [pc, #228]	; (8008f08 <UART_SetConfig+0x4e4>)
 8008e24:	fba3 1302 	umull	r1, r3, r3, r2
 8008e28:	095b      	lsrs	r3, r3, #5
 8008e2a:	2164      	movs	r1, #100	; 0x64
 8008e2c:	fb01 f303 	mul.w	r3, r1, r3
 8008e30:	1ad3      	subs	r3, r2, r3
 8008e32:	011b      	lsls	r3, r3, #4
 8008e34:	3332      	adds	r3, #50	; 0x32
 8008e36:	4a34      	ldr	r2, [pc, #208]	; (8008f08 <UART_SetConfig+0x4e4>)
 8008e38:	fba2 2303 	umull	r2, r3, r2, r3
 8008e3c:	095b      	lsrs	r3, r3, #5
 8008e3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e42:	441c      	add	r4, r3
 8008e44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e48:	2200      	movs	r2, #0
 8008e4a:	673b      	str	r3, [r7, #112]	; 0x70
 8008e4c:	677a      	str	r2, [r7, #116]	; 0x74
 8008e4e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008e52:	4642      	mov	r2, r8
 8008e54:	464b      	mov	r3, r9
 8008e56:	1891      	adds	r1, r2, r2
 8008e58:	60b9      	str	r1, [r7, #8]
 8008e5a:	415b      	adcs	r3, r3
 8008e5c:	60fb      	str	r3, [r7, #12]
 8008e5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008e62:	4641      	mov	r1, r8
 8008e64:	1851      	adds	r1, r2, r1
 8008e66:	6039      	str	r1, [r7, #0]
 8008e68:	4649      	mov	r1, r9
 8008e6a:	414b      	adcs	r3, r1
 8008e6c:	607b      	str	r3, [r7, #4]
 8008e6e:	f04f 0200 	mov.w	r2, #0
 8008e72:	f04f 0300 	mov.w	r3, #0
 8008e76:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008e7a:	4659      	mov	r1, fp
 8008e7c:	00cb      	lsls	r3, r1, #3
 8008e7e:	4651      	mov	r1, sl
 8008e80:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e84:	4651      	mov	r1, sl
 8008e86:	00ca      	lsls	r2, r1, #3
 8008e88:	4610      	mov	r0, r2
 8008e8a:	4619      	mov	r1, r3
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	4642      	mov	r2, r8
 8008e90:	189b      	adds	r3, r3, r2
 8008e92:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e94:	464b      	mov	r3, r9
 8008e96:	460a      	mov	r2, r1
 8008e98:	eb42 0303 	adc.w	r3, r2, r3
 8008e9c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ea2:	685b      	ldr	r3, [r3, #4]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	663b      	str	r3, [r7, #96]	; 0x60
 8008ea8:	667a      	str	r2, [r7, #100]	; 0x64
 8008eaa:	f04f 0200 	mov.w	r2, #0
 8008eae:	f04f 0300 	mov.w	r3, #0
 8008eb2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008eb6:	4649      	mov	r1, r9
 8008eb8:	008b      	lsls	r3, r1, #2
 8008eba:	4641      	mov	r1, r8
 8008ebc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ec0:	4641      	mov	r1, r8
 8008ec2:	008a      	lsls	r2, r1, #2
 8008ec4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008ec8:	f7f7 f9e2 	bl	8000290 <__aeabi_uldivmod>
 8008ecc:	4602      	mov	r2, r0
 8008ece:	460b      	mov	r3, r1
 8008ed0:	4b0d      	ldr	r3, [pc, #52]	; (8008f08 <UART_SetConfig+0x4e4>)
 8008ed2:	fba3 1302 	umull	r1, r3, r3, r2
 8008ed6:	095b      	lsrs	r3, r3, #5
 8008ed8:	2164      	movs	r1, #100	; 0x64
 8008eda:	fb01 f303 	mul.w	r3, r1, r3
 8008ede:	1ad3      	subs	r3, r2, r3
 8008ee0:	011b      	lsls	r3, r3, #4
 8008ee2:	3332      	adds	r3, #50	; 0x32
 8008ee4:	4a08      	ldr	r2, [pc, #32]	; (8008f08 <UART_SetConfig+0x4e4>)
 8008ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8008eea:	095b      	lsrs	r3, r3, #5
 8008eec:	f003 020f 	and.w	r2, r3, #15
 8008ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4422      	add	r2, r4
 8008ef8:	609a      	str	r2, [r3, #8]
}
 8008efa:	bf00      	nop
 8008efc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008f00:	46bd      	mov	sp, r7
 8008f02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f06:	bf00      	nop
 8008f08:	51eb851f 	.word	0x51eb851f

08008f0c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008f0c:	b084      	sub	sp, #16
 8008f0e:	b580      	push	{r7, lr}
 8008f10:	b084      	sub	sp, #16
 8008f12:	af00      	add	r7, sp, #0
 8008f14:	6078      	str	r0, [r7, #4]
 8008f16:	f107 001c 	add.w	r0, r7, #28
 8008f1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d122      	bne.n	8008f6a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	68db      	ldr	r3, [r3, #12]
 8008f34:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008f38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f3c:	687a      	ldr	r2, [r7, #4]
 8008f3e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	68db      	ldr	r3, [r3, #12]
 8008f44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008f4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f4e:	2b01      	cmp	r3, #1
 8008f50:	d105      	bne.n	8008f5e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	68db      	ldr	r3, [r3, #12]
 8008f56:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 faa2 	bl	80094a8 <USB_CoreReset>
 8008f64:	4603      	mov	r3, r0
 8008f66:	73fb      	strb	r3, [r7, #15]
 8008f68:	e01a      	b.n	8008fa0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	68db      	ldr	r3, [r3, #12]
 8008f6e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f000 fa96 	bl	80094a8 <USB_CoreReset>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008f80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d106      	bne.n	8008f94 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f8a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	639a      	str	r2, [r3, #56]	; 0x38
 8008f92:	e005      	b.n	8008fa0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	d10b      	bne.n	8008fbe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	689b      	ldr	r3, [r3, #8]
 8008faa:	f043 0206 	orr.w	r2, r3, #6
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	689b      	ldr	r3, [r3, #8]
 8008fb6:	f043 0220 	orr.w	r2, r3, #32
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3710      	adds	r7, #16
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008fca:	b004      	add	sp, #16
 8008fcc:	4770      	bx	lr

08008fce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008fce:	b480      	push	{r7}
 8008fd0:	b083      	sub	sp, #12
 8008fd2:	af00      	add	r7, sp, #0
 8008fd4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	689b      	ldr	r3, [r3, #8]
 8008fda:	f023 0201 	bic.w	r2, r3, #1
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008fe2:	2300      	movs	r3, #0
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	370c      	adds	r7, #12
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fee:	4770      	bx	lr

08008ff0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b084      	sub	sp, #16
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	68db      	ldr	r3, [r3, #12]
 8009004:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800900c:	78fb      	ldrb	r3, [r7, #3]
 800900e:	2b01      	cmp	r3, #1
 8009010:	d115      	bne.n	800903e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	68db      	ldr	r3, [r3, #12]
 8009016:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800901e:	2001      	movs	r0, #1
 8009020:	f7fa fc34 	bl	800388c <HAL_Delay>
      ms++;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	3301      	adds	r3, #1
 8009028:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f000 fa2e 	bl	800948c <USB_GetMode>
 8009030:	4603      	mov	r3, r0
 8009032:	2b01      	cmp	r3, #1
 8009034:	d01e      	beq.n	8009074 <USB_SetCurrentMode+0x84>
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2b31      	cmp	r3, #49	; 0x31
 800903a:	d9f0      	bls.n	800901e <USB_SetCurrentMode+0x2e>
 800903c:	e01a      	b.n	8009074 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800903e:	78fb      	ldrb	r3, [r7, #3]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d115      	bne.n	8009070 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	68db      	ldr	r3, [r3, #12]
 8009048:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009050:	2001      	movs	r0, #1
 8009052:	f7fa fc1b 	bl	800388c <HAL_Delay>
      ms++;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	3301      	adds	r3, #1
 800905a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f000 fa15 	bl	800948c <USB_GetMode>
 8009062:	4603      	mov	r3, r0
 8009064:	2b00      	cmp	r3, #0
 8009066:	d005      	beq.n	8009074 <USB_SetCurrentMode+0x84>
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	2b31      	cmp	r3, #49	; 0x31
 800906c:	d9f0      	bls.n	8009050 <USB_SetCurrentMode+0x60>
 800906e:	e001      	b.n	8009074 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009070:	2301      	movs	r3, #1
 8009072:	e005      	b.n	8009080 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2b32      	cmp	r3, #50	; 0x32
 8009078:	d101      	bne.n	800907e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800907a:	2301      	movs	r3, #1
 800907c:	e000      	b.n	8009080 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800907e:	2300      	movs	r3, #0
}
 8009080:	4618      	mov	r0, r3
 8009082:	3710      	adds	r7, #16
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}

08009088 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009088:	b084      	sub	sp, #16
 800908a:	b580      	push	{r7, lr}
 800908c:	b086      	sub	sp, #24
 800908e:	af00      	add	r7, sp, #0
 8009090:	6078      	str	r0, [r7, #4]
 8009092:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009096:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800909a:	2300      	movs	r3, #0
 800909c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80090a2:	2300      	movs	r3, #0
 80090a4:	613b      	str	r3, [r7, #16]
 80090a6:	e009      	b.n	80090bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80090a8:	687a      	ldr	r2, [r7, #4]
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	3340      	adds	r3, #64	; 0x40
 80090ae:	009b      	lsls	r3, r3, #2
 80090b0:	4413      	add	r3, r2
 80090b2:	2200      	movs	r2, #0
 80090b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	3301      	adds	r3, #1
 80090ba:	613b      	str	r3, [r7, #16]
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	2b0e      	cmp	r3, #14
 80090c0:	d9f2      	bls.n	80090a8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80090c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d11c      	bne.n	8009102 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	68fa      	ldr	r2, [r7, #12]
 80090d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80090d6:	f043 0302 	orr.w	r3, r3, #2
 80090da:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090e0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ec:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090f8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	639a      	str	r2, [r3, #56]	; 0x38
 8009100:	e00b      	b.n	800911a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009106:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009112:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009120:	461a      	mov	r2, r3
 8009122:	2300      	movs	r3, #0
 8009124:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800912c:	4619      	mov	r1, r3
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009134:	461a      	mov	r2, r3
 8009136:	680b      	ldr	r3, [r1, #0]
 8009138:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800913a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800913c:	2b01      	cmp	r3, #1
 800913e:	d10c      	bne.n	800915a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009142:	2b00      	cmp	r3, #0
 8009144:	d104      	bne.n	8009150 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009146:	2100      	movs	r1, #0
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 f965 	bl	8009418 <USB_SetDevSpeed>
 800914e:	e008      	b.n	8009162 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009150:	2101      	movs	r1, #1
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f000 f960 	bl	8009418 <USB_SetDevSpeed>
 8009158:	e003      	b.n	8009162 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800915a:	2103      	movs	r1, #3
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f000 f95b 	bl	8009418 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009162:	2110      	movs	r1, #16
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f000 f8f3 	bl	8009350 <USB_FlushTxFifo>
 800916a:	4603      	mov	r3, r0
 800916c:	2b00      	cmp	r3, #0
 800916e:	d001      	beq.n	8009174 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009170:	2301      	movs	r3, #1
 8009172:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f000 f91f 	bl	80093b8 <USB_FlushRxFifo>
 800917a:	4603      	mov	r3, r0
 800917c:	2b00      	cmp	r3, #0
 800917e:	d001      	beq.n	8009184 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009180:	2301      	movs	r3, #1
 8009182:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800918a:	461a      	mov	r2, r3
 800918c:	2300      	movs	r3, #0
 800918e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009196:	461a      	mov	r2, r3
 8009198:	2300      	movs	r3, #0
 800919a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091a2:	461a      	mov	r2, r3
 80091a4:	2300      	movs	r3, #0
 80091a6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80091a8:	2300      	movs	r3, #0
 80091aa:	613b      	str	r3, [r7, #16]
 80091ac:	e043      	b.n	8009236 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	015a      	lsls	r2, r3, #5
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	4413      	add	r3, r2
 80091b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091c4:	d118      	bne.n	80091f8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d10a      	bne.n	80091e2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	015a      	lsls	r2, r3, #5
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	4413      	add	r3, r2
 80091d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091d8:	461a      	mov	r2, r3
 80091da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80091de:	6013      	str	r3, [r2, #0]
 80091e0:	e013      	b.n	800920a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	015a      	lsls	r2, r3, #5
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	4413      	add	r3, r2
 80091ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091ee:	461a      	mov	r2, r3
 80091f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80091f4:	6013      	str	r3, [r2, #0]
 80091f6:	e008      	b.n	800920a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	015a      	lsls	r2, r3, #5
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	4413      	add	r3, r2
 8009200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009204:	461a      	mov	r2, r3
 8009206:	2300      	movs	r3, #0
 8009208:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	015a      	lsls	r2, r3, #5
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	4413      	add	r3, r2
 8009212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009216:	461a      	mov	r2, r3
 8009218:	2300      	movs	r3, #0
 800921a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	015a      	lsls	r2, r3, #5
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	4413      	add	r3, r2
 8009224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009228:	461a      	mov	r2, r3
 800922a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800922e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	3301      	adds	r3, #1
 8009234:	613b      	str	r3, [r7, #16]
 8009236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009238:	693a      	ldr	r2, [r7, #16]
 800923a:	429a      	cmp	r2, r3
 800923c:	d3b7      	bcc.n	80091ae <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800923e:	2300      	movs	r3, #0
 8009240:	613b      	str	r3, [r7, #16]
 8009242:	e043      	b.n	80092cc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	015a      	lsls	r2, r3, #5
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	4413      	add	r3, r2
 800924c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009256:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800925a:	d118      	bne.n	800928e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d10a      	bne.n	8009278 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	015a      	lsls	r2, r3, #5
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	4413      	add	r3, r2
 800926a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800926e:	461a      	mov	r2, r3
 8009270:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009274:	6013      	str	r3, [r2, #0]
 8009276:	e013      	b.n	80092a0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	015a      	lsls	r2, r3, #5
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	4413      	add	r3, r2
 8009280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009284:	461a      	mov	r2, r3
 8009286:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800928a:	6013      	str	r3, [r2, #0]
 800928c:	e008      	b.n	80092a0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	015a      	lsls	r2, r3, #5
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	4413      	add	r3, r2
 8009296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800929a:	461a      	mov	r2, r3
 800929c:	2300      	movs	r3, #0
 800929e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	015a      	lsls	r2, r3, #5
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	4413      	add	r3, r2
 80092a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092ac:	461a      	mov	r2, r3
 80092ae:	2300      	movs	r3, #0
 80092b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	015a      	lsls	r2, r3, #5
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	4413      	add	r3, r2
 80092ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092be:	461a      	mov	r2, r3
 80092c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80092c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	3301      	adds	r3, #1
 80092ca:	613b      	str	r3, [r7, #16]
 80092cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ce:	693a      	ldr	r2, [r7, #16]
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d3b7      	bcc.n	8009244 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092da:	691b      	ldr	r3, [r3, #16]
 80092dc:	68fa      	ldr	r2, [r7, #12]
 80092de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80092e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80092e6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2200      	movs	r2, #0
 80092ec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80092f4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80092f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d105      	bne.n	8009308 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	699b      	ldr	r3, [r3, #24]
 8009300:	f043 0210 	orr.w	r2, r3, #16
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	699a      	ldr	r2, [r3, #24]
 800930c:	4b0f      	ldr	r3, [pc, #60]	; (800934c <USB_DevInit+0x2c4>)
 800930e:	4313      	orrs	r3, r2
 8009310:	687a      	ldr	r2, [r7, #4]
 8009312:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009316:	2b00      	cmp	r3, #0
 8009318:	d005      	beq.n	8009326 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	699b      	ldr	r3, [r3, #24]
 800931e:	f043 0208 	orr.w	r2, r3, #8
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009328:	2b01      	cmp	r3, #1
 800932a:	d107      	bne.n	800933c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	699b      	ldr	r3, [r3, #24]
 8009330:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009334:	f043 0304 	orr.w	r3, r3, #4
 8009338:	687a      	ldr	r2, [r7, #4]
 800933a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800933c:	7dfb      	ldrb	r3, [r7, #23]
}
 800933e:	4618      	mov	r0, r3
 8009340:	3718      	adds	r7, #24
 8009342:	46bd      	mov	sp, r7
 8009344:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009348:	b004      	add	sp, #16
 800934a:	4770      	bx	lr
 800934c:	803c3800 	.word	0x803c3800

08009350 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009350:	b480      	push	{r7}
 8009352:	b085      	sub	sp, #20
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
 8009358:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800935a:	2300      	movs	r3, #0
 800935c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	3301      	adds	r3, #1
 8009362:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	4a13      	ldr	r2, [pc, #76]	; (80093b4 <USB_FlushTxFifo+0x64>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d901      	bls.n	8009370 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800936c:	2303      	movs	r3, #3
 800936e:	e01b      	b.n	80093a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	691b      	ldr	r3, [r3, #16]
 8009374:	2b00      	cmp	r3, #0
 8009376:	daf2      	bge.n	800935e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009378:	2300      	movs	r3, #0
 800937a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	019b      	lsls	r3, r3, #6
 8009380:	f043 0220 	orr.w	r2, r3, #32
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	3301      	adds	r3, #1
 800938c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	4a08      	ldr	r2, [pc, #32]	; (80093b4 <USB_FlushTxFifo+0x64>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d901      	bls.n	800939a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009396:	2303      	movs	r3, #3
 8009398:	e006      	b.n	80093a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	691b      	ldr	r3, [r3, #16]
 800939e:	f003 0320 	and.w	r3, r3, #32
 80093a2:	2b20      	cmp	r3, #32
 80093a4:	d0f0      	beq.n	8009388 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80093a6:	2300      	movs	r3, #0
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3714      	adds	r7, #20
 80093ac:	46bd      	mov	sp, r7
 80093ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b2:	4770      	bx	lr
 80093b4:	00030d40 	.word	0x00030d40

080093b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b085      	sub	sp, #20
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80093c0:	2300      	movs	r3, #0
 80093c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	3301      	adds	r3, #1
 80093c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	4a11      	ldr	r2, [pc, #68]	; (8009414 <USB_FlushRxFifo+0x5c>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d901      	bls.n	80093d6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80093d2:	2303      	movs	r3, #3
 80093d4:	e018      	b.n	8009408 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	691b      	ldr	r3, [r3, #16]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	daf2      	bge.n	80093c4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80093de:	2300      	movs	r3, #0
 80093e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2210      	movs	r2, #16
 80093e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	3301      	adds	r3, #1
 80093ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	4a08      	ldr	r2, [pc, #32]	; (8009414 <USB_FlushRxFifo+0x5c>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d901      	bls.n	80093fa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80093f6:	2303      	movs	r3, #3
 80093f8:	e006      	b.n	8009408 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	691b      	ldr	r3, [r3, #16]
 80093fe:	f003 0310 	and.w	r3, r3, #16
 8009402:	2b10      	cmp	r3, #16
 8009404:	d0f0      	beq.n	80093e8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009406:	2300      	movs	r3, #0
}
 8009408:	4618      	mov	r0, r3
 800940a:	3714      	adds	r7, #20
 800940c:	46bd      	mov	sp, r7
 800940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009412:	4770      	bx	lr
 8009414:	00030d40 	.word	0x00030d40

08009418 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009418:	b480      	push	{r7}
 800941a:	b085      	sub	sp, #20
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	460b      	mov	r3, r1
 8009422:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800942e:	681a      	ldr	r2, [r3, #0]
 8009430:	78fb      	ldrb	r3, [r7, #3]
 8009432:	68f9      	ldr	r1, [r7, #12]
 8009434:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009438:	4313      	orrs	r3, r2
 800943a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800943c:	2300      	movs	r3, #0
}
 800943e:	4618      	mov	r0, r3
 8009440:	3714      	adds	r7, #20
 8009442:	46bd      	mov	sp, r7
 8009444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009448:	4770      	bx	lr

0800944a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800944a:	b480      	push	{r7}
 800944c:	b085      	sub	sp, #20
 800944e:	af00      	add	r7, sp, #0
 8009450:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	68fa      	ldr	r2, [r7, #12]
 8009460:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009464:	f023 0303 	bic.w	r3, r3, #3
 8009468:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009470:	685b      	ldr	r3, [r3, #4]
 8009472:	68fa      	ldr	r2, [r7, #12]
 8009474:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009478:	f043 0302 	orr.w	r3, r3, #2
 800947c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800947e:	2300      	movs	r3, #0
}
 8009480:	4618      	mov	r0, r3
 8009482:	3714      	adds	r7, #20
 8009484:	46bd      	mov	sp, r7
 8009486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948a:	4770      	bx	lr

0800948c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800948c:	b480      	push	{r7}
 800948e:	b083      	sub	sp, #12
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	695b      	ldr	r3, [r3, #20]
 8009498:	f003 0301 	and.w	r3, r3, #1
}
 800949c:	4618      	mov	r0, r3
 800949e:	370c      	adds	r7, #12
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr

080094a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b085      	sub	sp, #20
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80094b0:	2300      	movs	r3, #0
 80094b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	3301      	adds	r3, #1
 80094b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	4a13      	ldr	r2, [pc, #76]	; (800950c <USB_CoreReset+0x64>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d901      	bls.n	80094c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80094c2:	2303      	movs	r3, #3
 80094c4:	e01b      	b.n	80094fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	691b      	ldr	r3, [r3, #16]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	daf2      	bge.n	80094b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80094ce:	2300      	movs	r3, #0
 80094d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	691b      	ldr	r3, [r3, #16]
 80094d6:	f043 0201 	orr.w	r2, r3, #1
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	3301      	adds	r3, #1
 80094e2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	4a09      	ldr	r2, [pc, #36]	; (800950c <USB_CoreReset+0x64>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d901      	bls.n	80094f0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80094ec:	2303      	movs	r3, #3
 80094ee:	e006      	b.n	80094fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	691b      	ldr	r3, [r3, #16]
 80094f4:	f003 0301 	and.w	r3, r3, #1
 80094f8:	2b01      	cmp	r3, #1
 80094fa:	d0f0      	beq.n	80094de <USB_CoreReset+0x36>

  return HAL_OK;
 80094fc:	2300      	movs	r3, #0
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3714      	adds	r7, #20
 8009502:	46bd      	mov	sp, r7
 8009504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009508:	4770      	bx	lr
 800950a:	bf00      	nop
 800950c:	00030d40 	.word	0x00030d40

08009510 <__errno>:
 8009510:	4b01      	ldr	r3, [pc, #4]	; (8009518 <__errno+0x8>)
 8009512:	6818      	ldr	r0, [r3, #0]
 8009514:	4770      	bx	lr
 8009516:	bf00      	nop
 8009518:	20000128 	.word	0x20000128

0800951c <__libc_init_array>:
 800951c:	b570      	push	{r4, r5, r6, lr}
 800951e:	4d0d      	ldr	r5, [pc, #52]	; (8009554 <__libc_init_array+0x38>)
 8009520:	4c0d      	ldr	r4, [pc, #52]	; (8009558 <__libc_init_array+0x3c>)
 8009522:	1b64      	subs	r4, r4, r5
 8009524:	10a4      	asrs	r4, r4, #2
 8009526:	2600      	movs	r6, #0
 8009528:	42a6      	cmp	r6, r4
 800952a:	d109      	bne.n	8009540 <__libc_init_array+0x24>
 800952c:	4d0b      	ldr	r5, [pc, #44]	; (800955c <__libc_init_array+0x40>)
 800952e:	4c0c      	ldr	r4, [pc, #48]	; (8009560 <__libc_init_array+0x44>)
 8009530:	f001 f88e 	bl	800a650 <_init>
 8009534:	1b64      	subs	r4, r4, r5
 8009536:	10a4      	asrs	r4, r4, #2
 8009538:	2600      	movs	r6, #0
 800953a:	42a6      	cmp	r6, r4
 800953c:	d105      	bne.n	800954a <__libc_init_array+0x2e>
 800953e:	bd70      	pop	{r4, r5, r6, pc}
 8009540:	f855 3b04 	ldr.w	r3, [r5], #4
 8009544:	4798      	blx	r3
 8009546:	3601      	adds	r6, #1
 8009548:	e7ee      	b.n	8009528 <__libc_init_array+0xc>
 800954a:	f855 3b04 	ldr.w	r3, [r5], #4
 800954e:	4798      	blx	r3
 8009550:	3601      	adds	r6, #1
 8009552:	e7f2      	b.n	800953a <__libc_init_array+0x1e>
 8009554:	0800a888 	.word	0x0800a888
 8009558:	0800a888 	.word	0x0800a888
 800955c:	0800a888 	.word	0x0800a888
 8009560:	0800a88c 	.word	0x0800a88c

08009564 <memset>:
 8009564:	4402      	add	r2, r0
 8009566:	4603      	mov	r3, r0
 8009568:	4293      	cmp	r3, r2
 800956a:	d100      	bne.n	800956e <memset+0xa>
 800956c:	4770      	bx	lr
 800956e:	f803 1b01 	strb.w	r1, [r3], #1
 8009572:	e7f9      	b.n	8009568 <memset+0x4>

08009574 <_puts_r>:
 8009574:	b570      	push	{r4, r5, r6, lr}
 8009576:	460e      	mov	r6, r1
 8009578:	4605      	mov	r5, r0
 800957a:	b118      	cbz	r0, 8009584 <_puts_r+0x10>
 800957c:	6983      	ldr	r3, [r0, #24]
 800957e:	b90b      	cbnz	r3, 8009584 <_puts_r+0x10>
 8009580:	f000 fa68 	bl	8009a54 <__sinit>
 8009584:	69ab      	ldr	r3, [r5, #24]
 8009586:	68ac      	ldr	r4, [r5, #8]
 8009588:	b913      	cbnz	r3, 8009590 <_puts_r+0x1c>
 800958a:	4628      	mov	r0, r5
 800958c:	f000 fa62 	bl	8009a54 <__sinit>
 8009590:	4b2c      	ldr	r3, [pc, #176]	; (8009644 <_puts_r+0xd0>)
 8009592:	429c      	cmp	r4, r3
 8009594:	d120      	bne.n	80095d8 <_puts_r+0x64>
 8009596:	686c      	ldr	r4, [r5, #4]
 8009598:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800959a:	07db      	lsls	r3, r3, #31
 800959c:	d405      	bmi.n	80095aa <_puts_r+0x36>
 800959e:	89a3      	ldrh	r3, [r4, #12]
 80095a0:	0598      	lsls	r0, r3, #22
 80095a2:	d402      	bmi.n	80095aa <_puts_r+0x36>
 80095a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095a6:	f000 faf3 	bl	8009b90 <__retarget_lock_acquire_recursive>
 80095aa:	89a3      	ldrh	r3, [r4, #12]
 80095ac:	0719      	lsls	r1, r3, #28
 80095ae:	d51d      	bpl.n	80095ec <_puts_r+0x78>
 80095b0:	6923      	ldr	r3, [r4, #16]
 80095b2:	b1db      	cbz	r3, 80095ec <_puts_r+0x78>
 80095b4:	3e01      	subs	r6, #1
 80095b6:	68a3      	ldr	r3, [r4, #8]
 80095b8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80095bc:	3b01      	subs	r3, #1
 80095be:	60a3      	str	r3, [r4, #8]
 80095c0:	bb39      	cbnz	r1, 8009612 <_puts_r+0x9e>
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	da38      	bge.n	8009638 <_puts_r+0xc4>
 80095c6:	4622      	mov	r2, r4
 80095c8:	210a      	movs	r1, #10
 80095ca:	4628      	mov	r0, r5
 80095cc:	f000 f868 	bl	80096a0 <__swbuf_r>
 80095d0:	3001      	adds	r0, #1
 80095d2:	d011      	beq.n	80095f8 <_puts_r+0x84>
 80095d4:	250a      	movs	r5, #10
 80095d6:	e011      	b.n	80095fc <_puts_r+0x88>
 80095d8:	4b1b      	ldr	r3, [pc, #108]	; (8009648 <_puts_r+0xd4>)
 80095da:	429c      	cmp	r4, r3
 80095dc:	d101      	bne.n	80095e2 <_puts_r+0x6e>
 80095de:	68ac      	ldr	r4, [r5, #8]
 80095e0:	e7da      	b.n	8009598 <_puts_r+0x24>
 80095e2:	4b1a      	ldr	r3, [pc, #104]	; (800964c <_puts_r+0xd8>)
 80095e4:	429c      	cmp	r4, r3
 80095e6:	bf08      	it	eq
 80095e8:	68ec      	ldreq	r4, [r5, #12]
 80095ea:	e7d5      	b.n	8009598 <_puts_r+0x24>
 80095ec:	4621      	mov	r1, r4
 80095ee:	4628      	mov	r0, r5
 80095f0:	f000 f8a8 	bl	8009744 <__swsetup_r>
 80095f4:	2800      	cmp	r0, #0
 80095f6:	d0dd      	beq.n	80095b4 <_puts_r+0x40>
 80095f8:	f04f 35ff 	mov.w	r5, #4294967295
 80095fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80095fe:	07da      	lsls	r2, r3, #31
 8009600:	d405      	bmi.n	800960e <_puts_r+0x9a>
 8009602:	89a3      	ldrh	r3, [r4, #12]
 8009604:	059b      	lsls	r3, r3, #22
 8009606:	d402      	bmi.n	800960e <_puts_r+0x9a>
 8009608:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800960a:	f000 fac2 	bl	8009b92 <__retarget_lock_release_recursive>
 800960e:	4628      	mov	r0, r5
 8009610:	bd70      	pop	{r4, r5, r6, pc}
 8009612:	2b00      	cmp	r3, #0
 8009614:	da04      	bge.n	8009620 <_puts_r+0xac>
 8009616:	69a2      	ldr	r2, [r4, #24]
 8009618:	429a      	cmp	r2, r3
 800961a:	dc06      	bgt.n	800962a <_puts_r+0xb6>
 800961c:	290a      	cmp	r1, #10
 800961e:	d004      	beq.n	800962a <_puts_r+0xb6>
 8009620:	6823      	ldr	r3, [r4, #0]
 8009622:	1c5a      	adds	r2, r3, #1
 8009624:	6022      	str	r2, [r4, #0]
 8009626:	7019      	strb	r1, [r3, #0]
 8009628:	e7c5      	b.n	80095b6 <_puts_r+0x42>
 800962a:	4622      	mov	r2, r4
 800962c:	4628      	mov	r0, r5
 800962e:	f000 f837 	bl	80096a0 <__swbuf_r>
 8009632:	3001      	adds	r0, #1
 8009634:	d1bf      	bne.n	80095b6 <_puts_r+0x42>
 8009636:	e7df      	b.n	80095f8 <_puts_r+0x84>
 8009638:	6823      	ldr	r3, [r4, #0]
 800963a:	250a      	movs	r5, #10
 800963c:	1c5a      	adds	r2, r3, #1
 800963e:	6022      	str	r2, [r4, #0]
 8009640:	701d      	strb	r5, [r3, #0]
 8009642:	e7db      	b.n	80095fc <_puts_r+0x88>
 8009644:	0800a80c 	.word	0x0800a80c
 8009648:	0800a82c 	.word	0x0800a82c
 800964c:	0800a7ec 	.word	0x0800a7ec

08009650 <puts>:
 8009650:	4b02      	ldr	r3, [pc, #8]	; (800965c <puts+0xc>)
 8009652:	4601      	mov	r1, r0
 8009654:	6818      	ldr	r0, [r3, #0]
 8009656:	f7ff bf8d 	b.w	8009574 <_puts_r>
 800965a:	bf00      	nop
 800965c:	20000128 	.word	0x20000128

08009660 <siprintf>:
 8009660:	b40e      	push	{r1, r2, r3}
 8009662:	b500      	push	{lr}
 8009664:	b09c      	sub	sp, #112	; 0x70
 8009666:	ab1d      	add	r3, sp, #116	; 0x74
 8009668:	9002      	str	r0, [sp, #8]
 800966a:	9006      	str	r0, [sp, #24]
 800966c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009670:	4809      	ldr	r0, [pc, #36]	; (8009698 <siprintf+0x38>)
 8009672:	9107      	str	r1, [sp, #28]
 8009674:	9104      	str	r1, [sp, #16]
 8009676:	4909      	ldr	r1, [pc, #36]	; (800969c <siprintf+0x3c>)
 8009678:	f853 2b04 	ldr.w	r2, [r3], #4
 800967c:	9105      	str	r1, [sp, #20]
 800967e:	6800      	ldr	r0, [r0, #0]
 8009680:	9301      	str	r3, [sp, #4]
 8009682:	a902      	add	r1, sp, #8
 8009684:	f000 fc28 	bl	8009ed8 <_svfiprintf_r>
 8009688:	9b02      	ldr	r3, [sp, #8]
 800968a:	2200      	movs	r2, #0
 800968c:	701a      	strb	r2, [r3, #0]
 800968e:	b01c      	add	sp, #112	; 0x70
 8009690:	f85d eb04 	ldr.w	lr, [sp], #4
 8009694:	b003      	add	sp, #12
 8009696:	4770      	bx	lr
 8009698:	20000128 	.word	0x20000128
 800969c:	ffff0208 	.word	0xffff0208

080096a0 <__swbuf_r>:
 80096a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096a2:	460e      	mov	r6, r1
 80096a4:	4614      	mov	r4, r2
 80096a6:	4605      	mov	r5, r0
 80096a8:	b118      	cbz	r0, 80096b2 <__swbuf_r+0x12>
 80096aa:	6983      	ldr	r3, [r0, #24]
 80096ac:	b90b      	cbnz	r3, 80096b2 <__swbuf_r+0x12>
 80096ae:	f000 f9d1 	bl	8009a54 <__sinit>
 80096b2:	4b21      	ldr	r3, [pc, #132]	; (8009738 <__swbuf_r+0x98>)
 80096b4:	429c      	cmp	r4, r3
 80096b6:	d12b      	bne.n	8009710 <__swbuf_r+0x70>
 80096b8:	686c      	ldr	r4, [r5, #4]
 80096ba:	69a3      	ldr	r3, [r4, #24]
 80096bc:	60a3      	str	r3, [r4, #8]
 80096be:	89a3      	ldrh	r3, [r4, #12]
 80096c0:	071a      	lsls	r2, r3, #28
 80096c2:	d52f      	bpl.n	8009724 <__swbuf_r+0x84>
 80096c4:	6923      	ldr	r3, [r4, #16]
 80096c6:	b36b      	cbz	r3, 8009724 <__swbuf_r+0x84>
 80096c8:	6923      	ldr	r3, [r4, #16]
 80096ca:	6820      	ldr	r0, [r4, #0]
 80096cc:	1ac0      	subs	r0, r0, r3
 80096ce:	6963      	ldr	r3, [r4, #20]
 80096d0:	b2f6      	uxtb	r6, r6
 80096d2:	4283      	cmp	r3, r0
 80096d4:	4637      	mov	r7, r6
 80096d6:	dc04      	bgt.n	80096e2 <__swbuf_r+0x42>
 80096d8:	4621      	mov	r1, r4
 80096da:	4628      	mov	r0, r5
 80096dc:	f000 f926 	bl	800992c <_fflush_r>
 80096e0:	bb30      	cbnz	r0, 8009730 <__swbuf_r+0x90>
 80096e2:	68a3      	ldr	r3, [r4, #8]
 80096e4:	3b01      	subs	r3, #1
 80096e6:	60a3      	str	r3, [r4, #8]
 80096e8:	6823      	ldr	r3, [r4, #0]
 80096ea:	1c5a      	adds	r2, r3, #1
 80096ec:	6022      	str	r2, [r4, #0]
 80096ee:	701e      	strb	r6, [r3, #0]
 80096f0:	6963      	ldr	r3, [r4, #20]
 80096f2:	3001      	adds	r0, #1
 80096f4:	4283      	cmp	r3, r0
 80096f6:	d004      	beq.n	8009702 <__swbuf_r+0x62>
 80096f8:	89a3      	ldrh	r3, [r4, #12]
 80096fa:	07db      	lsls	r3, r3, #31
 80096fc:	d506      	bpl.n	800970c <__swbuf_r+0x6c>
 80096fe:	2e0a      	cmp	r6, #10
 8009700:	d104      	bne.n	800970c <__swbuf_r+0x6c>
 8009702:	4621      	mov	r1, r4
 8009704:	4628      	mov	r0, r5
 8009706:	f000 f911 	bl	800992c <_fflush_r>
 800970a:	b988      	cbnz	r0, 8009730 <__swbuf_r+0x90>
 800970c:	4638      	mov	r0, r7
 800970e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009710:	4b0a      	ldr	r3, [pc, #40]	; (800973c <__swbuf_r+0x9c>)
 8009712:	429c      	cmp	r4, r3
 8009714:	d101      	bne.n	800971a <__swbuf_r+0x7a>
 8009716:	68ac      	ldr	r4, [r5, #8]
 8009718:	e7cf      	b.n	80096ba <__swbuf_r+0x1a>
 800971a:	4b09      	ldr	r3, [pc, #36]	; (8009740 <__swbuf_r+0xa0>)
 800971c:	429c      	cmp	r4, r3
 800971e:	bf08      	it	eq
 8009720:	68ec      	ldreq	r4, [r5, #12]
 8009722:	e7ca      	b.n	80096ba <__swbuf_r+0x1a>
 8009724:	4621      	mov	r1, r4
 8009726:	4628      	mov	r0, r5
 8009728:	f000 f80c 	bl	8009744 <__swsetup_r>
 800972c:	2800      	cmp	r0, #0
 800972e:	d0cb      	beq.n	80096c8 <__swbuf_r+0x28>
 8009730:	f04f 37ff 	mov.w	r7, #4294967295
 8009734:	e7ea      	b.n	800970c <__swbuf_r+0x6c>
 8009736:	bf00      	nop
 8009738:	0800a80c 	.word	0x0800a80c
 800973c:	0800a82c 	.word	0x0800a82c
 8009740:	0800a7ec 	.word	0x0800a7ec

08009744 <__swsetup_r>:
 8009744:	4b32      	ldr	r3, [pc, #200]	; (8009810 <__swsetup_r+0xcc>)
 8009746:	b570      	push	{r4, r5, r6, lr}
 8009748:	681d      	ldr	r5, [r3, #0]
 800974a:	4606      	mov	r6, r0
 800974c:	460c      	mov	r4, r1
 800974e:	b125      	cbz	r5, 800975a <__swsetup_r+0x16>
 8009750:	69ab      	ldr	r3, [r5, #24]
 8009752:	b913      	cbnz	r3, 800975a <__swsetup_r+0x16>
 8009754:	4628      	mov	r0, r5
 8009756:	f000 f97d 	bl	8009a54 <__sinit>
 800975a:	4b2e      	ldr	r3, [pc, #184]	; (8009814 <__swsetup_r+0xd0>)
 800975c:	429c      	cmp	r4, r3
 800975e:	d10f      	bne.n	8009780 <__swsetup_r+0x3c>
 8009760:	686c      	ldr	r4, [r5, #4]
 8009762:	89a3      	ldrh	r3, [r4, #12]
 8009764:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009768:	0719      	lsls	r1, r3, #28
 800976a:	d42c      	bmi.n	80097c6 <__swsetup_r+0x82>
 800976c:	06dd      	lsls	r5, r3, #27
 800976e:	d411      	bmi.n	8009794 <__swsetup_r+0x50>
 8009770:	2309      	movs	r3, #9
 8009772:	6033      	str	r3, [r6, #0]
 8009774:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009778:	81a3      	strh	r3, [r4, #12]
 800977a:	f04f 30ff 	mov.w	r0, #4294967295
 800977e:	e03e      	b.n	80097fe <__swsetup_r+0xba>
 8009780:	4b25      	ldr	r3, [pc, #148]	; (8009818 <__swsetup_r+0xd4>)
 8009782:	429c      	cmp	r4, r3
 8009784:	d101      	bne.n	800978a <__swsetup_r+0x46>
 8009786:	68ac      	ldr	r4, [r5, #8]
 8009788:	e7eb      	b.n	8009762 <__swsetup_r+0x1e>
 800978a:	4b24      	ldr	r3, [pc, #144]	; (800981c <__swsetup_r+0xd8>)
 800978c:	429c      	cmp	r4, r3
 800978e:	bf08      	it	eq
 8009790:	68ec      	ldreq	r4, [r5, #12]
 8009792:	e7e6      	b.n	8009762 <__swsetup_r+0x1e>
 8009794:	0758      	lsls	r0, r3, #29
 8009796:	d512      	bpl.n	80097be <__swsetup_r+0x7a>
 8009798:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800979a:	b141      	cbz	r1, 80097ae <__swsetup_r+0x6a>
 800979c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097a0:	4299      	cmp	r1, r3
 80097a2:	d002      	beq.n	80097aa <__swsetup_r+0x66>
 80097a4:	4630      	mov	r0, r6
 80097a6:	f000 fa5b 	bl	8009c60 <_free_r>
 80097aa:	2300      	movs	r3, #0
 80097ac:	6363      	str	r3, [r4, #52]	; 0x34
 80097ae:	89a3      	ldrh	r3, [r4, #12]
 80097b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80097b4:	81a3      	strh	r3, [r4, #12]
 80097b6:	2300      	movs	r3, #0
 80097b8:	6063      	str	r3, [r4, #4]
 80097ba:	6923      	ldr	r3, [r4, #16]
 80097bc:	6023      	str	r3, [r4, #0]
 80097be:	89a3      	ldrh	r3, [r4, #12]
 80097c0:	f043 0308 	orr.w	r3, r3, #8
 80097c4:	81a3      	strh	r3, [r4, #12]
 80097c6:	6923      	ldr	r3, [r4, #16]
 80097c8:	b94b      	cbnz	r3, 80097de <__swsetup_r+0x9a>
 80097ca:	89a3      	ldrh	r3, [r4, #12]
 80097cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80097d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097d4:	d003      	beq.n	80097de <__swsetup_r+0x9a>
 80097d6:	4621      	mov	r1, r4
 80097d8:	4630      	mov	r0, r6
 80097da:	f000 fa01 	bl	8009be0 <__smakebuf_r>
 80097de:	89a0      	ldrh	r0, [r4, #12]
 80097e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80097e4:	f010 0301 	ands.w	r3, r0, #1
 80097e8:	d00a      	beq.n	8009800 <__swsetup_r+0xbc>
 80097ea:	2300      	movs	r3, #0
 80097ec:	60a3      	str	r3, [r4, #8]
 80097ee:	6963      	ldr	r3, [r4, #20]
 80097f0:	425b      	negs	r3, r3
 80097f2:	61a3      	str	r3, [r4, #24]
 80097f4:	6923      	ldr	r3, [r4, #16]
 80097f6:	b943      	cbnz	r3, 800980a <__swsetup_r+0xc6>
 80097f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80097fc:	d1ba      	bne.n	8009774 <__swsetup_r+0x30>
 80097fe:	bd70      	pop	{r4, r5, r6, pc}
 8009800:	0781      	lsls	r1, r0, #30
 8009802:	bf58      	it	pl
 8009804:	6963      	ldrpl	r3, [r4, #20]
 8009806:	60a3      	str	r3, [r4, #8]
 8009808:	e7f4      	b.n	80097f4 <__swsetup_r+0xb0>
 800980a:	2000      	movs	r0, #0
 800980c:	e7f7      	b.n	80097fe <__swsetup_r+0xba>
 800980e:	bf00      	nop
 8009810:	20000128 	.word	0x20000128
 8009814:	0800a80c 	.word	0x0800a80c
 8009818:	0800a82c 	.word	0x0800a82c
 800981c:	0800a7ec 	.word	0x0800a7ec

08009820 <__sflush_r>:
 8009820:	898a      	ldrh	r2, [r1, #12]
 8009822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009826:	4605      	mov	r5, r0
 8009828:	0710      	lsls	r0, r2, #28
 800982a:	460c      	mov	r4, r1
 800982c:	d458      	bmi.n	80098e0 <__sflush_r+0xc0>
 800982e:	684b      	ldr	r3, [r1, #4]
 8009830:	2b00      	cmp	r3, #0
 8009832:	dc05      	bgt.n	8009840 <__sflush_r+0x20>
 8009834:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009836:	2b00      	cmp	r3, #0
 8009838:	dc02      	bgt.n	8009840 <__sflush_r+0x20>
 800983a:	2000      	movs	r0, #0
 800983c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009840:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009842:	2e00      	cmp	r6, #0
 8009844:	d0f9      	beq.n	800983a <__sflush_r+0x1a>
 8009846:	2300      	movs	r3, #0
 8009848:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800984c:	682f      	ldr	r7, [r5, #0]
 800984e:	602b      	str	r3, [r5, #0]
 8009850:	d032      	beq.n	80098b8 <__sflush_r+0x98>
 8009852:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009854:	89a3      	ldrh	r3, [r4, #12]
 8009856:	075a      	lsls	r2, r3, #29
 8009858:	d505      	bpl.n	8009866 <__sflush_r+0x46>
 800985a:	6863      	ldr	r3, [r4, #4]
 800985c:	1ac0      	subs	r0, r0, r3
 800985e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009860:	b10b      	cbz	r3, 8009866 <__sflush_r+0x46>
 8009862:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009864:	1ac0      	subs	r0, r0, r3
 8009866:	2300      	movs	r3, #0
 8009868:	4602      	mov	r2, r0
 800986a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800986c:	6a21      	ldr	r1, [r4, #32]
 800986e:	4628      	mov	r0, r5
 8009870:	47b0      	blx	r6
 8009872:	1c43      	adds	r3, r0, #1
 8009874:	89a3      	ldrh	r3, [r4, #12]
 8009876:	d106      	bne.n	8009886 <__sflush_r+0x66>
 8009878:	6829      	ldr	r1, [r5, #0]
 800987a:	291d      	cmp	r1, #29
 800987c:	d82c      	bhi.n	80098d8 <__sflush_r+0xb8>
 800987e:	4a2a      	ldr	r2, [pc, #168]	; (8009928 <__sflush_r+0x108>)
 8009880:	40ca      	lsrs	r2, r1
 8009882:	07d6      	lsls	r6, r2, #31
 8009884:	d528      	bpl.n	80098d8 <__sflush_r+0xb8>
 8009886:	2200      	movs	r2, #0
 8009888:	6062      	str	r2, [r4, #4]
 800988a:	04d9      	lsls	r1, r3, #19
 800988c:	6922      	ldr	r2, [r4, #16]
 800988e:	6022      	str	r2, [r4, #0]
 8009890:	d504      	bpl.n	800989c <__sflush_r+0x7c>
 8009892:	1c42      	adds	r2, r0, #1
 8009894:	d101      	bne.n	800989a <__sflush_r+0x7a>
 8009896:	682b      	ldr	r3, [r5, #0]
 8009898:	b903      	cbnz	r3, 800989c <__sflush_r+0x7c>
 800989a:	6560      	str	r0, [r4, #84]	; 0x54
 800989c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800989e:	602f      	str	r7, [r5, #0]
 80098a0:	2900      	cmp	r1, #0
 80098a2:	d0ca      	beq.n	800983a <__sflush_r+0x1a>
 80098a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80098a8:	4299      	cmp	r1, r3
 80098aa:	d002      	beq.n	80098b2 <__sflush_r+0x92>
 80098ac:	4628      	mov	r0, r5
 80098ae:	f000 f9d7 	bl	8009c60 <_free_r>
 80098b2:	2000      	movs	r0, #0
 80098b4:	6360      	str	r0, [r4, #52]	; 0x34
 80098b6:	e7c1      	b.n	800983c <__sflush_r+0x1c>
 80098b8:	6a21      	ldr	r1, [r4, #32]
 80098ba:	2301      	movs	r3, #1
 80098bc:	4628      	mov	r0, r5
 80098be:	47b0      	blx	r6
 80098c0:	1c41      	adds	r1, r0, #1
 80098c2:	d1c7      	bne.n	8009854 <__sflush_r+0x34>
 80098c4:	682b      	ldr	r3, [r5, #0]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d0c4      	beq.n	8009854 <__sflush_r+0x34>
 80098ca:	2b1d      	cmp	r3, #29
 80098cc:	d001      	beq.n	80098d2 <__sflush_r+0xb2>
 80098ce:	2b16      	cmp	r3, #22
 80098d0:	d101      	bne.n	80098d6 <__sflush_r+0xb6>
 80098d2:	602f      	str	r7, [r5, #0]
 80098d4:	e7b1      	b.n	800983a <__sflush_r+0x1a>
 80098d6:	89a3      	ldrh	r3, [r4, #12]
 80098d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098dc:	81a3      	strh	r3, [r4, #12]
 80098de:	e7ad      	b.n	800983c <__sflush_r+0x1c>
 80098e0:	690f      	ldr	r7, [r1, #16]
 80098e2:	2f00      	cmp	r7, #0
 80098e4:	d0a9      	beq.n	800983a <__sflush_r+0x1a>
 80098e6:	0793      	lsls	r3, r2, #30
 80098e8:	680e      	ldr	r6, [r1, #0]
 80098ea:	bf08      	it	eq
 80098ec:	694b      	ldreq	r3, [r1, #20]
 80098ee:	600f      	str	r7, [r1, #0]
 80098f0:	bf18      	it	ne
 80098f2:	2300      	movne	r3, #0
 80098f4:	eba6 0807 	sub.w	r8, r6, r7
 80098f8:	608b      	str	r3, [r1, #8]
 80098fa:	f1b8 0f00 	cmp.w	r8, #0
 80098fe:	dd9c      	ble.n	800983a <__sflush_r+0x1a>
 8009900:	6a21      	ldr	r1, [r4, #32]
 8009902:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009904:	4643      	mov	r3, r8
 8009906:	463a      	mov	r2, r7
 8009908:	4628      	mov	r0, r5
 800990a:	47b0      	blx	r6
 800990c:	2800      	cmp	r0, #0
 800990e:	dc06      	bgt.n	800991e <__sflush_r+0xfe>
 8009910:	89a3      	ldrh	r3, [r4, #12]
 8009912:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009916:	81a3      	strh	r3, [r4, #12]
 8009918:	f04f 30ff 	mov.w	r0, #4294967295
 800991c:	e78e      	b.n	800983c <__sflush_r+0x1c>
 800991e:	4407      	add	r7, r0
 8009920:	eba8 0800 	sub.w	r8, r8, r0
 8009924:	e7e9      	b.n	80098fa <__sflush_r+0xda>
 8009926:	bf00      	nop
 8009928:	20400001 	.word	0x20400001

0800992c <_fflush_r>:
 800992c:	b538      	push	{r3, r4, r5, lr}
 800992e:	690b      	ldr	r3, [r1, #16]
 8009930:	4605      	mov	r5, r0
 8009932:	460c      	mov	r4, r1
 8009934:	b913      	cbnz	r3, 800993c <_fflush_r+0x10>
 8009936:	2500      	movs	r5, #0
 8009938:	4628      	mov	r0, r5
 800993a:	bd38      	pop	{r3, r4, r5, pc}
 800993c:	b118      	cbz	r0, 8009946 <_fflush_r+0x1a>
 800993e:	6983      	ldr	r3, [r0, #24]
 8009940:	b90b      	cbnz	r3, 8009946 <_fflush_r+0x1a>
 8009942:	f000 f887 	bl	8009a54 <__sinit>
 8009946:	4b14      	ldr	r3, [pc, #80]	; (8009998 <_fflush_r+0x6c>)
 8009948:	429c      	cmp	r4, r3
 800994a:	d11b      	bne.n	8009984 <_fflush_r+0x58>
 800994c:	686c      	ldr	r4, [r5, #4]
 800994e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d0ef      	beq.n	8009936 <_fflush_r+0xa>
 8009956:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009958:	07d0      	lsls	r0, r2, #31
 800995a:	d404      	bmi.n	8009966 <_fflush_r+0x3a>
 800995c:	0599      	lsls	r1, r3, #22
 800995e:	d402      	bmi.n	8009966 <_fflush_r+0x3a>
 8009960:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009962:	f000 f915 	bl	8009b90 <__retarget_lock_acquire_recursive>
 8009966:	4628      	mov	r0, r5
 8009968:	4621      	mov	r1, r4
 800996a:	f7ff ff59 	bl	8009820 <__sflush_r>
 800996e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009970:	07da      	lsls	r2, r3, #31
 8009972:	4605      	mov	r5, r0
 8009974:	d4e0      	bmi.n	8009938 <_fflush_r+0xc>
 8009976:	89a3      	ldrh	r3, [r4, #12]
 8009978:	059b      	lsls	r3, r3, #22
 800997a:	d4dd      	bmi.n	8009938 <_fflush_r+0xc>
 800997c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800997e:	f000 f908 	bl	8009b92 <__retarget_lock_release_recursive>
 8009982:	e7d9      	b.n	8009938 <_fflush_r+0xc>
 8009984:	4b05      	ldr	r3, [pc, #20]	; (800999c <_fflush_r+0x70>)
 8009986:	429c      	cmp	r4, r3
 8009988:	d101      	bne.n	800998e <_fflush_r+0x62>
 800998a:	68ac      	ldr	r4, [r5, #8]
 800998c:	e7df      	b.n	800994e <_fflush_r+0x22>
 800998e:	4b04      	ldr	r3, [pc, #16]	; (80099a0 <_fflush_r+0x74>)
 8009990:	429c      	cmp	r4, r3
 8009992:	bf08      	it	eq
 8009994:	68ec      	ldreq	r4, [r5, #12]
 8009996:	e7da      	b.n	800994e <_fflush_r+0x22>
 8009998:	0800a80c 	.word	0x0800a80c
 800999c:	0800a82c 	.word	0x0800a82c
 80099a0:	0800a7ec 	.word	0x0800a7ec

080099a4 <std>:
 80099a4:	2300      	movs	r3, #0
 80099a6:	b510      	push	{r4, lr}
 80099a8:	4604      	mov	r4, r0
 80099aa:	e9c0 3300 	strd	r3, r3, [r0]
 80099ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80099b2:	6083      	str	r3, [r0, #8]
 80099b4:	8181      	strh	r1, [r0, #12]
 80099b6:	6643      	str	r3, [r0, #100]	; 0x64
 80099b8:	81c2      	strh	r2, [r0, #14]
 80099ba:	6183      	str	r3, [r0, #24]
 80099bc:	4619      	mov	r1, r3
 80099be:	2208      	movs	r2, #8
 80099c0:	305c      	adds	r0, #92	; 0x5c
 80099c2:	f7ff fdcf 	bl	8009564 <memset>
 80099c6:	4b05      	ldr	r3, [pc, #20]	; (80099dc <std+0x38>)
 80099c8:	6263      	str	r3, [r4, #36]	; 0x24
 80099ca:	4b05      	ldr	r3, [pc, #20]	; (80099e0 <std+0x3c>)
 80099cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80099ce:	4b05      	ldr	r3, [pc, #20]	; (80099e4 <std+0x40>)
 80099d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80099d2:	4b05      	ldr	r3, [pc, #20]	; (80099e8 <std+0x44>)
 80099d4:	6224      	str	r4, [r4, #32]
 80099d6:	6323      	str	r3, [r4, #48]	; 0x30
 80099d8:	bd10      	pop	{r4, pc}
 80099da:	bf00      	nop
 80099dc:	0800a421 	.word	0x0800a421
 80099e0:	0800a443 	.word	0x0800a443
 80099e4:	0800a47b 	.word	0x0800a47b
 80099e8:	0800a49f 	.word	0x0800a49f

080099ec <_cleanup_r>:
 80099ec:	4901      	ldr	r1, [pc, #4]	; (80099f4 <_cleanup_r+0x8>)
 80099ee:	f000 b8af 	b.w	8009b50 <_fwalk_reent>
 80099f2:	bf00      	nop
 80099f4:	0800992d 	.word	0x0800992d

080099f8 <__sfmoreglue>:
 80099f8:	b570      	push	{r4, r5, r6, lr}
 80099fa:	2268      	movs	r2, #104	; 0x68
 80099fc:	1e4d      	subs	r5, r1, #1
 80099fe:	4355      	muls	r5, r2
 8009a00:	460e      	mov	r6, r1
 8009a02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009a06:	f000 f997 	bl	8009d38 <_malloc_r>
 8009a0a:	4604      	mov	r4, r0
 8009a0c:	b140      	cbz	r0, 8009a20 <__sfmoreglue+0x28>
 8009a0e:	2100      	movs	r1, #0
 8009a10:	e9c0 1600 	strd	r1, r6, [r0]
 8009a14:	300c      	adds	r0, #12
 8009a16:	60a0      	str	r0, [r4, #8]
 8009a18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009a1c:	f7ff fda2 	bl	8009564 <memset>
 8009a20:	4620      	mov	r0, r4
 8009a22:	bd70      	pop	{r4, r5, r6, pc}

08009a24 <__sfp_lock_acquire>:
 8009a24:	4801      	ldr	r0, [pc, #4]	; (8009a2c <__sfp_lock_acquire+0x8>)
 8009a26:	f000 b8b3 	b.w	8009b90 <__retarget_lock_acquire_recursive>
 8009a2a:	bf00      	nop
 8009a2c:	20001011 	.word	0x20001011

08009a30 <__sfp_lock_release>:
 8009a30:	4801      	ldr	r0, [pc, #4]	; (8009a38 <__sfp_lock_release+0x8>)
 8009a32:	f000 b8ae 	b.w	8009b92 <__retarget_lock_release_recursive>
 8009a36:	bf00      	nop
 8009a38:	20001011 	.word	0x20001011

08009a3c <__sinit_lock_acquire>:
 8009a3c:	4801      	ldr	r0, [pc, #4]	; (8009a44 <__sinit_lock_acquire+0x8>)
 8009a3e:	f000 b8a7 	b.w	8009b90 <__retarget_lock_acquire_recursive>
 8009a42:	bf00      	nop
 8009a44:	20001012 	.word	0x20001012

08009a48 <__sinit_lock_release>:
 8009a48:	4801      	ldr	r0, [pc, #4]	; (8009a50 <__sinit_lock_release+0x8>)
 8009a4a:	f000 b8a2 	b.w	8009b92 <__retarget_lock_release_recursive>
 8009a4e:	bf00      	nop
 8009a50:	20001012 	.word	0x20001012

08009a54 <__sinit>:
 8009a54:	b510      	push	{r4, lr}
 8009a56:	4604      	mov	r4, r0
 8009a58:	f7ff fff0 	bl	8009a3c <__sinit_lock_acquire>
 8009a5c:	69a3      	ldr	r3, [r4, #24]
 8009a5e:	b11b      	cbz	r3, 8009a68 <__sinit+0x14>
 8009a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a64:	f7ff bff0 	b.w	8009a48 <__sinit_lock_release>
 8009a68:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009a6c:	6523      	str	r3, [r4, #80]	; 0x50
 8009a6e:	4b13      	ldr	r3, [pc, #76]	; (8009abc <__sinit+0x68>)
 8009a70:	4a13      	ldr	r2, [pc, #76]	; (8009ac0 <__sinit+0x6c>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	62a2      	str	r2, [r4, #40]	; 0x28
 8009a76:	42a3      	cmp	r3, r4
 8009a78:	bf04      	itt	eq
 8009a7a:	2301      	moveq	r3, #1
 8009a7c:	61a3      	streq	r3, [r4, #24]
 8009a7e:	4620      	mov	r0, r4
 8009a80:	f000 f820 	bl	8009ac4 <__sfp>
 8009a84:	6060      	str	r0, [r4, #4]
 8009a86:	4620      	mov	r0, r4
 8009a88:	f000 f81c 	bl	8009ac4 <__sfp>
 8009a8c:	60a0      	str	r0, [r4, #8]
 8009a8e:	4620      	mov	r0, r4
 8009a90:	f000 f818 	bl	8009ac4 <__sfp>
 8009a94:	2200      	movs	r2, #0
 8009a96:	60e0      	str	r0, [r4, #12]
 8009a98:	2104      	movs	r1, #4
 8009a9a:	6860      	ldr	r0, [r4, #4]
 8009a9c:	f7ff ff82 	bl	80099a4 <std>
 8009aa0:	68a0      	ldr	r0, [r4, #8]
 8009aa2:	2201      	movs	r2, #1
 8009aa4:	2109      	movs	r1, #9
 8009aa6:	f7ff ff7d 	bl	80099a4 <std>
 8009aaa:	68e0      	ldr	r0, [r4, #12]
 8009aac:	2202      	movs	r2, #2
 8009aae:	2112      	movs	r1, #18
 8009ab0:	f7ff ff78 	bl	80099a4 <std>
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	61a3      	str	r3, [r4, #24]
 8009ab8:	e7d2      	b.n	8009a60 <__sinit+0xc>
 8009aba:	bf00      	nop
 8009abc:	0800a7e8 	.word	0x0800a7e8
 8009ac0:	080099ed 	.word	0x080099ed

08009ac4 <__sfp>:
 8009ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ac6:	4607      	mov	r7, r0
 8009ac8:	f7ff ffac 	bl	8009a24 <__sfp_lock_acquire>
 8009acc:	4b1e      	ldr	r3, [pc, #120]	; (8009b48 <__sfp+0x84>)
 8009ace:	681e      	ldr	r6, [r3, #0]
 8009ad0:	69b3      	ldr	r3, [r6, #24]
 8009ad2:	b913      	cbnz	r3, 8009ada <__sfp+0x16>
 8009ad4:	4630      	mov	r0, r6
 8009ad6:	f7ff ffbd 	bl	8009a54 <__sinit>
 8009ada:	3648      	adds	r6, #72	; 0x48
 8009adc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009ae0:	3b01      	subs	r3, #1
 8009ae2:	d503      	bpl.n	8009aec <__sfp+0x28>
 8009ae4:	6833      	ldr	r3, [r6, #0]
 8009ae6:	b30b      	cbz	r3, 8009b2c <__sfp+0x68>
 8009ae8:	6836      	ldr	r6, [r6, #0]
 8009aea:	e7f7      	b.n	8009adc <__sfp+0x18>
 8009aec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009af0:	b9d5      	cbnz	r5, 8009b28 <__sfp+0x64>
 8009af2:	4b16      	ldr	r3, [pc, #88]	; (8009b4c <__sfp+0x88>)
 8009af4:	60e3      	str	r3, [r4, #12]
 8009af6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009afa:	6665      	str	r5, [r4, #100]	; 0x64
 8009afc:	f000 f847 	bl	8009b8e <__retarget_lock_init_recursive>
 8009b00:	f7ff ff96 	bl	8009a30 <__sfp_lock_release>
 8009b04:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009b08:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009b0c:	6025      	str	r5, [r4, #0]
 8009b0e:	61a5      	str	r5, [r4, #24]
 8009b10:	2208      	movs	r2, #8
 8009b12:	4629      	mov	r1, r5
 8009b14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009b18:	f7ff fd24 	bl	8009564 <memset>
 8009b1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009b20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009b24:	4620      	mov	r0, r4
 8009b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b28:	3468      	adds	r4, #104	; 0x68
 8009b2a:	e7d9      	b.n	8009ae0 <__sfp+0x1c>
 8009b2c:	2104      	movs	r1, #4
 8009b2e:	4638      	mov	r0, r7
 8009b30:	f7ff ff62 	bl	80099f8 <__sfmoreglue>
 8009b34:	4604      	mov	r4, r0
 8009b36:	6030      	str	r0, [r6, #0]
 8009b38:	2800      	cmp	r0, #0
 8009b3a:	d1d5      	bne.n	8009ae8 <__sfp+0x24>
 8009b3c:	f7ff ff78 	bl	8009a30 <__sfp_lock_release>
 8009b40:	230c      	movs	r3, #12
 8009b42:	603b      	str	r3, [r7, #0]
 8009b44:	e7ee      	b.n	8009b24 <__sfp+0x60>
 8009b46:	bf00      	nop
 8009b48:	0800a7e8 	.word	0x0800a7e8
 8009b4c:	ffff0001 	.word	0xffff0001

08009b50 <_fwalk_reent>:
 8009b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b54:	4606      	mov	r6, r0
 8009b56:	4688      	mov	r8, r1
 8009b58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009b5c:	2700      	movs	r7, #0
 8009b5e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b62:	f1b9 0901 	subs.w	r9, r9, #1
 8009b66:	d505      	bpl.n	8009b74 <_fwalk_reent+0x24>
 8009b68:	6824      	ldr	r4, [r4, #0]
 8009b6a:	2c00      	cmp	r4, #0
 8009b6c:	d1f7      	bne.n	8009b5e <_fwalk_reent+0xe>
 8009b6e:	4638      	mov	r0, r7
 8009b70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b74:	89ab      	ldrh	r3, [r5, #12]
 8009b76:	2b01      	cmp	r3, #1
 8009b78:	d907      	bls.n	8009b8a <_fwalk_reent+0x3a>
 8009b7a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b7e:	3301      	adds	r3, #1
 8009b80:	d003      	beq.n	8009b8a <_fwalk_reent+0x3a>
 8009b82:	4629      	mov	r1, r5
 8009b84:	4630      	mov	r0, r6
 8009b86:	47c0      	blx	r8
 8009b88:	4307      	orrs	r7, r0
 8009b8a:	3568      	adds	r5, #104	; 0x68
 8009b8c:	e7e9      	b.n	8009b62 <_fwalk_reent+0x12>

08009b8e <__retarget_lock_init_recursive>:
 8009b8e:	4770      	bx	lr

08009b90 <__retarget_lock_acquire_recursive>:
 8009b90:	4770      	bx	lr

08009b92 <__retarget_lock_release_recursive>:
 8009b92:	4770      	bx	lr

08009b94 <__swhatbuf_r>:
 8009b94:	b570      	push	{r4, r5, r6, lr}
 8009b96:	460e      	mov	r6, r1
 8009b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b9c:	2900      	cmp	r1, #0
 8009b9e:	b096      	sub	sp, #88	; 0x58
 8009ba0:	4614      	mov	r4, r2
 8009ba2:	461d      	mov	r5, r3
 8009ba4:	da08      	bge.n	8009bb8 <__swhatbuf_r+0x24>
 8009ba6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009baa:	2200      	movs	r2, #0
 8009bac:	602a      	str	r2, [r5, #0]
 8009bae:	061a      	lsls	r2, r3, #24
 8009bb0:	d410      	bmi.n	8009bd4 <__swhatbuf_r+0x40>
 8009bb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009bb6:	e00e      	b.n	8009bd6 <__swhatbuf_r+0x42>
 8009bb8:	466a      	mov	r2, sp
 8009bba:	f000 fc97 	bl	800a4ec <_fstat_r>
 8009bbe:	2800      	cmp	r0, #0
 8009bc0:	dbf1      	blt.n	8009ba6 <__swhatbuf_r+0x12>
 8009bc2:	9a01      	ldr	r2, [sp, #4]
 8009bc4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009bc8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009bcc:	425a      	negs	r2, r3
 8009bce:	415a      	adcs	r2, r3
 8009bd0:	602a      	str	r2, [r5, #0]
 8009bd2:	e7ee      	b.n	8009bb2 <__swhatbuf_r+0x1e>
 8009bd4:	2340      	movs	r3, #64	; 0x40
 8009bd6:	2000      	movs	r0, #0
 8009bd8:	6023      	str	r3, [r4, #0]
 8009bda:	b016      	add	sp, #88	; 0x58
 8009bdc:	bd70      	pop	{r4, r5, r6, pc}
	...

08009be0 <__smakebuf_r>:
 8009be0:	898b      	ldrh	r3, [r1, #12]
 8009be2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009be4:	079d      	lsls	r5, r3, #30
 8009be6:	4606      	mov	r6, r0
 8009be8:	460c      	mov	r4, r1
 8009bea:	d507      	bpl.n	8009bfc <__smakebuf_r+0x1c>
 8009bec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009bf0:	6023      	str	r3, [r4, #0]
 8009bf2:	6123      	str	r3, [r4, #16]
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	6163      	str	r3, [r4, #20]
 8009bf8:	b002      	add	sp, #8
 8009bfa:	bd70      	pop	{r4, r5, r6, pc}
 8009bfc:	ab01      	add	r3, sp, #4
 8009bfe:	466a      	mov	r2, sp
 8009c00:	f7ff ffc8 	bl	8009b94 <__swhatbuf_r>
 8009c04:	9900      	ldr	r1, [sp, #0]
 8009c06:	4605      	mov	r5, r0
 8009c08:	4630      	mov	r0, r6
 8009c0a:	f000 f895 	bl	8009d38 <_malloc_r>
 8009c0e:	b948      	cbnz	r0, 8009c24 <__smakebuf_r+0x44>
 8009c10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c14:	059a      	lsls	r2, r3, #22
 8009c16:	d4ef      	bmi.n	8009bf8 <__smakebuf_r+0x18>
 8009c18:	f023 0303 	bic.w	r3, r3, #3
 8009c1c:	f043 0302 	orr.w	r3, r3, #2
 8009c20:	81a3      	strh	r3, [r4, #12]
 8009c22:	e7e3      	b.n	8009bec <__smakebuf_r+0xc>
 8009c24:	4b0d      	ldr	r3, [pc, #52]	; (8009c5c <__smakebuf_r+0x7c>)
 8009c26:	62b3      	str	r3, [r6, #40]	; 0x28
 8009c28:	89a3      	ldrh	r3, [r4, #12]
 8009c2a:	6020      	str	r0, [r4, #0]
 8009c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c30:	81a3      	strh	r3, [r4, #12]
 8009c32:	9b00      	ldr	r3, [sp, #0]
 8009c34:	6163      	str	r3, [r4, #20]
 8009c36:	9b01      	ldr	r3, [sp, #4]
 8009c38:	6120      	str	r0, [r4, #16]
 8009c3a:	b15b      	cbz	r3, 8009c54 <__smakebuf_r+0x74>
 8009c3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c40:	4630      	mov	r0, r6
 8009c42:	f000 fc65 	bl	800a510 <_isatty_r>
 8009c46:	b128      	cbz	r0, 8009c54 <__smakebuf_r+0x74>
 8009c48:	89a3      	ldrh	r3, [r4, #12]
 8009c4a:	f023 0303 	bic.w	r3, r3, #3
 8009c4e:	f043 0301 	orr.w	r3, r3, #1
 8009c52:	81a3      	strh	r3, [r4, #12]
 8009c54:	89a0      	ldrh	r0, [r4, #12]
 8009c56:	4305      	orrs	r5, r0
 8009c58:	81a5      	strh	r5, [r4, #12]
 8009c5a:	e7cd      	b.n	8009bf8 <__smakebuf_r+0x18>
 8009c5c:	080099ed 	.word	0x080099ed

08009c60 <_free_r>:
 8009c60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c62:	2900      	cmp	r1, #0
 8009c64:	d044      	beq.n	8009cf0 <_free_r+0x90>
 8009c66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c6a:	9001      	str	r0, [sp, #4]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	f1a1 0404 	sub.w	r4, r1, #4
 8009c72:	bfb8      	it	lt
 8009c74:	18e4      	addlt	r4, r4, r3
 8009c76:	f000 fc95 	bl	800a5a4 <__malloc_lock>
 8009c7a:	4a1e      	ldr	r2, [pc, #120]	; (8009cf4 <_free_r+0x94>)
 8009c7c:	9801      	ldr	r0, [sp, #4]
 8009c7e:	6813      	ldr	r3, [r2, #0]
 8009c80:	b933      	cbnz	r3, 8009c90 <_free_r+0x30>
 8009c82:	6063      	str	r3, [r4, #4]
 8009c84:	6014      	str	r4, [r2, #0]
 8009c86:	b003      	add	sp, #12
 8009c88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c8c:	f000 bc90 	b.w	800a5b0 <__malloc_unlock>
 8009c90:	42a3      	cmp	r3, r4
 8009c92:	d908      	bls.n	8009ca6 <_free_r+0x46>
 8009c94:	6825      	ldr	r5, [r4, #0]
 8009c96:	1961      	adds	r1, r4, r5
 8009c98:	428b      	cmp	r3, r1
 8009c9a:	bf01      	itttt	eq
 8009c9c:	6819      	ldreq	r1, [r3, #0]
 8009c9e:	685b      	ldreq	r3, [r3, #4]
 8009ca0:	1949      	addeq	r1, r1, r5
 8009ca2:	6021      	streq	r1, [r4, #0]
 8009ca4:	e7ed      	b.n	8009c82 <_free_r+0x22>
 8009ca6:	461a      	mov	r2, r3
 8009ca8:	685b      	ldr	r3, [r3, #4]
 8009caa:	b10b      	cbz	r3, 8009cb0 <_free_r+0x50>
 8009cac:	42a3      	cmp	r3, r4
 8009cae:	d9fa      	bls.n	8009ca6 <_free_r+0x46>
 8009cb0:	6811      	ldr	r1, [r2, #0]
 8009cb2:	1855      	adds	r5, r2, r1
 8009cb4:	42a5      	cmp	r5, r4
 8009cb6:	d10b      	bne.n	8009cd0 <_free_r+0x70>
 8009cb8:	6824      	ldr	r4, [r4, #0]
 8009cba:	4421      	add	r1, r4
 8009cbc:	1854      	adds	r4, r2, r1
 8009cbe:	42a3      	cmp	r3, r4
 8009cc0:	6011      	str	r1, [r2, #0]
 8009cc2:	d1e0      	bne.n	8009c86 <_free_r+0x26>
 8009cc4:	681c      	ldr	r4, [r3, #0]
 8009cc6:	685b      	ldr	r3, [r3, #4]
 8009cc8:	6053      	str	r3, [r2, #4]
 8009cca:	4421      	add	r1, r4
 8009ccc:	6011      	str	r1, [r2, #0]
 8009cce:	e7da      	b.n	8009c86 <_free_r+0x26>
 8009cd0:	d902      	bls.n	8009cd8 <_free_r+0x78>
 8009cd2:	230c      	movs	r3, #12
 8009cd4:	6003      	str	r3, [r0, #0]
 8009cd6:	e7d6      	b.n	8009c86 <_free_r+0x26>
 8009cd8:	6825      	ldr	r5, [r4, #0]
 8009cda:	1961      	adds	r1, r4, r5
 8009cdc:	428b      	cmp	r3, r1
 8009cde:	bf04      	itt	eq
 8009ce0:	6819      	ldreq	r1, [r3, #0]
 8009ce2:	685b      	ldreq	r3, [r3, #4]
 8009ce4:	6063      	str	r3, [r4, #4]
 8009ce6:	bf04      	itt	eq
 8009ce8:	1949      	addeq	r1, r1, r5
 8009cea:	6021      	streq	r1, [r4, #0]
 8009cec:	6054      	str	r4, [r2, #4]
 8009cee:	e7ca      	b.n	8009c86 <_free_r+0x26>
 8009cf0:	b003      	add	sp, #12
 8009cf2:	bd30      	pop	{r4, r5, pc}
 8009cf4:	20001014 	.word	0x20001014

08009cf8 <sbrk_aligned>:
 8009cf8:	b570      	push	{r4, r5, r6, lr}
 8009cfa:	4e0e      	ldr	r6, [pc, #56]	; (8009d34 <sbrk_aligned+0x3c>)
 8009cfc:	460c      	mov	r4, r1
 8009cfe:	6831      	ldr	r1, [r6, #0]
 8009d00:	4605      	mov	r5, r0
 8009d02:	b911      	cbnz	r1, 8009d0a <sbrk_aligned+0x12>
 8009d04:	f000 fb7c 	bl	800a400 <_sbrk_r>
 8009d08:	6030      	str	r0, [r6, #0]
 8009d0a:	4621      	mov	r1, r4
 8009d0c:	4628      	mov	r0, r5
 8009d0e:	f000 fb77 	bl	800a400 <_sbrk_r>
 8009d12:	1c43      	adds	r3, r0, #1
 8009d14:	d00a      	beq.n	8009d2c <sbrk_aligned+0x34>
 8009d16:	1cc4      	adds	r4, r0, #3
 8009d18:	f024 0403 	bic.w	r4, r4, #3
 8009d1c:	42a0      	cmp	r0, r4
 8009d1e:	d007      	beq.n	8009d30 <sbrk_aligned+0x38>
 8009d20:	1a21      	subs	r1, r4, r0
 8009d22:	4628      	mov	r0, r5
 8009d24:	f000 fb6c 	bl	800a400 <_sbrk_r>
 8009d28:	3001      	adds	r0, #1
 8009d2a:	d101      	bne.n	8009d30 <sbrk_aligned+0x38>
 8009d2c:	f04f 34ff 	mov.w	r4, #4294967295
 8009d30:	4620      	mov	r0, r4
 8009d32:	bd70      	pop	{r4, r5, r6, pc}
 8009d34:	20001018 	.word	0x20001018

08009d38 <_malloc_r>:
 8009d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d3c:	1ccd      	adds	r5, r1, #3
 8009d3e:	f025 0503 	bic.w	r5, r5, #3
 8009d42:	3508      	adds	r5, #8
 8009d44:	2d0c      	cmp	r5, #12
 8009d46:	bf38      	it	cc
 8009d48:	250c      	movcc	r5, #12
 8009d4a:	2d00      	cmp	r5, #0
 8009d4c:	4607      	mov	r7, r0
 8009d4e:	db01      	blt.n	8009d54 <_malloc_r+0x1c>
 8009d50:	42a9      	cmp	r1, r5
 8009d52:	d905      	bls.n	8009d60 <_malloc_r+0x28>
 8009d54:	230c      	movs	r3, #12
 8009d56:	603b      	str	r3, [r7, #0]
 8009d58:	2600      	movs	r6, #0
 8009d5a:	4630      	mov	r0, r6
 8009d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d60:	4e2e      	ldr	r6, [pc, #184]	; (8009e1c <_malloc_r+0xe4>)
 8009d62:	f000 fc1f 	bl	800a5a4 <__malloc_lock>
 8009d66:	6833      	ldr	r3, [r6, #0]
 8009d68:	461c      	mov	r4, r3
 8009d6a:	bb34      	cbnz	r4, 8009dba <_malloc_r+0x82>
 8009d6c:	4629      	mov	r1, r5
 8009d6e:	4638      	mov	r0, r7
 8009d70:	f7ff ffc2 	bl	8009cf8 <sbrk_aligned>
 8009d74:	1c43      	adds	r3, r0, #1
 8009d76:	4604      	mov	r4, r0
 8009d78:	d14d      	bne.n	8009e16 <_malloc_r+0xde>
 8009d7a:	6834      	ldr	r4, [r6, #0]
 8009d7c:	4626      	mov	r6, r4
 8009d7e:	2e00      	cmp	r6, #0
 8009d80:	d140      	bne.n	8009e04 <_malloc_r+0xcc>
 8009d82:	6823      	ldr	r3, [r4, #0]
 8009d84:	4631      	mov	r1, r6
 8009d86:	4638      	mov	r0, r7
 8009d88:	eb04 0803 	add.w	r8, r4, r3
 8009d8c:	f000 fb38 	bl	800a400 <_sbrk_r>
 8009d90:	4580      	cmp	r8, r0
 8009d92:	d13a      	bne.n	8009e0a <_malloc_r+0xd2>
 8009d94:	6821      	ldr	r1, [r4, #0]
 8009d96:	3503      	adds	r5, #3
 8009d98:	1a6d      	subs	r5, r5, r1
 8009d9a:	f025 0503 	bic.w	r5, r5, #3
 8009d9e:	3508      	adds	r5, #8
 8009da0:	2d0c      	cmp	r5, #12
 8009da2:	bf38      	it	cc
 8009da4:	250c      	movcc	r5, #12
 8009da6:	4629      	mov	r1, r5
 8009da8:	4638      	mov	r0, r7
 8009daa:	f7ff ffa5 	bl	8009cf8 <sbrk_aligned>
 8009dae:	3001      	adds	r0, #1
 8009db0:	d02b      	beq.n	8009e0a <_malloc_r+0xd2>
 8009db2:	6823      	ldr	r3, [r4, #0]
 8009db4:	442b      	add	r3, r5
 8009db6:	6023      	str	r3, [r4, #0]
 8009db8:	e00e      	b.n	8009dd8 <_malloc_r+0xa0>
 8009dba:	6822      	ldr	r2, [r4, #0]
 8009dbc:	1b52      	subs	r2, r2, r5
 8009dbe:	d41e      	bmi.n	8009dfe <_malloc_r+0xc6>
 8009dc0:	2a0b      	cmp	r2, #11
 8009dc2:	d916      	bls.n	8009df2 <_malloc_r+0xba>
 8009dc4:	1961      	adds	r1, r4, r5
 8009dc6:	42a3      	cmp	r3, r4
 8009dc8:	6025      	str	r5, [r4, #0]
 8009dca:	bf18      	it	ne
 8009dcc:	6059      	strne	r1, [r3, #4]
 8009dce:	6863      	ldr	r3, [r4, #4]
 8009dd0:	bf08      	it	eq
 8009dd2:	6031      	streq	r1, [r6, #0]
 8009dd4:	5162      	str	r2, [r4, r5]
 8009dd6:	604b      	str	r3, [r1, #4]
 8009dd8:	4638      	mov	r0, r7
 8009dda:	f104 060b 	add.w	r6, r4, #11
 8009dde:	f000 fbe7 	bl	800a5b0 <__malloc_unlock>
 8009de2:	f026 0607 	bic.w	r6, r6, #7
 8009de6:	1d23      	adds	r3, r4, #4
 8009de8:	1af2      	subs	r2, r6, r3
 8009dea:	d0b6      	beq.n	8009d5a <_malloc_r+0x22>
 8009dec:	1b9b      	subs	r3, r3, r6
 8009dee:	50a3      	str	r3, [r4, r2]
 8009df0:	e7b3      	b.n	8009d5a <_malloc_r+0x22>
 8009df2:	6862      	ldr	r2, [r4, #4]
 8009df4:	42a3      	cmp	r3, r4
 8009df6:	bf0c      	ite	eq
 8009df8:	6032      	streq	r2, [r6, #0]
 8009dfa:	605a      	strne	r2, [r3, #4]
 8009dfc:	e7ec      	b.n	8009dd8 <_malloc_r+0xa0>
 8009dfe:	4623      	mov	r3, r4
 8009e00:	6864      	ldr	r4, [r4, #4]
 8009e02:	e7b2      	b.n	8009d6a <_malloc_r+0x32>
 8009e04:	4634      	mov	r4, r6
 8009e06:	6876      	ldr	r6, [r6, #4]
 8009e08:	e7b9      	b.n	8009d7e <_malloc_r+0x46>
 8009e0a:	230c      	movs	r3, #12
 8009e0c:	603b      	str	r3, [r7, #0]
 8009e0e:	4638      	mov	r0, r7
 8009e10:	f000 fbce 	bl	800a5b0 <__malloc_unlock>
 8009e14:	e7a1      	b.n	8009d5a <_malloc_r+0x22>
 8009e16:	6025      	str	r5, [r4, #0]
 8009e18:	e7de      	b.n	8009dd8 <_malloc_r+0xa0>
 8009e1a:	bf00      	nop
 8009e1c:	20001014 	.word	0x20001014

08009e20 <__ssputs_r>:
 8009e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e24:	688e      	ldr	r6, [r1, #8]
 8009e26:	429e      	cmp	r6, r3
 8009e28:	4682      	mov	sl, r0
 8009e2a:	460c      	mov	r4, r1
 8009e2c:	4690      	mov	r8, r2
 8009e2e:	461f      	mov	r7, r3
 8009e30:	d838      	bhi.n	8009ea4 <__ssputs_r+0x84>
 8009e32:	898a      	ldrh	r2, [r1, #12]
 8009e34:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009e38:	d032      	beq.n	8009ea0 <__ssputs_r+0x80>
 8009e3a:	6825      	ldr	r5, [r4, #0]
 8009e3c:	6909      	ldr	r1, [r1, #16]
 8009e3e:	eba5 0901 	sub.w	r9, r5, r1
 8009e42:	6965      	ldr	r5, [r4, #20]
 8009e44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009e48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009e4c:	3301      	adds	r3, #1
 8009e4e:	444b      	add	r3, r9
 8009e50:	106d      	asrs	r5, r5, #1
 8009e52:	429d      	cmp	r5, r3
 8009e54:	bf38      	it	cc
 8009e56:	461d      	movcc	r5, r3
 8009e58:	0553      	lsls	r3, r2, #21
 8009e5a:	d531      	bpl.n	8009ec0 <__ssputs_r+0xa0>
 8009e5c:	4629      	mov	r1, r5
 8009e5e:	f7ff ff6b 	bl	8009d38 <_malloc_r>
 8009e62:	4606      	mov	r6, r0
 8009e64:	b950      	cbnz	r0, 8009e7c <__ssputs_r+0x5c>
 8009e66:	230c      	movs	r3, #12
 8009e68:	f8ca 3000 	str.w	r3, [sl]
 8009e6c:	89a3      	ldrh	r3, [r4, #12]
 8009e6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e72:	81a3      	strh	r3, [r4, #12]
 8009e74:	f04f 30ff 	mov.w	r0, #4294967295
 8009e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e7c:	6921      	ldr	r1, [r4, #16]
 8009e7e:	464a      	mov	r2, r9
 8009e80:	f000 fb68 	bl	800a554 <memcpy>
 8009e84:	89a3      	ldrh	r3, [r4, #12]
 8009e86:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009e8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e8e:	81a3      	strh	r3, [r4, #12]
 8009e90:	6126      	str	r6, [r4, #16]
 8009e92:	6165      	str	r5, [r4, #20]
 8009e94:	444e      	add	r6, r9
 8009e96:	eba5 0509 	sub.w	r5, r5, r9
 8009e9a:	6026      	str	r6, [r4, #0]
 8009e9c:	60a5      	str	r5, [r4, #8]
 8009e9e:	463e      	mov	r6, r7
 8009ea0:	42be      	cmp	r6, r7
 8009ea2:	d900      	bls.n	8009ea6 <__ssputs_r+0x86>
 8009ea4:	463e      	mov	r6, r7
 8009ea6:	6820      	ldr	r0, [r4, #0]
 8009ea8:	4632      	mov	r2, r6
 8009eaa:	4641      	mov	r1, r8
 8009eac:	f000 fb60 	bl	800a570 <memmove>
 8009eb0:	68a3      	ldr	r3, [r4, #8]
 8009eb2:	1b9b      	subs	r3, r3, r6
 8009eb4:	60a3      	str	r3, [r4, #8]
 8009eb6:	6823      	ldr	r3, [r4, #0]
 8009eb8:	4433      	add	r3, r6
 8009eba:	6023      	str	r3, [r4, #0]
 8009ebc:	2000      	movs	r0, #0
 8009ebe:	e7db      	b.n	8009e78 <__ssputs_r+0x58>
 8009ec0:	462a      	mov	r2, r5
 8009ec2:	f000 fb7b 	bl	800a5bc <_realloc_r>
 8009ec6:	4606      	mov	r6, r0
 8009ec8:	2800      	cmp	r0, #0
 8009eca:	d1e1      	bne.n	8009e90 <__ssputs_r+0x70>
 8009ecc:	6921      	ldr	r1, [r4, #16]
 8009ece:	4650      	mov	r0, sl
 8009ed0:	f7ff fec6 	bl	8009c60 <_free_r>
 8009ed4:	e7c7      	b.n	8009e66 <__ssputs_r+0x46>
	...

08009ed8 <_svfiprintf_r>:
 8009ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009edc:	4698      	mov	r8, r3
 8009ede:	898b      	ldrh	r3, [r1, #12]
 8009ee0:	061b      	lsls	r3, r3, #24
 8009ee2:	b09d      	sub	sp, #116	; 0x74
 8009ee4:	4607      	mov	r7, r0
 8009ee6:	460d      	mov	r5, r1
 8009ee8:	4614      	mov	r4, r2
 8009eea:	d50e      	bpl.n	8009f0a <_svfiprintf_r+0x32>
 8009eec:	690b      	ldr	r3, [r1, #16]
 8009eee:	b963      	cbnz	r3, 8009f0a <_svfiprintf_r+0x32>
 8009ef0:	2140      	movs	r1, #64	; 0x40
 8009ef2:	f7ff ff21 	bl	8009d38 <_malloc_r>
 8009ef6:	6028      	str	r0, [r5, #0]
 8009ef8:	6128      	str	r0, [r5, #16]
 8009efa:	b920      	cbnz	r0, 8009f06 <_svfiprintf_r+0x2e>
 8009efc:	230c      	movs	r3, #12
 8009efe:	603b      	str	r3, [r7, #0]
 8009f00:	f04f 30ff 	mov.w	r0, #4294967295
 8009f04:	e0d1      	b.n	800a0aa <_svfiprintf_r+0x1d2>
 8009f06:	2340      	movs	r3, #64	; 0x40
 8009f08:	616b      	str	r3, [r5, #20]
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	9309      	str	r3, [sp, #36]	; 0x24
 8009f0e:	2320      	movs	r3, #32
 8009f10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f14:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f18:	2330      	movs	r3, #48	; 0x30
 8009f1a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a0c4 <_svfiprintf_r+0x1ec>
 8009f1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f22:	f04f 0901 	mov.w	r9, #1
 8009f26:	4623      	mov	r3, r4
 8009f28:	469a      	mov	sl, r3
 8009f2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f2e:	b10a      	cbz	r2, 8009f34 <_svfiprintf_r+0x5c>
 8009f30:	2a25      	cmp	r2, #37	; 0x25
 8009f32:	d1f9      	bne.n	8009f28 <_svfiprintf_r+0x50>
 8009f34:	ebba 0b04 	subs.w	fp, sl, r4
 8009f38:	d00b      	beq.n	8009f52 <_svfiprintf_r+0x7a>
 8009f3a:	465b      	mov	r3, fp
 8009f3c:	4622      	mov	r2, r4
 8009f3e:	4629      	mov	r1, r5
 8009f40:	4638      	mov	r0, r7
 8009f42:	f7ff ff6d 	bl	8009e20 <__ssputs_r>
 8009f46:	3001      	adds	r0, #1
 8009f48:	f000 80aa 	beq.w	800a0a0 <_svfiprintf_r+0x1c8>
 8009f4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f4e:	445a      	add	r2, fp
 8009f50:	9209      	str	r2, [sp, #36]	; 0x24
 8009f52:	f89a 3000 	ldrb.w	r3, [sl]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	f000 80a2 	beq.w	800a0a0 <_svfiprintf_r+0x1c8>
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	f04f 32ff 	mov.w	r2, #4294967295
 8009f62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f66:	f10a 0a01 	add.w	sl, sl, #1
 8009f6a:	9304      	str	r3, [sp, #16]
 8009f6c:	9307      	str	r3, [sp, #28]
 8009f6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f72:	931a      	str	r3, [sp, #104]	; 0x68
 8009f74:	4654      	mov	r4, sl
 8009f76:	2205      	movs	r2, #5
 8009f78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f7c:	4851      	ldr	r0, [pc, #324]	; (800a0c4 <_svfiprintf_r+0x1ec>)
 8009f7e:	f7f6 f937 	bl	80001f0 <memchr>
 8009f82:	9a04      	ldr	r2, [sp, #16]
 8009f84:	b9d8      	cbnz	r0, 8009fbe <_svfiprintf_r+0xe6>
 8009f86:	06d0      	lsls	r0, r2, #27
 8009f88:	bf44      	itt	mi
 8009f8a:	2320      	movmi	r3, #32
 8009f8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f90:	0711      	lsls	r1, r2, #28
 8009f92:	bf44      	itt	mi
 8009f94:	232b      	movmi	r3, #43	; 0x2b
 8009f96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f9a:	f89a 3000 	ldrb.w	r3, [sl]
 8009f9e:	2b2a      	cmp	r3, #42	; 0x2a
 8009fa0:	d015      	beq.n	8009fce <_svfiprintf_r+0xf6>
 8009fa2:	9a07      	ldr	r2, [sp, #28]
 8009fa4:	4654      	mov	r4, sl
 8009fa6:	2000      	movs	r0, #0
 8009fa8:	f04f 0c0a 	mov.w	ip, #10
 8009fac:	4621      	mov	r1, r4
 8009fae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009fb2:	3b30      	subs	r3, #48	; 0x30
 8009fb4:	2b09      	cmp	r3, #9
 8009fb6:	d94e      	bls.n	800a056 <_svfiprintf_r+0x17e>
 8009fb8:	b1b0      	cbz	r0, 8009fe8 <_svfiprintf_r+0x110>
 8009fba:	9207      	str	r2, [sp, #28]
 8009fbc:	e014      	b.n	8009fe8 <_svfiprintf_r+0x110>
 8009fbe:	eba0 0308 	sub.w	r3, r0, r8
 8009fc2:	fa09 f303 	lsl.w	r3, r9, r3
 8009fc6:	4313      	orrs	r3, r2
 8009fc8:	9304      	str	r3, [sp, #16]
 8009fca:	46a2      	mov	sl, r4
 8009fcc:	e7d2      	b.n	8009f74 <_svfiprintf_r+0x9c>
 8009fce:	9b03      	ldr	r3, [sp, #12]
 8009fd0:	1d19      	adds	r1, r3, #4
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	9103      	str	r1, [sp, #12]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	bfbb      	ittet	lt
 8009fda:	425b      	neglt	r3, r3
 8009fdc:	f042 0202 	orrlt.w	r2, r2, #2
 8009fe0:	9307      	strge	r3, [sp, #28]
 8009fe2:	9307      	strlt	r3, [sp, #28]
 8009fe4:	bfb8      	it	lt
 8009fe6:	9204      	strlt	r2, [sp, #16]
 8009fe8:	7823      	ldrb	r3, [r4, #0]
 8009fea:	2b2e      	cmp	r3, #46	; 0x2e
 8009fec:	d10c      	bne.n	800a008 <_svfiprintf_r+0x130>
 8009fee:	7863      	ldrb	r3, [r4, #1]
 8009ff0:	2b2a      	cmp	r3, #42	; 0x2a
 8009ff2:	d135      	bne.n	800a060 <_svfiprintf_r+0x188>
 8009ff4:	9b03      	ldr	r3, [sp, #12]
 8009ff6:	1d1a      	adds	r2, r3, #4
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	9203      	str	r2, [sp, #12]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	bfb8      	it	lt
 800a000:	f04f 33ff 	movlt.w	r3, #4294967295
 800a004:	3402      	adds	r4, #2
 800a006:	9305      	str	r3, [sp, #20]
 800a008:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a0d4 <_svfiprintf_r+0x1fc>
 800a00c:	7821      	ldrb	r1, [r4, #0]
 800a00e:	2203      	movs	r2, #3
 800a010:	4650      	mov	r0, sl
 800a012:	f7f6 f8ed 	bl	80001f0 <memchr>
 800a016:	b140      	cbz	r0, 800a02a <_svfiprintf_r+0x152>
 800a018:	2340      	movs	r3, #64	; 0x40
 800a01a:	eba0 000a 	sub.w	r0, r0, sl
 800a01e:	fa03 f000 	lsl.w	r0, r3, r0
 800a022:	9b04      	ldr	r3, [sp, #16]
 800a024:	4303      	orrs	r3, r0
 800a026:	3401      	adds	r4, #1
 800a028:	9304      	str	r3, [sp, #16]
 800a02a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a02e:	4826      	ldr	r0, [pc, #152]	; (800a0c8 <_svfiprintf_r+0x1f0>)
 800a030:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a034:	2206      	movs	r2, #6
 800a036:	f7f6 f8db 	bl	80001f0 <memchr>
 800a03a:	2800      	cmp	r0, #0
 800a03c:	d038      	beq.n	800a0b0 <_svfiprintf_r+0x1d8>
 800a03e:	4b23      	ldr	r3, [pc, #140]	; (800a0cc <_svfiprintf_r+0x1f4>)
 800a040:	bb1b      	cbnz	r3, 800a08a <_svfiprintf_r+0x1b2>
 800a042:	9b03      	ldr	r3, [sp, #12]
 800a044:	3307      	adds	r3, #7
 800a046:	f023 0307 	bic.w	r3, r3, #7
 800a04a:	3308      	adds	r3, #8
 800a04c:	9303      	str	r3, [sp, #12]
 800a04e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a050:	4433      	add	r3, r6
 800a052:	9309      	str	r3, [sp, #36]	; 0x24
 800a054:	e767      	b.n	8009f26 <_svfiprintf_r+0x4e>
 800a056:	fb0c 3202 	mla	r2, ip, r2, r3
 800a05a:	460c      	mov	r4, r1
 800a05c:	2001      	movs	r0, #1
 800a05e:	e7a5      	b.n	8009fac <_svfiprintf_r+0xd4>
 800a060:	2300      	movs	r3, #0
 800a062:	3401      	adds	r4, #1
 800a064:	9305      	str	r3, [sp, #20]
 800a066:	4619      	mov	r1, r3
 800a068:	f04f 0c0a 	mov.w	ip, #10
 800a06c:	4620      	mov	r0, r4
 800a06e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a072:	3a30      	subs	r2, #48	; 0x30
 800a074:	2a09      	cmp	r2, #9
 800a076:	d903      	bls.n	800a080 <_svfiprintf_r+0x1a8>
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d0c5      	beq.n	800a008 <_svfiprintf_r+0x130>
 800a07c:	9105      	str	r1, [sp, #20]
 800a07e:	e7c3      	b.n	800a008 <_svfiprintf_r+0x130>
 800a080:	fb0c 2101 	mla	r1, ip, r1, r2
 800a084:	4604      	mov	r4, r0
 800a086:	2301      	movs	r3, #1
 800a088:	e7f0      	b.n	800a06c <_svfiprintf_r+0x194>
 800a08a:	ab03      	add	r3, sp, #12
 800a08c:	9300      	str	r3, [sp, #0]
 800a08e:	462a      	mov	r2, r5
 800a090:	4b0f      	ldr	r3, [pc, #60]	; (800a0d0 <_svfiprintf_r+0x1f8>)
 800a092:	a904      	add	r1, sp, #16
 800a094:	4638      	mov	r0, r7
 800a096:	f3af 8000 	nop.w
 800a09a:	1c42      	adds	r2, r0, #1
 800a09c:	4606      	mov	r6, r0
 800a09e:	d1d6      	bne.n	800a04e <_svfiprintf_r+0x176>
 800a0a0:	89ab      	ldrh	r3, [r5, #12]
 800a0a2:	065b      	lsls	r3, r3, #25
 800a0a4:	f53f af2c 	bmi.w	8009f00 <_svfiprintf_r+0x28>
 800a0a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a0aa:	b01d      	add	sp, #116	; 0x74
 800a0ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0b0:	ab03      	add	r3, sp, #12
 800a0b2:	9300      	str	r3, [sp, #0]
 800a0b4:	462a      	mov	r2, r5
 800a0b6:	4b06      	ldr	r3, [pc, #24]	; (800a0d0 <_svfiprintf_r+0x1f8>)
 800a0b8:	a904      	add	r1, sp, #16
 800a0ba:	4638      	mov	r0, r7
 800a0bc:	f000 f87a 	bl	800a1b4 <_printf_i>
 800a0c0:	e7eb      	b.n	800a09a <_svfiprintf_r+0x1c2>
 800a0c2:	bf00      	nop
 800a0c4:	0800a84c 	.word	0x0800a84c
 800a0c8:	0800a856 	.word	0x0800a856
 800a0cc:	00000000 	.word	0x00000000
 800a0d0:	08009e21 	.word	0x08009e21
 800a0d4:	0800a852 	.word	0x0800a852

0800a0d8 <_printf_common>:
 800a0d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0dc:	4616      	mov	r6, r2
 800a0de:	4699      	mov	r9, r3
 800a0e0:	688a      	ldr	r2, [r1, #8]
 800a0e2:	690b      	ldr	r3, [r1, #16]
 800a0e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	bfb8      	it	lt
 800a0ec:	4613      	movlt	r3, r2
 800a0ee:	6033      	str	r3, [r6, #0]
 800a0f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a0f4:	4607      	mov	r7, r0
 800a0f6:	460c      	mov	r4, r1
 800a0f8:	b10a      	cbz	r2, 800a0fe <_printf_common+0x26>
 800a0fa:	3301      	adds	r3, #1
 800a0fc:	6033      	str	r3, [r6, #0]
 800a0fe:	6823      	ldr	r3, [r4, #0]
 800a100:	0699      	lsls	r1, r3, #26
 800a102:	bf42      	ittt	mi
 800a104:	6833      	ldrmi	r3, [r6, #0]
 800a106:	3302      	addmi	r3, #2
 800a108:	6033      	strmi	r3, [r6, #0]
 800a10a:	6825      	ldr	r5, [r4, #0]
 800a10c:	f015 0506 	ands.w	r5, r5, #6
 800a110:	d106      	bne.n	800a120 <_printf_common+0x48>
 800a112:	f104 0a19 	add.w	sl, r4, #25
 800a116:	68e3      	ldr	r3, [r4, #12]
 800a118:	6832      	ldr	r2, [r6, #0]
 800a11a:	1a9b      	subs	r3, r3, r2
 800a11c:	42ab      	cmp	r3, r5
 800a11e:	dc26      	bgt.n	800a16e <_printf_common+0x96>
 800a120:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a124:	1e13      	subs	r3, r2, #0
 800a126:	6822      	ldr	r2, [r4, #0]
 800a128:	bf18      	it	ne
 800a12a:	2301      	movne	r3, #1
 800a12c:	0692      	lsls	r2, r2, #26
 800a12e:	d42b      	bmi.n	800a188 <_printf_common+0xb0>
 800a130:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a134:	4649      	mov	r1, r9
 800a136:	4638      	mov	r0, r7
 800a138:	47c0      	blx	r8
 800a13a:	3001      	adds	r0, #1
 800a13c:	d01e      	beq.n	800a17c <_printf_common+0xa4>
 800a13e:	6823      	ldr	r3, [r4, #0]
 800a140:	68e5      	ldr	r5, [r4, #12]
 800a142:	6832      	ldr	r2, [r6, #0]
 800a144:	f003 0306 	and.w	r3, r3, #6
 800a148:	2b04      	cmp	r3, #4
 800a14a:	bf08      	it	eq
 800a14c:	1aad      	subeq	r5, r5, r2
 800a14e:	68a3      	ldr	r3, [r4, #8]
 800a150:	6922      	ldr	r2, [r4, #16]
 800a152:	bf0c      	ite	eq
 800a154:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a158:	2500      	movne	r5, #0
 800a15a:	4293      	cmp	r3, r2
 800a15c:	bfc4      	itt	gt
 800a15e:	1a9b      	subgt	r3, r3, r2
 800a160:	18ed      	addgt	r5, r5, r3
 800a162:	2600      	movs	r6, #0
 800a164:	341a      	adds	r4, #26
 800a166:	42b5      	cmp	r5, r6
 800a168:	d11a      	bne.n	800a1a0 <_printf_common+0xc8>
 800a16a:	2000      	movs	r0, #0
 800a16c:	e008      	b.n	800a180 <_printf_common+0xa8>
 800a16e:	2301      	movs	r3, #1
 800a170:	4652      	mov	r2, sl
 800a172:	4649      	mov	r1, r9
 800a174:	4638      	mov	r0, r7
 800a176:	47c0      	blx	r8
 800a178:	3001      	adds	r0, #1
 800a17a:	d103      	bne.n	800a184 <_printf_common+0xac>
 800a17c:	f04f 30ff 	mov.w	r0, #4294967295
 800a180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a184:	3501      	adds	r5, #1
 800a186:	e7c6      	b.n	800a116 <_printf_common+0x3e>
 800a188:	18e1      	adds	r1, r4, r3
 800a18a:	1c5a      	adds	r2, r3, #1
 800a18c:	2030      	movs	r0, #48	; 0x30
 800a18e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a192:	4422      	add	r2, r4
 800a194:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a198:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a19c:	3302      	adds	r3, #2
 800a19e:	e7c7      	b.n	800a130 <_printf_common+0x58>
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	4622      	mov	r2, r4
 800a1a4:	4649      	mov	r1, r9
 800a1a6:	4638      	mov	r0, r7
 800a1a8:	47c0      	blx	r8
 800a1aa:	3001      	adds	r0, #1
 800a1ac:	d0e6      	beq.n	800a17c <_printf_common+0xa4>
 800a1ae:	3601      	adds	r6, #1
 800a1b0:	e7d9      	b.n	800a166 <_printf_common+0x8e>
	...

0800a1b4 <_printf_i>:
 800a1b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a1b8:	7e0f      	ldrb	r7, [r1, #24]
 800a1ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a1bc:	2f78      	cmp	r7, #120	; 0x78
 800a1be:	4691      	mov	r9, r2
 800a1c0:	4680      	mov	r8, r0
 800a1c2:	460c      	mov	r4, r1
 800a1c4:	469a      	mov	sl, r3
 800a1c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a1ca:	d807      	bhi.n	800a1dc <_printf_i+0x28>
 800a1cc:	2f62      	cmp	r7, #98	; 0x62
 800a1ce:	d80a      	bhi.n	800a1e6 <_printf_i+0x32>
 800a1d0:	2f00      	cmp	r7, #0
 800a1d2:	f000 80d8 	beq.w	800a386 <_printf_i+0x1d2>
 800a1d6:	2f58      	cmp	r7, #88	; 0x58
 800a1d8:	f000 80a3 	beq.w	800a322 <_printf_i+0x16e>
 800a1dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a1e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a1e4:	e03a      	b.n	800a25c <_printf_i+0xa8>
 800a1e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a1ea:	2b15      	cmp	r3, #21
 800a1ec:	d8f6      	bhi.n	800a1dc <_printf_i+0x28>
 800a1ee:	a101      	add	r1, pc, #4	; (adr r1, 800a1f4 <_printf_i+0x40>)
 800a1f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a1f4:	0800a24d 	.word	0x0800a24d
 800a1f8:	0800a261 	.word	0x0800a261
 800a1fc:	0800a1dd 	.word	0x0800a1dd
 800a200:	0800a1dd 	.word	0x0800a1dd
 800a204:	0800a1dd 	.word	0x0800a1dd
 800a208:	0800a1dd 	.word	0x0800a1dd
 800a20c:	0800a261 	.word	0x0800a261
 800a210:	0800a1dd 	.word	0x0800a1dd
 800a214:	0800a1dd 	.word	0x0800a1dd
 800a218:	0800a1dd 	.word	0x0800a1dd
 800a21c:	0800a1dd 	.word	0x0800a1dd
 800a220:	0800a36d 	.word	0x0800a36d
 800a224:	0800a291 	.word	0x0800a291
 800a228:	0800a34f 	.word	0x0800a34f
 800a22c:	0800a1dd 	.word	0x0800a1dd
 800a230:	0800a1dd 	.word	0x0800a1dd
 800a234:	0800a38f 	.word	0x0800a38f
 800a238:	0800a1dd 	.word	0x0800a1dd
 800a23c:	0800a291 	.word	0x0800a291
 800a240:	0800a1dd 	.word	0x0800a1dd
 800a244:	0800a1dd 	.word	0x0800a1dd
 800a248:	0800a357 	.word	0x0800a357
 800a24c:	682b      	ldr	r3, [r5, #0]
 800a24e:	1d1a      	adds	r2, r3, #4
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	602a      	str	r2, [r5, #0]
 800a254:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a258:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a25c:	2301      	movs	r3, #1
 800a25e:	e0a3      	b.n	800a3a8 <_printf_i+0x1f4>
 800a260:	6820      	ldr	r0, [r4, #0]
 800a262:	6829      	ldr	r1, [r5, #0]
 800a264:	0606      	lsls	r6, r0, #24
 800a266:	f101 0304 	add.w	r3, r1, #4
 800a26a:	d50a      	bpl.n	800a282 <_printf_i+0xce>
 800a26c:	680e      	ldr	r6, [r1, #0]
 800a26e:	602b      	str	r3, [r5, #0]
 800a270:	2e00      	cmp	r6, #0
 800a272:	da03      	bge.n	800a27c <_printf_i+0xc8>
 800a274:	232d      	movs	r3, #45	; 0x2d
 800a276:	4276      	negs	r6, r6
 800a278:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a27c:	485e      	ldr	r0, [pc, #376]	; (800a3f8 <_printf_i+0x244>)
 800a27e:	230a      	movs	r3, #10
 800a280:	e019      	b.n	800a2b6 <_printf_i+0x102>
 800a282:	680e      	ldr	r6, [r1, #0]
 800a284:	602b      	str	r3, [r5, #0]
 800a286:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a28a:	bf18      	it	ne
 800a28c:	b236      	sxthne	r6, r6
 800a28e:	e7ef      	b.n	800a270 <_printf_i+0xbc>
 800a290:	682b      	ldr	r3, [r5, #0]
 800a292:	6820      	ldr	r0, [r4, #0]
 800a294:	1d19      	adds	r1, r3, #4
 800a296:	6029      	str	r1, [r5, #0]
 800a298:	0601      	lsls	r1, r0, #24
 800a29a:	d501      	bpl.n	800a2a0 <_printf_i+0xec>
 800a29c:	681e      	ldr	r6, [r3, #0]
 800a29e:	e002      	b.n	800a2a6 <_printf_i+0xf2>
 800a2a0:	0646      	lsls	r6, r0, #25
 800a2a2:	d5fb      	bpl.n	800a29c <_printf_i+0xe8>
 800a2a4:	881e      	ldrh	r6, [r3, #0]
 800a2a6:	4854      	ldr	r0, [pc, #336]	; (800a3f8 <_printf_i+0x244>)
 800a2a8:	2f6f      	cmp	r7, #111	; 0x6f
 800a2aa:	bf0c      	ite	eq
 800a2ac:	2308      	moveq	r3, #8
 800a2ae:	230a      	movne	r3, #10
 800a2b0:	2100      	movs	r1, #0
 800a2b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a2b6:	6865      	ldr	r5, [r4, #4]
 800a2b8:	60a5      	str	r5, [r4, #8]
 800a2ba:	2d00      	cmp	r5, #0
 800a2bc:	bfa2      	ittt	ge
 800a2be:	6821      	ldrge	r1, [r4, #0]
 800a2c0:	f021 0104 	bicge.w	r1, r1, #4
 800a2c4:	6021      	strge	r1, [r4, #0]
 800a2c6:	b90e      	cbnz	r6, 800a2cc <_printf_i+0x118>
 800a2c8:	2d00      	cmp	r5, #0
 800a2ca:	d04d      	beq.n	800a368 <_printf_i+0x1b4>
 800a2cc:	4615      	mov	r5, r2
 800a2ce:	fbb6 f1f3 	udiv	r1, r6, r3
 800a2d2:	fb03 6711 	mls	r7, r3, r1, r6
 800a2d6:	5dc7      	ldrb	r7, [r0, r7]
 800a2d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a2dc:	4637      	mov	r7, r6
 800a2de:	42bb      	cmp	r3, r7
 800a2e0:	460e      	mov	r6, r1
 800a2e2:	d9f4      	bls.n	800a2ce <_printf_i+0x11a>
 800a2e4:	2b08      	cmp	r3, #8
 800a2e6:	d10b      	bne.n	800a300 <_printf_i+0x14c>
 800a2e8:	6823      	ldr	r3, [r4, #0]
 800a2ea:	07de      	lsls	r6, r3, #31
 800a2ec:	d508      	bpl.n	800a300 <_printf_i+0x14c>
 800a2ee:	6923      	ldr	r3, [r4, #16]
 800a2f0:	6861      	ldr	r1, [r4, #4]
 800a2f2:	4299      	cmp	r1, r3
 800a2f4:	bfde      	ittt	le
 800a2f6:	2330      	movle	r3, #48	; 0x30
 800a2f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a2fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a300:	1b52      	subs	r2, r2, r5
 800a302:	6122      	str	r2, [r4, #16]
 800a304:	f8cd a000 	str.w	sl, [sp]
 800a308:	464b      	mov	r3, r9
 800a30a:	aa03      	add	r2, sp, #12
 800a30c:	4621      	mov	r1, r4
 800a30e:	4640      	mov	r0, r8
 800a310:	f7ff fee2 	bl	800a0d8 <_printf_common>
 800a314:	3001      	adds	r0, #1
 800a316:	d14c      	bne.n	800a3b2 <_printf_i+0x1fe>
 800a318:	f04f 30ff 	mov.w	r0, #4294967295
 800a31c:	b004      	add	sp, #16
 800a31e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a322:	4835      	ldr	r0, [pc, #212]	; (800a3f8 <_printf_i+0x244>)
 800a324:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a328:	6829      	ldr	r1, [r5, #0]
 800a32a:	6823      	ldr	r3, [r4, #0]
 800a32c:	f851 6b04 	ldr.w	r6, [r1], #4
 800a330:	6029      	str	r1, [r5, #0]
 800a332:	061d      	lsls	r5, r3, #24
 800a334:	d514      	bpl.n	800a360 <_printf_i+0x1ac>
 800a336:	07df      	lsls	r7, r3, #31
 800a338:	bf44      	itt	mi
 800a33a:	f043 0320 	orrmi.w	r3, r3, #32
 800a33e:	6023      	strmi	r3, [r4, #0]
 800a340:	b91e      	cbnz	r6, 800a34a <_printf_i+0x196>
 800a342:	6823      	ldr	r3, [r4, #0]
 800a344:	f023 0320 	bic.w	r3, r3, #32
 800a348:	6023      	str	r3, [r4, #0]
 800a34a:	2310      	movs	r3, #16
 800a34c:	e7b0      	b.n	800a2b0 <_printf_i+0xfc>
 800a34e:	6823      	ldr	r3, [r4, #0]
 800a350:	f043 0320 	orr.w	r3, r3, #32
 800a354:	6023      	str	r3, [r4, #0]
 800a356:	2378      	movs	r3, #120	; 0x78
 800a358:	4828      	ldr	r0, [pc, #160]	; (800a3fc <_printf_i+0x248>)
 800a35a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a35e:	e7e3      	b.n	800a328 <_printf_i+0x174>
 800a360:	0659      	lsls	r1, r3, #25
 800a362:	bf48      	it	mi
 800a364:	b2b6      	uxthmi	r6, r6
 800a366:	e7e6      	b.n	800a336 <_printf_i+0x182>
 800a368:	4615      	mov	r5, r2
 800a36a:	e7bb      	b.n	800a2e4 <_printf_i+0x130>
 800a36c:	682b      	ldr	r3, [r5, #0]
 800a36e:	6826      	ldr	r6, [r4, #0]
 800a370:	6961      	ldr	r1, [r4, #20]
 800a372:	1d18      	adds	r0, r3, #4
 800a374:	6028      	str	r0, [r5, #0]
 800a376:	0635      	lsls	r5, r6, #24
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	d501      	bpl.n	800a380 <_printf_i+0x1cc>
 800a37c:	6019      	str	r1, [r3, #0]
 800a37e:	e002      	b.n	800a386 <_printf_i+0x1d2>
 800a380:	0670      	lsls	r0, r6, #25
 800a382:	d5fb      	bpl.n	800a37c <_printf_i+0x1c8>
 800a384:	8019      	strh	r1, [r3, #0]
 800a386:	2300      	movs	r3, #0
 800a388:	6123      	str	r3, [r4, #16]
 800a38a:	4615      	mov	r5, r2
 800a38c:	e7ba      	b.n	800a304 <_printf_i+0x150>
 800a38e:	682b      	ldr	r3, [r5, #0]
 800a390:	1d1a      	adds	r2, r3, #4
 800a392:	602a      	str	r2, [r5, #0]
 800a394:	681d      	ldr	r5, [r3, #0]
 800a396:	6862      	ldr	r2, [r4, #4]
 800a398:	2100      	movs	r1, #0
 800a39a:	4628      	mov	r0, r5
 800a39c:	f7f5 ff28 	bl	80001f0 <memchr>
 800a3a0:	b108      	cbz	r0, 800a3a6 <_printf_i+0x1f2>
 800a3a2:	1b40      	subs	r0, r0, r5
 800a3a4:	6060      	str	r0, [r4, #4]
 800a3a6:	6863      	ldr	r3, [r4, #4]
 800a3a8:	6123      	str	r3, [r4, #16]
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3b0:	e7a8      	b.n	800a304 <_printf_i+0x150>
 800a3b2:	6923      	ldr	r3, [r4, #16]
 800a3b4:	462a      	mov	r2, r5
 800a3b6:	4649      	mov	r1, r9
 800a3b8:	4640      	mov	r0, r8
 800a3ba:	47d0      	blx	sl
 800a3bc:	3001      	adds	r0, #1
 800a3be:	d0ab      	beq.n	800a318 <_printf_i+0x164>
 800a3c0:	6823      	ldr	r3, [r4, #0]
 800a3c2:	079b      	lsls	r3, r3, #30
 800a3c4:	d413      	bmi.n	800a3ee <_printf_i+0x23a>
 800a3c6:	68e0      	ldr	r0, [r4, #12]
 800a3c8:	9b03      	ldr	r3, [sp, #12]
 800a3ca:	4298      	cmp	r0, r3
 800a3cc:	bfb8      	it	lt
 800a3ce:	4618      	movlt	r0, r3
 800a3d0:	e7a4      	b.n	800a31c <_printf_i+0x168>
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	4632      	mov	r2, r6
 800a3d6:	4649      	mov	r1, r9
 800a3d8:	4640      	mov	r0, r8
 800a3da:	47d0      	blx	sl
 800a3dc:	3001      	adds	r0, #1
 800a3de:	d09b      	beq.n	800a318 <_printf_i+0x164>
 800a3e0:	3501      	adds	r5, #1
 800a3e2:	68e3      	ldr	r3, [r4, #12]
 800a3e4:	9903      	ldr	r1, [sp, #12]
 800a3e6:	1a5b      	subs	r3, r3, r1
 800a3e8:	42ab      	cmp	r3, r5
 800a3ea:	dcf2      	bgt.n	800a3d2 <_printf_i+0x21e>
 800a3ec:	e7eb      	b.n	800a3c6 <_printf_i+0x212>
 800a3ee:	2500      	movs	r5, #0
 800a3f0:	f104 0619 	add.w	r6, r4, #25
 800a3f4:	e7f5      	b.n	800a3e2 <_printf_i+0x22e>
 800a3f6:	bf00      	nop
 800a3f8:	0800a85d 	.word	0x0800a85d
 800a3fc:	0800a86e 	.word	0x0800a86e

0800a400 <_sbrk_r>:
 800a400:	b538      	push	{r3, r4, r5, lr}
 800a402:	4d06      	ldr	r5, [pc, #24]	; (800a41c <_sbrk_r+0x1c>)
 800a404:	2300      	movs	r3, #0
 800a406:	4604      	mov	r4, r0
 800a408:	4608      	mov	r0, r1
 800a40a:	602b      	str	r3, [r5, #0]
 800a40c:	f7f7 ffe8 	bl	80023e0 <_sbrk>
 800a410:	1c43      	adds	r3, r0, #1
 800a412:	d102      	bne.n	800a41a <_sbrk_r+0x1a>
 800a414:	682b      	ldr	r3, [r5, #0]
 800a416:	b103      	cbz	r3, 800a41a <_sbrk_r+0x1a>
 800a418:	6023      	str	r3, [r4, #0]
 800a41a:	bd38      	pop	{r3, r4, r5, pc}
 800a41c:	2000101c 	.word	0x2000101c

0800a420 <__sread>:
 800a420:	b510      	push	{r4, lr}
 800a422:	460c      	mov	r4, r1
 800a424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a428:	f000 f8f8 	bl	800a61c <_read_r>
 800a42c:	2800      	cmp	r0, #0
 800a42e:	bfab      	itete	ge
 800a430:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a432:	89a3      	ldrhlt	r3, [r4, #12]
 800a434:	181b      	addge	r3, r3, r0
 800a436:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a43a:	bfac      	ite	ge
 800a43c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a43e:	81a3      	strhlt	r3, [r4, #12]
 800a440:	bd10      	pop	{r4, pc}

0800a442 <__swrite>:
 800a442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a446:	461f      	mov	r7, r3
 800a448:	898b      	ldrh	r3, [r1, #12]
 800a44a:	05db      	lsls	r3, r3, #23
 800a44c:	4605      	mov	r5, r0
 800a44e:	460c      	mov	r4, r1
 800a450:	4616      	mov	r6, r2
 800a452:	d505      	bpl.n	800a460 <__swrite+0x1e>
 800a454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a458:	2302      	movs	r3, #2
 800a45a:	2200      	movs	r2, #0
 800a45c:	f000 f868 	bl	800a530 <_lseek_r>
 800a460:	89a3      	ldrh	r3, [r4, #12]
 800a462:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a466:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a46a:	81a3      	strh	r3, [r4, #12]
 800a46c:	4632      	mov	r2, r6
 800a46e:	463b      	mov	r3, r7
 800a470:	4628      	mov	r0, r5
 800a472:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a476:	f000 b817 	b.w	800a4a8 <_write_r>

0800a47a <__sseek>:
 800a47a:	b510      	push	{r4, lr}
 800a47c:	460c      	mov	r4, r1
 800a47e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a482:	f000 f855 	bl	800a530 <_lseek_r>
 800a486:	1c43      	adds	r3, r0, #1
 800a488:	89a3      	ldrh	r3, [r4, #12]
 800a48a:	bf15      	itete	ne
 800a48c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a48e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a492:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a496:	81a3      	strheq	r3, [r4, #12]
 800a498:	bf18      	it	ne
 800a49a:	81a3      	strhne	r3, [r4, #12]
 800a49c:	bd10      	pop	{r4, pc}

0800a49e <__sclose>:
 800a49e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4a2:	f000 b813 	b.w	800a4cc <_close_r>
	...

0800a4a8 <_write_r>:
 800a4a8:	b538      	push	{r3, r4, r5, lr}
 800a4aa:	4d07      	ldr	r5, [pc, #28]	; (800a4c8 <_write_r+0x20>)
 800a4ac:	4604      	mov	r4, r0
 800a4ae:	4608      	mov	r0, r1
 800a4b0:	4611      	mov	r1, r2
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	602a      	str	r2, [r5, #0]
 800a4b6:	461a      	mov	r2, r3
 800a4b8:	f7f7 ff41 	bl	800233e <_write>
 800a4bc:	1c43      	adds	r3, r0, #1
 800a4be:	d102      	bne.n	800a4c6 <_write_r+0x1e>
 800a4c0:	682b      	ldr	r3, [r5, #0]
 800a4c2:	b103      	cbz	r3, 800a4c6 <_write_r+0x1e>
 800a4c4:	6023      	str	r3, [r4, #0]
 800a4c6:	bd38      	pop	{r3, r4, r5, pc}
 800a4c8:	2000101c 	.word	0x2000101c

0800a4cc <_close_r>:
 800a4cc:	b538      	push	{r3, r4, r5, lr}
 800a4ce:	4d06      	ldr	r5, [pc, #24]	; (800a4e8 <_close_r+0x1c>)
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	4604      	mov	r4, r0
 800a4d4:	4608      	mov	r0, r1
 800a4d6:	602b      	str	r3, [r5, #0]
 800a4d8:	f7f7 ff4d 	bl	8002376 <_close>
 800a4dc:	1c43      	adds	r3, r0, #1
 800a4de:	d102      	bne.n	800a4e6 <_close_r+0x1a>
 800a4e0:	682b      	ldr	r3, [r5, #0]
 800a4e2:	b103      	cbz	r3, 800a4e6 <_close_r+0x1a>
 800a4e4:	6023      	str	r3, [r4, #0]
 800a4e6:	bd38      	pop	{r3, r4, r5, pc}
 800a4e8:	2000101c 	.word	0x2000101c

0800a4ec <_fstat_r>:
 800a4ec:	b538      	push	{r3, r4, r5, lr}
 800a4ee:	4d07      	ldr	r5, [pc, #28]	; (800a50c <_fstat_r+0x20>)
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	4604      	mov	r4, r0
 800a4f4:	4608      	mov	r0, r1
 800a4f6:	4611      	mov	r1, r2
 800a4f8:	602b      	str	r3, [r5, #0]
 800a4fa:	f7f7 ff48 	bl	800238e <_fstat>
 800a4fe:	1c43      	adds	r3, r0, #1
 800a500:	d102      	bne.n	800a508 <_fstat_r+0x1c>
 800a502:	682b      	ldr	r3, [r5, #0]
 800a504:	b103      	cbz	r3, 800a508 <_fstat_r+0x1c>
 800a506:	6023      	str	r3, [r4, #0]
 800a508:	bd38      	pop	{r3, r4, r5, pc}
 800a50a:	bf00      	nop
 800a50c:	2000101c 	.word	0x2000101c

0800a510 <_isatty_r>:
 800a510:	b538      	push	{r3, r4, r5, lr}
 800a512:	4d06      	ldr	r5, [pc, #24]	; (800a52c <_isatty_r+0x1c>)
 800a514:	2300      	movs	r3, #0
 800a516:	4604      	mov	r4, r0
 800a518:	4608      	mov	r0, r1
 800a51a:	602b      	str	r3, [r5, #0]
 800a51c:	f7f7 ff47 	bl	80023ae <_isatty>
 800a520:	1c43      	adds	r3, r0, #1
 800a522:	d102      	bne.n	800a52a <_isatty_r+0x1a>
 800a524:	682b      	ldr	r3, [r5, #0]
 800a526:	b103      	cbz	r3, 800a52a <_isatty_r+0x1a>
 800a528:	6023      	str	r3, [r4, #0]
 800a52a:	bd38      	pop	{r3, r4, r5, pc}
 800a52c:	2000101c 	.word	0x2000101c

0800a530 <_lseek_r>:
 800a530:	b538      	push	{r3, r4, r5, lr}
 800a532:	4d07      	ldr	r5, [pc, #28]	; (800a550 <_lseek_r+0x20>)
 800a534:	4604      	mov	r4, r0
 800a536:	4608      	mov	r0, r1
 800a538:	4611      	mov	r1, r2
 800a53a:	2200      	movs	r2, #0
 800a53c:	602a      	str	r2, [r5, #0]
 800a53e:	461a      	mov	r2, r3
 800a540:	f7f7 ff40 	bl	80023c4 <_lseek>
 800a544:	1c43      	adds	r3, r0, #1
 800a546:	d102      	bne.n	800a54e <_lseek_r+0x1e>
 800a548:	682b      	ldr	r3, [r5, #0]
 800a54a:	b103      	cbz	r3, 800a54e <_lseek_r+0x1e>
 800a54c:	6023      	str	r3, [r4, #0]
 800a54e:	bd38      	pop	{r3, r4, r5, pc}
 800a550:	2000101c 	.word	0x2000101c

0800a554 <memcpy>:
 800a554:	440a      	add	r2, r1
 800a556:	4291      	cmp	r1, r2
 800a558:	f100 33ff 	add.w	r3, r0, #4294967295
 800a55c:	d100      	bne.n	800a560 <memcpy+0xc>
 800a55e:	4770      	bx	lr
 800a560:	b510      	push	{r4, lr}
 800a562:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a566:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a56a:	4291      	cmp	r1, r2
 800a56c:	d1f9      	bne.n	800a562 <memcpy+0xe>
 800a56e:	bd10      	pop	{r4, pc}

0800a570 <memmove>:
 800a570:	4288      	cmp	r0, r1
 800a572:	b510      	push	{r4, lr}
 800a574:	eb01 0402 	add.w	r4, r1, r2
 800a578:	d902      	bls.n	800a580 <memmove+0x10>
 800a57a:	4284      	cmp	r4, r0
 800a57c:	4623      	mov	r3, r4
 800a57e:	d807      	bhi.n	800a590 <memmove+0x20>
 800a580:	1e43      	subs	r3, r0, #1
 800a582:	42a1      	cmp	r1, r4
 800a584:	d008      	beq.n	800a598 <memmove+0x28>
 800a586:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a58a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a58e:	e7f8      	b.n	800a582 <memmove+0x12>
 800a590:	4402      	add	r2, r0
 800a592:	4601      	mov	r1, r0
 800a594:	428a      	cmp	r2, r1
 800a596:	d100      	bne.n	800a59a <memmove+0x2a>
 800a598:	bd10      	pop	{r4, pc}
 800a59a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a59e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a5a2:	e7f7      	b.n	800a594 <memmove+0x24>

0800a5a4 <__malloc_lock>:
 800a5a4:	4801      	ldr	r0, [pc, #4]	; (800a5ac <__malloc_lock+0x8>)
 800a5a6:	f7ff baf3 	b.w	8009b90 <__retarget_lock_acquire_recursive>
 800a5aa:	bf00      	nop
 800a5ac:	20001010 	.word	0x20001010

0800a5b0 <__malloc_unlock>:
 800a5b0:	4801      	ldr	r0, [pc, #4]	; (800a5b8 <__malloc_unlock+0x8>)
 800a5b2:	f7ff baee 	b.w	8009b92 <__retarget_lock_release_recursive>
 800a5b6:	bf00      	nop
 800a5b8:	20001010 	.word	0x20001010

0800a5bc <_realloc_r>:
 800a5bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5c0:	4680      	mov	r8, r0
 800a5c2:	4614      	mov	r4, r2
 800a5c4:	460e      	mov	r6, r1
 800a5c6:	b921      	cbnz	r1, 800a5d2 <_realloc_r+0x16>
 800a5c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5cc:	4611      	mov	r1, r2
 800a5ce:	f7ff bbb3 	b.w	8009d38 <_malloc_r>
 800a5d2:	b92a      	cbnz	r2, 800a5e0 <_realloc_r+0x24>
 800a5d4:	f7ff fb44 	bl	8009c60 <_free_r>
 800a5d8:	4625      	mov	r5, r4
 800a5da:	4628      	mov	r0, r5
 800a5dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5e0:	f000 f82e 	bl	800a640 <_malloc_usable_size_r>
 800a5e4:	4284      	cmp	r4, r0
 800a5e6:	4607      	mov	r7, r0
 800a5e8:	d802      	bhi.n	800a5f0 <_realloc_r+0x34>
 800a5ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a5ee:	d812      	bhi.n	800a616 <_realloc_r+0x5a>
 800a5f0:	4621      	mov	r1, r4
 800a5f2:	4640      	mov	r0, r8
 800a5f4:	f7ff fba0 	bl	8009d38 <_malloc_r>
 800a5f8:	4605      	mov	r5, r0
 800a5fa:	2800      	cmp	r0, #0
 800a5fc:	d0ed      	beq.n	800a5da <_realloc_r+0x1e>
 800a5fe:	42bc      	cmp	r4, r7
 800a600:	4622      	mov	r2, r4
 800a602:	4631      	mov	r1, r6
 800a604:	bf28      	it	cs
 800a606:	463a      	movcs	r2, r7
 800a608:	f7ff ffa4 	bl	800a554 <memcpy>
 800a60c:	4631      	mov	r1, r6
 800a60e:	4640      	mov	r0, r8
 800a610:	f7ff fb26 	bl	8009c60 <_free_r>
 800a614:	e7e1      	b.n	800a5da <_realloc_r+0x1e>
 800a616:	4635      	mov	r5, r6
 800a618:	e7df      	b.n	800a5da <_realloc_r+0x1e>
	...

0800a61c <_read_r>:
 800a61c:	b538      	push	{r3, r4, r5, lr}
 800a61e:	4d07      	ldr	r5, [pc, #28]	; (800a63c <_read_r+0x20>)
 800a620:	4604      	mov	r4, r0
 800a622:	4608      	mov	r0, r1
 800a624:	4611      	mov	r1, r2
 800a626:	2200      	movs	r2, #0
 800a628:	602a      	str	r2, [r5, #0]
 800a62a:	461a      	mov	r2, r3
 800a62c:	f7f7 fe6a 	bl	8002304 <_read>
 800a630:	1c43      	adds	r3, r0, #1
 800a632:	d102      	bne.n	800a63a <_read_r+0x1e>
 800a634:	682b      	ldr	r3, [r5, #0]
 800a636:	b103      	cbz	r3, 800a63a <_read_r+0x1e>
 800a638:	6023      	str	r3, [r4, #0]
 800a63a:	bd38      	pop	{r3, r4, r5, pc}
 800a63c:	2000101c 	.word	0x2000101c

0800a640 <_malloc_usable_size_r>:
 800a640:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a644:	1f18      	subs	r0, r3, #4
 800a646:	2b00      	cmp	r3, #0
 800a648:	bfbc      	itt	lt
 800a64a:	580b      	ldrlt	r3, [r1, r0]
 800a64c:	18c0      	addlt	r0, r0, r3
 800a64e:	4770      	bx	lr

0800a650 <_init>:
 800a650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a652:	bf00      	nop
 800a654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a656:	bc08      	pop	{r3}
 800a658:	469e      	mov	lr, r3
 800a65a:	4770      	bx	lr

0800a65c <_fini>:
 800a65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a65e:	bf00      	nop
 800a660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a662:	bc08      	pop	{r3}
 800a664:	469e      	mov	lr, r3
 800a666:	4770      	bx	lr
